{
  "version": 3,
  "sources": ["../../vuetify/src/directives/click-outside/index.ts", "../../vuetify/src/directives/touch/index.ts"],
  "sourcesContent": ["// Utilities\nimport { attachedRoot } from '@/util'\n\n// Types\nimport type { DirectiveBinding } from 'vue'\n\ninterface ClickOutsideBindingArgs {\n  handler: (e: MouseEvent) => void\n  closeConditional?: (e: Event) => boolean\n  include?: () => HTMLElement[]\n}\n\ninterface ClickOutsideDirectiveBinding extends DirectiveBinding {\n  value: ((e: MouseEvent) => void) | ClickOutsideBindingArgs\n}\n\nfunction defaultConditional () {\n  return true\n}\n\nfunction checkEvent (e: MouseEvent, el: HTMLElement, binding: ClickOutsideDirectiveBinding): boolean {\n  // The include element callbacks below can be expensive\n  // so we should avoid calling them when we're not active.\n  // Explicitly check for false to allow fallback compatibility\n  // with non-toggleable components\n  if (!e || checkIsActive(e, binding) === false) return false\n\n  // If we're clicking inside the shadowroot, then the app root doesn't get the same\n  // level of introspection as to _what_ we're clicking. We want to check to see if\n  // our target is the shadowroot parent container, and if it is, ignore.\n  const root = attachedRoot(el)\n  if (\n    typeof ShadowRoot !== 'undefined' &&\n    root instanceof ShadowRoot &&\n    root.host === e.target\n  ) return false\n\n  // Check if additional elements were passed to be included in check\n  // (click must be outside all included elements, if any)\n  const elements = ((typeof binding.value === 'object' && binding.value.include) || (() => []))()\n  // Add the root element for the component this directive was defined on\n  elements.push(el)\n\n  // Check if it's a click outside our elements, and then if our callback returns true.\n  // Non-toggleable components should take action in their callback and return falsy.\n  // Toggleable can return true if it wants to deactivate.\n  // Note that, because we're in the capture phase, this callback will occur before\n  // the bubbling click event on any outside elements.\n  return !elements.some(el => el?.contains(e.target as Node))\n}\n\nfunction checkIsActive (e: MouseEvent, binding: ClickOutsideDirectiveBinding): boolean | void {\n  const isActive = (typeof binding.value === 'object' && binding.value.closeConditional) || defaultConditional\n\n  return isActive(e)\n}\n\nfunction directive (e: MouseEvent, el: HTMLElement, binding: ClickOutsideDirectiveBinding) {\n  const handler = typeof binding.value === 'function' ? binding.value : binding.value.handler\n\n  el._clickOutside!.lastMousedownWasOutside && checkEvent(e, el, binding) && setTimeout(() => {\n    checkIsActive(e, binding) && handler && handler(e)\n  }, 0)\n}\n\nfunction handleShadow (el: HTMLElement, callback: Function): void {\n  const root = attachedRoot(el)\n\n  callback(document)\n\n  if (typeof ShadowRoot !== 'undefined' && root instanceof ShadowRoot) {\n    callback(root)\n  }\n}\n\nexport const ClickOutside = {\n  // [data-app] may not be found\n  // if using bind, inserted makes\n  // sure that the root element is\n  // available, iOS does not support\n  // clicks on body\n  mounted (el: HTMLElement, binding: ClickOutsideDirectiveBinding) {\n    const onClick = (e: Event) => directive(e as MouseEvent, el, binding)\n    const onMousedown = (e: Event) => {\n      el._clickOutside!.lastMousedownWasOutside = checkEvent(e as MouseEvent, el, binding)\n    }\n\n    handleShadow(el, (app: HTMLElement) => {\n      app.addEventListener('click', onClick, true)\n      app.addEventListener('mousedown', onMousedown, true)\n    })\n\n    if (!el._clickOutside) {\n      el._clickOutside = {\n        lastMousedownWasOutside: false,\n      }\n    }\n\n    el._clickOutside[binding.instance!.$.uid] = {\n      onClick,\n      onMousedown,\n    }\n  },\n\n  unmounted (el: HTMLElement, binding: ClickOutsideDirectiveBinding) {\n    if (!el._clickOutside) return\n\n    handleShadow(el, (app: HTMLElement) => {\n      if (!app || !el._clickOutside?.[binding.instance!.$.uid]) return\n\n      const { onClick, onMousedown } = el._clickOutside[binding.instance!.$.uid]!\n\n      app.removeEventListener('click', onClick, true)\n      app.removeEventListener('mousedown', onMousedown, true)\n    })\n\n    delete el._clickOutside[binding.instance!.$.uid]\n  },\n}\n\nexport default ClickOutside\n", "// Utilities\nimport { keys } from '@/util'\n\n// Types\nimport type {\n  DirectiveBinding,\n} from 'vue'\n\nexport interface TouchHandlers {\n  start?: (wrapperEvent: { originalEvent: TouchEvent } & TouchData) => void\n  end?: (wrapperEvent: { originalEvent: TouchEvent } & TouchData) => void\n  move?: (wrapperEvent: { originalEvent: TouchEvent } & TouchData) => void\n  left?: (wrapper: TouchData) => void\n  right?: (wrapper: TouchData) => void\n  up?: (wrapper: TouchData) => void\n  down?: (wrapper: TouchData) => void\n}\n\nexport interface TouchData {\n  touchstartX: number\n  touchstartY: number\n  touchmoveX: number\n  touchmoveY: number\n  touchendX: number\n  touchendY: number\n  offsetX: number\n  offsetY: number\n}\n\nexport type TouchWrapper = TouchHandlers & TouchData\n\nexport interface TouchValue extends TouchHandlers {\n  parent?: boolean\n  options?: AddEventListenerOptions\n}\n\nexport interface TouchStoredHandlers {\n  touchstart: (e: TouchEvent) => void\n  touchend: (e: TouchEvent) => void\n  touchmove: (e: TouchEvent) => void\n}\n\nexport interface TouchDirectiveBinding extends Omit<DirectiveBinding, 'value'> {\n  value?: TouchValue\n}\n\nconst handleGesture = (wrapper: TouchWrapper) => {\n  const { touchstartX, touchendX, touchstartY, touchendY } = wrapper\n  const dirRatio = 0.5\n  const minDistance = 16\n  wrapper.offsetX = touchendX - touchstartX\n  wrapper.offsetY = touchendY - touchstartY\n\n  if (Math.abs(wrapper.offsetY) < dirRatio * Math.abs(wrapper.offsetX)) {\n    wrapper.left && (touchendX < touchstartX - minDistance) && wrapper.left(wrapper)\n    wrapper.right && (touchendX > touchstartX + minDistance) && wrapper.right(wrapper)\n  }\n\n  if (Math.abs(wrapper.offsetX) < dirRatio * Math.abs(wrapper.offsetY)) {\n    wrapper.up && (touchendY < touchstartY - minDistance) && wrapper.up(wrapper)\n    wrapper.down && (touchendY > touchstartY + minDistance) && wrapper.down(wrapper)\n  }\n}\n\nfunction touchstart (event: TouchEvent, wrapper: TouchWrapper) {\n  const touch = event.changedTouches[0]\n  wrapper.touchstartX = touch.clientX\n  wrapper.touchstartY = touch.clientY\n\n  wrapper.start?.({ originalEvent: event, ...wrapper })\n}\n\nfunction touchend (event: TouchEvent, wrapper: TouchWrapper) {\n  const touch = event.changedTouches[0]\n  wrapper.touchendX = touch.clientX\n  wrapper.touchendY = touch.clientY\n\n  wrapper.end?.({ originalEvent: event, ...wrapper })\n\n  handleGesture(wrapper)\n}\n\nfunction touchmove (event: TouchEvent, wrapper: TouchWrapper) {\n  const touch = event.changedTouches[0]\n  wrapper.touchmoveX = touch.clientX\n  wrapper.touchmoveY = touch.clientY\n\n  wrapper.move?.({ originalEvent: event, ...wrapper })\n}\n\nfunction createHandlers (value: TouchHandlers = {}): TouchStoredHandlers {\n  const wrapper = {\n    touchstartX: 0,\n    touchstartY: 0,\n    touchendX: 0,\n    touchendY: 0,\n    touchmoveX: 0,\n    touchmoveY: 0,\n    offsetX: 0,\n    offsetY: 0,\n    left: value.left,\n    right: value.right,\n    up: value.up,\n    down: value.down,\n    start: value.start,\n    move: value.move,\n    end: value.end,\n  }\n\n  return {\n    touchstart: (e: TouchEvent) => touchstart(e, wrapper),\n    touchend: (e: TouchEvent) => touchend(e, wrapper),\n    touchmove: (e: TouchEvent) => touchmove(e, wrapper),\n  }\n}\n\nfunction mounted (el: HTMLElement, binding: TouchDirectiveBinding) {\n  const value = binding.value\n  const target = value?.parent ? el.parentElement : el\n  const options = value?.options ?? { passive: true }\n  const uid = binding.instance?.$.uid // TODO: use custom uid generator\n\n  if (!target || !uid) return\n\n  const handlers = createHandlers(binding.value)\n\n  target._touchHandlers = target._touchHandlers ?? Object.create(null)\n  target._touchHandlers![uid] = handlers\n\n  keys(handlers).forEach(eventName => {\n    target.addEventListener(eventName, handlers[eventName], options)\n  })\n}\n\nfunction unmounted (el: HTMLElement, binding: TouchDirectiveBinding) {\n  const target = binding.value?.parent ? el.parentElement : el\n  const uid = binding.instance?.$.uid\n\n  if (!target?._touchHandlers || !uid) return\n\n  const handlers = target._touchHandlers[uid]\n\n  keys(handlers).forEach(eventName => {\n    target.removeEventListener(eventName, handlers[eventName])\n  })\n\n  delete target._touchHandlers[uid]\n}\n\nexport const Touch = {\n  mounted,\n  unmounted,\n}\n\nexport default Touch\n"],
  "mappings": "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",
  "names": ["defaultConditional", "checkEvent", "e", "el", "binding", "checkIsActive", "root", "attachedRoot", "ShadowRoot", "host", "target", "elements", "value", "include", "push", "some", "contains", "isActive", "closeConditional", "directive", "handler", "_clickOutside", "lastMousedownWasOutside", "setTimeout", "handleShadow", "callback", "document", "ClickOutside", "mounted", "onClick", "onMousedown", "app", "addEventListener", "instance", "$", "uid", "unmounted", "removeEventListener", "handleGesture", "wrapper", "touchstartX", "touchendX", "touchstartY", "touchendY", "dirRatio", "minDistance", "offsetX", "offsetY", "Math", "abs", "left", "right", "up", "down", "touchstart", "event", "touch", "changedTouches", "clientX", "clientY", "start", "originalEvent", "touchend", "end", "touchmove", "touchmoveX", "touchmoveY", "move", "createHandlers", "value", "arguments", "length", "undefined", "e", "mounted", "el", "binding", "target", "parent", "parentElement", "options", "passive", "uid", "instance", "$", "handlers", "_touchHandlers", "Object", "create", "keys", "forEach", "eventName", "addEventListener", "unmounted", "removeEventListener", "Touch"]
}
