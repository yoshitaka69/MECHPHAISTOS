import {
  __commonJS
} from "./chunk-WFTEJBJX.js";

// node_modules/jsuites/dist/jsuites.js
var require_jsuites = __commonJS({
  "node_modules/jsuites/dist/jsuites.js"(exports, module) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory();
      else if (typeof define === "function" && define.amd)
        define([], factory);
      else if (typeof exports === "object")
        exports["jSuites"] = factory();
      else
        root["jSuites"] = factory();
    })(exports, function() {
      return (
        /******/
        function() {
          var __webpack_modules__ = {
            /***/
            195: (
              /***/
              function(module2) {
                ;
                (function(global, factory) {
                  true ? module2.exports = factory() : 0;
                })(this, function() {
                  return function(str) {
                    function int64(msint_32, lsint_32) {
                      this.highOrder = msint_32;
                      this.lowOrder = lsint_32;
                    }
                    var H = [
                      new int64(1779033703, 4089235720),
                      new int64(3144134277, 2227873595),
                      new int64(1013904242, 4271175723),
                      new int64(2773480762, 1595750129),
                      new int64(1359893119, 2917565137),
                      new int64(2600822924, 725511199),
                      new int64(528734635, 4215389547),
                      new int64(1541459225, 327033209)
                    ];
                    var K = [
                      new int64(1116352408, 3609767458),
                      new int64(1899447441, 602891725),
                      new int64(3049323471, 3964484399),
                      new int64(3921009573, 2173295548),
                      new int64(961987163, 4081628472),
                      new int64(1508970993, 3053834265),
                      new int64(2453635748, 2937671579),
                      new int64(2870763221, 3664609560),
                      new int64(3624381080, 2734883394),
                      new int64(310598401, 1164996542),
                      new int64(607225278, 1323610764),
                      new int64(1426881987, 3590304994),
                      new int64(1925078388, 4068182383),
                      new int64(2162078206, 991336113),
                      new int64(2614888103, 633803317),
                      new int64(3248222580, 3479774868),
                      new int64(3835390401, 2666613458),
                      new int64(4022224774, 944711139),
                      new int64(264347078, 2341262773),
                      new int64(604807628, 2007800933),
                      new int64(770255983, 1495990901),
                      new int64(1249150122, 1856431235),
                      new int64(1555081692, 3175218132),
                      new int64(1996064986, 2198950837),
                      new int64(2554220882, 3999719339),
                      new int64(2821834349, 766784016),
                      new int64(2952996808, 2566594879),
                      new int64(3210313671, 3203337956),
                      new int64(3336571891, 1034457026),
                      new int64(3584528711, 2466948901),
                      new int64(113926993, 3758326383),
                      new int64(338241895, 168717936),
                      new int64(666307205, 1188179964),
                      new int64(773529912, 1546045734),
                      new int64(1294757372, 1522805485),
                      new int64(1396182291, 2643833823),
                      new int64(1695183700, 2343527390),
                      new int64(1986661051, 1014477480),
                      new int64(2177026350, 1206759142),
                      new int64(2456956037, 344077627),
                      new int64(2730485921, 1290863460),
                      new int64(2820302411, 3158454273),
                      new int64(3259730800, 3505952657),
                      new int64(3345764771, 106217008),
                      new int64(3516065817, 3606008344),
                      new int64(3600352804, 1432725776),
                      new int64(4094571909, 1467031594),
                      new int64(275423344, 851169720),
                      new int64(430227734, 3100823752),
                      new int64(506948616, 1363258195),
                      new int64(659060556, 3750685593),
                      new int64(883997877, 3785050280),
                      new int64(958139571, 3318307427),
                      new int64(1322822218, 3812723403),
                      new int64(1537002063, 2003034995),
                      new int64(1747873779, 3602036899),
                      new int64(1955562222, 1575990012),
                      new int64(2024104815, 1125592928),
                      new int64(2227730452, 2716904306),
                      new int64(2361852424, 442776044),
                      new int64(2428436474, 593698344),
                      new int64(2756734187, 3733110249),
                      new int64(3204031479, 2999351573),
                      new int64(3329325298, 3815920427),
                      new int64(3391569614, 3928383900),
                      new int64(3515267271, 566280711),
                      new int64(3940187606, 3454069534),
                      new int64(4118630271, 4000239992),
                      new int64(116418474, 1914138554),
                      new int64(174292421, 2731055270),
                      new int64(289380356, 3203993006),
                      new int64(460393269, 320620315),
                      new int64(685471733, 587496836),
                      new int64(852142971, 1086792851),
                      new int64(1017036298, 365543100),
                      new int64(1126000580, 2618297676),
                      new int64(1288033470, 3409855158),
                      new int64(1501505948, 4234509866),
                      new int64(1607167915, 987167468),
                      new int64(1816402316, 1246189591)
                    ];
                    var W = new Array(64);
                    var a, b, c, d, e, f, g, h, i, j;
                    var T1, T2;
                    var charsize = 8;
                    function utf8_encode(str2) {
                      return unescape(encodeURIComponent(str2));
                    }
                    function str2binb(str2) {
                      var bin = [];
                      var mask = (1 << charsize) - 1;
                      var len = str2.length * charsize;
                      for (var i2 = 0; i2 < len; i2 += charsize) {
                        bin[i2 >> 5] |= (str2.charCodeAt(i2 / charsize) & mask) << 32 - charsize - i2 % 32;
                      }
                      return bin;
                    }
                    function binb2hex(binarray2) {
                      var hex_tab = "0123456789abcdef";
                      var str2 = "";
                      var length = binarray2.length * 4;
                      var srcByte;
                      for (var i2 = 0; i2 < length; i2 += 1) {
                        srcByte = binarray2[i2 >> 2] >> (3 - i2 % 4) * 8;
                        str2 += hex_tab.charAt(srcByte >> 4 & 15) + hex_tab.charAt(srcByte & 15);
                      }
                      return str2;
                    }
                    function safe_add_2(x, y) {
                      var lsw, msw, lowOrder, highOrder;
                      lsw = (x.lowOrder & 65535) + (y.lowOrder & 65535);
                      msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);
                      lowOrder = (msw & 65535) << 16 | lsw & 65535;
                      lsw = (x.highOrder & 65535) + (y.highOrder & 65535) + (msw >>> 16);
                      msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);
                      highOrder = (msw & 65535) << 16 | lsw & 65535;
                      return new int64(highOrder, lowOrder);
                    }
                    function safe_add_4(a2, b2, c2, d2) {
                      var lsw, msw, lowOrder, highOrder;
                      lsw = (a2.lowOrder & 65535) + (b2.lowOrder & 65535) + (c2.lowOrder & 65535) + (d2.lowOrder & 65535);
                      msw = (a2.lowOrder >>> 16) + (b2.lowOrder >>> 16) + (c2.lowOrder >>> 16) + (d2.lowOrder >>> 16) + (lsw >>> 16);
                      lowOrder = (msw & 65535) << 16 | lsw & 65535;
                      lsw = (a2.highOrder & 65535) + (b2.highOrder & 65535) + (c2.highOrder & 65535) + (d2.highOrder & 65535) + (msw >>> 16);
                      msw = (a2.highOrder >>> 16) + (b2.highOrder >>> 16) + (c2.highOrder >>> 16) + (d2.highOrder >>> 16) + (lsw >>> 16);
                      highOrder = (msw & 65535) << 16 | lsw & 65535;
                      return new int64(highOrder, lowOrder);
                    }
                    function safe_add_5(a2, b2, c2, d2, e2) {
                      var lsw, msw, lowOrder, highOrder;
                      lsw = (a2.lowOrder & 65535) + (b2.lowOrder & 65535) + (c2.lowOrder & 65535) + (d2.lowOrder & 65535) + (e2.lowOrder & 65535);
                      msw = (a2.lowOrder >>> 16) + (b2.lowOrder >>> 16) + (c2.lowOrder >>> 16) + (d2.lowOrder >>> 16) + (e2.lowOrder >>> 16) + (lsw >>> 16);
                      lowOrder = (msw & 65535) << 16 | lsw & 65535;
                      lsw = (a2.highOrder & 65535) + (b2.highOrder & 65535) + (c2.highOrder & 65535) + (d2.highOrder & 65535) + (e2.highOrder & 65535) + (msw >>> 16);
                      msw = (a2.highOrder >>> 16) + (b2.highOrder >>> 16) + (c2.highOrder >>> 16) + (d2.highOrder >>> 16) + (e2.highOrder >>> 16) + (lsw >>> 16);
                      highOrder = (msw & 65535) << 16 | lsw & 65535;
                      return new int64(highOrder, lowOrder);
                    }
                    function maj(x, y, z) {
                      return new int64(
                        x.highOrder & y.highOrder ^ x.highOrder & z.highOrder ^ y.highOrder & z.highOrder,
                        x.lowOrder & y.lowOrder ^ x.lowOrder & z.lowOrder ^ y.lowOrder & z.lowOrder
                      );
                    }
                    function ch(x, y, z) {
                      return new int64(
                        x.highOrder & y.highOrder ^ ~x.highOrder & z.highOrder,
                        x.lowOrder & y.lowOrder ^ ~x.lowOrder & z.lowOrder
                      );
                    }
                    function rotr(x, n) {
                      if (n <= 32) {
                        return new int64(
                          x.highOrder >>> n | x.lowOrder << 32 - n,
                          x.lowOrder >>> n | x.highOrder << 32 - n
                        );
                      } else {
                        return new int64(
                          x.lowOrder >>> n | x.highOrder << 32 - n,
                          x.highOrder >>> n | x.lowOrder << 32 - n
                        );
                      }
                    }
                    function sigma0(x) {
                      var rotr28 = rotr(x, 28);
                      var rotr34 = rotr(x, 34);
                      var rotr39 = rotr(x, 39);
                      return new int64(
                        rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,
                        rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder
                      );
                    }
                    function sigma1(x) {
                      var rotr14 = rotr(x, 14);
                      var rotr18 = rotr(x, 18);
                      var rotr41 = rotr(x, 41);
                      return new int64(
                        rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,
                        rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder
                      );
                    }
                    function gamma0(x) {
                      var rotr1 = rotr(x, 1), rotr8 = rotr(x, 8), shr7 = shr(x, 7);
                      return new int64(
                        rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,
                        rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder
                      );
                    }
                    function gamma1(x) {
                      var rotr19 = rotr(x, 19);
                      var rotr61 = rotr(x, 61);
                      var shr6 = shr(x, 6);
                      return new int64(
                        rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,
                        rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder
                      );
                    }
                    function shr(x, n) {
                      if (n <= 32) {
                        return new int64(
                          x.highOrder >>> n,
                          x.lowOrder >>> n | x.highOrder << 32 - n
                        );
                      } else {
                        return new int64(
                          0,
                          x.highOrder << 32 - n
                        );
                      }
                    }
                    var str = utf8_encode(str);
                    var strlen = str.length * charsize;
                    str = str2binb(str);
                    str[strlen >> 5] |= 128 << 24 - strlen % 32;
                    str[(strlen + 128 >> 10 << 5) + 31] = strlen;
                    for (var i = 0; i < str.length; i += 32) {
                      a = H[0];
                      b = H[1];
                      c = H[2];
                      d = H[3];
                      e = H[4];
                      f = H[5];
                      g = H[6];
                      h = H[7];
                      for (var j = 0; j < 80; j++) {
                        if (j < 16) {
                          W[j] = new int64(str[j * 2 + i], str[j * 2 + i + 1]);
                        } else {
                          W[j] = safe_add_4(gamma1(W[j - 2]), W[j - 7], gamma0(W[j - 15]), W[j - 16]);
                        }
                        T1 = safe_add_5(h, sigma1(e), ch(e, f, g), K[j], W[j]);
                        T2 = safe_add_2(sigma0(a), maj(a, b, c));
                        h = g;
                        g = f;
                        f = e;
                        e = safe_add_2(d, T1);
                        d = c;
                        c = b;
                        b = a;
                        a = safe_add_2(T1, T2);
                      }
                      H[0] = safe_add_2(a, H[0]);
                      H[1] = safe_add_2(b, H[1]);
                      H[2] = safe_add_2(c, H[2]);
                      H[3] = safe_add_2(d, H[3]);
                      H[4] = safe_add_2(e, H[4]);
                      H[5] = safe_add_2(f, H[5]);
                      H[6] = safe_add_2(g, H[6]);
                      H[7] = safe_add_2(h, H[7]);
                    }
                    var binarray = [];
                    for (var i = 0; i < H.length; i++) {
                      binarray.push(H[i].highOrder);
                      binarray.push(H[i].lowOrder);
                    }
                    return binb2hex(binarray);
                  };
                });
              }
            )
            /******/
          };
          var __webpack_module_cache__ = {};
          function __webpack_require__(moduleId) {
            var cachedModule = __webpack_module_cache__[moduleId];
            if (cachedModule !== void 0) {
              return cachedModule.exports;
            }
            var module2 = __webpack_module_cache__[moduleId] = {
              /******/
              // no module.id needed
              /******/
              // no module.loaded needed
              /******/
              exports: {}
              /******/
            };
            __webpack_modules__[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
            return module2.exports;
          }
          !function() {
            __webpack_require__.n = function(module2) {
              var getter = module2 && module2.__esModule ? (
                /******/
                function() {
                  return module2["default"];
                }
              ) : (
                /******/
                function() {
                  return module2;
                }
              );
              __webpack_require__.d(getter, { a: getter });
              return getter;
            };
          }();
          !function() {
            __webpack_require__.d = function(exports2, definition) {
              for (var key in definition) {
                if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports2, key)) {
                  Object.defineProperty(exports2, key, { enumerable: true, get: definition[key] });
                }
              }
            };
          }();
          !function() {
            __webpack_require__.o = function(obj2, prop) {
              return Object.prototype.hasOwnProperty.call(obj2, prop);
            };
          }();
          var __webpack_exports__ = {};
          !function() {
            "use strict";
            __webpack_require__.d(__webpack_exports__, {
              "default": function() {
                return (
                  /* binding */
                  jsuites
                );
              }
            });
            ;
            var Helpers = {};
            Helpers.two = function(value) {
              value = "" + value;
              if (value.length == 1) {
                value = "0" + value;
              }
              return value;
            };
            Helpers.focus = function(el) {
              if (el.innerText.length) {
                var range = document.createRange();
                var sel = window.getSelection();
                var node = el.childNodes[el.childNodes.length - 1];
                range.setStart(node, node.length);
                range.collapse(true);
                sel.removeAllRanges();
                sel.addRange(range);
                el.scrollLeft = el.scrollWidth;
              }
            };
            Helpers.isNumeric = function(num) {
              if (typeof num === "string") {
                num = num.trim();
              }
              return !isNaN(num) && num !== null && num !== "";
            };
            Helpers.guid = function() {
              return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
                var r = Math.random() * 16 | 0, v = c == "x" ? r : r & 3 | 8;
                return v.toString(16);
              });
            };
            Helpers.getNode = function() {
              var node = document.getSelection().anchorNode;
              if (node) {
                return node.nodeType == 3 ? node.parentNode : node;
              } else {
                return null;
              }
            };
            Helpers.hash = function(str) {
              var hash = 0, i, chr;
              if (str.length === 0) {
                return hash;
              } else {
                for (i = 0; i < str.length; i++) {
                  chr = str.charCodeAt(i);
                  if (chr > 32) {
                    hash = (hash << 5) - hash + chr;
                    hash |= 0;
                  }
                }
              }
              return hash;
            };
            Helpers.randomColor = function(h) {
              var lum = -0.25;
              var hex = String("#" + Math.random().toString(16).slice(2, 8).toUpperCase()).replace(/[^0-9a-f]/gi, "");
              if (hex.length < 6) {
                hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
              }
              var rgb = [], c, i;
              for (i = 0; i < 3; i++) {
                c = parseInt(hex.substr(i * 2, 2), 16);
                c = Math.round(Math.min(Math.max(0, c + c * lum), 255)).toString(16);
                rgb.push(("00" + c).substr(c.length));
              }
              if (h == true) {
                return "#" + Helpers.two(rgb[0].toString(16)) + Helpers.two(rgb[1].toString(16)) + Helpers.two(rgb[2].toString(16));
              }
              return rgb;
            };
            Helpers.getWindowWidth = function() {
              var w = window, d = document, e = d.documentElement, g = d.getElementsByTagName("body")[0], x = w.innerWidth || e.clientWidth || g.clientWidth;
              return x;
            };
            Helpers.getWindowHeight = function() {
              var w = window, d = document, e = d.documentElement, g = d.getElementsByTagName("body")[0], y = w.innerHeight || e.clientHeight || g.clientHeight;
              return y;
            };
            Helpers.getPosition = function(e) {
              if (e.changedTouches && e.changedTouches[0]) {
                var x = e.changedTouches[0].pageX;
                var y = e.changedTouches[0].pageY;
              } else {
                var x = window.Event ? e.pageX : e.clientX + (document.documentElement.scrollLeft ? document.documentElement.scrollLeft : document.body.scrollLeft);
                var y = window.Event ? e.pageY : e.clientY + (document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop);
              }
              return [x, y];
            };
            Helpers.click = function(el) {
              if (el.click) {
                el.click();
              } else {
                var evt = new MouseEvent("click", {
                  bubbles: true,
                  cancelable: true,
                  view: window
                });
                el.dispatchEvent(evt);
              }
            };
            Helpers.findElement = function(element, condition) {
              var foundElement = false;
              function path(element2) {
                if (element2 && !foundElement) {
                  if (typeof condition == "function") {
                    foundElement = condition(element2);
                  } else if (typeof condition == "string") {
                    if (element2.classList && element2.classList.contains(condition)) {
                      foundElement = element2;
                    }
                  }
                }
                if (element2.parentNode && !foundElement) {
                  path(element2.parentNode);
                }
              }
              path(element);
              return foundElement;
            };
            var helpers = Helpers;
            ;
            function HelpersDate() {
              var Component = {};
              Component.now = function(date, dateOnly) {
                var y = null;
                var m = null;
                var d = null;
                var h = null;
                var i = null;
                var s = null;
                if (Array.isArray(date)) {
                  y = date[0];
                  m = date[1];
                  d = date[2];
                  h = date[3];
                  i = date[4];
                  s = date[5];
                } else {
                  if (!date) {
                    date = /* @__PURE__ */ new Date();
                  }
                  y = date.getFullYear();
                  m = date.getMonth() + 1;
                  d = date.getDate();
                  h = date.getHours();
                  i = date.getMinutes();
                  s = date.getSeconds();
                }
                if (dateOnly == true) {
                  return helpers.two(y) + "-" + helpers.two(m) + "-" + helpers.two(d);
                } else {
                  return helpers.two(y) + "-" + helpers.two(m) + "-" + helpers.two(d) + " " + helpers.two(h) + ":" + helpers.two(i) + ":" + helpers.two(s);
                }
              };
              Component.toArray = function(value) {
                var date = value.split(value.indexOf("T") !== -1 ? "T" : " ");
                var time = date[1];
                var date = date[0].split("-");
                var y = parseInt(date[0]);
                var m = parseInt(date[1]);
                var d = parseInt(date[2]);
                var h = 0;
                var i = 0;
                if (time) {
                  time = time.split(":");
                  h = parseInt(time[0]);
                  i = parseInt(time[1]);
                }
                return [y, m, d, h, i, 0];
              };
              var excelInitialTime = Date.UTC(1900, 0, 0);
              var excelLeapYearBug = Date.UTC(1900, 1, 29);
              var millisecondsPerDay = 864e5;
              Component.dateToNum = function(jsDate) {
                if (typeof jsDate === "string") {
                  jsDate = /* @__PURE__ */ new Date(jsDate + "  GMT+0");
                }
                var jsDateInMilliseconds = jsDate.getTime();
                if (jsDateInMilliseconds >= excelLeapYearBug) {
                  jsDateInMilliseconds += millisecondsPerDay;
                }
                jsDateInMilliseconds -= excelInitialTime;
                return jsDateInMilliseconds / millisecondsPerDay;
              };
              Component.numToDate = function(excelSerialNumber) {
                var jsDateInMilliseconds = excelInitialTime + excelSerialNumber * millisecondsPerDay;
                if (jsDateInMilliseconds >= excelLeapYearBug) {
                  jsDateInMilliseconds -= millisecondsPerDay;
                }
                const d = new Date(jsDateInMilliseconds);
                var date = [
                  d.getUTCFullYear(),
                  d.getUTCMonth() + 1,
                  d.getUTCDate(),
                  d.getUTCHours(),
                  d.getUTCMinutes(),
                  d.getUTCSeconds()
                ];
                return Component.now(date);
              };
              Component.weekdays = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
              Component.months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
              Component.weekdaysShort = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
              Component.monthsShort = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
              return Component;
            }
            var helpers_date = HelpersDate();
            ;
            var setDictionary = function(d) {
              if (!document.dictionary) {
                document.dictionary = {};
              }
              var t = null;
              var i = null;
              var k = Object.keys(d);
              for (i = 0; i < k.length; i++) {
                document.dictionary[k[i]] = d[k[i]];
              }
              for (i = 0; i < helpers_date.weekdays.length; i++) {
                t = translate(helpers_date.weekdays[i]);
                if (helpers_date.weekdays[i]) {
                  helpers_date.weekdays[i] = t;
                  helpers_date.weekdaysShort[i] = t.substr(0, 3);
                }
              }
              for (i = 0; i < helpers_date.months.length; i++) {
                t = translate(helpers_date.months[i]);
                if (t) {
                  helpers_date.months[i] = t;
                  helpers_date.monthsShort[i] = t.substr(0, 3);
                }
              }
            };
            var translate = function(t) {
              if (typeof document !== "undefined" && document.dictionary) {
                return document.dictionary[t] || t;
              } else {
                return t;
              }
            };
            var dictionary = { setDictionary, translate };
            ;
            function Tracking(component, state) {
              if (state == true) {
                document.jsuitesComponents = document.jsuitesComponents.filter(function(v) {
                  return v !== null;
                });
                setTimeout(function() {
                  document.jsuitesComponents.push(component);
                }, 0);
              } else {
                var index = document.jsuitesComponents.indexOf(component);
                if (index >= 0) {
                  document.jsuitesComponents.splice(index, 1);
                }
              }
            }
            ;
            function Path(str, val, remove) {
              str = str.split(".");
              if (str.length) {
                let o = this;
                let p = null;
                while (str.length > 1) {
                  p = str.shift();
                  if (o.hasOwnProperty(p)) {
                    o = o[p];
                  } else {
                    if (typeof val === "undefined") {
                      return void 0;
                    } else {
                      o[p] = {};
                      o = o[p];
                    }
                  }
                }
                p = str.shift();
                if (typeof val !== "undefined") {
                  if (remove === true) {
                    delete o[p];
                  } else {
                    o[p] = val;
                  }
                  return true;
                } else {
                  if (o) {
                    return o[p];
                  }
                }
              }
              return false;
            }
            ;
            function Sorting(el, options) {
              var obj2 = {};
              obj2.options = {};
              var defaults = {
                pointer: null,
                direction: null,
                ondragstart: null,
                ondragend: null,
                ondrop: null
              };
              var dragElement = null;
              for (var property in defaults) {
                if (options && options.hasOwnProperty(property)) {
                  obj2.options[property] = options[property];
                } else {
                  obj2.options[property] = defaults[property];
                }
              }
              el.classList.add("jsorting");
              el.addEventListener("dragstart", function(e) {
                var position = Array.prototype.indexOf.call(e.target.parentNode.children, e.target);
                dragElement = {
                  element: e.target,
                  o: position,
                  d: position
                };
                e.target.style.opacity = "0.25";
                if (typeof obj2.options.ondragstart == "function") {
                  obj2.options.ondragstart(el, e.target, e);
                }
              });
              el.addEventListener("dragover", function(e) {
                e.preventDefault();
                if (getElement(e.target) && dragElement) {
                  if (e.target.getAttribute("draggable") == "true" && dragElement.element != e.target) {
                    if (!obj2.options.direction) {
                      var condition = e.target.clientHeight / 2 > e.offsetY;
                    } else {
                      var condition = e.target.clientWidth / 2 > e.offsetX;
                    }
                    if (condition) {
                      e.target.parentNode.insertBefore(dragElement.element, e.target);
                    } else {
                      e.target.parentNode.insertBefore(dragElement.element, e.target.nextSibling);
                    }
                    dragElement.d = Array.prototype.indexOf.call(e.target.parentNode.children, dragElement.element);
                  }
                }
              });
              el.addEventListener("dragleave", function(e) {
                e.preventDefault();
              });
              el.addEventListener("dragend", function(e) {
                e.preventDefault();
                if (dragElement) {
                  if (typeof obj2.options.ondragend == "function") {
                    obj2.options.ondragend(el, dragElement.element, e);
                  }
                  if (dragElement.o < dragElement.d) {
                    e.target.parentNode.insertBefore(dragElement.element, e.target.parentNode.children[dragElement.o]);
                  } else {
                    e.target.parentNode.insertBefore(dragElement.element, e.target.parentNode.children[dragElement.o].nextSibling);
                  }
                  dragElement.element.style.opacity = "";
                  dragElement = null;
                }
              });
              el.addEventListener("drop", function(e) {
                e.preventDefault();
                if (dragElement && dragElement.o != dragElement.d) {
                  if (typeof obj2.options.ondrop == "function") {
                    obj2.options.ondrop(el, dragElement.o, dragElement.d, dragElement.element, e.target, e);
                  }
                }
                dragElement.element.style.opacity = "";
                dragElement = null;
              });
              var getElement = function(element) {
                var sorting = false;
                function path(element2) {
                  if (element2.className) {
                    if (element2.classList.contains("jsorting")) {
                      sorting = true;
                    }
                  }
                  if (!sorting) {
                    path(element2.parentNode);
                  }
                }
                path(element);
                return sorting;
              };
              for (var i = 0; i < el.children.length; i++) {
                if (!el.children[i].hasAttribute("draggable")) {
                  el.children[i].setAttribute("draggable", "true");
                }
              }
              el.val = function() {
                var id = null;
                var data = [];
                for (var i2 = 0; i2 < el.children.length; i2++) {
                  if (id = el.children[i2].getAttribute("data-id")) {
                    data.push(id);
                  }
                }
                return data;
              };
              return el;
            }
            ;
            function LazyLoading(el, options) {
              var obj2 = {};
              if (!options.loadUp || typeof options.loadUp != "function") {
                options.loadUp = function() {
                  return false;
                };
              }
              if (!options.loadDown || typeof options.loadDown != "function") {
                options.loadDown = function() {
                  return false;
                };
              }
              if (!options.timer) {
                options.timer = 100;
              }
              var timeControlLoading = null;
              var scrollControls = function(e) {
                if (timeControlLoading == null) {
                  var event = false;
                  var scrollTop = el.scrollTop;
                  if (el.scrollTop + el.clientHeight * 2 >= el.scrollHeight) {
                    if (options.loadDown()) {
                      if (scrollTop == el.scrollTop) {
                        el.scrollTop = el.scrollTop - el.clientHeight;
                      }
                      event = true;
                    }
                  } else if (el.scrollTop <= el.clientHeight) {
                    if (options.loadUp()) {
                      if (scrollTop == el.scrollTop) {
                        el.scrollTop = el.scrollTop + el.clientHeight;
                      }
                      event = true;
                    }
                  }
                  timeControlLoading = setTimeout(function() {
                    timeControlLoading = null;
                  }, options.timer);
                  if (event) {
                    if (typeof options.onupdate == "function") {
                      options.onupdate();
                    }
                  }
                }
              };
              el.onscroll = function(e) {
                scrollControls(e);
              };
              el.onwheel = function(e) {
                scrollControls(e);
              };
              return obj2;
            }
            ;
            function Ajax() {
              var Component = function(options, complete) {
                if (Array.isArray(options)) {
                  var multiple = {
                    instance: [],
                    complete
                  };
                  if (options.length > 0) {
                    for (var i = 0; i < options.length; i++) {
                      options[i].multiple = multiple;
                      multiple.instance.push(Component(options[i]));
                    }
                  }
                  return multiple;
                }
                if (!options.data) {
                  options.data = {};
                }
                if (options.type) {
                  options.method = options.type;
                }
                if (!options.method) {
                  options.method = "GET";
                }
                if (!options.dataType) {
                  options.dataType = "json";
                }
                if (options.data) {
                  var parseData = function(value, key) {
                    var vars = [];
                    if (value) {
                      var keys = Object.keys(value);
                      if (keys.length) {
                        for (var i2 = 0; i2 < keys.length; i2++) {
                          if (key) {
                            var k2 = key + "[" + keys[i2] + "]";
                          } else {
                            var k2 = keys[i2];
                          }
                          if (value[k2] instanceof FileList) {
                            vars[k2] = value[keys[i2]];
                          } else if (value[keys[i2]] === null || value[keys[i2]] === void 0) {
                            vars[k2] = "";
                          } else if (typeof value[keys[i2]] == "object") {
                            var r = parseData(value[keys[i2]], k2);
                            var o = Object.keys(r);
                            for (var j2 = 0; j2 < o.length; j2++) {
                              vars[o[j2]] = r[o[j2]];
                            }
                          } else {
                            vars[k2] = value[keys[i2]];
                          }
                        }
                      }
                    }
                    return vars;
                  };
                  var d = parseData(options.data);
                  var k = Object.keys(d);
                  if (options.method == "GET") {
                    if (k.length) {
                      var data = [];
                      for (var i = 0; i < k.length; i++) {
                        data.push(k[i] + "=" + encodeURIComponent(d[k[i]]));
                      }
                      if (options.url.indexOf("?") < 0) {
                        options.url += "?";
                      }
                      options.url += data.join("&");
                    }
                  } else {
                    var data = new FormData();
                    for (var i = 0; i < k.length; i++) {
                      if (d[k[i]] instanceof FileList) {
                        if (d[k[i]].length) {
                          for (var j = 0; j < d[k[i]].length; j++) {
                            data.append(k[i], d[k[i]][j], d[k[i]][j].name);
                          }
                        }
                      } else {
                        data.append(k[i], d[k[i]]);
                      }
                    }
                  }
                }
                var httpRequest = new XMLHttpRequest();
                httpRequest.open(options.method, options.url, true);
                httpRequest.setRequestHeader("X-Requested-With", "XMLHttpRequest");
                if (options.contentType) {
                  httpRequest.setRequestHeader("Content-Type", options.contentType);
                }
                if (options.method === "POST") {
                  httpRequest.setRequestHeader("Accept", "application/json");
                } else {
                  if (options.dataType === "blob") {
                    httpRequest.responseType = "blob";
                  } else {
                    if (!options.contentType) {
                      if (options.dataType === "json") {
                        httpRequest.setRequestHeader("Content-Type", "text/json");
                      } else if (options.dataType === "html") {
                        httpRequest.setRequestHeader("Content-Type", "text/html");
                      }
                    }
                  }
                }
                if (options.cache !== true) {
                  httpRequest.setRequestHeader("pragma", "no-cache");
                  httpRequest.setRequestHeader("cache-control", "no-cache");
                }
                if (options.withCredentials === true) {
                  httpRequest.withCredentials = true;
                }
                if (typeof options.beforeSend == "function") {
                  options.beforeSend(httpRequest);
                }
                if (typeof Component.beforeSend == "function") {
                  Component.beforeSend(httpRequest);
                }
                if (document.ajax && typeof document.ajax.beforeSend == "function") {
                  document.ajax.beforeSend(httpRequest);
                }
                httpRequest.onload = function() {
                  if (httpRequest.status >= 200 && httpRequest.status < 300) {
                    if (options.dataType === "json") {
                      try {
                        var result = JSON.parse(httpRequest.responseText);
                        if (options.success && typeof options.success == "function") {
                          options.success(result);
                        }
                      } catch (err) {
                        if (options.error && typeof options.error == "function") {
                          options.error(err, result);
                        }
                      }
                    } else {
                      if (options.dataType === "blob") {
                        var result = httpRequest.response;
                      } else {
                        var result = httpRequest.responseText;
                      }
                      if (options.success && typeof options.success == "function") {
                        options.success(result);
                      }
                    }
                  } else {
                    if (options.error && typeof options.error == "function") {
                      options.error(httpRequest.responseText, httpRequest.status);
                    }
                  }
                  if (Component.queue && Component.queue.length > 0) {
                    Component.send(Component.queue.shift());
                  }
                  if (Component.requests && Component.requests.length) {
                    var index = Component.requests.indexOf(httpRequest);
                    Component.requests.splice(index, 1);
                    if (!Component.requests.length) {
                      if (options.complete && typeof options.complete == "function") {
                        options.complete(result);
                      }
                    }
                    if (options.group) {
                      if (Component.oncomplete && typeof Component.oncomplete[options.group] == "function") {
                        if (!Component.pending(options.group)) {
                          Component.oncomplete[options.group]();
                          Component.oncomplete[options.group] = null;
                        }
                      }
                    }
                    if (options.multiple && options.multiple.instance) {
                      var index = options.multiple.instance.indexOf(httpRequest);
                      options.multiple.instance.splice(index, 1);
                      if (!options.multiple.instance.length) {
                        if (options.multiple.complete && typeof options.multiple.complete == "function") {
                          options.multiple.complete(result);
                        }
                      }
                    }
                  }
                };
                httpRequest.options = options;
                httpRequest.data = data;
                if (options.queue === true && Component.requests.length > 0) {
                  Component.queue.push(httpRequest);
                } else {
                  Component.send(httpRequest);
                }
                return httpRequest;
              };
              Component.send = function(httpRequest) {
                if (httpRequest.data) {
                  if (Array.isArray(httpRequest.data)) {
                    httpRequest.send(httpRequest.data.join("&"));
                  } else {
                    httpRequest.send(httpRequest.data);
                  }
                } else {
                  httpRequest.send();
                }
                Component.requests.push(httpRequest);
              };
              Component.exists = function(url, __callback) {
                var http = new XMLHttpRequest();
                http.open("HEAD", url, false);
                http.send();
                if (http.status) {
                  __callback(http.status);
                }
              };
              Component.pending = function(group) {
                var n = 0;
                var o = Component.requests;
                if (o && o.length) {
                  for (var i = 0; i < o.length; i++) {
                    if (!group || group == o[i].options.group) {
                      n++;
                    }
                  }
                }
                return n;
              };
              Component.oncomplete = {};
              Component.requests = [];
              Component.queue = [];
              return Component;
            }
            var ajax = Ajax();
            ;
            function Animation() {
              const Component = {
                loading: {}
              };
              Component.loading.show = function(timeout) {
                if (!Component.loading.element) {
                  Component.loading.element = document.createElement("div");
                  Component.loading.element.className = "jloading";
                }
                document.body.appendChild(Component.loading.element);
                if (timeout > 0) {
                  setTimeout(function() {
                    Component.loading.hide();
                  }, timeout * 1e3);
                }
              };
              Component.loading.hide = function() {
                if (Component.loading.element && Component.loading.element.parentNode) {
                  document.body.removeChild(Component.loading.element);
                }
              };
              Component.slideLeft = function(element, direction, done) {
                if (direction == true) {
                  element.classList.add("slide-left-in");
                  setTimeout(function() {
                    element.classList.remove("slide-left-in");
                    if (typeof done == "function") {
                      done();
                    }
                  }, 400);
                } else {
                  element.classList.add("slide-left-out");
                  setTimeout(function() {
                    element.classList.remove("slide-left-out");
                    if (typeof done == "function") {
                      done();
                    }
                  }, 400);
                }
              };
              Component.slideRight = function(element, direction, done) {
                if (direction === true) {
                  element.classList.add("slide-right-in");
                  setTimeout(function() {
                    element.classList.remove("slide-right-in");
                    if (typeof done == "function") {
                      done();
                    }
                  }, 400);
                } else {
                  element.classList.add("slide-right-out");
                  setTimeout(function() {
                    element.classList.remove("slide-right-out");
                    if (typeof done == "function") {
                      done();
                    }
                  }, 400);
                }
              };
              Component.slideTop = function(element, direction, done) {
                if (direction === true) {
                  element.classList.add("slide-top-in");
                  setTimeout(function() {
                    element.classList.remove("slide-top-in");
                    if (typeof done == "function") {
                      done();
                    }
                  }, 400);
                } else {
                  element.classList.add("slide-top-out");
                  setTimeout(function() {
                    element.classList.remove("slide-top-out");
                    if (typeof done == "function") {
                      done();
                    }
                  }, 400);
                }
              };
              Component.slideBottom = function(element, direction, done) {
                if (direction === true) {
                  element.classList.add("slide-bottom-in");
                  setTimeout(function() {
                    element.classList.remove("slide-bottom-in");
                    if (typeof done == "function") {
                      done();
                    }
                  }, 400);
                } else {
                  element.classList.add("slide-bottom-out");
                  setTimeout(function() {
                    element.classList.remove("slide-bottom-out");
                    if (typeof done == "function") {
                      done();
                    }
                  }, 100);
                }
              };
              Component.fadeIn = function(element, done) {
                element.style.display = "";
                element.classList.add("fade-in");
                setTimeout(function() {
                  element.classList.remove("fade-in");
                  if (typeof done == "function") {
                    done();
                  }
                }, 2e3);
              };
              Component.fadeOut = function(element, done) {
                element.classList.add("fade-out");
                setTimeout(function() {
                  element.style.display = "none";
                  element.classList.remove("fade-out");
                  if (typeof done == "function") {
                    done();
                  }
                }, 1e3);
              };
              return Component;
            }
            var animation = Animation();
            ;
            function Mask() {
              var tokens = {
                // Text
                text: ["@"],
                // Currency tokens
                currency: ["#(.{1})##0?(.{1}0+)?( ?;(.*)?)?", "#"],
                // Percentage
                percentage: ["0{1}(.{1}0+)?%"],
                // Number
                numeric: ["0{1}(.{1}0+)?"],
                // Data tokens
                datetime: ["YYYY", "YYY", "YY", "MMMMM", "MMMM", "MMM", "MM", "DDDDD", "DDDD", "DDD", "DD", "DY", "DAY", "WD", "D", "Q", "MONTH", "MON", "HH24", "HH12", "HH", "\\[H\\]", "H", "AM/PM", "MI", "SS", "MS", "Y", "M"],
                // Other
                general: ["A", "0", "[0-9a-zA-Z$]+", "."]
              };
              var getDate = function() {
                if (this.mask.toLowerCase().indexOf("[h]") !== -1) {
                  var m = 0;
                  if (this.date[4]) {
                    m = parseFloat(this.date[4] / 60);
                  }
                  var v = parseInt(this.date[3]) + m;
                  v /= 24;
                } else if (!(this.date[0] && this.date[1] && this.date[2]) && (this.date[3] || this.date[4])) {
                  v = helpers.two(this.date[3]) + ":" + helpers.two(this.date[4]) + ":" + helpers.two(this.date[5]);
                } else {
                  if (this.date[0] && this.date[1] && !this.date[2]) {
                    this.date[2] = 1;
                  }
                  v = helpers.two(this.date[0]) + "-" + helpers.two(this.date[1]) + "-" + helpers.two(this.date[2]);
                  if (this.date[3] || this.date[4] || this.date[5]) {
                    v += " " + helpers.two(this.date[3]) + ":" + helpers.two(this.date[4]) + ":" + helpers.two(this.date[5]);
                  }
                }
                return v;
              };
              var extractDate = function() {
                var v = "";
                if (!(this.date[0] && this.date[1] && this.date[2]) && (this.date[3] || this.date[4])) {
                  if (this.mask.toLowerCase().indexOf("[h]") !== -1) {
                    v = parseInt(this.date[3]);
                  } else {
                    let h = parseInt(this.date[3]);
                    if (h < 13 && this.values.indexOf("PM") !== -1) {
                      v = (h + 12) % 24;
                    } else {
                      v = h % 24;
                    }
                  }
                  if (this.date[4]) {
                    v += parseFloat(this.date[4] / 60);
                  }
                  if (this.date[5]) {
                    v += parseFloat(this.date[5] / 3600);
                  }
                  v /= 24;
                } else if (this.date[0] || this.date[1] || this.date[2] || this.date[3] || this.date[4] || this.date[5]) {
                  if (this.date[0] && this.date[1] && !this.date[2]) {
                    this.date[2] = 1;
                  }
                  var t = helpers_date.now(this.date);
                  v = helpers_date.dateToNum(t);
                  if (this.date[4]) {
                    v += parseFloat(this.date[4] / 60);
                  }
                }
                if (isNaN(v)) {
                  v = "";
                }
                return v;
              };
              var isBlank = function(v) {
                return v === null || v === "" || v === void 0 ? true : false;
              };
              var isFormula = function(value) {
                var v = ("" + value)[0];
                return v == "=" ? true : false;
              };
              var isNumeric = function(t) {
                return t === "currency" || t === "percentage" || t === "numeric" ? true : false;
              };
              var getDecimal = function(v) {
                if (v && Number(v) == v) {
                  return ".";
                } else {
                  if (this.options.decimal) {
                    return this.options.decimal;
                  } else {
                    if (this.locale) {
                      var t = Intl.NumberFormat(this.locale).format(1.1);
                      return this.options.decimal = t[1];
                    } else {
                      if (!v) {
                        v = this.mask;
                      }
                      var e = new RegExp("0{1}(.{1})0+", "ig");
                      var t = e.exec(v);
                      if (t && t[1] && t[1].length == 1) {
                        this.options.decimal = t[1];
                        return t[1];
                      } else {
                        var e = new RegExp("#{1}(.{1})#+", "ig");
                        var t = e.exec(v);
                        if (t && t[1] && t[1].length == 1) {
                          if (t[1] === ",") {
                            this.options.decimal = ".";
                          } else {
                            this.options.decimal = ",";
                          }
                        } else {
                          this.options.decimal = "1.1".toLocaleString().substring(1, 2);
                        }
                      }
                    }
                  }
                }
                if (this.options.decimal) {
                  return this.options.decimal;
                } else {
                  return null;
                }
              };
              var ParseValue = function(v, decimal) {
                if (v == "") {
                  return "";
                }
                if (!decimal) {
                  decimal = getDecimal.call(this);
                }
                v = ("" + v).split(decimal);
                var signal = v[0].match(/[-]+/g);
                if (signal && signal.length) {
                  signal = true;
                } else {
                  signal = false;
                }
                v[0] = v[0].match(/[0-9]+/g);
                if (v[0]) {
                  if (signal) {
                    v[0].unshift("-");
                  }
                  v[0] = v[0].join("");
                } else {
                  if (signal) {
                    v[0] = "-";
                  }
                }
                if (v[0] || v[1]) {
                  if (v[1] !== void 0) {
                    v[1] = v[1].match(/[0-9]+/g);
                    if (v[1]) {
                      v[1] = v[1].join("");
                    } else {
                      v[1] = "";
                    }
                  }
                } else {
                  return "";
                }
                return v;
              };
              var FormatValue = function(v, event) {
                if (v === "") {
                  return "";
                }
                var d = getDecimal.call(this);
                var o = this.options;
                v = ParseValue.call(this, v);
                if (v === "") {
                  return "";
                }
                var t = null;
                if (v[0]) {
                  if (o.style === "percent") {
                    t = parseFloat(v[0]) / 100;
                  } else {
                    t = parseFloat(v[0] + ".1");
                  }
                }
                if ((v[0] === "-" || v[0] === "-00") && !v[1] && (event && event.inputType == "deleteContentBackward")) {
                  return "";
                }
                var n = new Intl.NumberFormat(this.locale, o).format(t);
                n = n.split(d);
                if (o.style === "percent") {
                  if (n[0].indexOf("%") !== -1) {
                    n[0] = n[0].replace("%", "");
                    n[2] = "%";
                  }
                }
                if (typeof n[1] !== "undefined") {
                  var s = n[1].replace(/[0-9]*/g, "");
                  if (s) {
                    n[2] = s;
                  }
                }
                if (v[1] !== void 0) {
                  n[1] = d + v[1];
                } else {
                  n[1] = "";
                }
                return n.join("");
              };
              var Format = function(e, event) {
                var v = Value.call(e);
                if (!v) {
                  return;
                }
                var n = FormatValue.call(this, v, event);
                var t = n.length - v.length;
                var index = Caret.call(e) + t;
                Value.call(e, n, index, true);
              };
              var Extract = function(v) {
                var current = ParseValue.call(this, v);
                if (current) {
                  if (current[0] === "-") {
                    current[0] = "-0";
                  }
                  return parseFloat(current.join("."));
                }
                return null;
              };
              var Caret = function(index, adjustNumeric) {
                if (index === void 0) {
                  if (this.tagName == "DIV") {
                    var pos = 0;
                    var s = window.getSelection();
                    if (s) {
                      if (s.rangeCount !== 0) {
                        var r = s.getRangeAt(0);
                        var p = r.cloneRange();
                        p.selectNodeContents(this);
                        p.setEnd(r.endContainer, r.endOffset);
                        pos = p.toString().length;
                      }
                    }
                    return pos;
                  } else {
                    return this.selectionStart;
                  }
                } else {
                  var n = Value.call(this);
                  if (adjustNumeric) {
                    var p = null;
                    for (var i = 0; i < n.length; i++) {
                      if (n[i].match(/[\-0-9]/g) || n[i] === "." || n[i] === ",") {
                        p = i;
                      }
                    }
                    if (p === null) {
                      p = n.indexOf(" ");
                    }
                    if (index >= p) {
                      index = p + 1;
                    }
                  }
                  if (index > n.length) {
                    index = n.length;
                  }
                  if (index) {
                    if (this.tagName == "DIV") {
                      var s = window.getSelection();
                      var r = document.createRange();
                      if (this.childNodes[0]) {
                        r.setStart(this.childNodes[0], index);
                        s.removeAllRanges();
                        s.addRange(r);
                      }
                    } else {
                      this.selectionStart = index;
                      this.selectionEnd = index;
                    }
                  }
                }
              };
              var Value = function(v, updateCaret, adjustNumeric) {
                if (this.tagName == "DIV") {
                  if (v === void 0) {
                    var v = this.innerText;
                    if (this.value && this.value.length > v.length) {
                      v = this.value;
                    }
                    return v;
                  } else {
                    if (this.innerText !== v) {
                      this.innerText = v;
                      if (updateCaret) {
                        Caret.call(this, updateCaret, adjustNumeric);
                      }
                    }
                  }
                } else {
                  if (v === void 0) {
                    return this.value;
                  } else {
                    if (this.value !== v) {
                      this.value = v;
                      if (updateCaret) {
                        Caret.call(this, updateCaret, adjustNumeric);
                      }
                    }
                  }
                }
              };
              var weekDaysFull = helpers_date.weekdays;
              var weekDays = helpers_date.weekdaysShort;
              var monthsFull = helpers_date.months;
              var months = helpers_date.monthsShort;
              var parser = {
                "YEAR": function(v, s) {
                  var y = "" + (/* @__PURE__ */ new Date()).getFullYear();
                  if (typeof this.values[this.index] === "undefined") {
                    this.values[this.index] = "";
                  }
                  if (parseInt(v) >= 0 && parseInt(v) <= 10) {
                    if (this.values[this.index].length < s) {
                      this.values[this.index] += v;
                    }
                  }
                  if (this.values[this.index].length == s) {
                    if (s == 2) {
                      var y = y.substr(0, 2) + this.values[this.index];
                    } else if (s == 3) {
                      var y = y.substr(0, 1) + this.values[this.index];
                    } else if (s == 4) {
                      var y = this.values[this.index];
                    }
                    this.date[0] = y;
                    this.index++;
                  }
                },
                "YYYY": function(v) {
                  parser.YEAR.call(this, v, 4);
                },
                "YYY": function(v) {
                  parser.YEAR.call(this, v, 3);
                },
                "YY": function(v) {
                  parser.YEAR.call(this, v, 2);
                },
                "FIND": function(v, a) {
                  if (isBlank(this.values[this.index])) {
                    this.values[this.index] = "";
                  }
                  if (this.event && this.event.inputType && this.event.inputType.indexOf("delete") > -1) {
                    this.values[this.index] += v;
                    return;
                  }
                  var pos = 0;
                  var count = 0;
                  var value = (this.values[this.index] + v).toLowerCase();
                  for (var i = 0; i < a.length; i++) {
                    if (a[i].toLowerCase().indexOf(value) == 0) {
                      pos = i;
                      count++;
                    }
                  }
                  if (count > 1) {
                    this.values[this.index] += v;
                  } else if (count == 1) {
                    var t = a[pos].length - this.values[this.index].length - 1;
                    this.position += t;
                    this.values[this.index] = a[pos];
                    this.index++;
                    return pos;
                  }
                },
                "MMM": function(v) {
                  var ret = parser.FIND.call(this, v, months);
                  if (ret !== void 0) {
                    this.date[1] = ret + 1;
                  }
                },
                "MON": function(v) {
                  parser["MMM"].call(this, v);
                },
                "MMMM": function(v) {
                  var ret = parser.FIND.call(this, v, monthsFull);
                  if (ret !== void 0) {
                    this.date[1] = ret + 1;
                  }
                },
                "MONTH": function(v) {
                  parser["MMMM"].call(this, v);
                },
                "MMMMM": function(v) {
                  if (isBlank(this.values[this.index])) {
                    this.values[this.index] = "";
                  }
                  var pos = 0;
                  var count = 0;
                  var value = (this.values[this.index] + v).toLowerCase();
                  for (var i = 0; i < monthsFull.length; i++) {
                    if (monthsFull[i][0].toLowerCase().indexOf(value) == 0) {
                      this.values[this.index] = monthsFull[i][0];
                      this.date[1] = i + 1;
                      this.index++;
                      break;
                    }
                  }
                },
                "MM": function(v) {
                  if (isBlank(this.values[this.index])) {
                    if (parseInt(v) > 1 && parseInt(v) < 10) {
                      this.date[1] = this.values[this.index] = "0" + v;
                      this.index++;
                    } else if (parseInt(v) < 2) {
                      this.values[this.index] = v;
                    }
                  } else {
                    if (this.values[this.index] == 1 && parseInt(v) < 3) {
                      this.date[1] = this.values[this.index] += v;
                      this.index++;
                    } else if (this.values[this.index] == 0 && parseInt(v) > 0 && parseInt(v) < 10) {
                      this.date[1] = this.values[this.index] += v;
                      this.index++;
                    }
                  }
                },
                "M": function(v) {
                  var test = false;
                  if (parseInt(v) >= 0 && parseInt(v) < 10) {
                    if (isBlank(this.values[this.index])) {
                      this.values[this.index] = v;
                      if (v > 1) {
                        this.date[1] = this.values[this.index];
                        this.index++;
                      }
                    } else {
                      if (this.values[this.index] == 1 && parseInt(v) < 3) {
                        this.date[1] = this.values[this.index] += v;
                        this.index++;
                      } else if (this.values[this.index] == 0 && parseInt(v) > 0) {
                        this.date[1] = this.values[this.index] += v;
                        this.index++;
                      } else {
                        var test = true;
                      }
                    }
                  } else {
                    var test = true;
                  }
                  if (test == true) {
                    var t = parseInt(this.values[this.index]);
                    if (t > 0 && t < 12) {
                      this.date[1] = this.values[this.index];
                      this.index++;
                      this.position--;
                    }
                  }
                },
                "D": function(v) {
                  var test = false;
                  if (parseInt(v) >= 0 && parseInt(v) < 10) {
                    if (isBlank(this.values[this.index])) {
                      this.values[this.index] = v;
                      if (parseInt(v) > 3) {
                        this.date[2] = this.values[this.index];
                        this.index++;
                      }
                    } else {
                      if (this.values[this.index] == 3 && parseInt(v) < 2) {
                        this.date[2] = this.values[this.index] += v;
                        this.index++;
                      } else if (this.values[this.index] == 1 || this.values[this.index] == 2) {
                        this.date[2] = this.values[this.index] += v;
                        this.index++;
                      } else if (this.values[this.index] == 0 && parseInt(v) > 0) {
                        this.date[2] = this.values[this.index] += v;
                        this.index++;
                      } else {
                        var test = true;
                      }
                    }
                  } else {
                    var test = true;
                  }
                  if (test == true) {
                    var t = parseInt(this.values[this.index]);
                    if (t > 0 && t < 32) {
                      this.date[2] = this.values[this.index];
                      this.index++;
                      this.position--;
                    }
                  }
                },
                "DD": function(v) {
                  if (isBlank(this.values[this.index])) {
                    if (parseInt(v) > 3 && parseInt(v) < 10) {
                      this.date[2] = this.values[this.index] = "0" + v;
                      this.index++;
                    } else if (parseInt(v) < 10) {
                      this.values[this.index] = v;
                    }
                  } else {
                    if (this.values[this.index] == 3 && parseInt(v) < 2) {
                      this.date[2] = this.values[this.index] += v;
                      this.index++;
                    } else if ((this.values[this.index] == 1 || this.values[this.index] == 2) && parseInt(v) < 10) {
                      this.date[2] = this.values[this.index] += v;
                      this.index++;
                    } else if (this.values[this.index] == 0 && parseInt(v) > 0 && parseInt(v) < 10) {
                      this.date[2] = this.values[this.index] += v;
                      this.index++;
                    }
                  }
                },
                "DDD": function(v) {
                  parser.FIND.call(this, v, weekDays);
                },
                "DY": function(v) {
                  parser["DDD"].call(this, v);
                },
                "DDDD": function(v) {
                  parser.FIND.call(this, v, weekDaysFull);
                },
                "DAY": function(v) {
                  parser["DDDD"].call(this, v);
                },
                "HH12": function(v, two) {
                  if (isBlank(this.values[this.index])) {
                    if (parseInt(v) > 1 && parseInt(v) < 10) {
                      if (two) {
                        v = 0 + v;
                      }
                      this.date[3] = this.values[this.index] = v;
                      this.index++;
                    } else if (parseInt(v) < 10) {
                      this.values[this.index] = v;
                    }
                  } else {
                    if (this.values[this.index] == 1 && parseInt(v) < 3) {
                      this.date[3] = this.values[this.index] += v;
                      this.index++;
                    } else if (this.values[this.index] < 1 && parseInt(v) < 10) {
                      this.date[3] = this.values[this.index] += v;
                      this.index++;
                    }
                  }
                },
                "HH24": function(v, two) {
                  if (parseInt(v) >= 0 && parseInt(v) < 10) {
                    if (this.values[this.index] == null || this.values[this.index] == "") {
                      if (parseInt(v) > 2 && parseInt(v) < 10) {
                        if (two) {
                          v = 0 + v;
                        }
                        this.date[3] = this.values[this.index] = v;
                        this.index++;
                      } else if (parseInt(v) < 10) {
                        this.values[this.index] = v;
                      }
                    } else {
                      if (this.values[this.index] == 2 && parseInt(v) < 4) {
                        if (!two && this.values[this.index] === "0") {
                          this.values[this.index] = "";
                        }
                        this.date[3] = this.values[this.index] += v;
                        this.index++;
                      } else if (this.values[this.index] < 2 && parseInt(v) < 10) {
                        if (!two && this.values[this.index] === "0") {
                          this.values[this.index] = "";
                        }
                        this.date[3] = this.values[this.index] += v;
                        this.index++;
                      }
                    }
                  }
                },
                "HH": function(v) {
                  parser["HH24"].call(this, v, 1);
                },
                "H": function(v) {
                  parser["HH24"].call(this, v, 0);
                },
                "\\[H\\]": function(v) {
                  if (this.values[this.index] == void 0) {
                    this.values[this.index] = "";
                  }
                  if (v.match(/[0-9]/g)) {
                    this.date[3] = this.values[this.index] += v;
                  } else {
                    if (this.values[this.index].match(/[0-9]/g)) {
                      this.date[3] = this.values[this.index];
                      this.index++;
                      this.position--;
                    }
                  }
                },
                "N60": function(v, i) {
                  if (this.values[this.index] == null || this.values[this.index] == "") {
                    if (parseInt(v) > 5 && parseInt(v) < 10) {
                      this.date[i] = this.values[this.index] = "0" + v;
                      this.index++;
                    } else if (parseInt(v) < 10) {
                      this.values[this.index] = v;
                    }
                  } else {
                    if (parseInt(v) < 10) {
                      this.date[i] = this.values[this.index] += v;
                      this.index++;
                    }
                  }
                },
                "MI": function(v) {
                  parser.N60.call(this, v, 4);
                },
                "SS": function(v) {
                  parser.N60.call(this, v, 5);
                },
                "AM/PM": function(v) {
                  if (typeof this.values[this.index] === "undefined") {
                    this.values[this.index] = "";
                  }
                  if (this.values[this.index] === "") {
                    if (v.match(/a/i) && this.date[3] < 13) {
                      this.values[this.index] += "A";
                    } else if (v.match(/p/i)) {
                      this.values[this.index] += "P";
                    }
                  } else if (this.values[this.index] === "A" || this.values[this.index] === "P") {
                    this.values[this.index] += "M";
                    this.index++;
                  }
                },
                "WD": function(v) {
                  if (typeof this.values[this.index] === "undefined") {
                    this.values[this.index] = "";
                  }
                  if (parseInt(v) >= 0 && parseInt(v) < 7) {
                    this.values[this.index] = v;
                  }
                  if (this.values[this.index].length == 1) {
                    this.index++;
                  }
                },
                "0{1}(.{1}0+)?": function(v) {
                  var decimal = getDecimal.call(this);
                  var neg = false;
                  if (isBlank(this.values[this.index])) {
                    this.values[this.index] = "";
                  } else {
                    if (this.values[this.index] == "-") {
                      neg = true;
                    }
                  }
                  var current = ParseValue.call(this, this.values[this.index], decimal);
                  if (current) {
                    this.values[this.index] = current.join(decimal);
                  }
                  if (parseInt(v) >= 0 && parseInt(v) < 10) {
                    if (this.values[this.index] == "0" && v > 0) {
                      this.values[this.index] = "";
                    } else if (this.values[this.index] == "-0" && v > 0) {
                      this.values[this.index] = "-";
                    }
                    if (this.values[this.index] != "0" && this.values[this.index] != "-0" || v == decimal) {
                      this.values[this.index] += v;
                    }
                  } else if (decimal && v == decimal) {
                    if (this.values[this.index].indexOf(decimal) == -1) {
                      if (!this.values[this.index]) {
                        this.values[this.index] = "0";
                      }
                      this.values[this.index] += v;
                    }
                  } else if (v == "-") {
                    neg = true;
                  }
                  if (neg === true && this.values[this.index][0] !== "-") {
                    this.values[this.index] = "-" + this.values[this.index];
                  }
                },
                "0{1}(.{1}0+)?%": function(v) {
                  parser["0{1}(.{1}0+)?"].call(this, v);
                  if (this.values[this.index].match(/[\-0-9]/g)) {
                    if (this.values[this.index] && this.values[this.index].indexOf("%") == -1) {
                      this.values[this.index] += "%";
                    }
                  } else {
                    this.values[this.index] = "";
                  }
                },
                "#(.{1})##0?(.{1}0+)?( ?;(.*)?)?": function(v) {
                  parser["0{1}(.{1}0+)?"].call(this, v);
                  var decimal = getDecimal.call(this);
                  var separator = this.tokens[this.index].substr(1, 1);
                  var negative = this.values[this.index][0] === "-" ? true : false;
                  var current = ParseValue.call(this, this.values[this.index], decimal);
                  if (current !== "") {
                    var n = current[0].match(/[0-9]/g);
                    if (n) {
                      n = n.join("");
                      var t = [];
                      var s = 0;
                      for (var j = n.length - 1; j >= 0; j--) {
                        t.push(n[j]);
                        s++;
                        if (!(s % 3)) {
                          t.push(separator);
                        }
                      }
                      t = t.reverse();
                      current[0] = t.join("");
                      if (current[0].substr(0, 1) == separator) {
                        current[0] = current[0].substr(1);
                      }
                    } else {
                      current[0] = "";
                    }
                    this.values[this.index] = current.join(decimal);
                    if (negative) {
                      this.values[this.index] = "-" + this.values[this.index];
                    }
                  }
                },
                "0": function(v) {
                  if (v.match(/[0-9]/g)) {
                    this.values[this.index] = v;
                    this.index++;
                  }
                },
                "[0-9a-zA-Z$]+": function(v) {
                  if (isBlank(this.values[this.index])) {
                    this.values[this.index] = "";
                  }
                  var t = this.tokens[this.index];
                  var s = this.values[this.index];
                  var i = s.length;
                  if (t[i] == v) {
                    this.values[this.index] += v;
                    if (this.values[this.index] == t) {
                      this.index++;
                    }
                  } else {
                    this.values[this.index] = t;
                    this.index++;
                    if (v.match(/[\-0-9]/g)) {
                      this.position--;
                    }
                  }
                },
                "A": function(v) {
                  if (v.match(/[a-zA-Z]/gi)) {
                    this.values[this.index] = v;
                    this.index++;
                  }
                },
                ".": function(v) {
                  parser["[0-9a-zA-Z$]+"].call(this, v);
                },
                "@": function(v) {
                  if (isBlank(this.values[this.index])) {
                    this.values[this.index] = "";
                  }
                  this.values[this.index] += v;
                }
              };
              var getTokens = function(str) {
                if (this.type == "general") {
                  var t = [].concat(tokens.general);
                } else {
                  var t = [].concat(tokens.currency, tokens.datetime, tokens.percentage, tokens.numeric, tokens.text, tokens.general);
                }
                var e = new RegExp(t.join("|"), "gi");
                return str.match(e);
              };
              var getMethod = function(str) {
                if (!this.type) {
                  var types = Object.keys(tokens);
                } else if (this.type == "text") {
                  var types = ["text"];
                } else if (this.type == "general") {
                  var types = ["general"];
                } else if (this.type == "datetime") {
                  var types = ["numeric", "datetime", "general"];
                } else {
                  var types = ["currency", "percentage", "numeric", "general"];
                }
                for (var i = 0; i < types.length; i++) {
                  var type = types[i];
                  for (var j = 0; j < tokens[type].length; j++) {
                    var e = new RegExp(tokens[type][j], "gi");
                    var r = str.match(e);
                    if (r) {
                      return { type, method: tokens[type][j] };
                    }
                  }
                }
              };
              var getMethods = function(t) {
                var result = [];
                for (var i = 0; i < t.length; i++) {
                  var m = getMethod.call(this, t[i]);
                  if (m) {
                    result.push(m.method);
                  } else {
                    result.push(null);
                  }
                }
                for (var i = 0; i < result.length; i++) {
                  if (result[i] == "MM") {
                    if (result[i - 1] && result[i - 1].indexOf("H") >= 0) {
                      result[i] = "MI";
                    } else if (result[i - 2] && result[i - 2].indexOf("H") >= 0) {
                      result[i] = "MI";
                    } else if (result[i + 1] && result[i + 1].indexOf("S") >= 0) {
                      result[i] = "MI";
                    } else if (result[i + 2] && result[i + 2].indexOf("S") >= 0) {
                      result[i] = "MI";
                    }
                  }
                }
                return result;
              };
              var getType = function(str) {
                var m = getMethod.call(this, str);
                if (m) {
                  var type = m.type;
                }
                if (type) {
                  var numeric = 0;
                  var t = getTokens.call(this, str);
                  for (var i = 0; i < t.length; i++) {
                    m = getMethod.call(this, t[i]);
                    if (m && isNumeric(m.type)) {
                      numeric++;
                    }
                  }
                  if (numeric > 1) {
                    type = "general";
                  }
                }
                return type;
              };
              var parse = function() {
                if (typeof parser[this.methods[this.index]] == "function") {
                  parser[this.methods[this.index]].call(this, this.value[this.position]);
                  this.position++;
                } else {
                  this.values[this.index] = this.tokens[this.index];
                  this.index++;
                }
              };
              var toPlainString = function(num) {
                return ("" + +num).replace(
                  /(-?)(\d*)\.?(\d*)e([+-]\d+)/,
                  function(a, b, c, d, e) {
                    return e < 0 ? b + "0." + Array(1 - e - c.length).join(0) + c + d : b + c + d + Array(e - d.length + 1).join(0);
                  }
                );
              };
              var obj2 = function(e, config, returnObject) {
                var r = null;
                var t = null;
                var o = {
                  // Element
                  input: null,
                  // Current value
                  value: null,
                  // Mask options
                  options: {},
                  // New values for each token found
                  values: [],
                  // Token position
                  index: 0,
                  // Character position
                  position: 0,
                  // Date raw values
                  date: [0, 0, 0, 0, 0, 0],
                  // Raw number for the numeric values
                  number: 0
                };
                if (typeof e == "object") {
                  o.input = e.target;
                  o.value = Value.call(e.target);
                  o.caret = Caret.call(e.target);
                  if (t = e.target.getAttribute("data-mask")) {
                    o.mask = t;
                  }
                  if (t = e.target.getAttribute("data-type")) {
                    o.type = t;
                  }
                  if (e.target.mask) {
                    if (e.target.mask.options) {
                      o.options = e.target.mask.options;
                    }
                    if (e.target.mask.locale) {
                      o.locale = e.target.mask.locale;
                    }
                  } else {
                    if (t = e.target.getAttribute("data-locale")) {
                      o.locale = t;
                      if (o.mask) {
                        o.options.style = o.mask;
                      }
                    }
                  }
                  if (e.target.attributes && e.target.attributes.length) {
                    for (var i = 0; i < e.target.attributes.length; i++) {
                      var k = e.target.attributes[i].name;
                      var v = e.target.attributes[i].value;
                      if (k.substr(0, 4) == "data") {
                        o.options[k.substr(5)] = v;
                      }
                    }
                  }
                } else {
                  if (typeof config == "string") {
                    o.mask = config;
                  } else {
                    var k = Object.keys(config);
                    for (var i = 0; i < k.length; i++) {
                      o[k[i]] = config[k[i]];
                    }
                  }
                  if (typeof e === "number") {
                    getDecimal.call(o, o.mask);
                    e = ("" + e).replace(".", o.options.decimal);
                  }
                  o.value = e;
                  if (o.input) {
                    Value.call(o.input, e);
                    helpers.focus(o.input);
                    o.caret = Caret.call(o.input);
                  }
                }
                if (!isFormula(o.value) && (o.mask || o.locale)) {
                  if (o.mask) {
                    o.mask = o.mask.replace(new RegExp(/\[h]/), "|h|");
                    o.mask = o.mask.replace(new RegExp(/\[.*?\]/), "");
                    o.mask = o.mask.replace(new RegExp(/\|h\|/), "[h]");
                    if (o.mask.indexOf(";") !== -1) {
                      var t = o.mask.split(";");
                      o.mask = t[0];
                    }
                    if (o.mask.indexOf("##") !== -1) {
                      var d = o.mask.split(";");
                      if (d[0]) {
                        if (typeof e == "object") {
                          d[0] = d[0].replace(new RegExp(/_\)/g), "");
                          d[0] = d[0].replace(new RegExp(/_\(/g), "");
                        }
                        d[0] = d[0].replace("*", "	");
                        d[0] = d[0].replace(new RegExp(/_-/g), "");
                        d[0] = d[0].replace(new RegExp(/_/g), "");
                        d[0] = d[0].replace("##0.###", "##0.000");
                        d[0] = d[0].replace("##0.##", "##0.00");
                        d[0] = d[0].replace("##0.#", "##0.0");
                        d[0] = d[0].replace("##0,###", "##0,000");
                        d[0] = d[0].replace("##0,##", "##0,00");
                        d[0] = d[0].replace("##0,#", "##0,0");
                      }
                      o.mask = d[0];
                    }
                    if (o.mask.indexOf("\\") !== -1) {
                      var d = o.mask.split(";");
                      d[0] = d[0].replace(new RegExp(/\\/g), "");
                      o.mask = d[0];
                    }
                    if (!o.type) {
                      o.type = getType.call(o, o.mask);
                    }
                    o.tokens = getTokens.call(o, o.mask);
                  }
                  if (typeof e !== "object" || !e.inputType || !e.inputType.indexOf("insert") || !e.inputType.indexOf("delete")) {
                    if (o.locale) {
                      if (o.input) {
                        Format.call(o, o.input, e);
                      } else {
                        var newValue = FormatValue.call(o, o.value);
                      }
                    } else {
                      o.methods = getMethods.call(o, o.tokens);
                      o.event = e;
                      while (o.position < o.value.length && typeof o.tokens[o.index] !== "undefined") {
                        parse.call(o);
                      }
                      var newValue = o.values.join("");
                      if (isNumeric(o.type) && newValue !== "") {
                        while (typeof o.tokens[o.index] !== "undefined") {
                          var t = getMethod.call(o, o.tokens[o.index]);
                          if (t && t.type == "general") {
                            o.values[o.index] = o.tokens[o.index];
                          }
                          o.index++;
                        }
                        var adjustNumeric = true;
                      } else {
                        var adjustNumeric = false;
                      }
                      newValue = o.values.join("");
                      if (o.input) {
                        t = newValue.length - o.value.length;
                        if (t > 0) {
                          var caret = o.caret + t;
                        } else {
                          var caret = o.caret;
                        }
                        Value.call(o.input, newValue, caret, adjustNumeric);
                      }
                    }
                  }
                  if (o.input) {
                    var label = null;
                    if (isNumeric(o.type)) {
                      let v2 = Value.call(o.input);
                      o.number = Extract.call(o, v2);
                      if (o.type == "percentage" && v2.indexOf("%") !== -1) {
                        label = obj2.adjustPrecision(o.number / 100);
                      } else {
                        label = o.number;
                      }
                    } else if (o.type == "datetime") {
                      label = getDate.call(o);
                      if (o.date[0] && o.date[1] && o.date[2]) {
                        o.input.setAttribute("data-completed", true);
                      }
                    }
                    if (label) {
                      o.input.setAttribute("data-value", label);
                    }
                  }
                  if (newValue !== void 0) {
                    if (returnObject) {
                      return o;
                    } else {
                      return newValue;
                    }
                  }
                }
              };
              obj2.adjustPrecision = function(num) {
                if (typeof num === "number" && !Number.isInteger(num)) {
                  const v = num.toString().split(".");
                  if (v[1] && v[1].length > 10) {
                    let t0 = 0;
                    const t1 = v[1][v[1].length - 2];
                    if (t1 == 0 || t1 == 9) {
                      for (let i = v[1].length - 2; i > 0; i--) {
                        if (t0 >= 0 && v[1][i] == t1) {
                          t0++;
                          if (t0 > 6) {
                            break;
                          }
                        } else {
                          t0 = 0;
                          break;
                        }
                      }
                      if (t0) {
                        return parseFloat(parseFloat(num).toFixed(v[1].length - 1));
                      }
                    }
                  }
                }
                return num;
              };
              obj2.getType = getType;
              obj2.prepare = function(str, o) {
                if (!o) {
                  o = {};
                }
                return getTokens.call(o, str);
              };
              obj2.apply = function(e) {
                var v = Value.call(e.target);
                if (e.key.length == 1) {
                  v += e.key;
                }
                Value.call(e.target, obj2(v, e.target.getAttribute("data-mask")));
              };
              obj2.run = function(value, mask2, decimal) {
                return obj2(value, { mask: mask2, decimal });
              };
              obj2.extract = function(v, options, returnObject) {
                if (isBlank(v)) {
                  return v;
                }
                if (typeof options != "object") {
                  return v;
                } else {
                  options = Object.assign({}, options);
                  if (!options.options) {
                    options.options = {};
                  }
                }
                if (!options.mask && options.format) {
                  options.mask = options.format;
                }
                if (options.mask) {
                  if (options.mask.indexOf(";") !== -1) {
                    var t = options.mask.split(";");
                    options.mask = t[0];
                  }
                  options.mask = options.mask.replace(new RegExp(/\[h]/), "|h|");
                  options.mask = options.mask.replace(new RegExp(/\[.*?\]/), "");
                  options.mask = options.mask.replace(new RegExp(/\|h\|/), "[h]");
                }
                getDecimal.call(options, options.mask);
                var type = null;
                var value = null;
                if (options.type == "percent" || options.options.style == "percent") {
                  type = "percentage";
                } else if (options.mask) {
                  type = getType.call(options, options.mask);
                }
                if (type === "general") {
                  var o = obj2(v, options, true);
                  value = v;
                } else if (type === "datetime") {
                  if (v instanceof Date) {
                    v = obj2.getDateString(v, options.mask);
                  }
                  var o = obj2(v, options, true);
                  if (helpers.isNumeric(v)) {
                    value = v;
                  } else {
                    value = extractDate.call(o);
                  }
                } else {
                  value = Extract.call(options, v);
                  if (type === "percentage" && v.indexOf("%") !== -1) {
                    value /= 100;
                  }
                  var o = options;
                }
                o.value = value;
                if (!o.type && type) {
                  o.type = type;
                }
                if (returnObject) {
                  return o;
                } else {
                  return value;
                }
              };
              obj2.render = function(value, options, fullMask) {
                if (isBlank(value)) {
                  return value;
                }
                if (typeof options != "object") {
                  return value;
                } else {
                  options = Object.assign({}, options);
                  if (!options.options) {
                    options.options = {};
                  }
                }
                if (!options.mask && options.format) {
                  options.mask = options.format;
                }
                if (options.mask) {
                  if (options.mask.indexOf(";") !== -1) {
                    var t = options.mask.split(";");
                    if (!fullMask) {
                      t[0] = t[0].replace(new RegExp(/_\)/g), "");
                      t[0] = t[0].replace(new RegExp(/_\(/g), "");
                    }
                    options.mask = t[0];
                  }
                  options.mask = options.mask.replace(new RegExp(/\[h]/), "|h|");
                  options.mask = options.mask.replace(new RegExp(/\[.*?\]/), "");
                  options.mask = options.mask.replace(new RegExp(/\|h\|/), "[h]");
                }
                var type = null;
                if (options.type == "percent" || options.options.style == "percent") {
                  type = "percentage";
                } else if (options.mask) {
                  type = getType.call(options, options.mask);
                } else if (value instanceof Date) {
                  type = "datetime";
                }
                var fillWithBlanks = false;
                if (type == "datetime" || options.type == "calendar") {
                  var t = obj2.getDateString(value, options.mask);
                  if (t) {
                    value = t;
                  }
                  if (options.mask && fullMask) {
                    fillWithBlanks = true;
                  }
                } else {
                  if (type === "percentage") {
                    value = obj2.adjustPrecision(value * 100);
                  }
                  if (typeof value === "number") {
                    var t = null;
                    if (options.mask && fullMask && ("" + value).indexOf("e") === -1) {
                      var d = getDecimal.call(options, options.mask);
                      if (options.mask.indexOf(d) !== -1) {
                        d = options.mask.split(d);
                        d = "" + d[1].match(/[0-9]+/g);
                        d = d.length;
                        t = value.toFixed(d);
                      } else {
                        t = value.toFixed(0);
                      }
                    } else if (options.locale && fullMask) {
                      var d = ("" + value).split(".");
                      if (options.options) {
                        if (typeof d[1] === "undefined") {
                          d[1] = "";
                        }
                        var len = d[1].length;
                        if (options.options.minimumFractionDigits > len) {
                          for (var i = 0; i < options.options.minimumFractionDigits - len; i++) {
                            d[1] += "0";
                          }
                        }
                      }
                      if (!d[1].length) {
                        t = d[0];
                      } else {
                        t = d.join(".");
                      }
                      var len = d[1].length;
                      if (options.options && options.options.maximumFractionDigits < len) {
                        t = parseFloat(t).toFixed(options.options.maximumFractionDigits);
                      }
                    } else {
                      t = toPlainString(value);
                    }
                    if (t !== null) {
                      value = t;
                      getDecimal.call(options, options.mask);
                      if (options.options.decimal) {
                        value = value.replace(".", options.options.decimal);
                      }
                    }
                  } else {
                    if (options.mask && fullMask) {
                      fillWithBlanks = true;
                    }
                  }
                }
                if (fillWithBlanks) {
                  var s = options.mask.length - value.length;
                  if (s > 0) {
                    for (var i = 0; i < s; i++) {
                      value += " ";
                    }
                  }
                }
                value = obj2(value, options);
                if (fullMask && type === "numeric") {
                  var maskZeros = options.mask.match(new RegExp(/^[0]+$/gm));
                  if (maskZeros && maskZeros.length === 1) {
                    var maskLength = maskZeros[0].length;
                    if (maskLength > 3) {
                      value = "" + value;
                      while (value.length < maskLength) {
                        value = "0" + value;
                      }
                    }
                  }
                }
                return value;
              };
              obj2.set = function(e, m) {
                if (m) {
                  e.setAttribute("data-mask", m);
                  var event = new Event("input", {
                    bubbles: true,
                    cancelable: true
                  });
                  e.dispatchEvent(event);
                }
              };
              obj2.extractDateFromString = function(date, format) {
                var o = obj2(date, { mask: format }, true);
                if (date > 0 && Number(date) == date && (o.values.join("") !== o.value || o.type == "numeric")) {
                  var d = new Date(Math.round((date - 25569) * 86400 * 1e3));
                  return d.getFullYear() + "-" + helpers.two(d.getMonth()) + "-" + helpers.two(d.getDate()) + " 00:00:00";
                }
                var complete = false;
                if (o.values.length === o.tokens.length && o.values[o.values.length - 1].length >= o.tokens[o.tokens.length - 1].length) {
                  complete = true;
                }
                if (o.date[0] && o.date[1] && (o.date[2] || complete)) {
                  if (!o.date[2]) {
                    o.date[2] = 1;
                  }
                  return o.date[0] + "-" + helpers.two(o.date[1]) + "-" + helpers.two(o.date[2]) + " " + helpers.two(o.date[3]) + ":" + helpers.two(o.date[4]) + ":" + helpers.two(o.date[5]);
                }
                return "";
              };
              obj2.getDateString = function(value, options) {
                if (!options) {
                  var options = {};
                }
                if (options && typeof options == "object") {
                  var format = options.format;
                } else {
                  var format = options;
                }
                if (!format) {
                  format = "YYYY-MM-DD";
                }
                if (format.indexOf("[h]") >= 0) {
                  var result = 0;
                  if (value && helpers.isNumeric(value)) {
                    result = parseFloat(24 * Number(value));
                    if (format.indexOf("mm") >= 0) {
                      var h = ("" + result).split(".");
                      if (h[1]) {
                        var d = 60 * parseFloat("0." + h[1]);
                        d = parseFloat(d.toFixed(2));
                      } else {
                        var d = 0;
                      }
                      result = parseInt(h[0]) + ":" + helpers.two(d);
                    }
                  }
                  return result;
                }
                if (value instanceof Date) {
                  value = helpers_date.now(value);
                } else if (value && helpers.isNumeric(value)) {
                  value = helpers_date.numToDate(value);
                }
                var tokens2 = ["DAY", "WD", "DDDD", "DDD", "DD", "D", "Q", "HH24", "HH12", "HH", "H", "AM/PM", "MI", "SS", "MS", "YYYY", "YYY", "YY", "Y", "MONTH", "MON", "MMMMM", "MMMM", "MMM", "MM", "M", "."];
                var e = new RegExp(tokens2.join("|"), "gi");
                var t = format.match(e);
                for (var i = 0; i < t.length; i++) {
                  if (t[i].toUpperCase() == "MM") {
                    if (t[i - 1] && t[i - 1].toUpperCase().indexOf("H") >= 0) {
                      t[i] = "mi";
                    } else if (t[i - 2] && t[i - 2].toUpperCase().indexOf("H") >= 0) {
                      t[i] = "mi";
                    } else if (t[i + 1] && t[i + 1].toUpperCase().indexOf("S") >= 0) {
                      t[i] = "mi";
                    } else if (t[i + 2] && t[i + 2].toUpperCase().indexOf("S") >= 0) {
                      t[i] = "mi";
                    }
                  }
                }
                var o = {
                  tokens: t
                };
                if (value) {
                  var d = "" + value;
                  var splitStr = d.indexOf("T") !== -1 ? "T" : " ";
                  d = d.split(splitStr);
                  var h = 0;
                  var m = 0;
                  var s = 0;
                  if (d[1]) {
                    h = d[1].split(":");
                    m = h[1] ? h[1] : 0;
                    s = h[2] ? h[2] : 0;
                    h = h[0] ? h[0] : 0;
                  }
                  d = d[0].split("-");
                  if (d[0] && d[1] && d[2] && d[0] > 0 && d[1] > 0 && d[1] < 13 && d[2] > 0 && d[2] < 32) {
                    o.data = [d[0], d[1], d[2], h, m, s];
                    o.value = [];
                    var calendar2 = new Date(o.data[0], o.data[1] - 1, o.data[2], o.data[3], o.data[4], o.data[5]);
                    var get = function(i2) {
                      var t2 = this.tokens[i2];
                      var s2 = t2.toUpperCase();
                      var v = null;
                      if (s2 === "YYYY") {
                        v = this.data[0];
                      } else if (s2 === "YYY") {
                        v = this.data[0].substring(1, 4);
                      } else if (s2 === "YY") {
                        v = this.data[0].substring(2, 4);
                      } else if (s2 === "Y") {
                        v = this.data[0].substring(3, 4);
                      } else if (t2 === "MON") {
                        v = helpers_date.months[calendar2.getMonth()].substr(0, 3).toUpperCase();
                      } else if (t2 === "mon") {
                        v = helpers_date.months[calendar2.getMonth()].substr(0, 3).toLowerCase();
                      } else if (t2 === "MONTH") {
                        v = helpers_date.months[calendar2.getMonth()].toUpperCase();
                      } else if (t2 === "month") {
                        v = helpers_date.months[calendar2.getMonth()].toLowerCase();
                      } else if (s2 === "MMMMM") {
                        v = helpers_date.months[calendar2.getMonth()].substr(0, 1);
                      } else if (s2 === "MMMM" || t2 === "Month") {
                        v = helpers_date.months[calendar2.getMonth()];
                      } else if (s2 === "MMM" || t2 == "Mon") {
                        v = helpers_date.months[calendar2.getMonth()].substr(0, 3);
                      } else if (s2 === "MM") {
                        v = helpers.two(this.data[1]);
                      } else if (s2 === "M") {
                        v = calendar2.getMonth() + 1;
                      } else if (t2 === "DAY") {
                        v = helpers_date.weekdays[calendar2.getDay()].toUpperCase();
                      } else if (t2 === "day") {
                        v = helpers_date.weekdays[calendar2.getDay()].toLowerCase();
                      } else if (s2 === "DDDD" || t2 == "Day") {
                        v = helpers_date.weekdays[calendar2.getDay()];
                      } else if (s2 === "DDD") {
                        v = helpers_date.weekdays[calendar2.getDay()].substr(0, 3);
                      } else if (s2 === "DD") {
                        v = helpers.two(this.data[2]);
                      } else if (s2 === "D") {
                        v = parseInt(this.data[2]);
                      } else if (s2 === "Q") {
                        v = Math.floor((calendar2.getMonth() + 3) / 3);
                      } else if (s2 === "HH24" || s2 === "HH") {
                        v = this.data[3];
                        if (v > 12 && this.tokens.indexOf("am/pm") !== -1) {
                          v -= 12;
                        }
                        v = helpers.two(v);
                      } else if (s2 === "HH12") {
                        if (this.data[3] > 12) {
                          v = helpers.two(this.data[3] - 12);
                        } else {
                          v = helpers.two(this.data[3]);
                        }
                      } else if (s2 === "H") {
                        v = this.data[3];
                        if (v > 12 && this.tokens.indexOf("am/pm") !== -1) {
                          v -= 12;
                          v = helpers.two(v);
                        }
                      } else if (s2 === "MI") {
                        v = helpers.two(this.data[4]);
                      } else if (s2 === "SS") {
                        v = helpers.two(this.data[5]);
                      } else if (s2 === "MS") {
                        v = calendar2.getMilliseconds();
                      } else if (s2 === "AM/PM") {
                        if (this.data[3] >= 12) {
                          v = "PM";
                        } else {
                          v = "AM";
                        }
                      } else if (s2 === "WD") {
                        v = helpers_date.weekdays[calendar2.getDay()];
                      }
                      if (v === null) {
                        this.value[i2] = this.tokens[i2];
                      } else {
                        this.value[i2] = v;
                      }
                    };
                    for (var i = 0; i < o.tokens.length; i++) {
                      get.call(o, i);
                    }
                    value = o.value.join("");
                  } else {
                    value = "";
                  }
                }
                return value;
              };
              return obj2;
            }
            var mask = Mask();
            ;
            function Calendar() {
              var Component = function(el, options) {
                if (el.calendar) {
                  return el.calendar.setOptions(options, true);
                }
                var obj2 = { type: "calendar" };
                obj2.options = {};
                obj2.date = null;
                obj2.setOptions = function(options2, reset) {
                  var defaults = {
                    // Render type: [ default | year-month-picker ]
                    type: "default",
                    // Restrictions
                    validRange: null,
                    // Starting weekday - 0 for sunday, 6 for saturday
                    startingDay: null,
                    // Date format
                    format: "DD/MM/YYYY",
                    // Allow keyboard date entry
                    readonly: true,
                    // Today is default
                    today: false,
                    // Show timepicker
                    time: false,
                    // Show the reset button
                    resetButton: true,
                    // Placeholder
                    placeholder: "",
                    // Translations can be done here
                    months: helpers_date.monthsShort,
                    monthsFull: helpers_date.months,
                    weekdays: helpers_date.weekdays,
                    textDone: dictionary.translate("Done"),
                    textReset: dictionary.translate("Reset"),
                    textUpdate: dictionary.translate("Update"),
                    // Value
                    value: null,
                    // Fullscreen (this is automatic set for screensize < 800)
                    fullscreen: false,
                    // Create the calendar closed as default
                    opened: false,
                    // Events
                    onopen: null,
                    onclose: null,
                    onchange: null,
                    onupdate: null,
                    // Internal mode controller
                    mode: null,
                    position: null,
                    // Data type
                    dataType: null,
                    // Controls
                    controls: true,
                    // Auto select
                    autoSelect: true
                  };
                  for (var property in defaults) {
                    if (options2 && options2.hasOwnProperty(property)) {
                      obj2.options[property] = options2[property];
                    } else {
                      if (typeof obj2.options[property] == "undefined" || reset === true) {
                        obj2.options[property] = defaults[property];
                      }
                    }
                  }
                  if (obj2.options.resetButton == false) {
                    calendarReset.style.display = "none";
                  } else {
                    calendarReset.style.display = "";
                  }
                  if (obj2.options.readonly) {
                    el.setAttribute("readonly", "readonly");
                  } else {
                    el.removeAttribute("readonly");
                  }
                  if (obj2.options.placeholder) {
                    el.setAttribute("placeholder", obj2.options.placeholder);
                  } else {
                    el.removeAttribute("placeholder");
                  }
                  if (helpers.isNumeric(obj2.options.value) && obj2.options.value > 0) {
                    obj2.options.value = Component.numToDate(obj2.options.value);
                    obj2.options.dataType = "numeric";
                  }
                  calendarReset.innerHTML = obj2.options.textReset;
                  calendarConfirm.innerHTML = obj2.options.textDone;
                  calendarControlsUpdateButton.innerHTML = obj2.options.textUpdate;
                  el.setAttribute("data-mask", obj2.options.format.toLowerCase());
                  if (!obj2.options.value && obj2.options.today) {
                    var value = Component.now();
                  } else {
                    var value = obj2.options.value;
                  }
                  if (value) {
                    obj2.options.value = null;
                    obj2.setValue(value);
                  }
                  return obj2;
                };
                obj2.open = function(value) {
                  if (!calendar2.classList.contains("jcalendar-focus")) {
                    if (!calendar2.classList.contains("jcalendar-inline")) {
                      Component.current = obj2;
                      Tracking(obj2, true);
                      obj2.getDays();
                      if (obj2.options.type == "year-month-picker") {
                        obj2.getMonths();
                      }
                      if (obj2.options.time) {
                        calendarSelectHour.value = obj2.date[3];
                        calendarSelectMin.value = obj2.date[4];
                      }
                      calendar2.classList.add("jcalendar-focus");
                      if (helpers.getWindowWidth() < 800 || obj2.options.fullscreen) {
                        calendar2.classList.add("jcalendar-fullsize");
                        animation.slideBottom(calendarContent, 1);
                      } else {
                        calendar2.classList.remove("jcalendar-fullsize");
                        var rect = el.getBoundingClientRect();
                        var rectContent = calendarContent.getBoundingClientRect();
                        if (obj2.options.position) {
                          calendarContainer.style.position = "fixed";
                          if (window.innerHeight < rect.bottom + rectContent.height) {
                            calendarContainer.style.top = rect.top - (rectContent.height + 2) + "px";
                          } else {
                            calendarContainer.style.top = rect.top + rect.height + 2 + "px";
                          }
                          calendarContainer.style.left = rect.left + "px";
                        } else {
                          if (window.innerHeight < rect.bottom + rectContent.height) {
                            var d = -1 * (rect.height + rectContent.height + 2);
                            if (d + rect.top < 0) {
                              d = -1 * (rect.top + rect.height);
                            }
                            calendarContainer.style.top = d + "px";
                          } else {
                            calendarContainer.style.top = "2px";
                          }
                          if (window.innerWidth < rect.left + rectContent.width) {
                            var d = window.innerWidth - (rect.left + rectContent.width + 20);
                            calendarContainer.style.left = d + "px";
                          } else {
                            calendarContainer.style.left = "0px";
                          }
                        }
                      }
                      if (typeof obj2.options.onopen == "function") {
                        obj2.options.onopen(el);
                      }
                    }
                  }
                };
                obj2.close = function(ignoreEvents, update) {
                  if (obj2.options.autoSelect !== true && typeof update === "undefined") {
                    update = false;
                  }
                  if (calendar2.classList.contains("jcalendar-focus")) {
                    if (update !== false) {
                      var element = calendar2.querySelector(".jcalendar-selected");
                      if (typeof update == "string") {
                        var value = update;
                      } else if (!element || element.classList.contains("jcalendar-disabled")) {
                        var value = obj2.options.value;
                      } else {
                        var value = obj2.getValue();
                      }
                      obj2.setValue(value);
                    } else {
                      if (obj2.options.value) {
                        let value2 = obj2.options.value;
                        obj2.options.value = "";
                        obj2.setValue(value2);
                      }
                    }
                    if (!ignoreEvents && typeof obj2.options.onclose == "function") {
                      obj2.options.onclose(el);
                    }
                    calendar2.classList.remove("jcalendar-focus");
                    Tracking(obj2, false);
                    Component.current = null;
                  }
                  return obj2.options.value;
                };
                obj2.prev = function() {
                  if (obj2.options.mode == "years") {
                    obj2.date[0] = obj2.date[0] - 12;
                    obj2.getYears();
                  } else if (obj2.options.mode == "months") {
                    obj2.date[0] = parseInt(obj2.date[0]) - 1;
                    obj2.getMonths();
                  } else {
                    if (obj2.date[1] < 2) {
                      obj2.date[0] = obj2.date[0] - 1;
                      obj2.date[1] = 12;
                    } else {
                      obj2.date[1] = obj2.date[1] - 1;
                    }
                    obj2.getDays();
                  }
                };
                obj2.next = function() {
                  if (obj2.options.mode == "years") {
                    obj2.date[0] = parseInt(obj2.date[0]) + 12;
                    obj2.getYears();
                  } else if (obj2.options.mode == "months") {
                    obj2.date[0] = parseInt(obj2.date[0]) + 1;
                    obj2.getMonths();
                  } else {
                    if (obj2.date[1] > 11) {
                      obj2.date[0] = parseInt(obj2.date[0]) + 1;
                      obj2.date[1] = 1;
                    } else {
                      obj2.date[1] = parseInt(obj2.date[1]) + 1;
                    }
                    obj2.getDays();
                  }
                };
                obj2.setToday = function() {
                  var value = (/* @__PURE__ */ new Date()).toISOString().substr(0, 10);
                  obj2.setValue(value);
                  return value;
                };
                obj2.setValue = function(val) {
                  if (!val) {
                    val = "" + val;
                  }
                  var newValue = val;
                  var oldValue = obj2.options.value;
                  if (oldValue != newValue) {
                    if (!newValue) {
                      obj2.date = null;
                      var val = "";
                      el.classList.remove("jcalendar_warning");
                      el.title = "";
                    } else {
                      var value = obj2.setLabel(newValue, obj2.options);
                      var date = newValue.split(" ");
                      if (!date[1]) {
                        date[1] = "00:00:00";
                      }
                      var time = date[1].split(":");
                      var date = date[0].split("-");
                      var y = parseInt(date[0]);
                      var m = parseInt(date[1]);
                      var d = parseInt(date[2]);
                      var h = parseInt(time[0]);
                      var i = parseInt(time[1]);
                      obj2.date = [y, m, d, h, i, 0];
                      var val = obj2.setLabel(newValue, obj2.options);
                      var current = Component.now(new Date(y, m - 1, d), true);
                      if (obj2.options.validRange) {
                        if (!obj2.options.validRange[0] || current >= obj2.options.validRange[0]) {
                          var test1 = true;
                        } else {
                          var test1 = false;
                        }
                        if (!obj2.options.validRange[1] || current <= obj2.options.validRange[1]) {
                          var test2 = true;
                        } else {
                          var test2 = false;
                        }
                        if (!(test1 && test2)) {
                          el.classList.add("jcalendar_warning");
                          el.title = dictionary.translate("Date outside the valid range");
                        } else {
                          el.classList.remove("jcalendar_warning");
                          el.title = "";
                        }
                      } else {
                        el.classList.remove("jcalendar_warning");
                        el.title = "";
                      }
                    }
                    obj2.options.value = newValue;
                    if (typeof obj2.options.onchange == "function") {
                      obj2.options.onchange(el, newValue, oldValue);
                    }
                    if (el.value != val) {
                      el.value = val;
                      if (typeof el.oninput == "function") {
                        el.oninput({
                          type: "input",
                          target: el,
                          value: el.value
                        });
                      }
                    }
                  }
                  obj2.getDays();
                  if (obj2.options.type == "year-month-picker") {
                    obj2.getMonths();
                  }
                };
                obj2.getValue = function() {
                  if (obj2.date) {
                    if (obj2.options.time) {
                      return helpers.two(obj2.date[0]) + "-" + helpers.two(obj2.date[1]) + "-" + helpers.two(obj2.date[2]) + " " + helpers.two(obj2.date[3]) + ":" + helpers.two(obj2.date[4]) + ":" + helpers.two(0);
                    } else {
                      return helpers.two(obj2.date[0]) + "-" + helpers.two(obj2.date[1]) + "-" + helpers.two(obj2.date[2]) + " " + helpers.two(0) + ":" + helpers.two(0) + ":" + helpers.two(0);
                    }
                  } else {
                    return "";
                  }
                };
                obj2.update = function(element, v) {
                  if (element.classList.contains("jcalendar-disabled")) {
                  } else {
                    var elements = calendar2.querySelector(".jcalendar-selected");
                    if (elements) {
                      elements.classList.remove("jcalendar-selected");
                    }
                    element.classList.add("jcalendar-selected");
                    if (element.classList.contains("jcalendar-set-month")) {
                      obj2.date[1] = v;
                      obj2.date[2] = 1;
                    } else {
                      obj2.date[2] = element.innerText;
                    }
                    if (!obj2.options.time) {
                      obj2.close(null, true);
                    } else {
                      obj2.date[3] = calendarSelectHour.value;
                      obj2.date[4] = calendarSelectMin.value;
                    }
                  }
                  updateActions();
                };
                obj2.reset = function() {
                  obj2.setValue("");
                  obj2.date = null;
                  obj2.close(false, false);
                };
                obj2.getDays = function() {
                  obj2.options.mode = "days";
                  var date = /* @__PURE__ */ new Date();
                  var year = obj2.date && helpers.isNumeric(obj2.date[0]) ? obj2.date[0] : parseInt(date.getFullYear());
                  var month = obj2.date && helpers.isNumeric(obj2.date[1]) ? obj2.date[1] : parseInt(date.getMonth()) + 1;
                  var day = obj2.date && helpers.isNumeric(obj2.date[2]) ? obj2.date[2] : parseInt(date.getDate());
                  var hour = obj2.date && helpers.isNumeric(obj2.date[3]) ? obj2.date[3] : parseInt(date.getHours());
                  var min = obj2.date && helpers.isNumeric(obj2.date[4]) ? obj2.date[4] : parseInt(date.getMinutes());
                  obj2.date = [year, month, day, hour, min, 0];
                  calendarLabelYear.innerHTML = year;
                  calendarLabelMonth.innerHTML = obj2.options.months[month - 1];
                  var isCurrentMonthAndYear = date.getMonth() == month - 1 && date.getFullYear() == year ? true : false;
                  var currentDay = date.getDate();
                  var date = new Date(year, month, 0, 0, 0);
                  var numberOfDays = date.getDate();
                  var date = new Date(year, month - 1, 0, 0, 0);
                  var firstDay = date.getDay() + 1;
                  var index = obj2.options.startingDay || 0;
                  firstDay = firstDay - index;
                  calendarBody.innerHTML = "";
                  var row = document.createElement("tr");
                  row.setAttribute("align", "center");
                  calendarBody.appendChild(row);
                  for (var i = 0; i < 7; i++) {
                    var cell = document.createElement("td");
                    cell.classList.add("jcalendar-weekday");
                    cell.innerHTML = obj2.options.weekdays[index].substr(0, 1);
                    row.appendChild(cell);
                    index++;
                    if (index > 6) {
                      index = 0;
                    }
                  }
                  var index = 0;
                  var d = 0;
                  for (var j = 0; j < 6; j++) {
                    var row = document.createElement("tr");
                    row.setAttribute("align", "center");
                    row.style.height = "34px";
                    for (var i = 0; i < 7; i++) {
                      var cell = document.createElement("td");
                      cell.classList.add("jcalendar-set-day");
                      if (index >= firstDay && index < firstDay + numberOfDays) {
                        d++;
                        cell.innerHTML = d;
                        if (d == day) {
                          cell.classList.add("jcalendar-selected");
                        }
                        if (isCurrentMonthAndYear && currentDay == d) {
                          cell.style.fontWeight = "bold";
                        }
                        var current = Component.now(new Date(year, month - 1, d), true);
                        if (obj2.options.validRange) {
                          if (!obj2.options.validRange[0] || current >= obj2.options.validRange[0]) {
                            var test1 = true;
                          } else {
                            var test1 = false;
                          }
                          if (!obj2.options.validRange[1] || current <= obj2.options.validRange[1]) {
                            var test2 = true;
                          } else {
                            var test2 = false;
                          }
                          if (!(test1 && test2)) {
                            cell.classList.add("jcalendar-disabled");
                          }
                        }
                      }
                      row.appendChild(cell);
                      index++;
                    }
                    calendarBody.appendChild(row);
                  }
                  if (obj2.options.time) {
                    calendarControlsTime.style.display = "";
                  } else {
                    calendarControlsTime.style.display = "none";
                  }
                  updateActions();
                };
                obj2.getMonths = function() {
                  obj2.options.mode = "months";
                  var months = obj2.options.months;
                  var value = obj2.options.value;
                  var date = /* @__PURE__ */ new Date();
                  var currentYear = parseInt(date.getFullYear());
                  var currentMonth = parseInt(date.getMonth()) + 1;
                  var selectedYear = obj2.date && helpers.isNumeric(obj2.date[0]) ? obj2.date[0] : currentYear;
                  var selectedMonth = obj2.date && helpers.isNumeric(obj2.date[1]) ? obj2.date[1] : currentMonth;
                  calendarLabelYear.innerHTML = obj2.date[0];
                  calendarLabelMonth.innerHTML = months[selectedMonth - 1];
                  var table = document.createElement("table");
                  table.setAttribute("width", "100%");
                  var row = null;
                  for (var i = 0; i < 12; i++) {
                    if (!(i % 4)) {
                      var row = document.createElement("tr");
                      row.setAttribute("align", "center");
                      table.appendChild(row);
                    }
                    var cell = document.createElement("td");
                    cell.classList.add("jcalendar-set-month");
                    cell.setAttribute("data-value", i + 1);
                    cell.innerText = months[i];
                    if (obj2.options.validRange) {
                      var current = selectedYear + "-" + helpers.two(i + 1);
                      if (!obj2.options.validRange[0] || current >= obj2.options.validRange[0].substr(0, 7)) {
                        var test1 = true;
                      } else {
                        var test1 = false;
                      }
                      if (!obj2.options.validRange[1] || current <= obj2.options.validRange[1].substr(0, 7)) {
                        var test2 = true;
                      } else {
                        var test2 = false;
                      }
                      if (!(test1 && test2)) {
                        cell.classList.add("jcalendar-disabled");
                      }
                    }
                    if (i + 1 == selectedMonth) {
                      cell.classList.add("jcalendar-selected");
                    }
                    if (currentYear == selectedYear && i + 1 == currentMonth) {
                      cell.style.fontWeight = "bold";
                    }
                    row.appendChild(cell);
                  }
                  calendarBody.innerHTML = '<tr><td colspan="7"></td></tr>';
                  calendarBody.children[0].children[0].appendChild(table);
                  updateActions();
                };
                obj2.getYears = function() {
                  obj2.options.mode = "years";
                  var date = /* @__PURE__ */ new Date();
                  var currentYear = date.getFullYear();
                  var selectedYear = obj2.date && helpers.isNumeric(obj2.date[0]) ? obj2.date[0] : parseInt(date.getFullYear());
                  var y = [];
                  for (var i = 0; i < 25; i++) {
                    y[i] = parseInt(obj2.date[0]) + (i - 12);
                  }
                  var table = document.createElement("table");
                  table.setAttribute("width", "100%");
                  for (var i = 0; i < 25; i++) {
                    if (!(i % 5)) {
                      var row = document.createElement("tr");
                      row.setAttribute("align", "center");
                      table.appendChild(row);
                    }
                    var cell = document.createElement("td");
                    cell.classList.add("jcalendar-set-year");
                    cell.innerText = y[i];
                    if (selectedYear == y[i]) {
                      cell.classList.add("jcalendar-selected");
                    }
                    if (currentYear == y[i]) {
                      cell.style.fontWeight = "bold";
                    }
                    row.appendChild(cell);
                  }
                  calendarBody.innerHTML = '<tr><td colspan="7"></td></tr>';
                  calendarBody.firstChild.firstChild.appendChild(table);
                  updateActions();
                };
                obj2.setLabel = function(value, mixed) {
                  return Component.getDateString(value, mixed);
                };
                obj2.fromFormatted = function(value, format) {
                  return Component.extractDateFromString(value, format);
                };
                var mouseUpControls = function(e) {
                  var element = helpers.findElement(e.target, "jcalendar-container");
                  if (element) {
                    var action = e.target.className;
                    if (action == "jcalendar-prev") {
                      obj2.prev();
                    } else if (action == "jcalendar-next") {
                      obj2.next();
                    } else if (action == "jcalendar-month") {
                      obj2.getMonths();
                    } else if (action == "jcalendar-year") {
                      obj2.getYears();
                    } else if (action == "jcalendar-set-year") {
                      obj2.date[0] = e.target.innerText;
                      if (obj2.options.type == "year-month-picker") {
                        obj2.getMonths();
                      } else {
                        obj2.getDays();
                      }
                    } else if (e.target.classList.contains("jcalendar-set-month")) {
                      var month = parseInt(e.target.getAttribute("data-value"));
                      if (obj2.options.type == "year-month-picker") {
                        obj2.update(e.target, month);
                      } else {
                        obj2.date[1] = month;
                        obj2.getDays();
                      }
                    } else if (action == "jcalendar-confirm" || action == "jcalendar-update" || action == "jcalendar-close") {
                      obj2.close(null, true);
                    } else if (action == "jcalendar-backdrop") {
                      obj2.close(false, false);
                    } else if (action == "jcalendar-reset") {
                      obj2.reset();
                    } else if (e.target.classList.contains("jcalendar-set-day") && e.target.innerText) {
                      obj2.update(e.target);
                    }
                  } else {
                    obj2.close(false, false);
                  }
                };
                var keyUpControls = function(e) {
                  if (e.target.value && e.target.value.length > 3) {
                    var test = Component.extractDateFromString(e.target.value, obj2.options.format);
                    if (test) {
                      obj2.setValue(test);
                    }
                  }
                };
                var updateActions = function() {
                  var currentDay = calendar2.querySelector(".jcalendar-selected");
                  if (currentDay && currentDay.classList.contains("jcalendar-disabled")) {
                    calendarControlsUpdateButton.setAttribute("disabled", "disabled");
                    calendarSelectHour.setAttribute("disabled", "disabled");
                    calendarSelectMin.setAttribute("disabled", "disabled");
                  } else {
                    calendarControlsUpdateButton.removeAttribute("disabled");
                    calendarSelectHour.removeAttribute("disabled");
                    calendarSelectMin.removeAttribute("disabled");
                  }
                  if (typeof obj2.options.onupdate == "function") {
                    obj2.options.onupdate(el, obj2.getValue());
                  }
                };
                var calendar2 = null;
                var calendarReset = null;
                var calendarConfirm = null;
                var calendarContainer = null;
                var calendarContent = null;
                var calendarLabelYear = null;
                var calendarLabelMonth = null;
                var calendarTable = null;
                var calendarBody = null;
                var calendarControls = null;
                var calendarControlsTime = null;
                var calendarControlsUpdate = null;
                var calendarControlsUpdateButton = null;
                var calendarSelectHour = null;
                var calendarSelectMin = null;
                var init = function() {
                  if (el.tagName == "INPUT" && el.value) {
                    options.value = el.value;
                  }
                  calendarReset = document.createElement("div");
                  calendarReset.className = "jcalendar-reset";
                  calendarConfirm = document.createElement("div");
                  calendarConfirm.className = "jcalendar-confirm";
                  calendarControls = document.createElement("div");
                  calendarControls.className = "jcalendar-controls";
                  calendarControls.style.borderBottom = "1px solid #ddd";
                  calendarControls.appendChild(calendarReset);
                  calendarControls.appendChild(calendarConfirm);
                  calendarContainer = document.createElement("div");
                  calendarContainer.className = "jcalendar-container";
                  calendarContent = document.createElement("div");
                  calendarContent.className = "jcalendar-content";
                  calendarContainer.appendChild(calendarContent);
                  if (el.tagName == "DIV") {
                    calendar2 = el;
                    calendar2.classList.add("jcalendar-inline");
                  } else {
                    calendarContent.appendChild(calendarControls);
                    calendar2 = document.createElement("div");
                    calendar2.className = "jcalendar";
                  }
                  calendar2.classList.add("jcalendar-container");
                  calendar2.appendChild(calendarContainer);
                  var calendarTableContainer = document.createElement("div");
                  calendarTableContainer.className = "jcalendar-table";
                  calendarContent.appendChild(calendarTableContainer);
                  var calendarHeaderPrev = document.createElement("td");
                  calendarHeaderPrev.setAttribute("colspan", "2");
                  calendarHeaderPrev.className = "jcalendar-prev";
                  calendarLabelYear = document.createElement("span");
                  calendarLabelYear.className = "jcalendar-year";
                  calendarLabelMonth = document.createElement("span");
                  calendarLabelMonth.className = "jcalendar-month";
                  var calendarHeaderTitle = document.createElement("td");
                  calendarHeaderTitle.className = "jcalendar-header";
                  calendarHeaderTitle.setAttribute("colspan", "3");
                  calendarHeaderTitle.appendChild(calendarLabelMonth);
                  calendarHeaderTitle.appendChild(calendarLabelYear);
                  var calendarHeaderNext = document.createElement("td");
                  calendarHeaderNext.setAttribute("colspan", "2");
                  calendarHeaderNext.className = "jcalendar-next";
                  var calendarHeader = document.createElement("thead");
                  var calendarHeaderRow = document.createElement("tr");
                  calendarHeaderRow.appendChild(calendarHeaderPrev);
                  calendarHeaderRow.appendChild(calendarHeaderTitle);
                  calendarHeaderRow.appendChild(calendarHeaderNext);
                  calendarHeader.appendChild(calendarHeaderRow);
                  calendarTable = document.createElement("table");
                  calendarBody = document.createElement("tbody");
                  calendarTable.setAttribute("cellpadding", "0");
                  calendarTable.setAttribute("cellspacing", "0");
                  calendarTable.appendChild(calendarHeader);
                  calendarTable.appendChild(calendarBody);
                  calendarTableContainer.appendChild(calendarTable);
                  calendarSelectHour = document.createElement("select");
                  calendarSelectHour.className = "jcalendar-select";
                  calendarSelectHour.onchange = function() {
                    obj2.date[3] = this.value;
                    if (typeof obj2.options.onupdate == "function") {
                      obj2.options.onupdate(el, obj2.getValue());
                    }
                  };
                  for (var i = 0; i < 24; i++) {
                    var element = document.createElement("option");
                    element.value = i;
                    element.innerHTML = helpers.two(i);
                    calendarSelectHour.appendChild(element);
                  }
                  calendarSelectMin = document.createElement("select");
                  calendarSelectMin.className = "jcalendar-select";
                  calendarSelectMin.onchange = function() {
                    obj2.date[4] = this.value;
                    if (typeof obj2.options.onupdate == "function") {
                      obj2.options.onupdate(el, obj2.getValue());
                    }
                  };
                  for (var i = 0; i < 60; i++) {
                    var element = document.createElement("option");
                    element.value = i;
                    element.innerHTML = helpers.two(i);
                    calendarSelectMin.appendChild(element);
                  }
                  var calendarControlsFooter = document.createElement("div");
                  calendarControlsFooter.className = "jcalendar-controls";
                  calendarControlsTime = document.createElement("div");
                  calendarControlsTime.className = "jcalendar-time";
                  calendarControlsTime.style.maxWidth = "140px";
                  calendarControlsTime.appendChild(calendarSelectHour);
                  calendarControlsTime.appendChild(calendarSelectMin);
                  calendarControlsUpdateButton = document.createElement("button");
                  calendarControlsUpdateButton.setAttribute("type", "button");
                  calendarControlsUpdateButton.className = "jcalendar-update";
                  calendarControlsUpdate = document.createElement("div");
                  calendarControlsUpdate.style.flexGrow = "10";
                  calendarControlsUpdate.appendChild(calendarControlsUpdateButton);
                  calendarControlsFooter.appendChild(calendarControlsTime);
                  if (el.tagName == "INPUT") {
                    calendarControlsFooter.appendChild(calendarControlsUpdate);
                  }
                  calendarContent.appendChild(calendarControlsFooter);
                  var calendarBackdrop = document.createElement("div");
                  calendarBackdrop.className = "jcalendar-backdrop";
                  calendar2.appendChild(calendarBackdrop);
                  el.addEventListener("keyup", keyUpControls);
                  calendar2.addEventListener("swipeleft", function(e) {
                    animation.slideLeft(calendarTable, 0, function() {
                      obj2.next();
                      animation.slideRight(calendarTable, 1);
                    });
                    e.preventDefault();
                    e.stopPropagation();
                  });
                  calendar2.addEventListener("swiperight", function(e) {
                    animation.slideRight(calendarTable, 0, function() {
                      obj2.prev();
                      animation.slideLeft(calendarTable, 1);
                    });
                    e.preventDefault();
                    e.stopPropagation();
                  });
                  if ("ontouchend" in document.documentElement === true) {
                    calendar2.addEventListener("touchend", mouseUpControls);
                    el.addEventListener("touchend", obj2.open);
                  } else {
                    calendar2.addEventListener("mouseup", mouseUpControls);
                    el.addEventListener("mouseup", obj2.open);
                  }
                  if (!Component.hasEvents) {
                    Component.hasEvents = true;
                    document.addEventListener("keydown", Component.keydown);
                  }
                  obj2.setOptions(options);
                  if (el.tagName == "INPUT") {
                    el.parentNode.insertBefore(calendar2, el.nextSibling);
                    el.setAttribute("autocomplete", "off");
                    el.classList.add("jcalendar-input");
                    el.value = obj2.setLabel(obj2.getValue(), obj2.options);
                  } else {
                    obj2.getDays();
                    if (obj2.options.time) {
                      calendarSelectHour.value = obj2.date[3];
                      calendarSelectMin.value = obj2.date[4];
                    }
                  }
                  if (obj2.options.opened == true) {
                    obj2.open();
                  }
                  if (obj2.options.controls == false) {
                    calendarContainer.classList.add("jcalendar-hide-controls");
                  }
                  el.change = obj2.setValue;
                  el.val = function(val) {
                    if (val === void 0) {
                      return obj2.getValue();
                    } else {
                      obj2.setValue(val);
                    }
                  };
                  el.calendar = calendar2.calendar = obj2;
                };
                init();
                return obj2;
              };
              Component.keydown = function(e) {
                var calendar2 = null;
                if (calendar2 = Component.current) {
                  if (e.which == 13) {
                    calendar2.close(false, true);
                  } else if (e.which == 27) {
                    calendar2.close(false, false);
                  }
                }
              };
              Component.prettify = function(d, texts) {
                if (!texts) {
                  var texts = {
                    justNow: "Just now",
                    xMinutesAgo: "{0}m ago",
                    xHoursAgo: "{0}h ago",
                    xDaysAgo: "{0}d ago",
                    xWeeksAgo: "{0}w ago",
                    xMonthsAgo: "{0} mon ago",
                    xYearsAgo: "{0}y ago"
                  };
                }
                if (d.indexOf("GMT") === -1 && d.indexOf("Z") === -1) {
                  d += " GMT";
                }
                var d1 = /* @__PURE__ */ new Date();
                var d2 = new Date(d);
                var total = parseInt((d1 - d2) / 1e3 / 60);
                String.prototype.format = function(o) {
                  return this.replace("{0}", o);
                };
                if (total == 0) {
                  var text = texts.justNow;
                } else if (total < 90) {
                  var text = texts.xMinutesAgo.format(total);
                } else if (total < 1440) {
                  var text = texts.xHoursAgo.format(Math.round(total / 60));
                } else if (total < 20160) {
                  var text = texts.xDaysAgo.format(Math.round(total / 1440));
                } else if (total < 43200) {
                  var text = texts.xWeeksAgo.format(Math.round(total / 10080));
                } else if (total < 1036800) {
                  var text = texts.xMonthsAgo.format(Math.round(total / 43200));
                } else {
                  var text = texts.xYearsAgo.format(Math.round(total / 525600));
                }
                return text;
              };
              Component.prettifyAll = function() {
                var elements = document.querySelectorAll(".prettydate");
                for (var i = 0; i < elements.length; i++) {
                  if (elements[i].getAttribute("data-date")) {
                    elements[i].innerHTML = Component.prettify(elements[i].getAttribute("data-date"));
                  } else {
                    if (elements[i].innerHTML) {
                      elements[i].setAttribute("title", elements[i].innerHTML);
                      elements[i].setAttribute("data-date", elements[i].innerHTML);
                      elements[i].innerHTML = Component.prettify(elements[i].innerHTML);
                    }
                  }
                }
              };
              Component.now = helpers_date.now;
              Component.toArray = helpers_date.toArray;
              Component.dateToNum = helpers_date.dateToNum;
              Component.numToDate = helpers_date.numToDate;
              Component.weekdays = helpers_date.weekdays;
              Component.months = helpers_date.months;
              Component.weekdaysShort = helpers_date.weekdaysShort;
              Component.monthsShort = helpers_date.monthsShort;
              Component.extractDateFromString = mask.extractDateFromString;
              Component.getDateString = mask.getDateString;
              return Component;
            }
            var calendar = Calendar();
            ;
            function Palette() {
              var palette2 = {
                material: [
                  ["#ffebee", "#fce4ec", "#f3e5f5", "#e8eaf6", "#e3f2fd", "#e0f7fa", "#e0f2f1", "#e8f5e9", "#f1f8e9", "#f9fbe7", "#fffde7", "#fff8e1", "#fff3e0", "#fbe9e7", "#efebe9", "#fafafa", "#eceff1"],
                  ["#ffcdd2", "#f8bbd0", "#e1bee7", "#c5cae9", "#bbdefb", "#b2ebf2", "#b2dfdb", "#c8e6c9", "#dcedc8", "#f0f4c3", "#fff9c4", "#ffecb3", "#ffe0b2", "#ffccbc", "#d7ccc8", "#f5f5f5", "#cfd8dc"],
                  ["#ef9a9a", "#f48fb1", "#ce93d8", "#9fa8da", "#90caf9", "#80deea", "#80cbc4", "#a5d6a7", "#c5e1a5", "#e6ee9c", "#fff59d", "#ffe082", "#ffcc80", "#ffab91", "#bcaaa4", "#eeeeee", "#b0bec5"],
                  ["#e57373", "#f06292", "#ba68c8", "#7986cb", "#64b5f6", "#4dd0e1", "#4db6ac", "#81c784", "#aed581", "#dce775", "#fff176", "#ffd54f", "#ffb74d", "#ff8a65", "#a1887f", "#e0e0e0", "#90a4ae"],
                  ["#ef5350", "#ec407a", "#ab47bc", "#5c6bc0", "#42a5f5", "#26c6da", "#26a69a", "#66bb6a", "#9ccc65", "#d4e157", "#ffee58", "#ffca28", "#ffa726", "#ff7043", "#8d6e63", "#bdbdbd", "#78909c"],
                  ["#f44336", "#e91e63", "#9c27b0", "#3f51b5", "#2196f3", "#00bcd4", "#009688", "#4caf50", "#8bc34a", "#cddc39", "#ffeb3b", "#ffc107", "#ff9800", "#ff5722", "#795548", "#9e9e9e", "#607d8b"],
                  ["#e53935", "#d81b60", "#8e24aa", "#3949ab", "#1e88e5", "#00acc1", "#00897b", "#43a047", "#7cb342", "#c0ca33", "#fdd835", "#ffb300", "#fb8c00", "#f4511e", "#6d4c41", "#757575", "#546e7a"],
                  ["#d32f2f", "#c2185b", "#7b1fa2", "#303f9f", "#1976d2", "#0097a7", "#00796b", "#388e3c", "#689f38", "#afb42b", "#fbc02d", "#ffa000", "#f57c00", "#e64a19", "#5d4037", "#616161", "#455a64"],
                  ["#c62828", "#ad1457", "#6a1b9a", "#283593", "#1565c0", "#00838f", "#00695c", "#2e7d32", "#558b2f", "#9e9d24", "#f9a825", "#ff8f00", "#ef6c00", "#d84315", "#4e342e", "#424242", "#37474f"],
                  ["#b71c1c", "#880e4f", "#4a148c", "#1a237e", "#0d47a1", "#006064", "#004d40", "#1b5e20", "#33691e", "#827717", "#f57f17", "#ff6f00", "#e65100", "#bf360c", "#3e2723", "#212121", "#263238"]
                ],
                fire: [
                  ["0b1a6d", "840f38", "b60718", "de030b", "ff0c0c", "fd491c", "fc7521", "faa331", "fbb535", "ffc73a"],
                  ["071147", "5f0b28", "930513", "be0309", "ef0000", "fa3403", "fb670b", "f9991b", "faad1e", "ffc123"],
                  ["03071e", "370617", "6a040f", "9d0208", "d00000", "dc2f02", "e85d04", "f48c06", "faa307", "ffba08"],
                  ["020619", "320615", "61040d", "8c0207", "bc0000", "c82a02", "d05203", "db7f06", "e19405", "efab00"],
                  ["020515", "2d0513", "58040c", "7f0206", "aa0000", "b62602", "b94903", "c57205", "ca8504", "d89b00"]
                ],
                baby: [
                  ["eddcd2", "fff1e6", "fde2e4", "fad2e1", "c5dedd", "dbe7e4", "f0efeb", "d6e2e9", "bcd4e6", "99c1de"],
                  ["e1c4b3", "ffd5b5", "fab6ba", "f5a8c4", "aacecd", "bfd5cf", "dbd9d0", "baceda", "9dc0db", "7eb1d5"],
                  ["daa990", "ffb787", "f88e95", "f282a9", "8fc4c3", "a3c8be", "cec9b3", "9dbcce", "82acd2", "649dcb"],
                  ["d69070", "ff9c5e", "f66770", "f05f8f", "74bbb9", "87bfae", "c5b993", "83aac3", "699bca", "4d89c2"],
                  ["c97d5d", "f58443", "eb4d57", "e54a7b", "66a9a7", "78ae9c", "b5a67e", "7599b1", "5c88b7", "4978aa"]
                ],
                chart: [
                  ["#C1D37F", "#4C5454", "#FFD275", "#66586F", "#D05D5B", "#C96480", "#95BF8F", "#6EA240", "#0F0F0E", "#EB8258", "#95A3B3", "#995D81"]
                ]
              };
              var Component = function(o) {
                if (palette2[o]) {
                  return palette2[o];
                } else {
                  return palette2.material;
                }
              };
              Component.get = function(o) {
                if (palette2[o]) {
                  return palette2[o];
                } else {
                  return palette2;
                }
              };
              Component.set = function(o, v) {
                palette2[o] = v;
              };
              return Component;
            }
            var palette = Palette();
            ;
            function Tabs(el, options) {
              var obj2 = {};
              obj2.options = {};
              var defaults = {
                data: [],
                position: null,
                allowCreate: false,
                allowChangePosition: false,
                onclick: null,
                onload: null,
                onchange: null,
                oncreate: null,
                ondelete: null,
                onbeforecreate: null,
                onchangeposition: null,
                animation: false,
                hideHeaders: false,
                padding: null,
                palette: null,
                maxWidth: null
              };
              for (var property in defaults) {
                if (options && options.hasOwnProperty(property)) {
                  obj2.options[property] = options[property];
                } else {
                  obj2.options[property] = defaults[property];
                }
              }
              el.classList.add("jtabs");
              var prev = null;
              var next = null;
              var border = null;
              var setBorder = function(index) {
                if (obj2.options.animation) {
                  var rect = obj2.headers.children[index].getBoundingClientRect();
                  if (obj2.options.palette === "modern") {
                    border.style.width = rect.width - 4 + "px";
                    border.style.left = obj2.headers.children[index].offsetLeft + 2 + "px";
                  } else {
                    border.style.width = rect.width + "px";
                    border.style.left = obj2.headers.children[index].offsetLeft + "px";
                  }
                  if (obj2.options.position === "bottom") {
                    border.style.top = "0px";
                  } else {
                    border.style.bottom = "0px";
                  }
                }
              };
              var updateControls = function(x) {
                if (typeof obj2.headers.scrollTo == "function") {
                  obj2.headers.scrollTo({
                    left: x,
                    behavior: "smooth"
                  });
                } else {
                  obj2.headers.scrollLeft = x;
                }
                if (x <= 1) {
                  prev.classList.add("disabled");
                } else {
                  prev.classList.remove("disabled");
                }
                if (x >= obj2.headers.scrollWidth - obj2.headers.offsetWidth) {
                  next.classList.add("disabled");
                } else {
                  next.classList.remove("disabled");
                }
                if (obj2.headers.scrollWidth <= obj2.headers.offsetWidth) {
                  prev.style.display = "none";
                  next.style.display = "none";
                } else {
                  prev.style.display = "";
                  next.style.display = "";
                }
              };
              obj2.setBorder = setBorder;
              obj2.open = function(index) {
                var previous = null;
                for (var i2 = 0; i2 < obj2.headers.children.length; i2++) {
                  if (obj2.headers.children[i2].classList.contains("jtabs-selected")) {
                    previous = i2;
                  }
                  obj2.headers.children[i2].classList.remove("jtabs-selected");
                  if (obj2.content.children[i2]) {
                    obj2.content.children[i2].classList.remove("jtabs-selected");
                  }
                }
                obj2.headers.children[index].classList.add("jtabs-selected");
                if (obj2.content.children[index]) {
                  obj2.content.children[index].classList.add("jtabs-selected");
                }
                if (previous != index && typeof obj2.options.onchange == "function") {
                  if (obj2.content.children[index]) {
                    obj2.options.onchange(el, obj2, index, obj2.headers.children[index], obj2.content.children[index]);
                  }
                }
                if (obj2.options.hideHeaders == true && (obj2.headers.children.length < 3 && obj2.options.allowCreate == false)) {
                  obj2.headers.parentNode.style.display = "none";
                } else {
                  setBorder(index);
                  obj2.headers.parentNode.style.display = "";
                  var x1 = obj2.headers.children[index].offsetLeft;
                  var x2 = x1 + obj2.headers.children[index].offsetWidth;
                  var r1 = obj2.headers.scrollLeft;
                  var r2 = r1 + obj2.headers.offsetWidth;
                  if (!(r1 <= x1 && r2 >= x2)) {
                    updateControls(x1 - 1);
                  }
                }
              };
              obj2.selectIndex = function(a) {
                var index = Array.prototype.indexOf.call(obj2.headers.children, a);
                if (index >= 0) {
                  obj2.open(index);
                }
                return index;
              };
              obj2.rename = function(i2, title) {
                if (!title) {
                  title = prompt("New title", obj2.headers.children[i2].innerText);
                }
                obj2.headers.children[i2].innerText = title;
                obj2.open(i2);
              };
              obj2.create = function(title, url) {
                if (typeof obj2.options.onbeforecreate == "function") {
                  var ret = obj2.options.onbeforecreate(el);
                  if (ret === false) {
                    return false;
                  } else {
                    title = ret;
                  }
                }
                var div = obj2.appendElement(title);
                if (typeof obj2.options.oncreate == "function") {
                  obj2.options.oncreate(el, div);
                }
                setBorder();
                return div;
              };
              obj2.remove = function(index) {
                return obj2.deleteElement(index);
              };
              obj2.nextNumber = function() {
                var num = 0;
                for (var i2 = 0; i2 < obj2.headers.children.length; i2++) {
                  var tmp = obj2.headers.children[i2].innerText.match(/[0-9].*/);
                  if (tmp > num) {
                    num = parseInt(tmp);
                  }
                }
                if (!num) {
                  num = 1;
                } else {
                  num++;
                }
                return num;
              };
              obj2.deleteElement = function(index) {
                if (!obj2.headers.children[index]) {
                  return false;
                } else {
                  obj2.headers.removeChild(obj2.headers.children[index]);
                  obj2.content.removeChild(obj2.content.children[index]);
                }
                obj2.open(0);
                if (typeof obj2.options.ondelete == "function") {
                  obj2.options.ondelete(el, index);
                }
              };
              obj2.appendElement = function(title, cb, openTab) {
                if (!title) {
                  var title = prompt("Title?", "");
                }
                if (title) {
                  var div = document.createElement("div");
                  obj2.content.appendChild(div);
                  var h = document.createElement("div");
                  h.innerHTML = title;
                  h.content = div;
                  obj2.headers.insertBefore(h, obj2.headers.lastChild);
                  if (obj2.options.allowChangePosition) {
                    h.setAttribute("draggable", "true");
                  }
                  if (openTab !== false) {
                    obj2.selectIndex(h);
                  }
                  if (typeof cb == "function") {
                    cb(div, h);
                  }
                  return div;
                }
              };
              obj2.getActive = function() {
                for (var i2 = 0; i2 < obj2.headers.children.length; i2++) {
                  if (obj2.headers.children[i2].classList.contains("jtabs-selected")) {
                    return i2;
                  }
                }
                return 0;
              };
              obj2.updateContent = function(position, newContent) {
                if (typeof newContent !== "string") {
                  var contentItem = newContent;
                } else {
                  var contentItem = document.createElement("div");
                  contentItem.innerHTML = newContent;
                }
                if (obj2.content.children[position].classList.contains("jtabs-selected")) {
                  newContent.classList.add("jtabs-selected");
                }
                obj2.content.replaceChild(newContent, obj2.content.children[position]);
                setBorder();
              };
              obj2.updatePosition = function(f, t, ignoreEvents) {
                if (f > t) {
                  obj2.content.insertBefore(obj2.content.children[f], obj2.content.children[t]);
                } else {
                  obj2.content.insertBefore(obj2.content.children[f], obj2.content.children[t].nextSibling);
                }
                obj2.open(t);
                if (!ignoreEvents && typeof obj2.options.onchangeposition == "function") {
                  obj2.options.onchangeposition(obj2.headers, f, t);
                }
              };
              obj2.move = function(f, t, ignoreEvents) {
                if (f > t) {
                  obj2.headers.insertBefore(obj2.headers.children[f], obj2.headers.children[t]);
                } else {
                  obj2.headers.insertBefore(obj2.headers.children[f], obj2.headers.children[t].nextSibling);
                }
                obj2.updatePosition(f, t, ignoreEvents);
              };
              obj2.setBorder = setBorder;
              obj2.init = function() {
                el.innerHTML = "";
                obj2.headers = document.createElement("div");
                obj2.content = document.createElement("div");
                obj2.headers.classList.add("jtabs-headers");
                obj2.content.classList.add("jtabs-content");
                if (obj2.options.palette) {
                  el.classList.add("jtabs-modern");
                } else {
                  el.classList.remove("jtabs-modern");
                }
                if (obj2.options.padding) {
                  obj2.content.style.padding = parseInt(obj2.options.padding) + "px";
                }
                var header = document.createElement("div");
                header.className = "jtabs-headers-container";
                header.appendChild(obj2.headers);
                if (obj2.options.maxWidth) {
                  header.style.maxWidth = parseInt(obj2.options.maxWidth) + "px";
                }
                var controls = document.createElement("div");
                controls.className = "jtabs-controls";
                controls.setAttribute("draggable", "false");
                header.appendChild(controls);
                if (obj2.options.position == "bottom") {
                  el.appendChild(obj2.content);
                  el.appendChild(header);
                } else {
                  el.appendChild(header);
                  el.appendChild(obj2.content);
                }
                if (obj2.options.allowCreate == true) {
                  var add = document.createElement("div");
                  add.className = "jtabs-add";
                  add.onclick = function() {
                    obj2.create();
                  };
                  controls.appendChild(add);
                }
                prev = document.createElement("div");
                prev.className = "jtabs-prev";
                prev.onclick = function() {
                  updateControls(obj2.headers.scrollLeft - obj2.headers.offsetWidth);
                };
                controls.appendChild(prev);
                next = document.createElement("div");
                next.className = "jtabs-next";
                next.onclick = function() {
                  updateControls(obj2.headers.scrollLeft + obj2.headers.offsetWidth);
                };
                controls.appendChild(next);
                for (var i2 = 0; i2 < obj2.options.data.length; i2++) {
                  if (obj2.options.data[i2].titleElement) {
                    var headerItem = obj2.options.data[i2].titleElement;
                  } else {
                    var headerItem = document.createElement("div");
                  }
                  if (obj2.options.data[i2].icon) {
                    var iconContainer = document.createElement("div");
                    var icon = document.createElement("i");
                    icon.classList.add("material-icons");
                    icon.innerHTML = obj2.options.data[i2].icon;
                    iconContainer.appendChild(icon);
                    headerItem.appendChild(iconContainer);
                  }
                  if (obj2.options.data[i2].title) {
                    var title = document.createTextNode(obj2.options.data[i2].title);
                    headerItem.appendChild(title);
                  }
                  if (obj2.options.data[i2].width) {
                    headerItem.style.width = obj2.options.data[i2].width;
                  }
                  if (obj2.options.data[i2].contentElement) {
                    var contentItem = obj2.options.data[i2].contentElement;
                  } else {
                    var contentItem = document.createElement("div");
                    contentItem.innerHTML = obj2.options.data[i2].content;
                  }
                  obj2.headers.appendChild(headerItem);
                  obj2.content.appendChild(contentItem);
                }
                border = document.createElement("div");
                border.className = "jtabs-border";
                obj2.headers.appendChild(border);
                if (obj2.options.animation) {
                  el.classList.add("jtabs-animation");
                }
                obj2.headers.addEventListener("click", function(e) {
                  if (e.target.parentNode.classList.contains("jtabs-headers")) {
                    var target = e.target;
                  } else {
                    if (e.target.tagName == "I") {
                      var target = e.target.parentNode.parentNode;
                    } else {
                      var target = e.target.parentNode;
                    }
                  }
                  var index = obj2.selectIndex(target);
                  if (typeof obj2.options.onclick == "function") {
                    obj2.options.onclick(el, obj2, index, obj2.headers.children[index], obj2.content.children[index]);
                  }
                });
                obj2.headers.addEventListener("contextmenu", function(e) {
                  obj2.selectIndex(e.target);
                });
                if (obj2.headers.children.length) {
                  obj2.open(0);
                }
                updateControls(0);
                if (obj2.options.allowChangePosition == true) {
                  Sorting(obj2.headers, {
                    direction: 1,
                    ondrop: function(a, b, c) {
                      obj2.updatePosition(b, c);
                    }
                  });
                }
                if (typeof obj2.options.onload == "function") {
                  obj2.options.onload(el, obj2);
                }
              };
              if (el.children[0] && el.children[0].children.length) {
                for (var i = 0; i < el.children[0].children.length; i++) {
                  var item = obj2.options.data && obj2.options.data[i] ? obj2.options.data[i] : {};
                  if (el.children[1] && el.children[1].children[i]) {
                    item.titleElement = el.children[0].children[i];
                    item.contentElement = el.children[1].children[i];
                  } else {
                    item.contentElement = el.children[0].children[i];
                  }
                  obj2.options.data[i] = item;
                }
              }
              var loadingRemoteData = false;
              if (obj2.options.data) {
                for (var i = 0; i < obj2.options.data.length; i++) {
                  if (obj2.options.data[i].url) {
                    ajax({
                      url: obj2.options.data[i].url,
                      type: "GET",
                      dataType: "text/html",
                      index: i,
                      success: function(result) {
                        obj2.options.data[this.index].content = result;
                      },
                      complete: function() {
                        obj2.init();
                      }
                    });
                    loadingRemoteData = true;
                  }
                }
              }
              if (!loadingRemoteData) {
                obj2.init();
              }
              el.tabs = obj2;
              return obj2;
            }
            ;
            function Color(el, options) {
              if (el.color) {
                return el.color.setOptions(options, true);
              }
              var obj2 = { type: "color" };
              obj2.options = {};
              var container = null;
              var backdrop = null;
              var content = null;
              var resetButton = null;
              var closeButton = null;
              var tabs = null;
              var jsuitesTabs = null;
              obj2.setOptions = function(options2, reset) {
                var defaults = {
                  placeholder: "",
                  value: null,
                  onopen: null,
                  onclose: null,
                  onchange: null,
                  closeOnChange: true,
                  palette: null,
                  position: null,
                  doneLabel: "Done",
                  resetLabel: "Reset",
                  fullscreen: false,
                  opened: false
                };
                if (!options2) {
                  options2 = {};
                }
                if (options2 && !options2.palette) {
                  options2.palette = palette();
                }
                for (var property in defaults) {
                  if (options2 && options2.hasOwnProperty(property)) {
                    obj2.options[property] = options2[property];
                  } else {
                    if (typeof obj2.options[property] == "undefined" || reset === true) {
                      obj2.options[property] = defaults[property];
                    }
                  }
                }
                if (resetButton) {
                  resetButton.innerHTML = obj2.options.resetLabel;
                }
                if (closeButton) {
                  closeButton.innerHTML = obj2.options.doneLabel;
                }
                if (obj2.options.palette && jsuitesTabs) {
                  jsuitesTabs.updateContent(0, table());
                }
                if (typeof obj2.options.value === "string") {
                  el.value = obj2.options.value;
                  if (el.tagName === "INPUT") {
                    el.style.color = el.value;
                    el.style.backgroundColor = el.value;
                  }
                }
                if (obj2.options.placeholder) {
                  el.setAttribute("placeholder", obj2.options.placeholder);
                } else {
                  if (el.getAttribute("placeholder")) {
                    el.removeAttribute("placeholder");
                  }
                }
                return obj2;
              };
              obj2.select = function(color) {
                var selected = container.querySelector(".jcolor-selected");
                if (selected) {
                  selected.classList.remove("jcolor-selected");
                }
                if (obj2.values[color]) {
                  obj2.values[color].classList.add("jcolor-selected");
                }
                obj2.options.value = color;
              };
              obj2.open = function() {
                if (!container.classList.contains("jcolor-focus")) {
                  Tracking(obj2, true);
                  container.classList.add("jcolor-focus");
                  if (obj2.options.value) {
                    obj2.select(obj2.options.value);
                  }
                  content.style.marginTop = "";
                  content.style.marginLeft = "";
                  var rectContent = content.getBoundingClientRect();
                  var availableWidth = helpers.getWindowWidth();
                  var availableHeight = helpers.getWindowHeight();
                  if (availableWidth < 800 || obj2.options.fullscreen == true) {
                    content.classList.add("jcolor-fullscreen");
                    animation.slideBottom(content, 1);
                    backdrop.style.display = "block";
                  } else {
                    if (content.classList.contains("jcolor-fullscreen")) {
                      content.classList.remove("jcolor-fullscreen");
                      backdrop.style.display = "";
                    }
                    if (obj2.options.position) {
                      content.style.position = "fixed";
                    } else {
                      content.style.position = "";
                    }
                    if (rectContent.left + rectContent.width > availableWidth) {
                      content.style.marginLeft = -1 * (rectContent.left + rectContent.width - (availableWidth - 20)) + "px";
                    }
                    if (rectContent.top + rectContent.height > availableHeight) {
                      content.style.marginTop = -1 * (rectContent.top + rectContent.height - (availableHeight - 20)) + "px";
                    }
                  }
                  if (typeof obj2.options.onopen == "function") {
                    obj2.options.onopen(el, obj2);
                  }
                  jsuitesTabs.setBorder(jsuitesTabs.getActive());
                  if (obj2.options.value) {
                    var rgb = HexToRgb(obj2.options.value);
                    rgbInputs.forEach(function(rgbInput, index) {
                      rgbInput.value = rgb[index];
                      rgbInput.dispatchEvent(new Event("input"));
                    });
                  }
                }
              };
              obj2.close = function(ignoreEvents) {
                if (container.classList.contains("jcolor-focus")) {
                  container.classList.remove("jcolor-focus");
                  backdrop.style.display = "";
                  if (!ignoreEvents && typeof obj2.options.onclose == "function") {
                    obj2.options.onclose(el, obj2);
                  }
                  Tracking(obj2, false);
                }
                return obj2.options.value;
              };
              obj2.setValue = function(color) {
                if (!color) {
                  color = "";
                }
                if (color != obj2.options.value) {
                  obj2.options.value = color;
                  slidersResult = color;
                  obj2.select(color);
                  if (typeof obj2.options.onchange == "function") {
                    obj2.options.onchange(el, color, obj2);
                  }
                  if (el.value != obj2.options.value) {
                    el.value = obj2.options.value;
                    if (el.tagName === "INPUT") {
                      el.style.color = el.value;
                      el.style.backgroundColor = el.value;
                    }
                    if (typeof el.oninput == "function") {
                      el.oninput({
                        type: "input",
                        target: el,
                        value: el.value
                      });
                    }
                  }
                  if (obj2.options.closeOnChange == true) {
                    obj2.close();
                  }
                }
              };
              obj2.getValue = function() {
                return obj2.options.value;
              };
              var backdropClickControl = false;
              var decToHex = function(num) {
                var hex = num.toString(16);
                return hex.length === 1 ? "0" + hex : hex;
              };
              var rgbToHex = function(r, g, b) {
                return "#" + decToHex(r) + decToHex(g) + decToHex(b);
              };
              var hexToDec = function(hex) {
                return parseInt("0x" + hex);
              };
              var HexToRgb = function(hex) {
                return [hexToDec(hex.substr(1, 2)), hexToDec(hex.substr(3, 2)), hexToDec(hex.substr(5, 2))];
              };
              var table = function() {
                var tableContainer = document.createElement("div");
                tableContainer.className = "jcolor-grid";
                obj2.values = [];
                var t = document.createElement("table");
                t.setAttribute("cellpadding", "7");
                t.setAttribute("cellspacing", "0");
                for (var j = 0; j < obj2.options.palette.length; j++) {
                  var tr = document.createElement("tr");
                  for (var i = 0; i < obj2.options.palette[j].length; i++) {
                    var td = document.createElement("td");
                    var color = obj2.options.palette[j][i];
                    if (color.length < 7 && color.substr(0, 1) !== "#") {
                      color = "#" + color;
                    }
                    td.style.backgroundColor = color;
                    td.setAttribute("data-value", color);
                    td.innerHTML = "";
                    tr.appendChild(td);
                    if (obj2.options.value == color) {
                      td.classList.add("jcolor-selected");
                    }
                    obj2.values[color] = td;
                  }
                  t.appendChild(tr);
                }
                tableContainer.appendChild(t);
                return tableContainer;
              };
              var canvas = document.createElement("canvas");
              canvas.width = 200;
              canvas.height = 160;
              var context = canvas.getContext("2d");
              var resizeCanvas = function() {
                var m = tabs.firstChild.getBoundingClientRect();
                canvas.width = m.width - 14;
                gradient();
              };
              var gradient = function() {
                var g = context.createLinearGradient(0, 0, canvas.width, 0);
                g.addColorStop(0, "rgb(255,0,0)");
                g.addColorStop(0.15, "rgb(255,0,255)");
                g.addColorStop(0.33, "rgb(0,0,255)");
                g.addColorStop(0.49, "rgb(0,255,255)");
                g.addColorStop(0.67, "rgb(0,255,0)");
                g.addColorStop(0.84, "rgb(255,255,0)");
                g.addColorStop(1, "rgb(255,0,0)");
                context.fillStyle = g;
                context.fillRect(0, 0, canvas.width, canvas.height);
                g = context.createLinearGradient(0, 0, 0, canvas.height);
                g.addColorStop(0, "rgba(255,255,255,1)");
                g.addColorStop(0.5, "rgba(255,255,255,0)");
                g.addColorStop(0.5, "rgba(0,0,0,0)");
                g.addColorStop(1, "rgba(0,0,0,1)");
                context.fillStyle = g;
                context.fillRect(0, 0, canvas.width, canvas.height);
              };
              var hsl = function() {
                var element = document.createElement("div");
                element.className = "jcolor-hsl";
                var point = document.createElement("div");
                point.className = "jcolor-point";
                var div = document.createElement("div");
                div.appendChild(canvas);
                div.appendChild(point);
                element.appendChild(div);
                var update = function(buttons, x, y) {
                  if (buttons === 1) {
                    var rect = element.getBoundingClientRect();
                    var left = x - rect.left;
                    var top = y - rect.top;
                    if (left < 0) {
                      left = 0;
                    }
                    if (top < 0) {
                      top = 0;
                    }
                    if (left > rect.width) {
                      left = rect.width;
                    }
                    if (top > rect.height) {
                      top = rect.height;
                    }
                    point.style.left = left + "px";
                    point.style.top = top + "px";
                    var pixel = context.getImageData(left, top, 1, 1).data;
                    slidersResult = rgbToHex(pixel[0], pixel[1], pixel[2]);
                  }
                };
                element.addEventListener("mousedown", function(e) {
                  update(e.buttons, e.clientX, e.clientY);
                });
                element.addEventListener("mousemove", function(e) {
                  update(e.buttons, e.clientX, e.clientY);
                });
                element.addEventListener("touchmove", function(e) {
                  update(1, e.changedTouches[0].clientX, e.changedTouches[0].clientY);
                });
                return element;
              };
              var slidersResult = "";
              var rgbInputs = [];
              var changeInputColors = function() {
                if (slidersResult !== "") {
                  for (var j = 0; j < rgbInputs.length; j++) {
                    var currentColor = HexToRgb(slidersResult);
                    currentColor[j] = 0;
                    var newGradient = "linear-gradient(90deg, rgb(";
                    newGradient += currentColor.join(", ");
                    newGradient += "), rgb(";
                    currentColor[j] = 255;
                    newGradient += currentColor.join(", ");
                    newGradient += "))";
                    rgbInputs[j].style.backgroundImage = newGradient;
                  }
                }
              };
              var sliders = function() {
                var slidersElement = document.createElement("div");
                slidersElement.className = "jcolor-sliders";
                var slidersBody = document.createElement("div");
                var createSliderInput = function(name) {
                  var inputContainer = document.createElement("div");
                  inputContainer.className = "jcolor-sliders-input-container";
                  var label = document.createElement("label");
                  label.innerText = name;
                  var subContainer = document.createElement("div");
                  subContainer.className = "jcolor-sliders-input-subcontainer";
                  var input = document.createElement("input");
                  input.type = "range";
                  input.min = 0;
                  input.max = 255;
                  input.value = 0;
                  inputContainer.appendChild(label);
                  subContainer.appendChild(input);
                  var value = document.createElement("div");
                  value.innerText = input.value;
                  input.addEventListener("input", function() {
                    value.innerText = input.value;
                  });
                  subContainer.appendChild(value);
                  inputContainer.appendChild(subContainer);
                  slidersBody.appendChild(inputContainer);
                  return input;
                };
                rgbInputs = [
                  createSliderInput("Red"),
                  createSliderInput("Green"),
                  createSliderInput("Blue")
                ];
                slidersElement.appendChild(slidersBody);
                var slidersResultColor = document.createElement("div");
                slidersResultColor.className = "jcolor-sliders-final-color";
                var resultElement = document.createElement("div");
                resultElement.style.visibility = "hidden";
                resultElement.innerText = "a";
                slidersResultColor.appendChild(resultElement);
                var updateResult = function() {
                  var resultColor = rgbToHex(parseInt(rgbInputs[0].value), parseInt(rgbInputs[1].value), parseInt(rgbInputs[2].value));
                  resultElement.innerText = resultColor;
                  resultElement.style.color = resultColor;
                  resultElement.style.removeProperty("visibility");
                  slidersResult = resultColor;
                };
                rgbInputs.forEach(function(rgbInput) {
                  rgbInput.addEventListener("input", function() {
                    updateResult();
                    changeInputColors();
                  });
                });
                slidersElement.appendChild(slidersResultColor);
                return slidersElement;
              };
              var init = function() {
                obj2.setOptions(options);
                if (el.tagName == "INPUT") {
                  el.classList.add("jcolor-input");
                  el.readOnly = true;
                }
                container = document.createElement("div");
                container.className = "jcolor";
                backdrop = document.createElement("div");
                backdrop.className = "jcolor-backdrop";
                container.appendChild(backdrop);
                content = document.createElement("div");
                content.className = "jcolor-content";
                var controls = document.createElement("div");
                controls.className = "jcolor-controls";
                content.appendChild(controls);
                resetButton = document.createElement("div");
                resetButton.className = "jcolor-reset";
                resetButton.innerHTML = obj2.options.resetLabel;
                controls.appendChild(resetButton);
                closeButton = document.createElement("div");
                closeButton.className = "jcolor-close";
                closeButton.innerHTML = obj2.options.doneLabel;
                controls.appendChild(closeButton);
                tabs = document.createElement("div");
                content.appendChild(tabs);
                jsuitesTabs = Tabs(tabs, {
                  animation: true,
                  data: [
                    {
                      title: "Grid",
                      contentElement: table()
                    },
                    {
                      title: "Spectrum",
                      contentElement: hsl()
                    },
                    {
                      title: "Sliders",
                      contentElement: sliders()
                    }
                  ],
                  onchange: function(element, instance, index) {
                    if (index === 1) {
                      resizeCanvas();
                    } else {
                      var color = slidersResult !== "" ? slidersResult : obj2.getValue();
                      if (index === 2 && color) {
                        var rgb = HexToRgb(color);
                        rgbInputs.forEach(function(rgbInput, index2) {
                          rgbInput.value = rgb[index2];
                          rgbInput.dispatchEvent(new Event("input"));
                        });
                      }
                    }
                  },
                  palette: "modern"
                });
                container.appendChild(content);
                if (el.tagName == "INPUT") {
                  el.parentNode.insertBefore(container, el.nextSibling);
                } else {
                  el.appendChild(container);
                }
                container.addEventListener("click", function(e) {
                  if (e.target.tagName == "TD") {
                    var value = e.target.getAttribute("data-value");
                    if (value) {
                      obj2.setValue(value);
                    }
                  } else if (e.target.classList.contains("jcolor-reset")) {
                    obj2.setValue("");
                    obj2.close();
                  } else if (e.target.classList.contains("jcolor-close")) {
                    if (jsuitesTabs.getActive() > 0) {
                      obj2.setValue(slidersResult);
                    }
                    obj2.close();
                  } else if (e.target.classList.contains("jcolor-backdrop")) {
                    obj2.close();
                  } else {
                    obj2.open();
                  }
                });
                el.addEventListener("mouseup", function(e) {
                  obj2.open();
                });
                window.addEventListener("resize", function() {
                  if (container.classList.contains("jcolor-focus") && jsuitesTabs.getActive() == 1) {
                    resizeCanvas();
                  }
                });
                if (obj2.options.opened == true) {
                  obj2.open();
                }
                el.change = obj2.setValue;
                el.val = function(val) {
                  if (val === void 0) {
                    return obj2.getValue();
                  } else {
                    obj2.setValue(val);
                  }
                };
                el.color = obj2;
                container.color = obj2;
              };
              obj2.toHex = function(rgb) {
                var hex = function(x) {
                  return ("0" + parseInt(x).toString(16)).slice(-2);
                };
                if (rgb) {
                  if (/^#[0-9A-F]{6}$/i.test(rgb)) {
                    return rgb;
                  } else {
                    rgb = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
                    if (rgb && rgb.length) {
                      return "#" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);
                    } else {
                      return "";
                    }
                  }
                }
              };
              init();
              return obj2;
            }
            ;
            function Contextmenu() {
              var Component = function(el, options) {
                var obj2 = { type: "contextmenu" };
                obj2.options = {};
                var defaults = {
                  items: null,
                  onclick: null
                };
                for (var property in defaults) {
                  if (options && options.hasOwnProperty(property)) {
                    obj2.options[property] = options[property];
                  } else {
                    obj2.options[property] = defaults[property];
                  }
                }
                el.classList.add("jcontextmenu");
                obj2.open = function(e, items) {
                  if (items) {
                    obj2.options.items = items;
                    obj2.create(items);
                  }
                  if (Component.current) {
                    Component.current.close();
                  }
                  Tracking(obj2, true);
                  el.classList.add("jcontextmenu-focus");
                  Component.current = obj2;
                  if (obj2.options.items && obj2.options.items.length > 0 || el.children.length) {
                    if (e.target) {
                      if (e.changedTouches && e.changedTouches[0]) {
                        x = e.changedTouches[0].clientX;
                        y = e.changedTouches[0].clientY;
                      } else {
                        var x = e.clientX;
                        var y = e.clientY;
                      }
                    } else {
                      var x = e.x;
                      var y = e.y;
                    }
                    var rect = el.getBoundingClientRect();
                    if (window.innerHeight < y + rect.height) {
                      var h = y - rect.height;
                      if (h < 0) {
                        h = 0;
                      }
                      el.style.top = h + "px";
                    } else {
                      el.style.top = y + "px";
                    }
                    if (window.innerWidth < x + rect.width) {
                      if (x - rect.width > 0) {
                        el.style.left = x - rect.width + "px";
                      } else {
                        el.style.left = "10px";
                      }
                    } else {
                      el.style.left = x + "px";
                    }
                  }
                };
                obj2.isOpened = function() {
                  return el.classList.contains("jcontextmenu-focus") ? true : false;
                };
                obj2.close = function() {
                  if (el.classList.contains("jcontextmenu-focus")) {
                    el.classList.remove("jcontextmenu-focus");
                  }
                  Tracking(obj2, false);
                };
                obj2.create = function(items) {
                  el.innerHTML = "";
                  var itemHeader = createHeader();
                  el.appendChild(itemHeader);
                  for (var i = 0; i < items.length; i++) {
                    var itemContainer = createItemElement(items[i]);
                    el.appendChild(itemContainer);
                  }
                };
                function createHeader() {
                  var header = document.createElement("div");
                  header.classList.add("header");
                  header.addEventListener("click", function(e) {
                    e.preventDefault();
                    e.stopPropagation();
                  });
                  var title = document.createElement("a");
                  title.classList.add("title");
                  title.innerHTML = dictionary.translate("Menu");
                  header.appendChild(title);
                  var closeButton = document.createElement("a");
                  closeButton.classList.add("close");
                  closeButton.innerHTML = dictionary.translate("close");
                  closeButton.addEventListener("click", function(e) {
                    obj2.close();
                  });
                  header.appendChild(closeButton);
                  return header;
                }
                function createItemElement(item) {
                  if (item.type && (item.type == "line" || item.type == "divisor")) {
                    var itemContainer = document.createElement("hr");
                  } else {
                    var itemContainer = document.createElement("div");
                    var itemText = document.createElement("a");
                    itemText.innerHTML = item.title;
                    if (item.tooltip) {
                      itemContainer.setAttribute("title", item.tooltip);
                    }
                    if (item.icon) {
                      itemContainer.setAttribute("data-icon", item.icon);
                    }
                    if (item.id) {
                      itemContainer.id = item.id;
                    }
                    if (item.disabled) {
                      itemContainer.className = "jcontextmenu-disabled";
                    } else if (item.onclick) {
                      itemContainer.method = item.onclick;
                      itemContainer.addEventListener("mousedown", function(e) {
                        e.preventDefault();
                      });
                      itemContainer.addEventListener("mouseup", function(e) {
                        this.method(this, e);
                      });
                    }
                    itemContainer.appendChild(itemText);
                    if (item.submenu) {
                      var itemIconSubmenu = document.createElement("span");
                      itemIconSubmenu.innerHTML = "&#9658;";
                      itemContainer.appendChild(itemIconSubmenu);
                      itemContainer.classList.add("jcontexthassubmenu");
                      var el_submenu = document.createElement("div");
                      el_submenu.classList.add("jcontextmenu");
                      el_submenu.setAttribute("tabindex", "900");
                      var submenu = item.submenu;
                      for (var i = 0; i < submenu.length; i++) {
                        var itemContainerSubMenu = createItemElement(submenu[i]);
                        el_submenu.appendChild(itemContainerSubMenu);
                      }
                      itemContainer.appendChild(el_submenu);
                    } else if (item.shortcut) {
                      var itemShortCut = document.createElement("span");
                      itemShortCut.innerHTML = item.shortcut;
                      itemContainer.appendChild(itemShortCut);
                    }
                  }
                  return itemContainer;
                }
                if (typeof obj2.options.onclick == "function") {
                  el.addEventListener("click", function(e) {
                    obj2.options.onclick(obj2, e);
                  });
                }
                if (obj2.options.items) {
                  obj2.create(obj2.options.items);
                }
                window.addEventListener("mousewheel", function() {
                  obj2.close();
                });
                el.contextmenu = obj2;
                return obj2;
              };
              return Component;
            }
            var contextmenu = Contextmenu();
            ;
            function Dropdown() {
              var Component = function(el, options) {
                if (el.dropdown) {
                  return el.dropdown.setOptions(options, true);
                }
                var obj2 = { type: "dropdown" };
                obj2.options = {};
                var success = function(data, val) {
                  if (data && data.length) {
                    if (obj2.options.sortResults !== false) {
                      if (typeof obj2.options.sortResults == "function") {
                        data.sort(obj2.options.sortResults);
                      } else {
                        data.sort(sortData);
                      }
                    }
                    obj2.setData(data);
                  }
                  if (typeof obj2.options.onload == "function") {
                    obj2.options.onload(el, obj2, data, val);
                  }
                  if (val) {
                    applyValue(val);
                  }
                  if (val === void 0 || val === null) {
                    obj2.options.value = "";
                  }
                  el.value = obj2.options.value;
                  if (obj2.options.opened == true) {
                    obj2.open();
                  }
                };
                var sortData = function(itemA, itemB) {
                  var testA, testB;
                  if (typeof itemA == "string") {
                    testA = itemA;
                  } else {
                    if (itemA.text) {
                      testA = itemA.text;
                    } else if (itemA.name) {
                      testA = itemA.name;
                    }
                  }
                  if (typeof itemB == "string") {
                    testB = itemB;
                  } else {
                    if (itemB.text) {
                      testB = itemB.text;
                    } else if (itemB.name) {
                      testB = itemB.name;
                    }
                  }
                  if (typeof testA == "string" || typeof testB == "string") {
                    if (typeof testA != "string") {
                      testA = "" + testA;
                    }
                    if (typeof testB != "string") {
                      testB = "" + testB;
                    }
                    return testA.localeCompare(testB);
                  } else {
                    return testA - testB;
                  }
                };
                var resetValue = function() {
                  obj2.value = {};
                  for (var i = 0; i < obj2.items.length; i++) {
                    if (obj2.items[i].selected == true) {
                      if (obj2.items[i].element) {
                        obj2.items[i].element.classList.remove("jdropdown-selected");
                      }
                      obj2.items[i].selected = null;
                    }
                  }
                  obj2.options.value = "";
                  el.value = "";
                };
                var applyValue = function(values) {
                  resetValue();
                  if (values !== null) {
                    if (!values) {
                      if (typeof obj2.value[""] !== "undefined") {
                        obj2.value[""] = "";
                      }
                    } else {
                      if (!Array.isArray(values)) {
                        values = ("" + values).split(";");
                      }
                      for (var i = 0; i < values.length; i++) {
                        obj2.value[values[i]] = "";
                      }
                    }
                  }
                  for (var i = 0; i < obj2.items.length; i++) {
                    if (typeof obj2.value[Value(i)] !== "undefined") {
                      if (obj2.items[i].element) {
                        obj2.items[i].element.classList.add("jdropdown-selected");
                      }
                      obj2.items[i].selected = true;
                      obj2.value[Value(i)] = Text(i);
                    }
                  }
                  obj2.options.value = Object.keys(obj2.value).join(";");
                  obj2.header.value = obj2.getText();
                };
                var Value = function(k, v) {
                  if (!obj2.options.format) {
                    var property = "value";
                  } else {
                    var property = "id";
                  }
                  if (obj2.items[k]) {
                    if (v !== void 0) {
                      return obj2.items[k].data[property] = v;
                    } else {
                      return obj2.items[k].data[property];
                    }
                  }
                  return "";
                };
                var Text = function(k, v) {
                  if (!obj2.options.format) {
                    var property = "text";
                  } else {
                    var property = "name";
                  }
                  if (obj2.items[k]) {
                    if (v !== void 0) {
                      return obj2.items[k].data[property] = v;
                    } else {
                      return obj2.items[k].data[property];
                    }
                  }
                  return "";
                };
                var getValue = function() {
                  return Object.keys(obj2.value);
                };
                var getText = function() {
                  var data = [];
                  var k = Object.keys(obj2.value);
                  for (var i = 0; i < k.length; i++) {
                    data.push(obj2.value[k[i]]);
                  }
                  return data;
                };
                obj2.setOptions = function(options2, reset) {
                  if (!options2) {
                    options2 = {};
                  }
                  var defaults = {
                    url: null,
                    data: [],
                    format: 0,
                    multiple: false,
                    autocomplete: false,
                    remoteSearch: false,
                    lazyLoading: false,
                    type: null,
                    width: null,
                    maxWidth: null,
                    opened: false,
                    value: null,
                    placeholder: "",
                    newOptions: false,
                    position: false,
                    onchange: null,
                    onload: null,
                    onopen: null,
                    onclose: null,
                    onfocus: null,
                    onblur: null,
                    oninsert: null,
                    onbeforeinsert: null,
                    onsearch: null,
                    onbeforesearch: null,
                    sortResults: false,
                    autofocus: false
                  };
                  for (var property in defaults) {
                    if (options2 && options2.hasOwnProperty(property)) {
                      obj2.options[property] = options2[property];
                    } else {
                      if (typeof obj2.options[property] == "undefined" || reset === true) {
                        obj2.options[property] = defaults[property];
                      }
                    }
                  }
                  if (obj2.options.remoteSearch == true || obj2.options.type === "searchbar") {
                    obj2.options.autocomplete = true;
                  }
                  if (obj2.options.newOptions == true) {
                    obj2.header.classList.add("jdropdown-add");
                  } else {
                    obj2.header.classList.remove("jdropdown-add");
                  }
                  if (obj2.options.autocomplete == true) {
                    obj2.header.removeAttribute("readonly");
                  } else {
                    obj2.header.setAttribute("readonly", "readonly");
                  }
                  if (obj2.options.placeholder) {
                    obj2.header.setAttribute("placeholder", obj2.options.placeholder);
                  } else {
                    obj2.header.removeAttribute("placeholder");
                  }
                  el.classList.remove("jdropdown-searchbar");
                  el.classList.remove("jdropdown-picker");
                  el.classList.remove("jdropdown-list");
                  if (obj2.options.type == "searchbar") {
                    el.classList.add("jdropdown-searchbar");
                  } else if (obj2.options.type == "list") {
                    el.classList.add("jdropdown-list");
                  } else if (obj2.options.type == "picker") {
                    el.classList.add("jdropdown-picker");
                  } else {
                    if (helpers.getWindowWidth() < 800) {
                      if (obj2.options.autocomplete) {
                        el.classList.add("jdropdown-searchbar");
                        obj2.options.type = "searchbar";
                      } else {
                        el.classList.add("jdropdown-picker");
                        obj2.options.type = "picker";
                      }
                    } else {
                      if (obj2.options.width) {
                        el.style.width = obj2.options.width;
                        el.style.minWidth = obj2.options.width;
                      } else {
                        el.style.removeProperty("width");
                        el.style.removeProperty("min-width");
                      }
                      el.classList.add("jdropdown-default");
                      obj2.options.type = "default";
                    }
                  }
                  if (obj2.options.type == "searchbar") {
                    containerHeader.appendChild(closeButton);
                  } else {
                    container.insertBefore(closeButton, container.firstChild);
                  }
                  if (obj2.options.url && !options2.data) {
                    ajax({
                      url: obj2.options.url,
                      method: "GET",
                      dataType: "json",
                      success: function(data) {
                        if (data) {
                          success(data, obj2.options.value);
                        }
                      }
                    });
                  } else {
                    success(obj2.options.data, obj2.options.value);
                  }
                  return obj2;
                };
                var containerHeader = null;
                var container = null;
                var content = null;
                var closeButton = null;
                var resetButton = null;
                var backdrop = null;
                var keyTimer = null;
                var init = function() {
                  if (!options) {
                    options = {};
                  }
                  if (el.tagName == "SELECT") {
                    var ret = Component.extractFromDom(el, options);
                    el = ret.el;
                    options = ret.options;
                  }
                  if (!options.placeholder && el.getAttribute("placeholder")) {
                    options.placeholder = el.getAttribute("placeholder");
                  }
                  obj2.value = {};
                  obj2.items = [];
                  obj2.groups = [];
                  obj2.search = "";
                  obj2.results = null;
                  el.classList.add("jdropdown");
                  containerHeader = document.createElement("div");
                  containerHeader.className = "jdropdown-container-header";
                  obj2.header = document.createElement("input");
                  obj2.header.className = "jdropdown-header jss_object";
                  obj2.header.type = "text";
                  obj2.header.setAttribute("autocomplete", "off");
                  obj2.header.onfocus = function() {
                    if (typeof obj2.options.onfocus == "function") {
                      obj2.options.onfocus(el);
                    }
                  };
                  obj2.header.onblur = function() {
                    if (typeof obj2.options.onblur == "function") {
                      obj2.options.onblur(el);
                    }
                  };
                  obj2.header.onkeyup = function(e) {
                    if (obj2.options.autocomplete == true && !keyTimer) {
                      if (obj2.search != obj2.header.value.trim()) {
                        keyTimer = setTimeout(function() {
                          obj2.find(obj2.header.value.trim());
                          keyTimer = null;
                        }, 400);
                      }
                      if (!el.classList.contains("jdropdown-focus")) {
                        obj2.open();
                      }
                    } else {
                      if (!obj2.options.autocomplete) {
                        obj2.next(e.key);
                      }
                    }
                  };
                  if (!Component.hasEvents) {
                    Component.hasEvents = true;
                    document.addEventListener("keydown", Component.keydown);
                  }
                  container = document.createElement("div");
                  container.className = "jdropdown-container";
                  content = document.createElement("div");
                  content.className = "jdropdown-content";
                  closeButton = document.createElement("div");
                  closeButton.className = "jdropdown-close";
                  closeButton.textContent = "Done";
                  resetButton = document.createElement("div");
                  resetButton.className = "jdropdown-reset";
                  resetButton.textContent = "x";
                  resetButton.onclick = function() {
                    obj2.reset();
                    obj2.close();
                  };
                  backdrop = document.createElement("div");
                  backdrop.className = "jdropdown-backdrop";
                  containerHeader.appendChild(obj2.header);
                  container.appendChild(content);
                  el.appendChild(containerHeader);
                  el.appendChild(container);
                  el.appendChild(backdrop);
                  obj2.setOptions(options);
                  if ("ontouchsend" in document.documentElement === true) {
                    el.addEventListener("touchsend", Component.mouseup);
                  } else {
                    el.addEventListener("mouseup", Component.mouseup);
                  }
                  if (obj2.options.lazyLoading == true) {
                    LazyLoading(content, {
                      loadUp: obj2.loadUp,
                      loadDown: obj2.loadDown
                    });
                  }
                  content.onwheel = function(e) {
                    e.stopPropagation();
                  };
                  el.change = obj2.setValue;
                  el.val = function(val) {
                    if (val === void 0) {
                      return obj2.getValue(obj2.options.multiple ? true : false);
                    } else {
                      obj2.setValue(val);
                    }
                  };
                  el.dropdown = obj2;
                };
                obj2.getUrl = function() {
                  return obj2.options.url;
                };
                obj2.setUrl = function(url, callback) {
                  obj2.options.url = url;
                  ajax({
                    url: obj2.options.url,
                    method: "GET",
                    dataType: "json",
                    success: function(data) {
                      obj2.setData(data);
                      if (typeof callback == "function") {
                        callback(obj2);
                      }
                    }
                  });
                };
                obj2.setId = function(item, v) {
                  if (!obj2.options.format) {
                    var property = "value";
                  } else {
                    var property = "id";
                  }
                  if (typeof item == "object") {
                    item[property] = v;
                  } else {
                    obj2.items[item].data[property] = v;
                  }
                };
                obj2.add = function(title, id) {
                  if (!title) {
                    var current = obj2.options.autocomplete == true ? obj2.header.value : "";
                    var title = prompt(dictionary.translate("Add A New Option"), current);
                    if (!title) {
                      return false;
                    }
                  }
                  if (!id) {
                    id = helpers.guid();
                  }
                  if (!obj2.options.format) {
                    var item = {
                      value: id,
                      text: title
                    };
                  } else {
                    var item = {
                      id,
                      name: title
                    };
                  }
                  if (typeof obj2.options.onbeforeinsert == "function") {
                    var ret = obj2.options.onbeforeinsert(obj2, item);
                    if (ret === false) {
                      return false;
                    } else if (ret) {
                      item = ret;
                    }
                  }
                  obj2.options.data.push(item);
                  var newItem = obj2.createItem(item);
                  content.appendChild(newItem.element);
                  if (typeof obj2.options.oninsert == "function") {
                    obj2.options.oninsert(obj2, item, newItem);
                  }
                  if (content.style.display == "none") {
                    content.style.display = "";
                  }
                  if (obj2.results) {
                    obj2.results.push(newItem);
                  }
                  return item;
                };
                obj2.createItem = function(data, group, groupName) {
                  if (!obj2.options.format) {
                    if (!data.value && data.id !== void 0) {
                      data.value = data.id;
                    }
                    if (!data.text && data.name !== void 0) {
                      data.text = data.name;
                    }
                  } else {
                    if (!data.id && data.value !== void 0) {
                      data.id = data.value;
                    }
                    if (!data.name && data.text !== void 0) {
                      data.name = data.text;
                    }
                  }
                  var item = {};
                  item.element = document.createElement("div");
                  item.element.className = "jdropdown-item";
                  item.element.indexValue = obj2.items.length;
                  item.data = data;
                  if (group) {
                    item.group = group;
                  }
                  if (data.id) {
                    item.element.setAttribute("id", data.id);
                  }
                  if (data.disabled == true) {
                    item.element.setAttribute("data-disabled", true);
                  }
                  if (data.tooltip) {
                    item.element.setAttribute("title", data.tooltip);
                  }
                  if (data.image) {
                    var image = document.createElement("img");
                    image.className = "jdropdown-image";
                    image.src = data.image;
                    if (!data.title) {
                      image.classList.add("jdropdown-image-small");
                    }
                    item.element.appendChild(image);
                  } else if (data.icon) {
                    var icon = document.createElement("span");
                    icon.className = "jdropdown-icon material-icons";
                    icon.innerText = data.icon;
                    if (!data.title) {
                      icon.classList.add("jdropdown-icon-small");
                    }
                    if (data.color) {
                      icon.style.color = data.color;
                    }
                    item.element.appendChild(icon);
                  } else if (data.color) {
                    var color = document.createElement("div");
                    color.className = "jdropdown-color";
                    color.style.backgroundColor = data.color;
                    item.element.appendChild(color);
                  }
                  if (!obj2.options.format) {
                    var text = data.text;
                  } else {
                    var text = data.name;
                  }
                  var node = document.createElement("div");
                  node.className = "jdropdown-description";
                  node.textContent = text || "&nbsp;";
                  if (data.title) {
                    var title = document.createElement("div");
                    title.className = "jdropdown-title";
                    title.innerText = data.title;
                    node.appendChild(title);
                  }
                  if (!obj2.options.format) {
                    var val = data.value;
                  } else {
                    var val = data.id;
                  }
                  if (obj2.value[val]) {
                    item.element.classList.add("jdropdown-selected");
                    item.selected = true;
                  }
                  obj2.items.push(item);
                  item.element.appendChild(node);
                  return item;
                };
                obj2.appendData = function(data) {
                  if (data.length) {
                    var items = [];
                    var groups = [];
                    for (var i = 0; i < data.length; i++) {
                      if (data[i].group) {
                        if (!groups[data[i].group]) {
                          groups[data[i].group] = [];
                        }
                        groups[data[i].group].push(i);
                      } else {
                        items.push(i);
                      }
                    }
                    var counter = 0;
                    var groupNames = Object.keys(groups);
                    if (groupNames.length > 0) {
                      for (var i = 0; i < groupNames.length; i++) {
                        var group = document.createElement("div");
                        group.className = "jdropdown-group";
                        var groupName = document.createElement("div");
                        groupName.className = "jdropdown-group-name";
                        groupName.textContent = groupNames[i];
                        var groupArrow = document.createElement("i");
                        groupArrow.className = "jdropdown-group-arrow jdropdown-group-arrow-down";
                        groupName.appendChild(groupArrow);
                        var groupContent = document.createElement("div");
                        groupContent.className = "jdropdown-group-items";
                        for (var j = 0; j < groups[groupNames[i]].length; j++) {
                          var item = obj2.createItem(data[groups[groupNames[i]][j]], group, groupNames[i]);
                          if (obj2.options.lazyLoading == false || counter < 200) {
                            groupContent.appendChild(item.element);
                            counter++;
                          }
                        }
                        group.appendChild(groupName);
                        group.appendChild(groupContent);
                        obj2.groups.push(group);
                        if (groupContent.children.length > 0) {
                          content.appendChild(group);
                        }
                      }
                    }
                    if (items.length) {
                      for (var i = 0; i < items.length; i++) {
                        var item = obj2.createItem(data[items[i]]);
                        if (obj2.options.lazyLoading == false || counter < 200) {
                          content.appendChild(item.element);
                          counter++;
                        }
                      }
                    }
                  }
                };
                obj2.setData = function(data) {
                  resetValue();
                  content.textContent = "";
                  obj2.header.value = "";
                  obj2.items = [];
                  if (data && data.length) {
                    for (var i = 0; i < data.length; i++) {
                      if (typeof data[i] != "object") {
                        if (!obj2.options.format) {
                          data[i] = {
                            value: data[i],
                            text: data[i]
                          };
                        } else {
                          data[i] = {
                            id: data[i],
                            name: data[i]
                          };
                        }
                      }
                    }
                    obj2.appendData(data);
                    obj2.options.data = data;
                  } else {
                    obj2.options.data = [];
                  }
                  obj2.close();
                };
                obj2.getData = function() {
                  return obj2.options.data;
                };
                obj2.getPosition = function(val) {
                  for (var i = 0; i < obj2.items.length; i++) {
                    if (Value(i) == val) {
                      return i;
                    }
                  }
                  return false;
                };
                obj2.getText = function(asArray) {
                  var v = getText();
                  if (asArray) {
                    return v;
                  } else {
                    return v.join("; ");
                  }
                };
                obj2.getValue = function(asArray) {
                  var v = getValue();
                  if (asArray) {
                    return v;
                  } else {
                    return v.join(";");
                  }
                };
                var change = function(oldValue) {
                  if (el.value != obj2.options.value) {
                    el.value = obj2.options.value;
                    if (typeof el.oninput == "function") {
                      el.oninput({
                        type: "input",
                        target: el,
                        value: el.value
                      });
                    }
                  }
                  if (typeof obj2.options.onchange == "function") {
                    obj2.options.onchange(el, obj2, oldValue, obj2.options.value);
                  }
                };
                obj2.setValue = function(newValue) {
                  var oldValue = obj2.getValue();
                  if (Array.isArray(newValue)) {
                    newValue = newValue.join(";");
                  }
                  if (oldValue !== newValue) {
                    applyValue(newValue);
                    change(oldValue);
                  }
                };
                obj2.resetSelected = function() {
                  obj2.setValue(null);
                };
                obj2.selectIndex = function(index, force) {
                  var index = parseInt(index);
                  if (obj2.items && obj2.items[index] && (force === true || obj2.items[index].data.disabled !== true)) {
                    obj2.setCursor(index, false);
                    if (!obj2.options.multiple) {
                      if (obj2.items[index].selected) {
                        obj2.setValue(null);
                      } else {
                        obj2.setValue(Value(index));
                      }
                      obj2.close();
                    } else {
                      var oldValue = obj2.options.value;
                      if (obj2.items[index].selected) {
                        obj2.items[index].element.classList.remove("jdropdown-selected");
                        obj2.items[index].selected = false;
                        delete obj2.value[Value(index)];
                      } else {
                        obj2.items[index].element.classList.add("jdropdown-selected");
                        obj2.items[index].selected = true;
                        obj2.value[Value(index)] = Text(index);
                      }
                      obj2.options.value = Object.keys(obj2.value).join(";");
                      if (obj2.options.autocomplete == false) {
                        obj2.header.value = getText().join("; ");
                      }
                      change(oldValue);
                    }
                  }
                };
                obj2.selectItem = function(item) {
                  obj2.selectIndex(item.indexValue);
                };
                var exists = function(k, result) {
                  for (var j = 0; j < result.length; j++) {
                    if (!obj2.options.format) {
                      if (result[j].value == k) {
                        return true;
                      }
                    } else {
                      if (result[j].id == k) {
                        return true;
                      }
                    }
                  }
                  return false;
                };
                obj2.find = function(str) {
                  if (obj2.search == str.trim()) {
                    return false;
                  }
                  obj2.search = str;
                  obj2.setCursor();
                  if (obj2.groups.length) {
                    for (var i = 0; i < obj2.groups.length; i++) {
                      obj2.groups[i].lastChild.textContent = "";
                    }
                  }
                  content.textContent = "";
                  if (obj2.options.remoteSearch == true) {
                    obj2.results = null;
                    var url = obj2.options.url;
                    let o = {
                      url,
                      method: "GET",
                      data: { q: str },
                      dataType: "json",
                      success: function(result) {
                        obj2.items = [];
                        var current = Object.keys(obj2.value);
                        if (current.length) {
                          for (var i2 = 0; i2 < current.length; i2++) {
                            if (!exists(current[i2], result)) {
                              if (!obj2.options.format) {
                                result.unshift({ value: current[i2], text: obj2.value[current[i2]] });
                              } else {
                                result.unshift({ id: current[i2], name: obj2.value[current[i2]] });
                              }
                            }
                          }
                        }
                        obj2.appendData(result);
                        if (!result.length) {
                          content.style.display = "none";
                        } else {
                          content.style.display = "";
                        }
                        if (typeof obj2.options.onsearch === "function") {
                          obj2.options.onsearch(obj2, result);
                        }
                      }
                    };
                    if (typeof obj2.options.onbeforesearch === "function") {
                      let ret = obj2.options.onbeforesearch(obj2, o);
                      if (ret === false) {
                        return;
                      } else if (typeof ret === "object") {
                        o = ret;
                      }
                    }
                    ajax(o);
                  } else {
                    str = new RegExp(str, "gi");
                    var results = [];
                    for (var i = 0; i < obj2.items.length; i++) {
                      var label = Text(i);
                      var title = obj2.items[i].data.title || "";
                      var groupName = obj2.items[i].data.group || "";
                      var synonym = obj2.items[i].data.synonym || "";
                      if (synonym) {
                        synonym = synonym.join(" ");
                      }
                      if (str == null || obj2.items[i].selected == true || label.match(str) || title.match(str) || groupName.match(str) || synonym.match(str)) {
                        results.push(obj2.items[i]);
                      }
                    }
                    if (!results.length) {
                      content.style.display = "none";
                      obj2.results = null;
                    } else {
                      content.style.display = "";
                      obj2.results = results;
                      var number = results.length || 0;
                      if (obj2.options.lazyLoading == true && number > 200) {
                        number = 200;
                      }
                      for (var i = 0; i < number; i++) {
                        if (obj2.results[i].group) {
                          if (!obj2.results[i].group.parentNode) {
                            content.appendChild(obj2.results[i].group);
                          }
                          obj2.results[i].group.lastChild.appendChild(obj2.results[i].element);
                        } else {
                          content.appendChild(obj2.results[i].element);
                        }
                      }
                    }
                  }
                  if (obj2.options.autofocus == true) {
                    obj2.first();
                  }
                };
                obj2.open = function() {
                  if (!el.classList.contains("jdropdown-focus")) {
                    Component.current = obj2;
                    Tracking(obj2, true);
                    el.classList.add("jdropdown-focus");
                    if (helpers.getWindowWidth() < 800) {
                      if (obj2.options.type == null || obj2.options.type == "picker") {
                        animation.slideBottom(container, 1);
                      }
                    }
                    if (obj2.options.autocomplete == true) {
                      obj2.header.value = obj2.search;
                      obj2.header.focus();
                    }
                    var k = getValue();
                    if (k[0]) {
                      var cursor = obj2.getPosition(k[0]);
                      if (cursor !== false) {
                        obj2.setCursor(cursor);
                      }
                    }
                    if (!obj2.options.type || obj2.options.type == "default") {
                      var rect = el.getBoundingClientRect();
                      var rectContainer = container.getBoundingClientRect();
                      if (obj2.options.position) {
                        container.style.position = "fixed";
                        if (window.innerHeight < rect.bottom + rectContainer.height) {
                          container.style.top = "";
                          container.style.bottom = window.innerHeight - rect.top + 1 + "px";
                        } else {
                          container.style.top = rect.bottom + "px";
                          container.style.bottom = "";
                        }
                        container.style.left = rect.left + "px";
                      } else {
                        if (window.innerHeight < rect.bottom + rectContainer.height) {
                          container.style.top = "";
                          container.style.bottom = rect.height + 1 + "px";
                        } else {
                          container.style.top = "";
                          container.style.bottom = "";
                        }
                      }
                      container.style.minWidth = rect.width + "px";
                      if (obj2.options.maxWidth) {
                        container.style.maxWidth = obj2.options.maxWidth;
                      }
                      if (!obj2.items.length && obj2.options.autocomplete == true) {
                        content.style.display = "none";
                      } else {
                        content.style.display = "";
                      }
                    }
                  }
                  if (typeof obj2.options.onopen == "function") {
                    obj2.options.onopen(el);
                  }
                };
                obj2.close = function(ignoreEvents) {
                  if (el.classList.contains("jdropdown-focus")) {
                    obj2.header.value = obj2.getText();
                    obj2.setCursor();
                    if (!ignoreEvents && typeof obj2.options.onclose == "function") {
                      obj2.options.onclose(el);
                    }
                    if (obj2.header.blur) {
                      obj2.header.blur();
                    }
                    el.classList.remove("jdropdown-focus");
                    Tracking(obj2, false);
                    Component.current = null;
                  }
                  return obj2.getValue();
                };
                obj2.setCursor = function(index, setPosition) {
                  if (obj2.currentIndex != null) {
                    if (obj2.items && obj2.items[obj2.currentIndex]) {
                      obj2.items[obj2.currentIndex].element.classList.remove("jdropdown-cursor");
                    }
                  }
                  if (index == void 0) {
                    obj2.currentIndex = null;
                  } else {
                    index = parseInt(index);
                    if (obj2.items[index].element.parentNode) {
                      obj2.items[index].element.classList.add("jdropdown-cursor");
                      obj2.currentIndex = index;
                      if (setPosition !== false && obj2.items[obj2.currentIndex].element) {
                        var container2 = content.scrollTop;
                        var element = obj2.items[obj2.currentIndex].element;
                        content.scrollTop = element.offsetTop - element.scrollTop + element.clientTop - 95;
                      }
                    }
                  }
                };
                obj2.resetCursor = obj2.setCursor;
                obj2.updateCursor = obj2.setCursor;
                obj2.reset = function() {
                  obj2.setCursor();
                  obj2.setValue(null);
                };
                obj2.first = function() {
                  if (obj2.options.lazyLoading === true) {
                    obj2.loadFirst();
                  }
                  var items = content.querySelectorAll(".jdropdown-item");
                  if (items.length) {
                    var newIndex = items[0].indexValue;
                    obj2.setCursor(newIndex);
                  }
                };
                obj2.last = function() {
                  if (obj2.options.lazyLoading === true) {
                    obj2.loadLast();
                  }
                  var items = content.querySelectorAll(".jdropdown-item");
                  if (items.length) {
                    var newIndex = items[items.length - 1].indexValue;
                    obj2.setCursor(newIndex);
                  }
                };
                obj2.next = function(letter) {
                  var newIndex = null;
                  if (letter) {
                    if (letter.length == 1) {
                      var current = obj2.currentIndex || -1;
                      letter = letter.toLowerCase();
                      var e = null;
                      var l = null;
                      var items = content.querySelectorAll(".jdropdown-item");
                      if (items.length) {
                        for (var i = 0; i < items.length; i++) {
                          if (items[i].indexValue > current) {
                            if (e = obj2.items[items[i].indexValue]) {
                              if (l = e.element.innerText[0]) {
                                l = l.toLowerCase();
                                if (letter == l) {
                                  newIndex = items[i].indexValue;
                                  break;
                                }
                              }
                            }
                          }
                        }
                        obj2.setCursor(newIndex);
                      }
                    }
                  } else {
                    if (obj2.currentIndex == void 0 || obj2.currentIndex == null) {
                      obj2.first();
                    } else {
                      var element = obj2.items[obj2.currentIndex].element;
                      var next = element.nextElementSibling;
                      if (next) {
                        if (next.classList.contains("jdropdown-group")) {
                          next = next.lastChild.firstChild;
                        }
                        newIndex = next.indexValue;
                      } else {
                        if (element.parentNode.classList.contains("jdropdown-group-items")) {
                          if (next = element.parentNode.parentNode.nextElementSibling) {
                            if (next.classList.contains("jdropdown-group")) {
                              next = next.lastChild.firstChild;
                            } else if (next.classList.contains("jdropdown-item")) {
                              newIndex = next.indexValue;
                            } else {
                              next = null;
                            }
                          }
                          if (next) {
                            newIndex = next.indexValue;
                          }
                        }
                      }
                      if (newIndex !== null) {
                        obj2.setCursor(newIndex);
                      }
                    }
                  }
                };
                obj2.prev = function() {
                  var newIndex = null;
                  if (obj2.currentIndex === null) {
                    obj2.first();
                  } else {
                    var element = obj2.items[obj2.currentIndex].element;
                    var prev = element.previousElementSibling;
                    if (prev) {
                      if (prev.classList.contains("jdropdown-group")) {
                        prev = prev.lastChild.lastChild;
                      }
                      newIndex = prev.indexValue;
                    } else {
                      if (element.parentNode.classList.contains("jdropdown-group-items")) {
                        if (prev = element.parentNode.parentNode.previousElementSibling) {
                          if (prev.classList.contains("jdropdown-group")) {
                            prev = prev.lastChild.lastChild;
                          } else if (prev.classList.contains("jdropdown-item")) {
                            newIndex = prev.indexValue;
                          } else {
                            prev = null;
                          }
                        }
                        if (prev) {
                          newIndex = prev.indexValue;
                        }
                      }
                    }
                  }
                  if (newIndex !== null) {
                    obj2.setCursor(newIndex);
                  }
                };
                obj2.loadFirst = function() {
                  if (obj2.results) {
                    var results = obj2.results;
                  } else {
                    var results = obj2.items;
                  }
                  var number = results.length || 0;
                  if (obj2.options.lazyLoading == true && number > 200) {
                    number = 200;
                  }
                  content.textContent = "";
                  for (var i = 0; i < number; i++) {
                    if (results[i].group) {
                      if (!results[i].group.parentNode) {
                        content.appendChild(results[i].group);
                      }
                      results[i].group.lastChild.appendChild(results[i].element);
                    } else {
                      content.appendChild(results[i].element);
                    }
                  }
                  content.scrollTop = 0;
                };
                obj2.loadLast = function() {
                  if (obj2.results) {
                    var results = obj2.results;
                  } else {
                    var results = obj2.items;
                  }
                  var number = results.length;
                  if (number > 200) {
                    number = number - 200;
                    content.textContent = "";
                    for (var i = number; i < results.length; i++) {
                      if (results[i].group) {
                        if (!results[i].group.parentNode) {
                          content.appendChild(results[i].group);
                        }
                        results[i].group.lastChild.appendChild(results[i].element);
                      } else {
                        content.appendChild(results[i].element);
                      }
                    }
                    content.scrollTop = content.scrollHeight;
                  }
                };
                obj2.loadUp = function() {
                  var test = false;
                  if (obj2.results) {
                    var results = obj2.results;
                  } else {
                    var results = obj2.items;
                  }
                  var items = content.querySelectorAll(".jdropdown-item");
                  var fistItem = items[0].indexValue;
                  fistItem = obj2.items[fistItem];
                  var index = results.indexOf(fistItem) - 1;
                  if (index > 0) {
                    var number = 0;
                    while (index > 0 && results[index] && number < 200) {
                      if (results[index].group) {
                        if (!results[index].group.parentNode) {
                          content.insertBefore(results[index].group, content.firstChild);
                        }
                        results[index].group.lastChild.insertBefore(results[index].element, results[index].group.lastChild.firstChild);
                      } else {
                        content.insertBefore(results[index].element, content.firstChild);
                      }
                      index--;
                      number++;
                    }
                    test = true;
                  }
                  return test;
                };
                obj2.loadDown = function() {
                  var test = false;
                  if (obj2.results) {
                    var results = obj2.results;
                  } else {
                    var results = obj2.items;
                  }
                  var items = content.querySelectorAll(".jdropdown-item");
                  var lastItem = items[items.length - 1].indexValue;
                  lastItem = obj2.items[lastItem];
                  var index = results.indexOf(lastItem) + 1;
                  if (index < results.length) {
                    var number = 0;
                    while (index < results.length && results[index] && number < 200) {
                      if (results[index].group) {
                        if (!results[index].group.parentNode) {
                          content.appendChild(results[index].group);
                        }
                        results[index].group.lastChild.appendChild(results[index].element);
                      } else {
                        content.appendChild(results[index].element);
                      }
                      index++;
                      number++;
                    }
                    test = true;
                  }
                  return test;
                };
                init();
                return obj2;
              };
              Component.keydown = function(e) {
                var dropdown2 = null;
                if (dropdown2 = Component.current) {
                  if (e.which == 13 || e.which == 9) {
                    if (dropdown2.header.value && dropdown2.currentIndex == null && dropdown2.options.newOptions) {
                      dropdown2.add();
                    } else {
                      if (dropdown2.currentIndex == null && dropdown2.options.autocomplete == true && dropdown2.header.value != "") {
                        dropdown2.find(dropdown2.header.value);
                      }
                      dropdown2.selectIndex(dropdown2.currentIndex);
                    }
                  } else if (e.which == 38) {
                    if (dropdown2.currentIndex == null) {
                      dropdown2.first();
                    } else if (dropdown2.currentIndex > 0) {
                      dropdown2.prev();
                    }
                    e.preventDefault();
                  } else if (e.which == 40) {
                    if (dropdown2.currentIndex == null) {
                      dropdown2.first();
                    } else if (dropdown2.currentIndex + 1 < dropdown2.items.length) {
                      dropdown2.next();
                    }
                    e.preventDefault();
                  } else if (e.which == 36) {
                    dropdown2.first();
                    if (!e.target.classList.contains("jdropdown-header")) {
                      e.preventDefault();
                    }
                  } else if (e.which == 35) {
                    dropdown2.last();
                    if (!e.target.classList.contains("jdropdown-header")) {
                      e.preventDefault();
                    }
                  } else if (e.which == 27) {
                    dropdown2.close();
                  } else if (e.which == 33) {
                    if (dropdown2.currentIndex == null) {
                      dropdown2.first();
                    } else if (dropdown2.currentIndex > 0) {
                      for (var i = 0; i < 7; i++) {
                        dropdown2.prev();
                      }
                    }
                    e.preventDefault();
                  } else if (e.which == 34) {
                    if (dropdown2.currentIndex == null) {
                      dropdown2.first();
                    } else if (dropdown2.currentIndex + 1 < dropdown2.items.length) {
                      for (var i = 0; i < 7; i++) {
                        dropdown2.next();
                      }
                    }
                    e.preventDefault();
                  }
                }
              };
              Component.mouseup = function(e) {
                var element = helpers.findElement(e.target, "jdropdown");
                if (element) {
                  var dropdown2 = element.dropdown;
                  if (e.target.classList.contains("jdropdown-header")) {
                    if (element.classList.contains("jdropdown-focus") && element.classList.contains("jdropdown-default")) {
                      var rect = element.getBoundingClientRect();
                      if (e.changedTouches && e.changedTouches[0]) {
                        var x = e.changedTouches[0].clientX;
                        var y = e.changedTouches[0].clientY;
                      } else {
                        var x = e.clientX;
                        var y = e.clientY;
                      }
                      if (rect.width - (x - rect.left) < 30) {
                        if (e.target.classList.contains("jdropdown-add")) {
                          dropdown2.add();
                        } else {
                          dropdown2.close();
                        }
                      } else {
                        if (dropdown2.options.autocomplete == false) {
                          dropdown2.close();
                        }
                      }
                    } else {
                      dropdown2.open();
                    }
                  } else if (e.target.classList.contains("jdropdown-group-name")) {
                    var items = e.target.nextSibling.children;
                    if (e.target.nextSibling.style.display != "none") {
                      for (var i = 0; i < items.length; i++) {
                        if (items[i].style.display != "none") {
                          dropdown2.selectItem(items[i]);
                        }
                      }
                    }
                  } else if (e.target.classList.contains("jdropdown-group-arrow")) {
                    if (e.target.classList.contains("jdropdown-group-arrow-down")) {
                      e.target.classList.remove("jdropdown-group-arrow-down");
                      e.target.classList.add("jdropdown-group-arrow-up");
                      e.target.parentNode.nextSibling.style.display = "none";
                    } else {
                      e.target.classList.remove("jdropdown-group-arrow-up");
                      e.target.classList.add("jdropdown-group-arrow-down");
                      e.target.parentNode.nextSibling.style.display = "";
                    }
                  } else if (e.target.classList.contains("jdropdown-item")) {
                    dropdown2.selectItem(e.target);
                  } else if (e.target.classList.contains("jdropdown-image")) {
                    dropdown2.selectItem(e.target.parentNode);
                  } else if (e.target.classList.contains("jdropdown-description")) {
                    dropdown2.selectItem(e.target.parentNode);
                  } else if (e.target.classList.contains("jdropdown-title")) {
                    dropdown2.selectItem(e.target.parentNode.parentNode);
                  } else if (e.target.classList.contains("jdropdown-close") || e.target.classList.contains("jdropdown-backdrop")) {
                    dropdown2.close();
                  }
                }
              };
              Component.extractFromDom = function(el, options) {
                var select = el;
                if (!options) {
                  options = {};
                }
                if (el.getAttribute("multiple") && (!options || options.multiple == void 0)) {
                  options.multiple = true;
                }
                if (el.getAttribute("placeholder") && (!options || options.placeholder == void 0)) {
                  options.placeholder = el.getAttribute("placeholder");
                }
                if (el.getAttribute("data-autocomplete") && (!options || options.autocomplete == void 0)) {
                  options.autocomplete = true;
                }
                if (!options || options.width == void 0) {
                  options.width = el.offsetWidth;
                }
                if (el.value && (!options || options.value == void 0)) {
                  options.value = el.value;
                }
                if (!options || options.data == void 0) {
                  options.data = [];
                  for (var j = 0; j < el.children.length; j++) {
                    if (el.children[j].tagName == "OPTGROUP") {
                      for (var i = 0; i < el.children[j].children.length; i++) {
                        options.data.push({
                          value: el.children[j].children[i].value,
                          text: el.children[j].children[i].textContent,
                          group: el.children[j].getAttribute("label")
                        });
                      }
                    } else {
                      options.data.push({
                        value: el.children[j].value,
                        text: el.children[j].textContent
                      });
                    }
                  }
                }
                if (!options || options.onchange == void 0) {
                  options.onchange = function(a, b, c, d) {
                    if (options.multiple == true) {
                      if (obj.items[b].classList.contains("jdropdown-selected")) {
                        select.options[b].setAttribute("selected", "selected");
                      } else {
                        select.options[b].removeAttribute("selected");
                      }
                    } else {
                      select.value = d;
                    }
                  };
                }
                var div = document.createElement("div");
                el.parentNode.insertBefore(div, el);
                el.style.display = "none";
                el = div;
                return { el, options };
              };
              return Component;
            }
            var dropdown = Dropdown();
            ;
            function Picker(el, options) {
              if (el.picker) {
                return el.picker.setOptions(options, true);
              }
              var obj2 = { type: "picker" };
              obj2.options = {};
              var dropdownHeader = null;
              var dropdownContent = null;
              var isDOM = function(o) {
                return o instanceof Element || o instanceof HTMLDocument;
              };
              var createContent = function() {
                dropdownContent.innerHTML = "";
                var keys = Object.keys(obj2.options.data);
                for (var i = 0; i < keys.length; i++) {
                  var dropdownItem = document.createElement("div");
                  dropdownItem.classList.add("jpicker-item");
                  dropdownItem.k = keys[i];
                  dropdownItem.v = obj2.options.data[keys[i]];
                  var item = obj2.getLabel(keys[i], dropdownItem);
                  if (isDOM(item)) {
                    dropdownItem.appendChild(item);
                  } else {
                    dropdownItem.innerHTML = item;
                  }
                  dropdownContent.appendChild(dropdownItem);
                }
              };
              obj2.setOptions = function(options2, reset) {
                var defaults = {
                  value: 0,
                  data: null,
                  render: null,
                  onchange: null,
                  onmouseover: null,
                  onselect: null,
                  onopen: null,
                  onclose: null,
                  onload: null,
                  width: null,
                  header: true,
                  right: false,
                  bottom: false,
                  content: false,
                  columns: null,
                  grid: null,
                  height: null
                };
                if (options2 && options2.options) {
                  options2.data = options2.options;
                }
                for (var property in defaults) {
                  if (options2 && options2.hasOwnProperty(property)) {
                    obj2.options[property] = options2[property];
                  } else {
                    if (typeof obj2.options[property] == "undefined" || reset === true) {
                      obj2.options[property] = defaults[property];
                    }
                  }
                }
                if (obj2.options.header === false) {
                  dropdownHeader.style.display = "none";
                } else {
                  dropdownHeader.style.display = "";
                }
                if (obj2.options.width) {
                  dropdownHeader.style.width = parseInt(obj2.options.width) + "px";
                } else {
                  dropdownHeader.style.width = "";
                }
                if (obj2.options.height) {
                  dropdownContent.style.maxHeight = obj2.options.height + "px";
                  dropdownContent.style.overflow = "scroll";
                } else {
                  dropdownContent.style.overflow = "";
                }
                if (obj2.options.columns > 0) {
                  if (!obj2.options.grid) {
                    dropdownContent.classList.add("jpicker-columns");
                    dropdownContent.style.width = obj2.options.width ? obj2.options.width : 36 * obj2.options.columns + "px";
                  } else {
                    dropdownContent.classList.add("jpicker-grid");
                    dropdownContent.style.gridTemplateColumns = "repeat(" + obj2.options.grid + ", 1fr)";
                  }
                }
                if (isNaN(parseInt(obj2.options.value))) {
                  obj2.options.value = 0;
                }
                createContent();
                obj2.setValue(obj2.options.value);
                return obj2;
              };
              obj2.getValue = function() {
                return obj2.options.value;
              };
              obj2.setValue = function(k, e) {
                obj2.setLabel(k);
                obj2.options.value = String(k);
                if (el.value != obj2.options.value) {
                  el.value = obj2.options.value;
                  if (typeof el.oninput == "function") {
                    el.oninput({
                      type: "input",
                      target: el,
                      value: el.value
                    });
                  }
                }
                if (dropdownContent.children[k] && dropdownContent.children[k].getAttribute("type") !== "generic") {
                  obj2.close();
                }
                if (e) {
                  if (typeof obj2.options.onchange == "function") {
                    var v = obj2.options.data[k];
                    obj2.options.onchange(el, obj2, v, v, k, e);
                  }
                }
              };
              obj2.getLabel = function(v, item) {
                var label = obj2.options.data[v] || null;
                if (typeof obj2.options.render == "function") {
                  label = obj2.options.render(label, item);
                }
                return label;
              };
              obj2.setLabel = function(v) {
                var item;
                if (obj2.options.content) {
                  item = '<i class="material-icons">' + obj2.options.content + "</i>";
                } else {
                  item = obj2.getLabel(v, null);
                }
                if (isDOM(item)) {
                  dropdownHeader.innerHTML = "";
                  dropdownHeader.appendChild(item);
                } else {
                  dropdownHeader.innerHTML = item;
                }
              };
              obj2.open = function() {
                if (!el.classList.contains("jpicker-focus")) {
                  Tracking(obj2, true);
                  el.classList.add("jpicker-focus");
                  el.focus();
                  var top = 0;
                  var left = 0;
                  dropdownContent.style.marginLeft = "";
                  var rectHeader = dropdownHeader.getBoundingClientRect();
                  var rectContent = dropdownContent.getBoundingClientRect();
                  if (window.innerHeight < rectHeader.bottom + rectContent.height || obj2.options.bottom) {
                    top = -1 * (rectContent.height + 4);
                  } else {
                    top = rectHeader.height + 4;
                  }
                  if (obj2.options.right === true) {
                    left = -1 * rectContent.width + rectHeader.width;
                  }
                  if (rectContent.left + left < 0) {
                    left = left + rectContent.left + 10;
                  }
                  if (rectContent.left + rectContent.width > window.innerWidth) {
                    left = -1 * (10 + rectContent.left + rectContent.width - window.innerWidth);
                  }
                  dropdownContent.style.marginTop = parseInt(top) + "px";
                  dropdownContent.style.marginLeft = parseInt(left) + "px";
                  if (typeof obj2.options.onopen == "function") {
                    obj2.options.onopen(el, obj2);
                  }
                }
              };
              obj2.close = function() {
                if (el.classList.contains("jpicker-focus")) {
                  el.classList.remove("jpicker-focus");
                  Tracking(obj2, false);
                  if (typeof obj2.options.onclose == "function") {
                    obj2.options.onclose(el, obj2);
                  }
                }
              };
              var init = function() {
                el.classList.add("jpicker");
                el.setAttribute("tabindex", "900");
                el.onmousedown = function(e) {
                  if (!el.classList.contains("jpicker-focus")) {
                    obj2.open();
                  }
                };
                dropdownHeader = document.createElement("div");
                dropdownHeader.classList.add("jpicker-header");
                dropdownContent = document.createElement("div");
                dropdownContent.classList.add("jpicker-content");
                dropdownContent.onclick = function(e) {
                  var item = helpers.findElement(e.target, "jpicker-item");
                  if (item) {
                    if (item.parentNode === dropdownContent) {
                      obj2.setValue(item.k, e);
                    }
                  }
                };
                el.appendChild(dropdownHeader);
                el.appendChild(dropdownContent);
                el.value = options.value || 0;
                obj2.setOptions(options);
                if (typeof obj2.options.onload == "function") {
                  obj2.options.onload(el, obj2);
                }
                el.change = obj2.setValue;
                el.val = function(val) {
                  if (val === void 0) {
                    return obj2.getValue();
                  } else {
                    obj2.setValue(val);
                  }
                };
                el.picker = obj2;
              };
              init();
              return obj2;
            }
            ;
            function Toolbar(el, options) {
              var obj2 = { type: "toolbar" };
              obj2.options = {};
              var defaults = {
                app: null,
                container: false,
                badge: false,
                title: false,
                responsive: false,
                maxWidth: null,
                bottom: true,
                items: []
              };
              for (var property in defaults) {
                if (options && options.hasOwnProperty(property)) {
                  obj2.options[property] = options[property];
                } else {
                  obj2.options[property] = defaults[property];
                }
              }
              if (!el && options.app && options.app.el) {
                el = document.createElement("div");
                options.app.el.appendChild(el);
              }
              var toolbarArrow = document.createElement("div");
              toolbarArrow.classList.add("jtoolbar-item");
              toolbarArrow.classList.add("jtoolbar-arrow");
              var toolbarFloating = document.createElement("div");
              toolbarFloating.classList.add("jtoolbar-floating");
              toolbarArrow.appendChild(toolbarFloating);
              obj2.selectItem = function(element) {
                var elements = toolbarContent.children;
                for (var i = 0; i < elements.length; i++) {
                  if (element != elements[i]) {
                    elements[i].classList.remove("jtoolbar-selected");
                  }
                }
                element.classList.add("jtoolbar-selected");
              };
              obj2.hide = function() {
                animation.slideBottom(el, 0, function() {
                  el.style.display = "none";
                });
              };
              obj2.show = function() {
                el.style.display = "";
                animation.slideBottom(el, 1);
              };
              obj2.get = function() {
                return el;
              };
              obj2.setBadge = function(index, value) {
                toolbarContent.children[index].children[1].firstChild.innerHTML = value;
              };
              obj2.destroy = function() {
                toolbar.remove();
                el.innerHTML = "";
              };
              obj2.update = function(a, b) {
                for (var i = 0; i < toolbarContent.children.length; i++) {
                  var toolbarItem = toolbarContent.children[i];
                  if (typeof toolbarItem.updateState == "function") {
                    toolbarItem.updateState(el, obj2, toolbarItem, a, b);
                  }
                }
                for (var i = 0; i < toolbarFloating.children.length; i++) {
                  var toolbarItem = toolbarFloating.children[i];
                  if (typeof toolbarItem.updateState == "function") {
                    toolbarItem.updateState(el, obj2, toolbarItem, a, b);
                  }
                }
              };
              obj2.create = function(items) {
                toolbarContent.innerHTML = "";
                for (var i = 0; i < items.length; i++) {
                  var toolbarItem = document.createElement("div");
                  toolbarItem.classList.add("jtoolbar-item");
                  if (items[i].width) {
                    toolbarItem.style.width = parseInt(items[i].width) + "px";
                  }
                  if (items[i].k) {
                    toolbarItem.k = items[i].k;
                  }
                  if (items[i].tooltip) {
                    toolbarItem.setAttribute("title", items[i].tooltip);
                  }
                  if (items[i].id) {
                    toolbarItem.setAttribute("id", items[i].id);
                  }
                  if (items[i].updateState) {
                    toolbarItem.updateState = items[i].updateState;
                  }
                  if (items[i].active) {
                    toolbarItem.classList.add("jtoolbar-active");
                  }
                  if (items[i].disabled) {
                    toolbarItem.classList.add("jtoolbar-disabled");
                  }
                  if (items[i].type == "select" || items[i].type == "dropdown") {
                    Picker(toolbarItem, items[i]);
                  } else if (items[i].type == "divisor") {
                    toolbarItem.classList.add("jtoolbar-divisor");
                  } else if (items[i].type == "label") {
                    toolbarItem.classList.add("jtoolbar-label");
                    toolbarItem.innerHTML = items[i].content;
                  } else {
                    var toolbarIcon = document.createElement("i");
                    if (typeof items[i].class === "undefined") {
                      toolbarIcon.classList.add("material-icons");
                    } else {
                      var c = items[i].class.split(" ");
                      for (var j = 0; j < c.length; j++) {
                        toolbarIcon.classList.add(c[j]);
                      }
                    }
                    toolbarIcon.innerHTML = items[i].content ? items[i].content : "";
                    toolbarItem.appendChild(toolbarIcon);
                    if (obj2.options.badge == true) {
                      var toolbarBadge = document.createElement("div");
                      toolbarBadge.classList.add("jbadge");
                      var toolbarBadgeContent = document.createElement("div");
                      toolbarBadgeContent.innerHTML = items[i].badge ? items[i].badge : "";
                      toolbarBadge.appendChild(toolbarBadgeContent);
                      toolbarItem.appendChild(toolbarBadge);
                    }
                    if (items[i].title) {
                      if (obj2.options.title == true) {
                        var toolbarTitle = document.createElement("span");
                        toolbarTitle.innerHTML = items[i].title;
                        toolbarItem.appendChild(toolbarTitle);
                      } else {
                        toolbarItem.setAttribute("title", items[i].title);
                      }
                    }
                    if (obj2.options.app && items[i].route) {
                      toolbarItem.route = items[i].route;
                      toolbarItem.onclick = function() {
                        obj2.options.app.pages(this.route);
                      };
                      obj2.options.app.pages(items[i].route, {
                        toolbarItem,
                        closed: true
                      });
                    }
                    if (typeof items[i].render === "function") {
                      items[i].render(toolbarItem, items[i]);
                    }
                  }
                  if (items[i].onclick) {
                    toolbarItem.onclick = items[i].onclick.bind(items[i], el, obj2, toolbarItem);
                  }
                  toolbarContent.appendChild(toolbarItem);
                }
                setTimeout(function() {
                  obj2.refresh();
                }, 0);
              };
              obj2.open = function() {
                toolbarArrow.classList.add("jtoolbar-arrow-selected");
                var rectElement = el.getBoundingClientRect();
                var rect = toolbarFloating.getBoundingClientRect();
                if (rect.bottom > window.innerHeight || obj2.options.bottom) {
                  toolbarFloating.style.bottom = "0";
                } else {
                  toolbarFloating.style.removeProperty("bottom");
                }
                toolbarFloating.style.right = "0";
                toolbarArrow.children[0].focus();
                Tracking(obj2, true);
              };
              obj2.close = function() {
                toolbarArrow.classList.remove("jtoolbar-arrow-selected");
                Tracking(obj2, false);
              };
              obj2.refresh = function() {
                if (obj2.options.responsive == true) {
                  var rect = el.parentNode.getBoundingClientRect();
                  if (!obj2.options.maxWidth) {
                    obj2.options.maxWidth = rect.width;
                  }
                  var available = parseInt(obj2.options.maxWidth);
                  if (toolbarArrow.parentNode) {
                    toolbarArrow.parentNode.removeChild(toolbarArrow);
                  }
                  while (toolbarFloating.firstChild) {
                    toolbarContent.appendChild(toolbarFloating.firstChild);
                  }
                  if (available < toolbarContent.offsetWidth) {
                    available -= 50;
                    while (toolbarContent.lastChild && available < toolbarContent.offsetWidth) {
                      toolbarFloating.insertBefore(toolbarContent.lastChild, toolbarFloating.firstChild);
                    }
                  }
                  if (toolbarFloating.children.length > 0) {
                    toolbarContent.appendChild(toolbarArrow);
                  }
                }
              };
              obj2.setReadonly = function(state) {
                state = state ? "add" : "remove";
                el.classList[state]("jtoolbar-disabled");
              };
              el.onclick = function(e) {
                var element = helpers.findElement(e.target, "jtoolbar-item");
                if (element) {
                  obj2.selectItem(element);
                }
                if (e.target.classList.contains("jtoolbar-arrow")) {
                  obj2.open();
                }
              };
              window.addEventListener("resize", function() {
                obj2.refresh();
              });
              el.classList.add("jtoolbar");
              el.innerHTML = "";
              if (obj2.options.container == true) {
                el.classList.add("jtoolbar-container");
              }
              var toolbarContent = document.createElement("div");
              el.appendChild(toolbarContent);
              if (obj2.options.app) {
                el.classList.add("jtoolbar-mobile");
              }
              obj2.create(obj2.options.items);
              el.toolbar = obj2;
              return obj2;
            }
            ;
            function Editor() {
              var Component = function(el, options) {
                var obj2 = { type: "editor" };
                obj2.options = {};
                var defaults = {
                  // Load data from a remove location
                  url: null,
                  // Initial HTML content
                  value: "",
                  // Initial snippet
                  snippet: null,
                  // Add toolbar
                  toolbar: true,
                  toolbarOnTop: false,
                  // Website parser is to read websites and images from cross domain
                  remoteParser: null,
                  // Placeholder
                  placeholder: null,
                  // Parse URL
                  filterPaste: true,
                  // Accept drop files
                  dropZone: true,
                  dropAsSnippet: false,
                  acceptImages: true,
                  acceptFiles: false,
                  maxFileSize: 5e6,
                  allowImageResize: true,
                  // Style
                  maxHeight: null,
                  height: null,
                  focus: false,
                  // Events
                  onclick: null,
                  onfocus: null,
                  onblur: null,
                  onload: null,
                  onkeyup: null,
                  onkeydown: null,
                  onchange: null,
                  extensions: null,
                  type: null
                };
                for (var property in defaults) {
                  if (options && options.hasOwnProperty(property)) {
                    obj2.options[property] = options[property];
                  } else {
                    obj2.options[property] = defaults[property];
                  }
                }
                var editorTimer = null;
                var editorAction = null;
                var files = [];
                obj2.el = el;
                if (typeof obj2.options.onclick == "function") {
                  el.onclick = function(e) {
                    obj2.options.onclick(el, obj2, e);
                  };
                }
                el.classList.add("jeditor-container");
                var snippet = document.createElement("div");
                snippet.className = "jsnippet";
                snippet.setAttribute("contenteditable", false);
                var toolbar2 = document.createElement("div");
                toolbar2.className = "jeditor-toolbar";
                obj2.editor = document.createElement("div");
                obj2.editor.setAttribute("contenteditable", true);
                obj2.editor.setAttribute("spellcheck", false);
                obj2.editor.classList.add("jeditor");
                if (obj2.options.placeholder) {
                  obj2.editor.setAttribute("data-placeholder", obj2.options.placeholder);
                }
                if (obj2.options.maxHeight || obj2.options.height) {
                  obj2.editor.style.overflowY = "auto";
                  if (obj2.options.maxHeight) {
                    obj2.editor.style.maxHeight = obj2.options.maxHeight;
                  }
                  if (obj2.options.height) {
                    obj2.editor.style.height = obj2.options.height;
                  }
                }
                if (obj2.options.url) {
                  ajax({
                    url: obj2.options.url,
                    dataType: "html",
                    success: function(result) {
                      obj2.editor.innerHTML = result;
                      Component.setCursor(obj2.editor, obj2.options.focus == "initial" ? true : false);
                    }
                  });
                } else {
                  if (obj2.options.value) {
                    obj2.editor.innerHTML = obj2.options.value;
                  } else {
                    for (var i = 0; i < el.children.length; i++) {
                      obj2.editor.appendChild(el.children[i]);
                    }
                  }
                }
                el.innerHTML = "";
                var change = function(e) {
                  if (typeof obj2.options.onchange == "function") {
                    obj2.options.onchange(el, obj2, e);
                  }
                  obj2.options.value = obj2.getData();
                  if (el.value != obj2.options.value) {
                    el.value = obj2.options.value;
                    if (typeof el.oninput == "function") {
                      el.oninput({
                        type: "input",
                        target: el,
                        value: el.value
                      });
                    }
                  }
                };
                var extractImageFromHtml = function(html) {
                  var div = document.createElement("div");
                  div.innerHTML = html;
                  var img = div.querySelectorAll("img");
                  if (img.length) {
                    for (var i2 = 0; i2 < img.length; i2++) {
                      obj2.addImage(img[i2].src);
                    }
                  }
                };
                var insertNodeAtCaret = function(newNode) {
                  var sel, range;
                  if (window.getSelection) {
                    sel = window.getSelection();
                    if (sel.rangeCount) {
                      range = sel.getRangeAt(0);
                      var selectedText = range.toString();
                      range.deleteContents();
                      range.insertNode(newNode);
                      range.setStartAfter(newNode);
                      range.setEndAfter(newNode);
                      sel.removeAllRanges();
                      sel.addRange(range);
                    }
                  }
                };
                var updateTotalImages = function() {
                  var o = null;
                  if (o = snippet.children[0]) {
                    if (!o.classList.contains("jslider-grid")) {
                      o.classList.add("jslider-grid");
                    }
                    var number = o.children.length;
                    o.setAttribute("data-number", number > 4 ? 4 : number);
                    if (number > 4) {
                      o.setAttribute("data-total", number - 4);
                    } else {
                      o.removeAttribute("data-total");
                    }
                  }
                };
                var appendImage = function(image) {
                  if (!snippet.innerHTML) {
                    obj2.appendSnippet({});
                  }
                  snippet.children[0].appendChild(image);
                  updateTotalImages();
                };
                obj2.appendSnippet = function(data) {
                  snippet.innerHTML = "";
                  var a = ["image", "title", "description", "host", "url"];
                  for (var i2 = 0; i2 < a.length; i2++) {
                    var div = document.createElement("div");
                    div.className = "jsnippet-" + a[i2];
                    div.setAttribute("data-k", a[i2]);
                    snippet.appendChild(div);
                    if (data[a[i2]]) {
                      if (a[i2] == "image") {
                        if (!Array.isArray(data.image)) {
                          data.image = [data.image];
                        }
                        for (var j = 0; j < data.image.length; j++) {
                          var img = document.createElement("img");
                          img.src = data.image[j];
                          div.appendChild(img);
                        }
                      } else {
                        div.innerHTML = data[a[i2]];
                      }
                    }
                  }
                  obj2.editor.appendChild(document.createElement("br"));
                  obj2.editor.appendChild(snippet);
                };
                obj2.setData = function(o) {
                  if (typeof o == "object") {
                    obj2.editor.innerHTML = o.content;
                  } else {
                    obj2.editor.innerHTML = o;
                  }
                  if (obj2.options.focus) {
                    Component.setCursor(obj2.editor, true);
                  }
                  files = [];
                };
                obj2.getFiles = function() {
                  var f = obj2.editor.querySelectorAll(".jfile");
                  var d = [];
                  for (var i2 = 0; i2 < f.length; i2++) {
                    if (files[f[i2].src]) {
                      d.push(files[f[i2].src]);
                    }
                  }
                  return d;
                };
                obj2.getText = function() {
                  return obj2.editor.innerText;
                };
                obj2.getData = function(json) {
                  if (!json) {
                    var data = obj2.editor.innerHTML;
                  } else {
                    var data = {
                      content: ""
                    };
                    if (snippet.innerHTML) {
                      var index = 0;
                      data.snippet = {};
                      for (var i2 = 0; i2 < snippet.children.length; i2++) {
                        var key = snippet.children[i2].getAttribute("data-k");
                        if (key) {
                          if (key == "image") {
                            if (!data.snippet.image) {
                              data.snippet.image = [];
                            }
                            for (var j = 0; j < snippet.children[i2].children.length; j++) {
                              data.snippet.image.push(snippet.children[i2].children[j].getAttribute("src"));
                            }
                          } else {
                            data.snippet[key] = snippet.children[i2].innerHTML;
                          }
                        }
                      }
                    }
                    var f = Object.keys(files);
                    if (f.length) {
                      data.files = [];
                      for (var i2 = 0; i2 < f.length; i2++) {
                        data.files.push(files[f[i2]]);
                      }
                    }
                    var d = document.createElement("div");
                    d.innerHTML = obj2.editor.innerHTML;
                    var s = d.querySelector(".jsnippet");
                    if (s) {
                      s.remove();
                    }
                    var text = d.innerHTML;
                    text = text.replace(/<br>/g, "\n");
                    text = text.replace(/<\/div>/g, "</div>\n");
                    text = text.replace(/<(?:.|\n)*?>/gm, "");
                    data.content = text.trim();
                    processExtensions("getData", data);
                  }
                  return data;
                };
                obj2.reset = function() {
                  obj2.editor.innerHTML = "";
                  snippet.innerHTML = "";
                  files = [];
                };
                obj2.addPdf = function(data) {
                  if (data.result.substr(0, 4) != "data") {
                    console.error("Invalid source");
                  } else {
                    var canvas = document.createElement("canvas");
                    canvas.width = 60;
                    canvas.height = 60;
                    var img = new Image();
                    var ctx = canvas.getContext("2d");
                    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
                    canvas.toBlob(function(blob) {
                      var newImage = document.createElement("img");
                      newImage.src = window.URL.createObjectURL(blob);
                      newImage.title = data.name;
                      newImage.className = "jfile pdf";
                      files[newImage.src] = {
                        file: newImage.src,
                        extension: "pdf",
                        content: data.result
                      };
                      document.execCommand("insertHtml", false, newImage.outerHTML);
                    });
                  }
                };
                obj2.addImage = function(src, asSnippet) {
                  if (!src) {
                    src = "";
                  }
                  if (src.substr(0, 4) != "data" && !obj2.options.remoteParser) {
                    console.error("remoteParser not defined in your initialization");
                  } else {
                    if (src.substr(0, 4) == "data") {
                      var extension = src.split(";");
                      extension = extension[0].split("/");
                      extension = extension[1];
                    } else {
                      var extension = src.substr(src.lastIndexOf(".") + 1);
                      src = obj2.options.remoteParser + src;
                    }
                    var img = new Image();
                    img.onload = function onload() {
                      var canvas = document.createElement("canvas");
                      canvas.width = img.width;
                      canvas.height = img.height;
                      var ctx = canvas.getContext("2d");
                      ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
                      canvas.toBlob(function(blob) {
                        var newImage = document.createElement("img");
                        newImage.src = window.URL.createObjectURL(blob);
                        newImage.classList.add("jfile");
                        newImage.setAttribute("tabindex", "900");
                        newImage.setAttribute("width", img.width);
                        newImage.setAttribute("height", img.height);
                        files[newImage.src] = {
                          file: newImage.src,
                          extension,
                          content: canvas.toDataURL()
                        };
                        if (obj2.options.dropAsSnippet || asSnippet) {
                          appendImage(newImage);
                          files[newImage.src].snippet = true;
                        } else {
                          document.execCommand("insertHtml", false, newImage.outerHTML);
                        }
                        change();
                      });
                    };
                    img.src = src;
                  }
                };
                obj2.addFile = function(files2) {
                  var reader = [];
                  for (var i2 = 0; i2 < files2.length; i2++) {
                    if (files2[i2].size > obj2.options.maxFileSize) {
                      alert("The file is too big");
                    } else {
                      var type = files2[i2].type.split("/");
                      if (type[0] == "image") {
                        type = 1;
                      } else if (type[1] == "pdf") {
                        type = 2;
                      } else {
                        type = 0;
                      }
                      if (type) {
                        reader[i2] = new FileReader();
                        reader[i2].index = i2;
                        reader[i2].type = type;
                        reader[i2].name = files2[i2].name;
                        reader[i2].date = files2[i2].lastModified;
                        reader[i2].size = files2[i2].size;
                        reader[i2].addEventListener("load", function(data) {
                          if (data.target.type == 2) {
                            if (obj2.options.acceptFiles == true) {
                              obj2.addPdf(data.target);
                            }
                          } else {
                            obj2.addImage(data.target.result);
                          }
                        }, false);
                        reader[i2].readAsDataURL(files2[i2]);
                      } else {
                        alert("The extension is not allowed");
                      }
                    }
                  }
                };
                obj2.destroy = function() {
                  obj2.editor.removeEventListener("mouseup", editorMouseUp);
                  obj2.editor.removeEventListener("mousedown", editorMouseDown);
                  obj2.editor.removeEventListener("mousemove", editorMouseMove);
                  obj2.editor.removeEventListener("keyup", editorKeyUp);
                  obj2.editor.removeEventListener("keydown", editorKeyDown);
                  obj2.editor.removeEventListener("dragstart", editorDragStart);
                  obj2.editor.removeEventListener("dragenter", editorDragEnter);
                  obj2.editor.removeEventListener("dragover", editorDragOver);
                  obj2.editor.removeEventListener("drop", editorDrop);
                  obj2.editor.removeEventListener("paste", editorPaste);
                  obj2.editor.removeEventListener("blur", editorBlur);
                  obj2.editor.removeEventListener("focus", editorFocus);
                  el.editor = null;
                  el.classList.remove("jeditor-container");
                  toolbar2.remove();
                  snippet.remove();
                  obj2.editor.remove();
                };
                obj2.upload = function() {
                  helpers.click(obj2.file);
                };
                var remove = [
                  HTMLUnknownElement,
                  HTMLAudioElement,
                  HTMLEmbedElement,
                  HTMLIFrameElement,
                  HTMLTextAreaElement,
                  HTMLInputElement,
                  HTMLScriptElement
                ];
                var validProperty = ["width", "height", "align", "border", "src", "tabindex"];
                var validStyle = ["color", "font-weight", "font-size", "background", "background-color", "margin"];
                var parse = function(element) {
                  if (element.attributes && element.attributes.length) {
                    var image = null;
                    var style = null;
                    var elementStyle = element.getAttribute("style");
                    if (elementStyle) {
                      style = [];
                      var t = elementStyle.split(";");
                      for (var j = 0; j < t.length; j++) {
                        var v = t[j].trim().split(":");
                        if (validStyle.indexOf(v[0].trim()) >= 0) {
                          var k = v.shift();
                          var v = v.join(":");
                          style.push(k + ":" + v);
                        }
                      }
                    }
                    if (element.tagName.toUpperCase() == "IMG") {
                      if (!obj2.options.acceptImages || !element.src) {
                        element.parentNode.removeChild(element);
                      } else {
                        element.setAttribute("tabindex", "900");
                        obj2.addImage(element.src);
                      }
                    }
                    var attr = [];
                    for (var i2 = 0; i2 < element.attributes.length; i2++) {
                      attr.push(element.attributes[i2].name);
                    }
                    if (attr.length) {
                      attr.forEach(function(v2) {
                        if (validProperty.indexOf(v2) == -1) {
                          element.removeAttribute(v2);
                        } else {
                          if (element.attributes[i2].value.indexOf("<") !== -1) {
                            element.attributes[i2].value.replace("<", "&#60;");
                          }
                        }
                      });
                    }
                    element.style = "";
                    if (style && style.length) {
                      element.setAttribute("style", style.join(";"));
                    }
                  }
                  if (element.children.length) {
                    for (var i2 = 0; i2 < element.children.length; i2++) {
                      parse(element.children[i2]);
                    }
                  }
                  if (remove.indexOf(element.constructor) >= 0) {
                    element.remove();
                  }
                };
                var select = function(e) {
                  var s = window.getSelection();
                  var r = document.createRange();
                  r.selectNode(e);
                  s.addRange(r);
                };
                var filter = function(data) {
                  if (data) {
                    data = data.replace(new RegExp("<!--(.*?)-->", "gsi"), "");
                  }
                  var parser = new DOMParser();
                  var d = parser.parseFromString(data, "text/html");
                  parse(d);
                  var span = document.createElement("span");
                  span.innerHTML = d.firstChild.innerHTML;
                  return span;
                };
                var editorPaste = function(e) {
                  if (obj2.options.filterPaste == true) {
                    if (e.clipboardData || e.originalEvent.clipboardData) {
                      var html = (e.originalEvent || e).clipboardData.getData("text/html");
                      var text = (e.originalEvent || e).clipboardData.getData("text/plain");
                      var file = (e.originalEvent || e).clipboardData.files;
                    } else if (window.clipboardData) {
                      var html = window.clipboardData.getData("Html");
                      var text = window.clipboardData.getData("Text");
                      var file = window.clipboardData.files;
                    }
                    if (file.length) {
                      obj2.addFile(file);
                    } else {
                      if (!html) {
                        html = text.split("\r\n");
                        if (!e.target.innerText) {
                          html.map(function(v) {
                            var d2 = document.createElement("div");
                            d2.innerText = v;
                            obj2.editor.appendChild(d2);
                          });
                        } else {
                          html = html.map(function(v) {
                            return "<div>" + v + "</div>";
                          });
                          document.execCommand("insertHtml", false, html.join(""));
                        }
                      } else {
                        var d = filter(html);
                        document.execCommand("insertHtml", false, d.innerHTML);
                      }
                    }
                    e.preventDefault();
                  }
                };
                var editorDragStart = function(e) {
                  if (editorAction && editorAction.e) {
                    e.preventDefault();
                  }
                };
                var editorDragEnter = function(e) {
                  if (editorAction || obj2.options.dropZone == false) {
                  } else {
                    el.classList.add("jeditor-dragging");
                    e.preventDefault();
                  }
                };
                var editorDragOver = function(e) {
                  if (editorAction || obj2.options.dropZone == false) {
                  } else {
                    if (editorTimer) {
                      clearTimeout(editorTimer);
                    }
                    editorTimer = setTimeout(function() {
                      el.classList.remove("jeditor-dragging");
                    }, 100);
                    e.preventDefault();
                  }
                };
                var editorDrop = function(e) {
                  if (editorAction || obj2.options.dropZone == false) {
                  } else {
                    var range = null;
                    if (document.caretRangeFromPoint) {
                      range = document.caretRangeFromPoint(e.clientX, e.clientY);
                    } else if (e.rangeParent) {
                      range = document.createRange();
                      range.setStart(e.rangeParent, e.rangeOffset);
                    }
                    var sel = window.getSelection();
                    sel.removeAllRanges();
                    sel.addRange(range);
                    sel.anchorNode.parentNode.focus();
                    var html = (e.originalEvent || e).dataTransfer.getData("text/html");
                    var text = (e.originalEvent || e).dataTransfer.getData("text/plain");
                    var file = (e.originalEvent || e).dataTransfer.files;
                    if (file.length) {
                      obj2.addFile(file);
                    } else if (text) {
                      extractImageFromHtml(html);
                    }
                    el.classList.remove("jeditor-dragging");
                    e.preventDefault();
                  }
                };
                var editorBlur = function(e) {
                  processExtensions("onevent", e);
                  change(e);
                  if (typeof obj2.options.onblur == "function") {
                    obj2.options.onblur(el, obj2, e);
                  }
                };
                var editorFocus = function(e) {
                  if (typeof obj2.options.onfocus == "function") {
                    obj2.options.onfocus(el, obj2, e);
                  }
                };
                var editorKeyUp = function(e) {
                  if (!obj2.editor.innerHTML) {
                    obj2.editor.innerHTML = "<div><br></div>";
                  }
                  if (typeof obj2.options.onkeyup == "function") {
                    obj2.options.onkeyup(el, obj2, e);
                  }
                };
                var editorKeyDown = function(e) {
                  processExtensions("onevent", e);
                  if (e.key == "Delete") {
                    if (e.target.tagName == "IMG") {
                      var parent = e.target.parentNode;
                      select(e.target);
                      if (parent.classList.contains("jsnippet-image")) {
                        updateTotalImages();
                      }
                    }
                  }
                  if (typeof obj2.options.onkeydown == "function") {
                    obj2.options.onkeydown(el, obj2, e);
                  }
                };
                var editorMouseUp = function(e) {
                  if (editorAction && editorAction.e) {
                    editorAction.e.classList.remove("resizing");
                    if (editorAction.e.changed == true) {
                      var image = editorAction.e.cloneNode();
                      image.width = parseInt(editorAction.e.style.width) || editorAction.e.getAttribute("width");
                      image.height = parseInt(editorAction.e.style.height) || editorAction.e.getAttribute("height");
                      editorAction.e.style.width = "";
                      editorAction.e.style.height = "";
                      select(editorAction.e);
                      document.execCommand("insertHtml", false, image.outerHTML);
                    }
                  }
                  editorAction = false;
                };
                var editorMouseDown = function(e) {
                  var close = function(snippet2) {
                    var rect2 = snippet2.getBoundingClientRect();
                    if (rect2.width - (e.clientX - rect2.left) < 40 && e.clientY - rect2.top < 40) {
                      snippet2.innerHTML = "";
                      snippet2.remove();
                    }
                  };
                  if (e.target.tagName == "IMG") {
                    if (e.target.style.cursor) {
                      var rect = e.target.getBoundingClientRect();
                      editorAction = {
                        e: e.target,
                        x: e.clientX,
                        y: e.clientY,
                        w: rect.width,
                        h: rect.height,
                        d: e.target.style.cursor
                      };
                      if (!e.target.getAttribute("width")) {
                        e.target.setAttribute("width", rect.width);
                      }
                      if (!e.target.getAttribute("height")) {
                        e.target.setAttribute("height", rect.height);
                      }
                      var s = window.getSelection();
                      if (s.rangeCount) {
                        for (var i2 = 0; i2 < s.rangeCount; i2++) {
                          s.removeRange(s.getRangeAt(i2));
                        }
                      }
                      e.target.classList.add("resizing");
                    } else {
                      editorAction = true;
                    }
                  } else {
                    if (e.target.classList.contains("jsnippet")) {
                      close(e.target);
                    } else if (e.target.parentNode.classList.contains("jsnippet")) {
                      close(e.target.parentNode);
                    }
                    editorAction = true;
                  }
                };
                var editorMouseMove = function(e) {
                  if (e.target.tagName == "IMG" && !e.target.parentNode.classList.contains("jsnippet-image") && obj2.options.allowImageResize == true) {
                    if (e.target.getAttribute("tabindex")) {
                      var rect = e.target.getBoundingClientRect();
                      if (e.clientY - rect.top < 5) {
                        if (rect.width - (e.clientX - rect.left) < 5) {
                          e.target.style.cursor = "ne-resize";
                        } else if (e.clientX - rect.left < 5) {
                          e.target.style.cursor = "nw-resize";
                        } else {
                          e.target.style.cursor = "n-resize";
                        }
                      } else if (rect.height - (e.clientY - rect.top) < 5) {
                        if (rect.width - (e.clientX - rect.left) < 5) {
                          e.target.style.cursor = "se-resize";
                        } else if (e.clientX - rect.left < 5) {
                          e.target.style.cursor = "sw-resize";
                        } else {
                          e.target.style.cursor = "s-resize";
                        }
                      } else if (rect.width - (e.clientX - rect.left) < 5) {
                        e.target.style.cursor = "e-resize";
                      } else if (e.clientX - rect.left < 5) {
                        e.target.style.cursor = "w-resize";
                      } else {
                        e.target.style.cursor = "";
                      }
                    }
                  }
                  if (e.which == 1 && editorAction && editorAction.d) {
                    if (editorAction.d == "e-resize" || editorAction.d == "ne-resize" || editorAction.d == "se-resize") {
                      editorAction.e.style.width = editorAction.w + (e.clientX - editorAction.x);
                      if (e.shiftKey) {
                        var newHeight = (e.clientX - editorAction.x) * (editorAction.h / editorAction.w);
                        editorAction.e.style.height = editorAction.h + newHeight;
                      } else {
                        var newHeight = null;
                      }
                    }
                    if (!newHeight) {
                      if (editorAction.d == "s-resize" || editorAction.d == "se-resize" || editorAction.d == "sw-resize") {
                        if (!e.shiftKey) {
                          editorAction.e.style.height = editorAction.h + (e.clientY - editorAction.y);
                        }
                      }
                    }
                    editorAction.e.changed = true;
                  }
                };
                var processExtensions = function(method, data) {
                  if (obj2.options.extensions) {
                    var ext = Object.keys(obj2.options.extensions);
                    if (ext.length) {
                      for (var i2 = 0; i2 < ext.length; i2++)
                        if (obj2.options.extensions[ext[i2]] && typeof obj2.options.extensions[ext[i2]][method] == "function") {
                          obj2.options.extensions[ext[i2]][method].call(obj2, data);
                        }
                    }
                  }
                };
                var loadExtensions = function() {
                  if (obj2.options.extensions) {
                    var ext = Object.keys(obj2.options.extensions);
                    if (ext.length) {
                      for (var i2 = 0; i2 < ext.length; i2++) {
                        if (obj2.options.extensions[ext[i2]] && typeof obj2.options.extensions[ext[i2]] == "function") {
                          obj2.options.extensions[ext[i2]] = obj2.options.extensions[ext[i2]](el, obj2);
                        }
                      }
                    }
                  }
                };
                document.addEventListener("mouseup", editorMouseUp);
                document.addEventListener("mousemove", editorMouseMove);
                obj2.editor.addEventListener("mousedown", editorMouseDown);
                obj2.editor.addEventListener("keyup", editorKeyUp);
                obj2.editor.addEventListener("keydown", editorKeyDown);
                obj2.editor.addEventListener("dragstart", editorDragStart);
                obj2.editor.addEventListener("dragenter", editorDragEnter);
                obj2.editor.addEventListener("dragover", editorDragOver);
                obj2.editor.addEventListener("drop", editorDrop);
                obj2.editor.addEventListener("paste", editorPaste);
                obj2.editor.addEventListener("focus", editorFocus);
                obj2.editor.addEventListener("blur", editorBlur);
                el.appendChild(obj2.editor);
                if (obj2.options.snippet) {
                  obj2.appendSnippet(obj2.options.snippet);
                }
                if (obj2.options.toolbar) {
                  if (Array.isArray(obj2.options.toolbar)) {
                    var toolbarOptions = {
                      container: true,
                      responsive: true,
                      items: obj2.options.toolbar
                    };
                  } else if (obj2.options.toolbar === true) {
                    var toolbarOptions = {
                      container: true,
                      responsive: true,
                      items: []
                    };
                  } else {
                    var toolbarOptions = obj2.options.toolbar;
                  }
                  if (!(toolbarOptions.items && toolbarOptions.items.length)) {
                    toolbarOptions.items = Component.getDefaultToolbar(obj2);
                  }
                  if (obj2.options.toolbarOnTop) {
                    el.classList.add("toolbar-on-top");
                    el.insertBefore(toolbar2, el.firstChild);
                  } else {
                    obj2.editor.style.padding = "15px";
                    el.appendChild(toolbar2);
                  }
                  Toolbar(toolbar2, toolbarOptions);
                  toolbar2.addEventListener("click", function() {
                    obj2.editor.focus();
                  });
                }
                obj2.file = document.createElement("input");
                obj2.file.style.display = "none";
                obj2.file.type = "file";
                obj2.file.setAttribute("accept", "image/*");
                obj2.file.onchange = function() {
                  obj2.addFile(this.files);
                };
                el.appendChild(obj2.file);
                if (obj2.options.focus) {
                  Component.setCursor(obj2.editor, obj2.options.focus == "initial" ? true : false);
                }
                el.change = obj2.setData;
                el.val = function(val) {
                  if (val === void 0) {
                    var o = el.getAttribute("data-html") === "true" ? false : true;
                    return obj2.getData(o);
                  } else {
                    obj2.setData(val);
                  }
                };
                loadExtensions();
                el.editor = obj2;
                if (typeof obj2.options.onload == "function") {
                  obj2.options.onload(el, obj2, obj2.editor);
                }
                return obj2;
              };
              Component.setCursor = function(element, first) {
                element.focus();
                document.execCommand("selectAll");
                var sel = window.getSelection();
                var range = sel.getRangeAt(0);
                if (first == true) {
                  var node = range.startContainer;
                  var size = 0;
                } else {
                  var node = range.endContainer;
                  var size = node.length;
                }
                range.setStart(node, size);
                range.setEnd(node, size);
                sel.removeAllRanges();
                sel.addRange(range);
              };
              Component.getDefaultToolbar = function(obj2) {
                var color = function(a, b, c) {
                  if (!c.color) {
                    var t = null;
                    var colorPicker = Color(c, {
                      onchange: function(o, v) {
                        if (c.k === "color") {
                          document.execCommand("foreColor", false, v);
                        } else {
                          document.execCommand("backColor", false, v);
                        }
                      }
                    });
                    c.color.open();
                  }
                };
                var items = [];
                items.push({
                  content: "undo",
                  onclick: function() {
                    document.execCommand("undo");
                  }
                });
                items.push({
                  content: "redo",
                  onclick: function() {
                    document.execCommand("redo");
                  }
                });
                items.push({
                  type: "divisor"
                });
                if (obj2.options.toolbarOnTop) {
                  items.push({
                    type: "select",
                    width: "140px",
                    options: ["Default", "Verdana", "Arial", "Courier New"],
                    render: function(e) {
                      return '<span style="font-family:' + e + '">' + e + "</span>";
                    },
                    onchange: function(a, b, c, d, e) {
                      document.execCommand("fontName", false, d);
                    }
                  });
                  items.push({
                    type: "select",
                    content: "format_size",
                    options: ["x-small", "small", "medium", "large", "x-large"],
                    render: function(e) {
                      return '<span style="font-size:' + e + '">' + e + "</span>";
                    },
                    onchange: function(a, b, c, d, e) {
                      document.execCommand("fontSize", false, parseInt(e) + 1);
                    }
                  });
                  items.push({
                    type: "select",
                    options: ["format_align_left", "format_align_center", "format_align_right", "format_align_justify"],
                    render: function(e) {
                      return '<i class="material-icons">' + e + "</i>";
                    },
                    onchange: function(a, b, c, d, e) {
                      var options = ["JustifyLeft", "justifyCenter", "justifyRight", "justifyFull"];
                      document.execCommand(options[e]);
                    }
                  });
                  items.push({
                    type: "divisor"
                  });
                  items.push({
                    content: "format_color_text",
                    k: "color",
                    onclick: color
                  });
                  items.push({
                    content: "format_color_fill",
                    k: "background-color",
                    onclick: color
                  });
                }
                items.push({
                  content: "format_bold",
                  onclick: function(a, b, c) {
                    document.execCommand("bold");
                    if (document.queryCommandState("bold")) {
                      c.classList.add("selected");
                    } else {
                      c.classList.remove("selected");
                    }
                  }
                });
                items.push({
                  content: "format_italic",
                  onclick: function(a, b, c) {
                    document.execCommand("italic");
                    if (document.queryCommandState("italic")) {
                      c.classList.add("selected");
                    } else {
                      c.classList.remove("selected");
                    }
                  }
                });
                items.push({
                  content: "format_underline",
                  onclick: function(a, b, c) {
                    document.execCommand("underline");
                    if (document.queryCommandState("underline")) {
                      c.classList.add("selected");
                    } else {
                      c.classList.remove("selected");
                    }
                  }
                });
                items.push({
                  type: "divisor"
                });
                items.push({
                  content: "format_list_bulleted",
                  onclick: function(a, b, c) {
                    document.execCommand("insertUnorderedList");
                    if (document.queryCommandState("insertUnorderedList")) {
                      c.classList.add("selected");
                    } else {
                      c.classList.remove("selected");
                    }
                  }
                });
                items.push({
                  content: "format_list_numbered",
                  onclick: function(a, b, c) {
                    document.execCommand("insertOrderedList");
                    if (document.queryCommandState("insertOrderedList")) {
                      c.classList.add("selected");
                    } else {
                      c.classList.remove("selected");
                    }
                  }
                });
                items.push({
                  content: "format_indent_increase",
                  onclick: function(a, b, c) {
                    document.execCommand("indent", true, null);
                    if (document.queryCommandState("indent")) {
                      c.classList.add("selected");
                    } else {
                      c.classList.remove("selected");
                    }
                  }
                });
                items.push({
                  content: "format_indent_decrease",
                  onclick: function() {
                    document.execCommand("outdent");
                    if (document.queryCommandState("outdent")) {
                      this.classList.add("selected");
                    } else {
                      this.classList.remove("selected");
                    }
                  }
                });
                if (obj2.options.toolbarOnTop) {
                  items.push({
                    type: "divisor"
                  });
                  items.push({
                    content: "photo",
                    onclick: function() {
                      obj2.upload();
                    }
                  });
                  items.push({
                    type: "select",
                    content: "table_view",
                    columns: 8,
                    grid: 8,
                    right: true,
                    options: [
                      "0x0",
                      "1x0",
                      "2x0",
                      "3x0",
                      "4x0",
                      "5x0",
                      "6x0",
                      "7x0",
                      "0x1",
                      "1x1",
                      "2x1",
                      "3x1",
                      "4x1",
                      "5x1",
                      "6x1",
                      "7x1",
                      "0x2",
                      "1x2",
                      "2x2",
                      "3x2",
                      "4x2",
                      "5x2",
                      "6x2",
                      "7x2",
                      "0x3",
                      "1x3",
                      "2x3",
                      "3x3",
                      "4x3",
                      "5x3",
                      "6x3",
                      "7x3",
                      "0x4",
                      "1x4",
                      "2x4",
                      "3x4",
                      "4x4",
                      "5x4",
                      "6x4",
                      "7x4",
                      "0x5",
                      "1x5",
                      "2x5",
                      "3x5",
                      "4x5",
                      "5x5",
                      "6x5",
                      "7x5",
                      "0x6",
                      "1x6",
                      "2x6",
                      "3x6",
                      "4x6",
                      "5x6",
                      "6x6",
                      "7x6",
                      "0x7",
                      "1x7",
                      "2x7",
                      "3x7",
                      "4x7",
                      "5x7",
                      "6x7",
                      "7x7"
                    ],
                    render: function(e, item) {
                      if (item) {
                        item.onmouseover = this.onmouseover;
                        e = e.split("x");
                        item.setAttribute("data-x", e[0]);
                        item.setAttribute("data-y", e[1]);
                      }
                      var element = document.createElement("div");
                      item.style.margin = "1px";
                      item.style.border = "1px solid #ddd";
                      return element;
                    },
                    onmouseover: function(e) {
                      var x = parseInt(e.target.getAttribute("data-x"));
                      var y = parseInt(e.target.getAttribute("data-y"));
                      for (var i = 0; i < e.target.parentNode.children.length; i++) {
                        var element = e.target.parentNode.children[i];
                        var ex = parseInt(element.getAttribute("data-x"));
                        var ey = parseInt(element.getAttribute("data-y"));
                        if (ex <= x && ey <= y) {
                          element.style.backgroundColor = "#cae1fc";
                          element.style.borderColor = "#2977ff";
                        } else {
                          element.style.backgroundColor = "";
                          element.style.borderColor = "#ddd";
                        }
                      }
                    },
                    onchange: function(a, b, c) {
                      c = c.split("x");
                      var table = document.createElement("table");
                      var tbody = document.createElement("tbody");
                      for (var y = 0; y <= c[1]; y++) {
                        var tr = document.createElement("tr");
                        for (var x = 0; x <= c[0]; x++) {
                          var td = document.createElement("td");
                          td.innerHTML = "";
                          tr.appendChild(td);
                        }
                        tbody.appendChild(tr);
                      }
                      table.appendChild(tbody);
                      table.setAttribute("width", "100%");
                      table.setAttribute("cellpadding", "6");
                      table.setAttribute("cellspacing", "0");
                      document.execCommand("insertHTML", false, table.outerHTML);
                    }
                  });
                }
                return items;
              };
              return Component;
            }
            var editor = Editor();
            ;
            function Floating() {
              var Component = function(el, options) {
                var obj2 = {};
                obj2.options = {};
                var defaults = {
                  type: "big",
                  title: "Untitled",
                  width: 510,
                  height: 472
                };
                for (var property in defaults) {
                  if (options && options.hasOwnProperty(property)) {
                    obj2.options[property] = options[property];
                  } else {
                    obj2.options[property] = defaults[property];
                  }
                }
                var setContent = function() {
                  var temp = document.createElement("div");
                  while (el.children[0]) {
                    temp.appendChild(el.children[0]);
                  }
                  obj2.content = document.createElement("div");
                  obj2.content.className = "jfloating_content";
                  obj2.content.innerHTML = el.innerHTML;
                  while (temp.children[0]) {
                    obj2.content.appendChild(temp.children[0]);
                  }
                  obj2.container = document.createElement("div");
                  obj2.container.className = "jfloating";
                  obj2.container.appendChild(obj2.content);
                  if (obj2.options.title) {
                    obj2.container.setAttribute("title", obj2.options.title);
                  } else {
                    obj2.container.classList.add("no-title");
                  }
                  if (obj2.options.width) {
                    obj2.container.style.width = parseInt(obj2.options.width) + "px";
                  }
                  if (obj2.options.height) {
                    obj2.container.style.height = parseInt(obj2.options.height) + "px";
                  }
                  el.innerHTML = "";
                  el.appendChild(obj2.container);
                };
                var setEvents = function() {
                  if (obj2.container) {
                    obj2.container.addEventListener("click", function(e) {
                      var rect = e.target.getBoundingClientRect();
                      if (e.target.classList.contains("jfloating")) {
                        if (e.changedTouches && e.changedTouches[0]) {
                          var x = e.changedTouches[0].clientX;
                          var y = e.changedTouches[0].clientY;
                        } else {
                          var x = e.clientX;
                          var y = e.clientY;
                        }
                        if (rect.width - (x - rect.left) < 50 && y - rect.top < 50) {
                          setTimeout(function() {
                            obj2.close();
                          }, 100);
                        } else {
                          obj2.setState();
                        }
                      }
                    });
                  }
                };
                var setType = function() {
                  obj2.container.classList.add("jfloating-" + obj2.options.type);
                };
                obj2.state = {
                  isMinized: false
                };
                obj2.setState = function() {
                  if (obj2.state.isMinized) {
                    obj2.container.classList.remove("jfloating-minimized");
                  } else {
                    obj2.container.classList.add("jfloating-minimized");
                  }
                  obj2.state.isMinized = !obj2.state.isMinized;
                };
                obj2.close = function() {
                  Components.elements.splice(Component.elements.indexOf(obj2.container), 1);
                  obj2.updatePosition();
                  el.remove();
                };
                obj2.updatePosition = function() {
                  for (var i = 0; i < Component.elements.length; i++) {
                    var floating2 = Component.elements[i];
                    var prevFloating = Component.elements[i - 1];
                    floating2.style.right = i * (prevFloating ? prevFloating.offsetWidth : floating2.offsetWidth) * 1.01 + "px";
                  }
                };
                obj2.init = function() {
                  setContent();
                  setEvents();
                  setType();
                  Component.elements.push(obj2.container);
                  obj2.updatePosition();
                  el.floating = obj2;
                };
                obj2.init();
                return obj2;
              };
              Component.elements = [];
              return Component;
            }
            var floating = Floating();
            ;
            function Validations() {
              const isNumeric = function(num) {
                return !isNaN(num) && num !== null && num !== "";
              };
              const numberCriterias = {
                "between": function(value, range) {
                  return value >= range[0] && value <= range[1];
                },
                "not between": function(value, range) {
                  return value < range[0] || value > range[1];
                },
                "<": function(value, range) {
                  return value < range[0];
                },
                "<=": function(value, range) {
                  return value <= range[0];
                },
                ">": function(value, range) {
                  return value > range[0];
                },
                ">=": function(value, range) {
                  return value >= range[0];
                },
                "=": function(value, range) {
                  return value == range[0];
                },
                "!=": function(value, range) {
                  return value != range[0];
                }
              };
              const dateCriterias = {
                "valid date": function() {
                  return true;
                },
                "=": function(value, range) {
                  return value === range[0];
                },
                "!=": function(value, range) {
                  return value !== range[0];
                },
                "<": function(value, range) {
                  return value < range[0];
                },
                "<=": function(value, range) {
                  return value <= range[0];
                },
                ">": function(value, range) {
                  return value > range[0];
                },
                ">=": function(value, range) {
                  return value >= range[0];
                },
                "between": function(value, range) {
                  return value >= range[0] && value <= range[1];
                },
                "not between": function(value, range) {
                  return value < range[0] || value > range[1];
                }
              };
              const textCriterias = {
                "contains": function(value, range) {
                  return value.includes(range[0]);
                },
                "not contains": function(value, range) {
                  return !value.includes(range[0]);
                },
                "begins with": function(value, range) {
                  return value.startsWith(range[0]);
                },
                "ends with": function(value, range) {
                  return value.endsWith(range[0]);
                },
                "=": function(value, range) {
                  return value === range[0];
                },
                "!=": function(value, range) {
                  return value !== range[0];
                },
                "valid email": function(value) {
                  var pattern = new RegExp(/^[^\s@]+@[^\s@]+\.[^\s@]+$/);
                  return pattern.test(value);
                },
                "valid url": function(value) {
                  var pattern = new RegExp(/(((https?:\/\/)|(www\.))[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|]+)/ig);
                  return pattern.test(value);
                }
              };
              const component = function(value, options) {
                if (typeof component[options.type] === "function") {
                  if (options.allowBlank && value === "") {
                    return true;
                  }
                  return component[options.type](value, options);
                }
                return null;
              };
              component.url = function(data) {
                var pattern = new RegExp(/(((https?:\/\/)|(www\.))[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|]+)/ig);
                return pattern.test(data) ? true : false;
              };
              component.email = function(data) {
                var pattern = new RegExp(/^[^\s@]+@[^\s@]+\.[^\s@]+$/);
                return data && pattern.test(data) ? true : false;
              };
              component.required = function(data) {
                return data && data.trim() ? true : false;
              };
              component.exist = function(data, options) {
                return !!data.toString().trim();
              };
              component["not exist"] = function(data, options) {
                return !data.toString().trim();
              };
              component.empty = function(data) {
                return !data.toString().trim();
              };
              component.notEmpty = function(data) {
                return !!data.toString().trim();
              };
              component.number = function(data, options) {
                if (!isNumeric(data)) {
                  return false;
                }
                if (!options || !options.criteria) {
                  return true;
                }
                if (!numberCriterias[options.criteria]) {
                  return false;
                }
                let values = options.value.map(function(num) {
                  return parseFloat(num);
                });
                return numberCriterias[options.criteria](data, values);
              };
              component.login = function(data) {
                let pattern = new RegExp(/^[a-zA-Z0-9._-]+$/);
                return data && pattern.test(data) ? true : false;
              };
              component.list = function(data, options) {
                let dataType = typeof data;
                if (dataType !== "string" && dataType !== "number") {
                  return false;
                }
                let list;
                if (typeof options.value[0] === "string") {
                  list = options.value[0].split(",");
                } else {
                  list = options.value[0];
                }
                if (!Array.isArray(list)) {
                  return false;
                } else {
                  let validOption = list.findIndex(function(item) {
                    return item == data;
                  });
                  return validOption > -1;
                }
              };
              const getCurrentDateWithoutTime = function() {
                let date = /* @__PURE__ */ new Date();
                date.setHours(0, 0, 0, 0);
                return date;
              };
              const relativeDates = {
                "one year ago": function() {
                  let date = getCurrentDateWithoutTime();
                  date.setFullYear(date.getFullYear() - 1);
                  return date;
                },
                "one month ago": function() {
                  let date = getCurrentDateWithoutTime();
                  date.setMonth(date.getMonth() - 1);
                  return date;
                },
                "one week ago": function() {
                  let date = getCurrentDateWithoutTime();
                  date.setDate(date.getDate() - 7);
                  return date;
                },
                yesterday: function() {
                  let date = getCurrentDateWithoutTime();
                  date.setDate(date.getDate() - 1);
                  return date;
                },
                today: getCurrentDateWithoutTime,
                tomorrow: function() {
                  let date = getCurrentDateWithoutTime();
                  date.setDate(date.getDate() + 1);
                  return date;
                }
              };
              component.date = function(data, options) {
                if (isNumeric(data) && data > 0 && data < 1e6) {
                  data = helpers_date.numToDate(data);
                }
                if (new Date(data) == "Invalid Date") {
                  return false;
                }
                if (!options || !options.criteria) {
                  return true;
                }
                if (!dateCriterias[options.criteria]) {
                  return false;
                }
                let values = options.value.map(function(date) {
                  if (typeof date === "string" && relativeDates[date]) {
                    return relativeDates[date]().getTime();
                  }
                  return new Date(date).getTime();
                });
                return dateCriterias[options.criteria](new Date(data).getTime(), values);
              };
              component.text = function(data, options) {
                if (typeof data !== "string") {
                  return false;
                }
                if (!options || !options.criteria) {
                  return true;
                }
                if (!textCriterias[options.criteria]) {
                  return false;
                }
                return textCriterias[options.criteria](data, options.value);
              };
              component.textLength = function(data, options) {
                data = data.toString();
                return component.number(data.length, options);
              };
              return component;
            }
            var validations = Validations();
            ;
            function Form() {
              var Component = function(el, options) {
                var obj2 = {};
                obj2.options = {};
                var defaults = {
                  url: null,
                  message: "Are you sure? There are unsaved information in your form",
                  ignore: false,
                  currentHash: null,
                  submitButton: null,
                  validations: null,
                  onbeforeload: null,
                  onload: null,
                  onbeforesave: null,
                  onsave: null,
                  onbeforeremove: null,
                  onremove: null,
                  onerror: function(el2, message) {
                    alert(message);
                  }
                };
                for (var property in defaults) {
                  if (options && options.hasOwnProperty(property)) {
                    obj2.options[property] = options[property];
                  } else {
                    obj2.options[property] = defaults[property];
                  }
                }
                if (!obj2.options.validations) {
                  obj2.options.validations = {};
                }
                if (!obj2.options.submitButton) {
                  obj2.options.submitButton = el.querySelector("input[type=submit]");
                }
                if (obj2.options.submitButton && obj2.options.url) {
                  obj2.options.submitButton.onclick = function() {
                    obj2.save();
                  };
                }
                if (!obj2.options.validations.email) {
                  obj2.options.validations.email = validations.email;
                }
                if (!obj2.options.validations.length) {
                  obj2.options.validations.length = validations.length;
                }
                if (!obj2.options.validations.required) {
                  obj2.options.validations.required = validations.required;
                }
                obj2.setUrl = function(url) {
                  obj2.options.url = url;
                };
                obj2.load = function() {
                  ajax({
                    url: obj2.options.url,
                    method: "GET",
                    dataType: "json",
                    queue: true,
                    success: function(data) {
                      if (typeof obj2.options.onbeforeload == "function") {
                        var ret = obj2.options.onbeforeload(el, data);
                        if (ret) {
                          data = ret;
                        }
                      }
                      Component.setElements(el, data);
                      if (typeof obj2.options.onload == "function") {
                        obj2.options.onload(el, data);
                      }
                    }
                  });
                };
                obj2.save = function() {
                  var test = obj2.validate();
                  if (test) {
                    obj2.options.onerror(el, test);
                  } else {
                    var data = Component.getElements(el, true);
                    if (typeof obj2.options.onbeforesave == "function") {
                      var data = obj2.options.onbeforesave(el, data);
                      if (data === false) {
                        return;
                      }
                    }
                    ajax({
                      url: obj2.options.url,
                      method: "POST",
                      dataType: "json",
                      data,
                      success: function(result) {
                        if (typeof obj2.options.onsave == "function") {
                          obj2.options.onsave(el, data, result);
                        }
                      }
                    });
                  }
                };
                obj2.remove = function() {
                  if (typeof obj2.options.onbeforeremove == "function") {
                    var ret = obj2.options.onbeforeremove(el, obj2);
                    if (ret === false) {
                      return false;
                    }
                  }
                  ajax({
                    url: obj2.options.url,
                    method: "DELETE",
                    dataType: "json",
                    success: function(result) {
                      if (typeof obj2.options.onremove == "function") {
                        obj2.options.onremove(el, obj2, result);
                      }
                      obj2.reset();
                    }
                  });
                };
                var addError = function(element) {
                  element.classList.add("error");
                  if (obj2.options.submitButton) {
                    obj2.options.submitButton.setAttribute("disabled", true);
                  }
                  var error = element.getAttribute("data-error") || "There is an error in the form";
                  element.setAttribute("title", error);
                  return error;
                };
                var delError = function(element) {
                  var error = false;
                  element.classList.remove("error");
                  element.removeAttribute("title");
                  var elements = el.querySelectorAll("input, select, textarea, div[name]");
                  for (var i = 0; i < elements.length; i++) {
                    if (elements[i].getAttribute("data-validation")) {
                      if (elements[i].classList.contains("error")) {
                        error = true;
                      }
                    }
                  }
                  if (obj2.options.submitButton) {
                    if (error) {
                      obj2.options.submitButton.setAttribute("disabled", true);
                    } else {
                      obj2.options.submitButton.removeAttribute("disabled");
                    }
                  }
                };
                obj2.validateElement = function(element) {
                  var test = false;
                  var value = Component.getValue(element);
                  var validation = element.getAttribute("data-validation");
                  if (typeof obj2.options.validations[validation] == "function" && !obj2.options.validations[validation](value, element)) {
                    test = addError(element);
                  } else {
                    if (element.classList.contains("error")) {
                      delError(element);
                    }
                  }
                  return test;
                };
                obj2.reset = function() {
                  var name = null;
                  var elements = el.querySelectorAll("input, select, textarea, div[name]");
                  for (var i = 0; i < elements.length; i++) {
                    if (name = elements[i].getAttribute("name")) {
                      if (elements[i].type == "checkbox" || elements[i].type == "radio") {
                        elements[i].checked = false;
                      } else {
                        if (typeof elements[i].val == "function") {
                          elements[i].val("");
                        } else {
                          elements[i].value = "";
                        }
                      }
                    }
                  }
                };
                obj2.validate = function() {
                  var test = [];
                  var elements = el.querySelectorAll("input, select, textarea, div[name]");
                  for (var i = 0; i < elements.length; i++) {
                    if (elements[i].getAttribute("data-validation")) {
                      var res = obj2.validateElement(elements[i]);
                      if (res) {
                        test.push(res);
                      }
                    }
                  }
                  if (test.length > 0) {
                    return test.join("<br>");
                  } else {
                    return false;
                  }
                };
                obj2.getError = function() {
                  return obj2.validation() ? true : false;
                };
                obj2.setHash = function() {
                  return obj2.getHash(Component.getElements(el));
                };
                obj2.getHash = function(str) {
                  var hash = 0, i, chr;
                  if (str.length === 0) {
                    return hash;
                  } else {
                    for (i = 0; i < str.length; i++) {
                      chr = str.charCodeAt(i);
                      hash = (hash << 5) - hash + chr;
                      hash |= 0;
                    }
                  }
                  return hash;
                };
                obj2.isChanged = function() {
                  var hash = obj2.setHash();
                  return obj2.options.currentHash != hash;
                };
                obj2.resetTracker = function() {
                  obj2.options.currentHash = obj2.setHash();
                  obj2.options.ignore = false;
                };
                obj2.setIgnore = function(ignoreFlag) {
                  obj2.options.ignore = ignoreFlag ? true : false;
                };
                setTimeout(function() {
                  obj2.options.currentHash = obj2.setHash();
                }, 1e3);
                el.addEventListener("keyup", function(e) {
                  if (e.target.getAttribute("data-validation")) {
                    obj2.validateElement(e.target);
                  }
                });
                if (!Component.hasEvents) {
                  window.addEventListener("beforeunload", function(e) {
                    if (obj2.isChanged() && obj2.options.ignore == false) {
                      var confirmationMessage = obj2.options.message ? obj2.options.message : "o/";
                      if (confirmationMessage) {
                        if (typeof e == "undefined") {
                          e = window.event;
                        }
                        if (e) {
                          e.returnValue = confirmationMessage;
                        }
                        return confirmationMessage;
                      } else {
                        return void 0;
                      }
                    }
                  });
                  Component.hasEvents = true;
                }
                el.form = obj2;
                return obj2;
              };
              Component.getValue = function(element) {
                var value = null;
                if (element.type == "checkbox") {
                  if (element.checked == true) {
                    value = element.value || true;
                  }
                } else if (element.type == "radio") {
                  if (element.checked == true) {
                    value = element.value;
                  }
                } else if (element.type == "file") {
                  value = element.files;
                } else if (element.tagName == "select" && element.multiple == true) {
                  value = [];
                  var options = element.querySelectorAll("options[selected]");
                  for (var j = 0; j < options.length; j++) {
                    value.push(options[j].value);
                  }
                } else if (typeof element.val == "function") {
                  value = element.val();
                } else {
                  value = element.value || "";
                }
                return value;
              };
              Component.getElements = function(el, asArray) {
                var data = {};
                var name = null;
                var elements = el.querySelectorAll("input, select, textarea, div[name]");
                for (var i = 0; i < elements.length; i++) {
                  if (name = elements[i].getAttribute("name")) {
                    data[name] = Component.getValue(elements[i]) || "";
                  }
                }
                return asArray == true ? data : JSON.stringify(data);
              };
              Component.setElements = function(el, data) {
                var name = null;
                var value = null;
                var elements = el.querySelectorAll("input, select, textarea, div[name]");
                for (var i = 0; i < elements.length; i++) {
                  var type = elements[i].getAttribute("type");
                  if (name = elements[i].getAttribute("name")) {
                    name = name.replace(new RegExp(/\[(.*?)\]/ig), ".$1");
                    value = null;
                    if (name.match(/\./)) {
                      var tmp = Path.call(data, name) || "";
                      if (typeof tmp !== "undefined") {
                        value = tmp;
                      }
                    } else {
                      if (typeof data[name] !== "undefined") {
                        value = data[name];
                      }
                    }
                    if (value !== null) {
                      if (type == "checkbox" || type == "radio") {
                        elements[i].checked = value ? true : false;
                      } else if (type == "file") {
                      } else {
                        if (typeof elements[i].val == "function") {
                          elements[i].val(value);
                        } else {
                          elements[i].value = value;
                        }
                      }
                    }
                  }
                }
              };
              return Component;
            }
            var plugins_form = Form();
            ;
            function Modal() {
              var Events2 = function() {
                var tracker = null;
                var keyDown = function(e) {
                  if (e.which == 27) {
                    var modals = document.querySelectorAll(".jmodal");
                    for (var i = 0; i < modals.length; i++) {
                      modals[i].parentNode.modal.close();
                    }
                  }
                };
                var mouseUp = function(e) {
                  let element = e.composedPath();
                  var item = helpers.findElement(element[0], "jmodal");
                  if (item) {
                    var rect = item.getBoundingClientRect();
                    if (e.changedTouches && e.changedTouches[0]) {
                      var x = e.changedTouches[0].clientX;
                      var y = e.changedTouches[0].clientY;
                    } else {
                      var x = e.clientX;
                      var y = e.clientY;
                    }
                    if (rect.width - (x - rect.left) < 50 && y - rect.top < 50) {
                      item.parentNode.modal.close();
                    }
                  }
                  if (tracker) {
                    tracker.element.style.cursor = "auto";
                    tracker = null;
                  }
                };
                var mouseDown = function(e) {
                  let element = e.composedPath();
                  var item = helpers.findElement(element[0], "jmodal");
                  if (item) {
                    var rect = item.getBoundingClientRect();
                    if (e.changedTouches && e.changedTouches[0]) {
                      var x = e.changedTouches[0].clientX;
                      var y = e.changedTouches[0].clientY;
                    } else {
                      var x = e.clientX;
                      var y = e.clientY;
                    }
                    if (rect.width - (x - rect.left) < 50 && y - rect.top < 50) {
                    } else {
                      if (y - rect.top < 50) {
                        if (document.selection) {
                          document.selection.empty();
                        } else if (window.getSelection) {
                          window.getSelection().removeAllRanges();
                        }
                        tracker = {
                          left: rect.left,
                          top: rect.top,
                          x: e.clientX,
                          y: e.clientY,
                          width: rect.width,
                          height: rect.height,
                          element: item
                        };
                      }
                    }
                  }
                };
                var mouseMove = function(e) {
                  if (tracker) {
                    e = e || window.event;
                    if (e.buttons) {
                      var mouseButton = e.buttons;
                    } else if (e.button) {
                      var mouseButton = e.button;
                    } else {
                      var mouseButton = e.which;
                    }
                    if (mouseButton) {
                      tracker.element.style.top = tracker.top + (e.clientY - tracker.y) + tracker.height / 2 + "px";
                      tracker.element.style.left = tracker.left + (e.clientX - tracker.x) + tracker.width / 2 + "px";
                      tracker.element.style.cursor = "move";
                    } else {
                      tracker.element.style.cursor = "auto";
                    }
                  }
                };
                document.addEventListener("keydown", keyDown);
                document.addEventListener("mouseup", mouseUp);
                document.addEventListener("mousedown", mouseDown);
                document.addEventListener("mousemove", mouseMove);
              };
              var Component = function(el, options) {
                var obj2 = {};
                obj2.options = {};
                var defaults = {
                  url: null,
                  onopen: null,
                  onclose: null,
                  onload: null,
                  closed: false,
                  width: null,
                  height: null,
                  title: null,
                  padding: null,
                  backdrop: true,
                  icon: null
                };
                for (var property in defaults) {
                  if (options && options.hasOwnProperty(property)) {
                    obj2.options[property] = options[property];
                  } else {
                    obj2.options[property] = defaults[property];
                  }
                }
                if (!obj2.options.title && el.getAttribute("title")) {
                  obj2.options.title = el.getAttribute("title");
                }
                var temp = document.createElement("div");
                while (el.children[0]) {
                  temp.appendChild(el.children[0]);
                }
                obj2.title = document.createElement("div");
                obj2.title.className = "jmodal_title";
                if (obj2.options.icon) {
                  obj2.title.setAttribute("data-icon", obj2.options.icon);
                }
                obj2.content = document.createElement("div");
                obj2.content.className = "jmodal_content";
                obj2.content.innerHTML = el.innerHTML;
                while (temp.children[0]) {
                  obj2.content.appendChild(temp.children[0]);
                }
                obj2.container = document.createElement("div");
                obj2.container.className = "jmodal";
                obj2.container.appendChild(obj2.title);
                obj2.container.appendChild(obj2.content);
                if (obj2.options.padding) {
                  obj2.content.style.padding = obj2.options.padding;
                }
                if (obj2.options.width) {
                  obj2.container.style.width = obj2.options.width;
                }
                if (obj2.options.height) {
                  obj2.container.style.height = obj2.options.height;
                }
                if (obj2.options.title) {
                  var title = document.createElement("h4");
                  title.innerText = obj2.options.title;
                  obj2.title.appendChild(title);
                }
                el.innerHTML = "";
                el.style.display = "none";
                el.appendChild(obj2.container);
                if (obj2.options.backdrop) {
                  var backdrop = document.createElement("div");
                  backdrop.className = "jmodal_backdrop";
                  backdrop.onclick = function() {
                    obj2.close();
                  };
                  el.appendChild(backdrop);
                }
                obj2.open = function() {
                  el.style.display = "block";
                  var rect = obj2.container.getBoundingClientRect();
                  if (helpers.getWindowWidth() < rect.width) {
                    obj2.container.style.top = "";
                    obj2.container.style.left = "";
                    obj2.container.classList.add("jmodal_fullscreen");
                    animation.slideBottom(obj2.container, 1);
                  } else {
                    if (obj2.options.backdrop) {
                      backdrop.style.display = "block";
                    }
                  }
                  if (typeof obj2.options.onopen == "function") {
                    obj2.options.onopen(el, obj2);
                  }
                };
                obj2.resetPosition = function() {
                  obj2.container.style.top = "";
                  obj2.container.style.left = "";
                };
                obj2.isOpen = function() {
                  return el.style.display != "none" ? true : false;
                };
                obj2.close = function() {
                  if (obj2.isOpen()) {
                    el.style.display = "none";
                    if (obj2.options.backdrop) {
                      backdrop.style.display = "";
                    }
                    obj2.container.classList.remove("jmodal_fullscreen");
                    if (typeof obj2.options.onclose == "function") {
                      obj2.options.onclose(el, obj2);
                    }
                  }
                };
                if (obj2.options.url) {
                  ajax({
                    url: obj2.options.url,
                    method: "GET",
                    dataType: "text/html",
                    success: function(data) {
                      obj2.content.innerHTML = data;
                      if (!obj2.options.closed) {
                        obj2.open();
                      }
                      if (typeof obj2.options.onload === "function") {
                        obj2.options.onload(obj2);
                      }
                    }
                  });
                } else {
                  if (!obj2.options.closed) {
                    obj2.open();
                  }
                  if (typeof obj2.options.onload === "function") {
                    obj2.options.onload(obj2);
                  }
                }
                el.modal = obj2;
                Events2();
                Events2 = function() {
                };
                return obj2;
              };
              return Component;
            }
            var modal = Modal();
            ;
            function Notification() {
              var Component = function(options) {
                var obj2 = {};
                obj2.options = {};
                var defaults = {
                  icon: null,
                  name: "Notification",
                  date: null,
                  error: null,
                  title: null,
                  message: null,
                  timeout: 4e3,
                  autoHide: true,
                  closeable: true
                };
                for (var property in defaults) {
                  if (options && options.hasOwnProperty(property)) {
                    obj2.options[property] = options[property];
                  } else {
                    obj2.options[property] = defaults[property];
                  }
                }
                var notification2 = document.createElement("div");
                notification2.className = "jnotification";
                if (obj2.options.error) {
                  notification2.classList.add("jnotification-error");
                }
                var notificationContainer = document.createElement("div");
                notificationContainer.className = "jnotification-container";
                notification2.appendChild(notificationContainer);
                var notificationHeader = document.createElement("div");
                notificationHeader.className = "jnotification-header";
                notificationContainer.appendChild(notificationHeader);
                var notificationImage = document.createElement("div");
                notificationImage.className = "jnotification-image";
                notificationHeader.appendChild(notificationImage);
                if (obj2.options.icon) {
                  var notificationIcon = document.createElement("img");
                  notificationIcon.src = obj2.options.icon;
                  notificationImage.appendChild(notificationIcon);
                }
                var notificationName = document.createElement("div");
                notificationName.className = "jnotification-name";
                notificationName.innerHTML = obj2.options.name;
                notificationHeader.appendChild(notificationName);
                if (obj2.options.closeable == true) {
                  var notificationClose = document.createElement("div");
                  notificationClose.className = "jnotification-close";
                  notificationClose.onclick = function() {
                    obj2.hide();
                  };
                  notificationHeader.appendChild(notificationClose);
                }
                var notificationDate = document.createElement("div");
                notificationDate.className = "jnotification-date";
                notificationHeader.appendChild(notificationDate);
                var notificationContent = document.createElement("div");
                notificationContent.className = "jnotification-content";
                notificationContainer.appendChild(notificationContent);
                if (obj2.options.title) {
                  var notificationTitle = document.createElement("div");
                  notificationTitle.className = "jnotification-title";
                  notificationTitle.innerHTML = obj2.options.title;
                  notificationContent.appendChild(notificationTitle);
                }
                var notificationMessage = document.createElement("div");
                notificationMessage.className = "jnotification-message";
                notificationMessage.innerHTML = obj2.options.message;
                notificationContent.appendChild(notificationMessage);
                obj2.show = function() {
                  document.body.appendChild(notification2);
                  if (helpers.getWindowWidth() > 800) {
                    animation.fadeIn(notification2);
                  } else {
                    animation.slideTop(notification2, 1);
                  }
                };
                obj2.hide = function() {
                  if (helpers.getWindowWidth() > 800) {
                    animation.fadeOut(notification2, function() {
                      if (notification2.parentNode) {
                        notification2.parentNode.removeChild(notification2);
                        if (notificationTimeout) {
                          clearTimeout(notificationTimeout);
                        }
                      }
                    });
                  } else {
                    animation.slideTop(notification2, 0, function() {
                      if (notification2.parentNode) {
                        notification2.parentNode.removeChild(notification2);
                        if (notificationTimeout) {
                          clearTimeout(notificationTimeout);
                        }
                      }
                    });
                  }
                };
                obj2.show();
                if (obj2.options.autoHide == true) {
                  var notificationTimeout = setTimeout(function() {
                    obj2.hide();
                  }, obj2.options.timeout);
                }
                if (helpers.getWindowWidth() < 800) {
                  notification2.addEventListener("swipeup", function(e) {
                    obj2.hide();
                    e.preventDefault();
                    e.stopPropagation();
                  });
                }
                return obj2;
              };
              Component.isVisible = function() {
                var j = document.querySelector(".jnotification");
                return j && j.parentNode ? true : false;
              };
              return Component;
            }
            var notification = Notification();
            ;
            function Progressbar(el, options) {
              var obj2 = {};
              obj2.options = {};
              var defaults = {
                value: 0,
                onchange: null,
                width: null
              };
              for (var property in defaults) {
                if (options && options.hasOwnProperty(property)) {
                  obj2.options[property] = options[property];
                } else {
                  obj2.options[property] = defaults[property];
                }
              }
              el.classList.add("jprogressbar");
              el.setAttribute("tabindex", 1);
              el.setAttribute("data-value", obj2.options.value);
              var bar = document.createElement("div");
              bar.style.width = obj2.options.value + "%";
              bar.style.color = "#fff";
              el.appendChild(bar);
              if (obj2.options.width) {
                el.style.width = obj2.options.width;
              }
              obj2.setValue = function(value) {
                value = parseInt(value);
                obj2.options.value = value;
                bar.style.width = value + "%";
                el.setAttribute("data-value", value + "%");
                if (value < 6) {
                  el.style.color = "#000";
                } else {
                  el.style.color = "#fff";
                }
                obj2.options.value = value;
                if (typeof obj2.options.onchange == "function") {
                  obj2.options.onchange(el, value);
                }
                if (el.value != obj2.options.value) {
                  el.value = obj2.options.value;
                  if (typeof el.oninput == "function") {
                    el.oninput({
                      type: "input",
                      target: el,
                      value: el.value
                    });
                  }
                }
              };
              obj2.getValue = function() {
                return obj2.options.value;
              };
              var action = function(e) {
                if (e.which) {
                  var rect = el.getBoundingClientRect();
                  if (e.changedTouches && e.changedTouches[0]) {
                    var x = e.changedTouches[0].clientX;
                    var y = e.changedTouches[0].clientY;
                  } else {
                    var x = e.clientX;
                    var y = e.clientY;
                  }
                  obj2.setValue(Math.round((x - rect.left) / rect.width * 100));
                }
              };
              if ("touchstart" in document.documentElement === true) {
                el.addEventListener("touchstart", action);
                el.addEventListener("touchend", action);
              } else {
                el.addEventListener("mousedown", action);
                el.addEventListener("mousemove", action);
              }
              el.change = obj2.setValue;
              el.val = function(val) {
                if (val === void 0) {
                  return obj2.getValue();
                } else {
                  obj2.setValue(val);
                }
              };
              el.progressbar = obj2;
              return obj2;
            }
            ;
            function Rating(el, options) {
              if (el.rating) {
                return el.rating.setOptions(options, true);
              }
              var obj2 = {};
              obj2.options = {};
              obj2.setOptions = function(options2, reset) {
                var defaults = {
                  number: 5,
                  value: 0,
                  tooltip: ["Very bad", "Bad", "Average", "Good", "Very good"],
                  onchange: null
                };
                for (var property in defaults) {
                  if (options2 && options2.hasOwnProperty(property)) {
                    obj2.options[property] = options2[property];
                  } else {
                    if (typeof obj2.options[property] == "undefined" || reset === true) {
                      obj2.options[property] = defaults[property];
                    }
                  }
                }
                el.innerHTML = "";
                for (var i = 0; i < obj2.options.number; i++) {
                  var div = document.createElement("div");
                  div.setAttribute("data-index", i + 1);
                  div.setAttribute("title", obj2.options.tooltip[i]);
                  el.appendChild(div);
                }
                if (obj2.options.value) {
                  for (var i = 0; i < obj2.options.number; i++) {
                    if (i < obj2.options.value) {
                      el.children[i].classList.add("jrating-selected");
                    }
                  }
                }
                return obj2;
              };
              obj2.setValue = function(index) {
                for (var i = 0; i < obj2.options.number; i++) {
                  if (i < index) {
                    el.children[i].classList.add("jrating-selected");
                  } else {
                    el.children[i].classList.remove("jrating-over");
                    el.children[i].classList.remove("jrating-selected");
                  }
                }
                obj2.options.value = index;
                if (typeof obj2.options.onchange == "function") {
                  obj2.options.onchange(el, index);
                }
                if (el.value != obj2.options.value) {
                  el.value = obj2.options.value;
                  if (typeof el.oninput == "function") {
                    el.oninput({
                      type: "input",
                      target: el,
                      value: el.value
                    });
                  }
                }
              };
              obj2.getValue = function() {
                return obj2.options.value;
              };
              var init = function() {
                obj2.setOptions(options);
                el.classList.add("jrating");
                el.addEventListener("click", function(e) {
                  var index = e.target.getAttribute("data-index");
                  if (index != void 0) {
                    if (index == obj2.options.value) {
                      obj2.setValue(0);
                    } else {
                      obj2.setValue(index);
                    }
                  }
                });
                el.addEventListener("mouseover", function(e) {
                  var index = e.target.getAttribute("data-index");
                  for (var i = 0; i < obj2.options.number; i++) {
                    if (i < index) {
                      el.children[i].classList.add("jrating-over");
                    } else {
                      el.children[i].classList.remove("jrating-over");
                    }
                  }
                });
                el.addEventListener("mouseout", function(e) {
                  for (var i = 0; i < obj2.options.number; i++) {
                    el.children[i].classList.remove("jrating-over");
                  }
                });
                el.change = obj2.setValue;
                el.val = function(val) {
                  if (val === void 0) {
                    return obj2.getValue();
                  } else {
                    obj2.setValue(val);
                  }
                };
                el.rating = obj2;
              };
              init();
              return obj2;
            }
            ;
            function Search(el, options) {
              if (el.search) {
                return el.search;
              }
              var index = null;
              var select = function(e) {
                if (e.target.classList.contains("jsearch_item")) {
                  var element = e.target;
                } else {
                  var element = e.target.parentNode;
                }
                obj2.selectIndex(element);
                e.preventDefault();
              };
              var createList = function(data) {
                if (typeof obj2.options.onsearch == "function") {
                  var ret = obj2.options.onsearch(obj2, data);
                  if (ret) {
                    data = ret;
                  }
                }
                container.innerHTML = "";
                if (!data.length) {
                  el.style.display = "";
                } else {
                  el.style.display = "block";
                  var len = data.length < 11 ? data.length : 10;
                  for (var i = 0; i < len; i++) {
                    if (typeof data[i] == "string") {
                      var text = data[i];
                      var value = data[i];
                    } else {
                      var text = data[i].text;
                      if (!text && data[i].name) {
                        text = data[i].name;
                      }
                      var value = data[i].value;
                      if (!value && data[i].id) {
                        value = data[i].id;
                      }
                    }
                    var div = document.createElement("div");
                    div.setAttribute("data-value", value);
                    div.setAttribute("data-text", text);
                    div.className = "jsearch_item";
                    if (data[i].id) {
                      div.setAttribute("id", data[i].id);
                    }
                    if (obj2.options.forceSelect && i == 0) {
                      div.classList.add("selected");
                    }
                    var img = document.createElement("img");
                    if (data[i].image) {
                      img.src = data[i].image;
                    } else {
                      img.style.display = "none";
                    }
                    div.appendChild(img);
                    var item = document.createElement("div");
                    item.innerHTML = text;
                    div.appendChild(item);
                    container.appendChild(div);
                  }
                }
              };
              var execute = function(str) {
                if (str != obj2.terms) {
                  obj2.terms = str;
                  if (obj2.options.forceSelect) {
                    index = 0;
                  } else {
                    index = null;
                  }
                  if (Array.isArray(obj2.options.data)) {
                    var test = function(o) {
                      if (typeof o == "string") {
                        if (("" + o).toLowerCase().search(str.toLowerCase()) >= 0) {
                          return true;
                        }
                      } else {
                        for (var key in o) {
                          var value = o[key];
                          if (("" + value).toLowerCase().search(str.toLowerCase()) >= 0) {
                            return true;
                          }
                        }
                      }
                      return false;
                    };
                    var results = obj2.options.data.filter(function(item) {
                      return test(item);
                    });
                    createList(results);
                  } else {
                    ajax({
                      url: obj2.options.data + str,
                      method: "GET",
                      dataType: "json",
                      success: function(data) {
                        createList(data);
                      }
                    });
                  }
                }
              };
              var timer = null;
              var obj2 = function(str) {
                if (timer) {
                  clearTimeout(timer);
                }
                timer = setTimeout(function() {
                  execute(str);
                }, 500);
              };
              if (options.forceSelect === null) {
                options.forceSelect = true;
              }
              obj2.options = {
                data: options.data || null,
                input: options.input || null,
                searchByNode: options.searchByNode || null,
                onselect: options.onselect || null,
                forceSelect: options.forceSelect,
                onsearch: options.onsearch || null,
                onbeforesearch: options.onbeforesearch || null
              };
              obj2.selectIndex = function(item) {
                var id = item.getAttribute("id");
                var text = item.getAttribute("data-text");
                var value = item.getAttribute("data-value");
                var image = item.children[0].src || "";
                if (typeof obj2.options.onselect == "function") {
                  obj2.options.onselect(obj2, text, value, id, image);
                }
                obj2.close();
              };
              obj2.open = function() {
                el.style.display = "block";
              };
              obj2.close = function() {
                if (timer) {
                  clearTimeout(timer);
                }
                obj2.terms = "";
                container.innerHTML = "";
                el.style.display = "";
              };
              obj2.isOpened = function() {
                return el.style.display ? true : false;
              };
              obj2.keydown = function(e) {
                if (obj2.isOpened()) {
                  if (e.key == "Enter") {
                    if (index !== null && container.children[index]) {
                      obj2.selectIndex(container.children[index]);
                      e.preventDefault();
                    } else {
                      obj2.close();
                    }
                  } else if (e.key === "ArrowUp") {
                    if (index !== null && container.children[0]) {
                      container.children[index].classList.remove("selected");
                      if (!obj2.options.forceSelect && index === 0) {
                        index = null;
                      } else {
                        index = Math.max(0, index - 1);
                        container.children[index].classList.add("selected");
                      }
                    }
                    e.preventDefault();
                  } else if (e.key === "ArrowDown") {
                    if (index == null) {
                      index = -1;
                    } else {
                      container.children[index].classList.remove("selected");
                    }
                    if (index < 9 && container.children[index + 1]) {
                      index++;
                    }
                    container.children[index].classList.add("selected");
                    e.preventDefault();
                  }
                }
              };
              obj2.keyup = function(e) {
                if (!obj2.options.searchByNode && obj2.options.input) {
                  if (obj2.options.input.tagName === "DIV") {
                    var terms = obj2.options.input.innerText;
                  } else {
                    var terms = obj2.options.input.value;
                  }
                } else {
                  var node = helpers.getNode();
                  if (node) {
                    var terms = node.innerText;
                  }
                }
                if (typeof obj2.options.onbeforesearch == "function") {
                  var ret = obj2.options.onbeforesearch(obj2, terms);
                  if (ret) {
                    terms = ret;
                  } else {
                    if (ret === false) {
                      return;
                    }
                  }
                }
                obj2(terms);
              };
              obj2.blur = function(e) {
                obj2.close();
              };
              if (obj2.options.input) {
                obj2.options.input.addEventListener("keyup", obj2.keyup);
                obj2.options.input.addEventListener("keydown", obj2.keydown);
                obj2.options.input.addEventListener("blur", obj2.blur);
              }
              var container = document.createElement("div");
              container.classList.add("jsearch_container");
              container.onmousedown = select;
              el.appendChild(container);
              el.classList.add("jsearch");
              el.search = obj2;
              return obj2;
            }
            ;
            function Slider(el, options) {
              var obj2 = {};
              obj2.options = {};
              obj2.currentImage = null;
              if (options) {
                obj2.options = options;
              }
              el.setAttribute("tabindex", "900");
              obj2.options.items = [];
              if (!el.classList.contains("jslider")) {
                el.classList.add("jslider");
                el.classList.add("unselectable");
                if (obj2.options.height) {
                  el.style.minHeight = parseInt(obj2.options.height) + "px";
                }
                if (obj2.options.width) {
                  el.style.width = parseInt(obj2.options.width) + "px";
                }
                if (obj2.options.grid) {
                  el.classList.add("jslider-grid");
                  var number = el.children.length;
                  if (number > 4) {
                    el.setAttribute("data-total", number - 4);
                  }
                  el.setAttribute("data-number", number > 4 ? 4 : number);
                }
                var counter = document.createElement("div");
                counter.classList.add("jslider-counter");
                if (el.children.length > 0) {
                  for (var i = 0; i < el.children.length; i++) {
                    obj2.options.items.push(el.children[i]);
                    var item = document.createElement("div");
                    item.onclick = function() {
                      var index = Array.prototype.slice.call(counter.children).indexOf(this);
                      obj2.show(obj2.currentImage = obj2.options.items[index]);
                    };
                    counter.appendChild(item);
                  }
                }
                var caption = document.createElement("div");
                caption.className = "jslider-caption";
                var controls = document.createElement("div");
                var close = document.createElement("div");
                close.className = "jslider-close";
                close.innerHTML = "";
                close.onclick = function() {
                  obj2.close();
                };
                controls.appendChild(caption);
                controls.appendChild(close);
              }
              obj2.updateCounter = function(index) {
                for (var i2 = 0; i2 < counter.children.length; i2++) {
                  if (counter.children[i2].classList.contains("jslider-counter-focus")) {
                    counter.children[i2].classList.remove("jslider-counter-focus");
                    break;
                  }
                }
                counter.children[index].classList.add("jslider-counter-focus");
              };
              obj2.show = function(target) {
                if (!target) {
                  var target = el.children[0];
                }
                el.classList.add("jslider-focus");
                el.classList.remove("jslider-grid");
                el.appendChild(controls);
                el.appendChild(counter);
                var index = obj2.options.items.indexOf(target);
                obj2.updateCounter(index);
                for (var i2 = 0; i2 < el.children.length; i2++) {
                  el.children[i2].style.display = "";
                }
                target.style.display = "block";
                if (target.previousElementSibling) {
                  el.classList.add("jslider-left");
                } else {
                  el.classList.remove("jslider-left");
                }
                if (target.nextElementSibling && target.nextElementSibling.tagName == "IMG") {
                  el.classList.add("jslider-right");
                } else {
                  el.classList.remove("jslider-right");
                }
                obj2.currentImage = target;
                if (obj2.currentImage.offsetHeight > obj2.currentImage.offsetWidth) {
                  obj2.currentImage.classList.add("jslider-vertical");
                }
                controls.children[0].innerText = obj2.currentImage.getAttribute("title");
              };
              obj2.open = function() {
                obj2.show();
                if (typeof obj2.options.onopen == "function") {
                  obj2.options.onopen(el);
                }
              };
              obj2.close = function() {
                el.classList.remove("jslider-focus");
                el.classList.remove("jslider-left");
                el.classList.remove("jslider-right");
                if (obj2.options.grid) {
                  el.classList.add("jslider-grid");
                }
                for (var i2 = 0; i2 < el.children.length; i2++) {
                  el.children[i2].style.display = "";
                }
                counter.remove();
                controls.remove();
                obj2.currentImage = null;
                if (typeof obj2.options.onclose == "function") {
                  obj2.options.onclose(el);
                }
              };
              obj2.reset = function() {
                el.innerHTML = "";
              };
              obj2.next = function() {
                var nextImage = obj2.currentImage.nextElementSibling;
                if (nextImage && nextImage.tagName === "IMG") {
                  obj2.show(obj2.currentImage.nextElementSibling);
                }
              };
              obj2.prev = function() {
                if (obj2.currentImage.previousElementSibling) {
                  obj2.show(obj2.currentImage.previousElementSibling);
                }
              };
              var mouseUp = function(e) {
                if (e.target.tagName == "IMG") {
                  obj2.show(e.target);
                } else if (!e.target.classList.contains("jslider-close") && !(e.target.parentNode.classList.contains("jslider-counter") || e.target.classList.contains("jslider-counter"))) {
                  var offsetX = e.offsetX || e.changedTouches[0].clientX;
                  if (e.target.clientWidth - offsetX < 40) {
                    obj2.next();
                  } else if (offsetX < 40) {
                    obj2.prev();
                  }
                }
              };
              if ("ontouchend" in document.documentElement === true) {
                el.addEventListener("touchend", mouseUp);
              } else {
                el.addEventListener("mouseup", mouseUp);
              }
              el.addEventListener("swipeleft", function(e) {
                obj2.next();
                e.preventDefault();
                e.stopPropagation();
              });
              el.addEventListener("swiperight", function(e) {
                obj2.prev();
                e.preventDefault();
                e.stopPropagation();
              });
              el.addEventListener("keydown", function(e) {
                if (e.which == 27) {
                  obj2.close();
                }
              });
              el.slider = obj2;
              return obj2;
            }
            ;
            function Tags(el, options) {
              if (el.tags) {
                return el.tags.setOptions(options, true);
              }
              var obj2 = { type: "tags" };
              obj2.options = {};
              var limit = function() {
                return obj2.options.limit && el.children.length >= obj2.options.limit ? true : false;
              };
              var search = null;
              var searchContainer = null;
              obj2.setOptions = function(options2, reset) {
                var defaults = {
                  value: "",
                  limit: null,
                  search: null,
                  placeholder: null,
                  validation: null,
                  onbeforepaste: null,
                  onbeforechange: null,
                  onlimit: null,
                  onchange: null,
                  onfocus: null,
                  onblur: null,
                  onload: null
                };
                for (var property in defaults) {
                  if (options2 && options2.hasOwnProperty(property)) {
                    obj2.options[property] = options2[property];
                  } else {
                    if (typeof obj2.options[property] == "undefined" || reset === true) {
                      obj2.options[property] = defaults[property];
                    }
                  }
                }
                if (obj2.options.placeholder) {
                  el.setAttribute("data-placeholder", obj2.options.placeholder);
                } else {
                  el.removeAttribute("data-placeholder");
                }
                el.placeholder = obj2.options.placeholder;
                obj2.setValue(obj2.options.value);
                filter();
                if (obj2.options.search) {
                  if (!searchContainer) {
                    searchContainer = document.createElement("div");
                    el.parentNode.insertBefore(searchContainer, el.nextSibling);
                    search = Search(searchContainer, {
                      data: obj2.options.search,
                      onselect: function(a, b, c) {
                        obj2.selectIndex(b, c);
                      }
                    });
                  }
                } else {
                  if (searchContainer) {
                    search = null;
                    searchContainer.remove();
                    searchContainer = null;
                  }
                }
                return obj2;
              };
              obj2.add = function(value, focus) {
                if (typeof obj2.options.onbeforechange == "function") {
                  var ret = obj2.options.onbeforechange(el, obj2, obj2.options.value, value);
                  if (ret === false) {
                    return false;
                  } else {
                    if (ret != null) {
                      value = ret;
                    }
                  }
                }
                if (search) {
                  search.close();
                }
                if (limit()) {
                  if (typeof obj2.options.onlimit == "function") {
                    obj2.options.onlimit(obj2, obj2.options.limit);
                  } else {
                    alert(dictionary.translate("You reach the limit number of entries") + " " + obj2.options.limit);
                  }
                } else {
                  var node = helpers.getNode();
                  if (node && node.parentNode && node.parentNode.classList.contains("jtags") && node.nextSibling && !(node.nextSibling.innerText && node.nextSibling.innerText.trim())) {
                    div = node.nextSibling;
                  } else {
                    if (el.lastChild) {
                      if (!el.lastChild.innerText.trim()) {
                        el.removeChild(el.lastChild);
                      }
                    }
                    if (!value || typeof value == "string") {
                      var div = createElement(value, value, node);
                    } else {
                      for (var i = 0; i <= value.length; i++) {
                        if (!limit()) {
                          if (!value[i] || typeof value[i] == "string") {
                            var t = value[i] || "";
                            var v = null;
                          } else {
                            var t = value[i].text;
                            var v = value[i].value;
                          }
                          var div = createElement(t, v);
                        }
                      }
                    }
                    change();
                  }
                  if (focus) {
                    setFocus(div);
                  }
                }
              };
              obj2.setLimit = function(limit2) {
                obj2.options.limit = limit2;
                var n = el.children.length - limit2;
                while (el.children.length > limit2) {
                  el.removeChild(el.lastChild);
                }
              };
              obj2.remove = function(node) {
                node.parentNode.removeChild(node);
                if (!el.children.length) {
                  obj2.add("", true);
                } else {
                  change();
                }
              };
              obj2.getData = function() {
                var data = [];
                for (var i = 0; i < el.children.length; i++) {
                  var text = el.children[i].innerText.replace("\n", "");
                  var value = el.children[i].getAttribute("data-value");
                  if (!value) {
                    value = text;
                  }
                  if (text || value) {
                    data.push({ text, value });
                  }
                }
                return data;
              };
              obj2.getValue = function(index) {
                var value = null;
                if (index != null) {
                  value = el.children[index].getAttribute("data-value");
                  if (!value) {
                    value = el.children[index].innerText.replace("\n", "");
                  }
                } else {
                  var data = [];
                  for (var i = 0; i < el.children.length; i++) {
                    value = el.children[i].innerText.replace("\n", "");
                    if (value) {
                      data.push(obj2.getValue(i));
                    }
                  }
                  value = data.join(",");
                }
                return value;
              };
              obj2.setValue = function(mixed) {
                if (!mixed) {
                  obj2.reset();
                } else {
                  if (el.value != mixed) {
                    if (Array.isArray(mixed)) {
                      obj2.add(mixed);
                    } else {
                      var text = ("" + mixed).trim();
                      var data = extractTags(text);
                      el.innerHTML = "";
                      obj2.add(data);
                    }
                  }
                }
              };
              obj2.reset = function() {
                el.classList.add("jtags-empty");
                el.innerHTML = "<div></div>";
                change();
              };
              obj2.isValid = function() {
                var test = 0;
                for (var i = 0; i < el.children.length; i++) {
                  if (el.children[i].classList.contains("jtags_error")) {
                    test++;
                  }
                }
                return test == 0 ? true : false;
              };
              obj2.selectIndex = function(text, value) {
                var node = helpers.getNode();
                if (node) {
                  node.innerText = text;
                  if (value) {
                    node.setAttribute("data-value", value);
                  }
                  node.classList.remove("jtags_error");
                  if (!limit()) {
                    obj2.add("", true);
                  }
                }
              };
              obj2.search = function(node) {
                var terms = node.innerText;
              };
              obj2.destroy = function() {
                el.removeEventListener("mouseup", tagsMouseUp);
                el.removeEventListener("keydown", tagsKeyDown);
                el.removeEventListener("keyup", tagsKeyUp);
                el.removeEventListener("paste", tagsPaste);
                el.removeEventListener("focus", tagsFocus);
                el.removeEventListener("blur", tagsBlur);
                el.parentNode.removeChild(el);
              };
              var setFocus = function(node) {
                if (el.children.length) {
                  var range = document.createRange();
                  var sel = window.getSelection();
                  if (!node) {
                    var node = el.childNodes[el.childNodes.length - 1];
                  }
                  range.setStart(node, node.length);
                  range.collapse(true);
                  sel.removeAllRanges();
                  sel.addRange(range);
                  el.scrollLeft = el.scrollWidth;
                }
              };
              var createElement = function(label, value, node) {
                var div = document.createElement("div");
                div.innerHTML = label ? label : "";
                if (value) {
                  div.setAttribute("data-value", value);
                }
                if (node && node.parentNode.classList.contains("jtags")) {
                  el.insertBefore(div, node.nextSibling);
                } else {
                  el.appendChild(div);
                }
                return div;
              };
              var change = function() {
                var value = obj2.getValue();
                if (value != obj2.options.value) {
                  obj2.options.value = value;
                  if (typeof obj2.options.onchange == "function") {
                    obj2.options.onchange(el, obj2, obj2.options.value);
                  }
                  if (el.value != obj2.options.value) {
                    el.value = obj2.options.value;
                    if (typeof el.oninput == "function") {
                      el.oninput({
                        type: "input",
                        target: el,
                        value: el.value
                      });
                    }
                  }
                }
                filter();
              };
              var filter = function() {
                for (var i = 0; i < el.children.length; i++) {
                  if (el.children[i].tagName === "DIV") {
                    if (!obj2.getValue(i)) {
                      el.children[i].classList.remove("jtags_label");
                    } else {
                      el.children[i].classList.add("jtags_label");
                      if (typeof obj2.options.validation == "function") {
                        if (obj2.getValue(i)) {
                          if (!obj2.options.validation(el.children[i], el.children[i].innerText, el.children[i].getAttribute("data-value"))) {
                            el.children[i].classList.add("jtags_error");
                          } else {
                            el.children[i].classList.remove("jtags_error");
                          }
                        } else {
                          el.children[i].classList.remove("jtags_error");
                        }
                      } else {
                        el.children[i].classList.remove("jtags_error");
                      }
                    }
                  }
                }
                isEmpty();
              };
              var isEmpty = function() {
                if (!el.innerText.trim()) {
                  if (!el.children.length || el.children[0].tagName === "BR") {
                    el.innerHTML = "";
                    setFocus(createElement());
                  }
                } else {
                  el.classList.remove("jtags-empty");
                }
              };
              var extractTags = function(text) {
                var data = [];
                var word = "";
                text = text.trim();
                if (text) {
                  for (var i = 0; i < text.length; i++) {
                    if (text[i] == "," || text[i] == ";" || text[i] == "\n") {
                      if (word) {
                        data.push(word.trim());
                        word = "";
                      }
                    } else {
                      word += text[i];
                    }
                  }
                  if (word) {
                    data.push(word);
                  }
                }
                return data;
              };
              var anchorOffset = 0;
              var tagsKeyDown = function(e) {
                anchorOffset = window.getSelection().anchorOffset;
                isEmpty();
                if (e.key === "Tab" || e.key === ";" || e.key === ",") {
                  var n = window.getSelection().anchorOffset;
                  if (n > 1) {
                    if (limit()) {
                      if (typeof obj2.options.onlimit == "function") {
                        obj2.options.onlimit(obj2, obj2.options.limit);
                      }
                    } else {
                      obj2.add("", true);
                    }
                  }
                  e.preventDefault();
                } else if (e.key == "Enter") {
                  if (!search || !search.isOpened()) {
                    var n = window.getSelection().anchorOffset;
                    if (n > 1) {
                      if (!limit()) {
                        obj2.add("", true);
                      }
                    }
                    e.preventDefault();
                  }
                } else if (e.key == "Backspace") {
                  if (el.children.length == 1 && window.getSelection().anchorOffset < 1) {
                    e.preventDefault();
                  }
                }
                if (search) {
                  search.keydown(e);
                }
                isEmpty();
              };
              var tagsKeyUp = function(e) {
                if (e.which == 39) {
                  var n = window.getSelection().anchorOffset;
                  if (n > 1 && n == anchorOffset) {
                    obj2.add("", true);
                  }
                } else if (e.which == 13 || e.which == 38 || e.which == 40) {
                  e.preventDefault();
                } else {
                  if (search) {
                    search.keyup(e);
                  }
                }
                filter();
              };
              var tagsPaste = function(e) {
                if (e.clipboardData || e.originalEvent.clipboardData) {
                  var text = (e.originalEvent || e).clipboardData.getData("text/plain");
                } else if (window.clipboardData) {
                  var text = window.clipboardData.getData("Text");
                }
                var data = extractTags(text);
                if (typeof obj2.options.onbeforepaste == "function") {
                  var ret = obj2.options.onbeforepaste(el, obj2, data);
                  if (ret === false) {
                    e.preventDefault();
                    return false;
                  } else {
                    if (ret) {
                      data = ret;
                    }
                  }
                }
                if (data.length > 1) {
                  obj2.add(data, true);
                  e.preventDefault();
                } else if (data[0]) {
                  document.execCommand("insertText", false, data[0]);
                  e.preventDefault();
                }
              };
              var tagsMouseUp = function(e) {
                if (e.target.parentNode && e.target.parentNode.classList.contains("jtags")) {
                  if (e.target.classList.contains("jtags_label") || e.target.classList.contains("jtags_error")) {
                    var rect = e.target.getBoundingClientRect();
                    if (rect.width - (e.clientX - rect.left) < 16) {
                      obj2.remove(e.target);
                    }
                  }
                }
                if (e.target == el) {
                  setFocus();
                }
              };
              var tagsFocus = function() {
                if (!el.classList.contains("jtags-focus")) {
                  if (!el.children.length || obj2.getValue(el.children.length - 1)) {
                    if (!limit()) {
                      createElement("");
                    }
                  }
                  if (typeof obj2.options.onfocus == "function") {
                    obj2.options.onfocus(el, obj2, obj2.getValue());
                  }
                  el.classList.add("jtags-focus");
                }
              };
              var tagsBlur = function() {
                if (el.classList.contains("jtags-focus")) {
                  if (search) {
                    search.close();
                  }
                  for (var i = 0; i < el.children.length - 1; i++) {
                    if (!obj2.getValue(i)) {
                      el.removeChild(el.children[i]);
                    }
                  }
                  change();
                  el.classList.remove("jtags-focus");
                  if (typeof obj2.options.onblur == "function") {
                    obj2.options.onblur(el, obj2, obj2.getValue());
                  }
                }
              };
              var init = function() {
                if ("touchend" in document.documentElement === true) {
                  el.addEventListener("touchend", tagsMouseUp);
                } else {
                  el.addEventListener("mouseup", tagsMouseUp);
                }
                el.addEventListener("keydown", tagsKeyDown);
                el.addEventListener("keyup", tagsKeyUp);
                el.addEventListener("paste", tagsPaste);
                el.addEventListener("focus", tagsFocus);
                el.addEventListener("blur", tagsBlur);
                el.setAttribute("contenteditable", true);
                el.classList.add("jtags");
                obj2.setOptions(options);
                if (typeof obj2.options.onload == "function") {
                  obj2.options.onload(el, obj2);
                }
                el.change = obj2.setValue;
                el.val = function(val) {
                  if (val === void 0) {
                    return obj2.getValue();
                  } else {
                    obj2.setValue(val);
                  }
                };
                el.tags = obj2;
              };
              init();
              return obj2;
            }
            ;
            function Upload(el, options) {
              var obj2 = {};
              obj2.options = {};
              var defaults = {
                type: "image",
                extension: "*",
                input: false,
                minWidth: false,
                maxWidth: null,
                maxHeight: null,
                maxJpegSizeBytes: null,
                // For example, 350Kb would be 350000
                onchange: null,
                multiple: false,
                remoteParser: null
              };
              for (var property in defaults) {
                if (options && options.hasOwnProperty(property)) {
                  obj2.options[property] = options[property];
                } else {
                  obj2.options[property] = defaults[property];
                }
              }
              if (obj2.options.multiple == true) {
                el.setAttribute("data-multiple", true);
              }
              el.content = [];
              el.classList.add("jupload");
              if (obj2.options.input == true) {
                el.classList.add("input");
              }
              obj2.add = function(data) {
                if (obj2.options.multiple == false) {
                  el.content = [];
                  el.innerText = "";
                }
                if (obj2.options.type == "image") {
                  var img = document.createElement("img");
                  img.setAttribute("src", data.file);
                  img.setAttribute("tabindex", -1);
                  if (!el.getAttribute("name")) {
                    img.className = "jfile";
                    img.content = data;
                  }
                  el.appendChild(img);
                } else {
                  if (data.name) {
                    var name = data.name;
                  } else {
                    var name = data.file;
                  }
                  var div = document.createElement("div");
                  div.innerText = name || obj2.options.type;
                  div.classList.add("jupload-item");
                  div.setAttribute("tabindex", -1);
                  el.appendChild(div);
                }
                if (data.content) {
                  data.file = helpers.guid();
                }
                el.content.push(data);
                if (typeof obj2.options.onchange == "function") {
                  obj2.options.onchange(el, data);
                }
              };
              obj2.addFromFile = function(file) {
                var type = file.type.split("/");
                if (type[0] == obj2.options.type) {
                  var readFile = new FileReader();
                  readFile.addEventListener("load", function(v) {
                    var data = {
                      file: v.srcElement.result,
                      extension: file.name.substr(file.name.lastIndexOf(".") + 1),
                      name: file.name,
                      size: file.size,
                      lastmodified: file.lastModified,
                      content: v.srcElement.result
                    };
                    obj2.add(data);
                  });
                  readFile.readAsDataURL(file);
                } else {
                  alert(dictionary.translate("This extension is not allowed"));
                }
              };
              obj2.addFromUrl = function(src) {
                if (src.substr(0, 4) != "data" && !obj2.options.remoteParser) {
                  console.error("remoteParser not defined in your initialization");
                } else {
                  if (src.substr(0, 4) == "data") {
                    var extension = src.split(";");
                    extension = extension[0].split("/");
                    var type = extension[0].replace("data:", "");
                    if (type == obj2.options.type) {
                      var data = {
                        file: src,
                        name: "",
                        extension: extension[1],
                        content: src
                      };
                      obj2.add(data);
                    } else {
                      alert(obj2.options.text.extensionNotAllowed);
                    }
                  } else {
                    var extension = src.substr(src.lastIndexOf(".") + 1);
                    src = obj2.options.remoteParser + src;
                    ajax({
                      url: src,
                      type: "GET",
                      dataType: "blob",
                      success: function(data2) {
                      }
                    });
                  }
                }
              };
              var getDataURL = function(canvas, type) {
                var compression = 0.92;
                var lastContentLength = null;
                var content = canvas.toDataURL(type, compression);
                while (obj2.options.maxJpegSizeBytes && type === "image/jpeg" && content.length > obj2.options.maxJpegSizeBytes && content.length !== lastContentLength) {
                  compression *= 0.9;
                  lastContentLength = content.length;
                  content = canvas.toDataURL(type, compression);
                }
                return content;
              };
              var mime = obj2.options.type + "/" + obj2.options.extension;
              var input = document.createElement("input");
              input.type = "file";
              input.setAttribute("accept", mime);
              input.onchange = function() {
                for (var i = 0; i < this.files.length; i++) {
                  obj2.addFromFile(this.files[i]);
                }
              };
              if (obj2.options.multiple == true) {
                input.setAttribute("multiple", true);
              }
              var current = null;
              el.addEventListener("click", function(e) {
                current = null;
                if (!el.children.length || e.target === el) {
                  helpers.click(input);
                } else {
                  if (e.target.parentNode == el) {
                    current = e.target;
                  }
                }
              });
              el.addEventListener("dblclick", function(e) {
                helpers.click(input);
              });
              el.addEventListener("dragenter", function(e) {
                el.style.border = "1px dashed #000";
              });
              el.addEventListener("dragleave", function(e) {
                el.style.border = "1px solid #eee";
              });
              el.addEventListener("dragstop", function(e) {
                el.style.border = "1px solid #eee";
              });
              el.addEventListener("dragover", function(e) {
                e.preventDefault();
              });
              el.addEventListener("keydown", function(e) {
                if (current && e.which == 46) {
                  var index = Array.prototype.indexOf.call(el.children, current);
                  if (index >= 0) {
                    el.content.splice(index, 1);
                    current.remove();
                    current = null;
                  }
                }
              });
              el.addEventListener("drop", function(e) {
                e.preventDefault();
                e.stopPropagation();
                var html = (e.originalEvent || e).dataTransfer.getData("text/html");
                var file = (e.originalEvent || e).dataTransfer.files;
                if (file.length) {
                  for (var i = 0; i < e.dataTransfer.files.length; i++) {
                    obj2.addFromFile(e.dataTransfer.files[i]);
                  }
                } else if (html) {
                  if (obj2.options.multiple == false) {
                    el.innerText = "";
                  }
                  var div = document.createElement("div");
                  div.innerHTML = html;
                  var img = div.querySelectorAll("img");
                  if (img.length) {
                    for (var i = 0; i < img.length; i++) {
                      obj2.addFromUrl(img[i].src);
                    }
                  }
                }
                el.style.border = "1px solid #eee";
                return false;
              });
              el.val = function(val) {
                if (val === void 0) {
                  return el.content && el.content.length ? el.content : null;
                } else {
                  el.innerText = "";
                  el.content = [];
                  if (val) {
                    if (Array.isArray(val)) {
                      for (var i = 0; i < val.length; i++) {
                        if (typeof val[i] == "string") {
                          obj2.add({ file: val[i] });
                        } else {
                          obj2.add(val[i]);
                        }
                      }
                    } else if (typeof val == "string") {
                      obj2.add({ file: val });
                    }
                  }
                }
              };
              el.upload = el.image = obj2;
              return obj2;
            }
            var sha512 = __webpack_require__(195);
            var sha512_default = __webpack_require__.n(sha512);
            ;
            var jSuites = {
              // Helpers
              ...dictionary,
              ...helpers,
              /** Current version */
              version: "5.0.27",
              /** Bind new extensions to Jsuites */
              setExtensions: function(o) {
                if (typeof o == "object") {
                  var k = Object.keys(o);
                  for (var i = 0; i < k.length; i++) {
                    jSuites[k[i]] = o[k[i]];
                  }
                }
              },
              tracking: Tracking,
              path: Path,
              sorting: Sorting,
              lazyLoading: LazyLoading,
              // Plugins
              ajax,
              animation,
              calendar,
              color: Color,
              contextmenu,
              dropdown,
              editor,
              floating,
              form: plugins_form,
              mask,
              modal,
              notification,
              palette,
              picker: Picker,
              progressbar: Progressbar,
              rating: Rating,
              search: Search,
              slider: Slider,
              tabs: Tabs,
              tags: Tags,
              toolbar: Toolbar,
              upload: Upload,
              validations
            };
            jSuites.image = Upload;
            jSuites.image.create = function(data) {
              var img = document.createElement("img");
              img.setAttribute("src", data.file);
              img.className = "jfile";
              img.setAttribute("tabindex", -1);
              img.content = data;
              return img;
            };
            jSuites.tracker = plugins_form;
            jSuites.loading = animation.loading;
            jSuites.sha512 = sha512_default();
            const Events = function() {
              document.jsuitesComponents = [];
              const find = function(DOMElement, component) {
                if (DOMElement[component.type] && DOMElement[component.type] == component) {
                  return true;
                }
                if (DOMElement.component && DOMElement.component == component) {
                  return true;
                }
                if (DOMElement.parentNode) {
                  return find(DOMElement.parentNode, component);
                }
                return false;
              };
              const isOpened = function(e) {
                if (document.jsuitesComponents && document.jsuitesComponents.length > 0) {
                  for (var i = 0; i < document.jsuitesComponents.length; i++) {
                    if (document.jsuitesComponents[i] && !find(e, document.jsuitesComponents[i])) {
                      document.jsuitesComponents[i].close();
                    }
                  }
                }
              };
              let cornerSize = 15;
              let element = null;
              let editorAction = false;
              let state = {
                x: null,
                y: null
              };
              let tooltip = document.createElement("div");
              tooltip.classList.add("jtooltip");
              const mouseDown = function(e) {
                var item = jSuites.findElement(e.target, "jpanel");
                if (item && !item.classList.contains("readonly")) {
                  item.focus();
                  var rect = e.target.getBoundingClientRect();
                  editorAction = {
                    e: item,
                    x: e.clientX,
                    y: e.clientY,
                    w: rect.width,
                    h: rect.height,
                    d: item.style.cursor,
                    resizing: item.style.cursor ? true : false,
                    actioned: false
                  };
                  if (!item.style.width) {
                    item.style.width = rect.width + "px";
                  }
                  if (!item.style.height) {
                    item.style.height = rect.height + "px";
                  }
                  var s = window.getSelection();
                  if (s.rangeCount) {
                    for (var i = 0; i < s.rangeCount; i++) {
                      s.removeRange(s.getRangeAt(i));
                    }
                  }
                  e.preventDefault();
                  e.stopPropagation();
                } else {
                  editorAction = false;
                }
                if (e.changedTouches && e.changedTouches[0]) {
                  var x = e.changedTouches[0].clientX;
                  var y = e.changedTouches[0].clientY;
                } else {
                  var x = e.clientX;
                  var y = e.clientY;
                }
                var path = e.path || e.composedPath && e.composedPath();
                if (path) {
                  element = path[0];
                } else {
                  if (e.target && e.target.shadowRoot) {
                    var d = e.target.shadowRoot;
                  } else {
                    var d = document;
                  }
                  element = d.elementFromPoint(x, y);
                }
                isOpened(element);
              };
              const mouseUp = function(e) {
                if (editorAction && editorAction.e) {
                  if (typeof editorAction.e.refresh == "function" && state.actioned) {
                    editorAction.e.refresh();
                  }
                  editorAction.e.style.cursor = "";
                }
                state = {
                  x: null,
                  y: null
                };
                editorAction = false;
              };
              const mouseMove = function(e) {
                if (editorAction) {
                  var x = e.clientX || e.pageX;
                  var y = e.clientY || e.pageY;
                  if (!editorAction.resizing) {
                    if (state.x == null && state.y == null) {
                      state.x = x;
                      state.y = y;
                    }
                    var dx = x - state.x;
                    var dy = y - state.y;
                    var top = editorAction.e.offsetTop + dy;
                    var left = editorAction.e.offsetLeft + dx;
                    editorAction.e.style.top = top + "px";
                    editorAction.e.style.left = left + "px";
                    editorAction.e.style.cursor = "move";
                    state.x = x;
                    state.y = y;
                    if (typeof editorAction.e.refresh == "function") {
                      state.actioned = true;
                      editorAction.e.refresh("position", top, left);
                    }
                  } else {
                    var width = null;
                    var height = null;
                    if (editorAction.d == "e-resize" || editorAction.d == "ne-resize" || editorAction.d == "se-resize") {
                      width = editorAction.w + (x - editorAction.x);
                      editorAction.e.style.width = width + "px";
                      if (e.shiftKey) {
                        var newHeight = (x - editorAction.x) * (editorAction.h / editorAction.w);
                        height = editorAction.h + newHeight;
                        editorAction.e.style.height = height + "px";
                      } else {
                        var newHeight = false;
                      }
                    }
                    if (!newHeight) {
                      if (editorAction.d == "s-resize" || editorAction.d == "se-resize" || editorAction.d == "sw-resize") {
                        height = editorAction.h + (y - editorAction.y);
                        editorAction.e.style.height = height + "px";
                      }
                    }
                    if (typeof editorAction.e.refresh == "function") {
                      state.actioned = true;
                      editorAction.e.refresh("dimensions", width, height);
                    }
                  }
                } else {
                  var item = jSuites.findElement(e.target, "jpanel");
                  if (item) {
                    if (item.getAttribute("tabindex")) {
                      var rect = item.getBoundingClientRect();
                      if (e.clientY - rect.top < cornerSize) {
                        if (rect.width - (e.clientX - rect.left) < cornerSize) {
                          item.style.cursor = "ne-resize";
                        } else if (e.clientX - rect.left < cornerSize) {
                          item.style.cursor = "nw-resize";
                        } else {
                          item.style.cursor = "n-resize";
                        }
                      } else if (rect.height - (e.clientY - rect.top) < cornerSize) {
                        if (rect.width - (e.clientX - rect.left) < cornerSize) {
                          item.style.cursor = "se-resize";
                        } else if (e.clientX - rect.left < cornerSize) {
                          item.style.cursor = "sw-resize";
                        } else {
                          item.style.cursor = "s-resize";
                        }
                      } else if (rect.width - (e.clientX - rect.left) < cornerSize) {
                        item.style.cursor = "e-resize";
                      } else if (e.clientX - rect.left < cornerSize) {
                        item.style.cursor = "w-resize";
                      } else {
                        item.style.cursor = "";
                      }
                    }
                  }
                }
              };
              const mouseOver = function(e) {
                var message = e.target.getAttribute("data-tooltip");
                if (message) {
                  tooltip.innerText = message;
                  if (e.changedTouches && e.changedTouches[0]) {
                    var x = e.changedTouches[0].clientX;
                    var y = e.changedTouches[0].clientY;
                  } else {
                    var x = e.clientX;
                    var y = e.clientY;
                  }
                  tooltip.style.top = y + "px";
                  tooltip.style.left = x + "px";
                  document.body.appendChild(tooltip);
                } else if (tooltip.innerText) {
                  tooltip.innerText = "";
                  document.body.removeChild(tooltip);
                }
              };
              const dblClick = function(e) {
                var item = jSuites.findElement(e.target, "jpanel");
                if (item && typeof item.dblclick == "function") {
                  item.dblclick(e);
                }
              };
              const contextMenu = function(e) {
                var item = document.activeElement;
                if (item && typeof item.contextmenu == "function") {
                  item.contextmenu(e);
                  e.preventDefault();
                  e.stopImmediatePropagation();
                } else {
                  item = jSuites.findElement(e.target, function(o2) {
                    return o2.tagName && o2.getAttribute("aria-contextmenu-id");
                  });
                  if (item) {
                    var o = document.querySelector("#" + item);
                    if (!o) {
                      console.error("JSUITES: contextmenu id not found: " + item);
                    } else {
                      o.contextmenu.open(e);
                      e.preventDefault();
                      e.stopImmediatePropagation();
                    }
                  }
                }
              };
              const keyDown = function(e) {
                let item = document.activeElement;
                if (item) {
                  if (e.key === "Delete" && typeof item.delete == "function") {
                    item.delete();
                    e.preventDefault();
                    e.stopImmediatePropagation();
                  }
                }
                if (document.jsuitesComponents && document.jsuitesComponents.length) {
                  item = document.jsuitesComponents[document.jsuitesComponents.length - 1];
                  if (item) {
                    if (e.key === "Escape" && typeof item.isOpened == "function" && typeof item.close == "function") {
                      if (item.isOpened()) {
                        item.close();
                        e.preventDefault();
                        e.stopImmediatePropagation();
                      }
                    }
                  }
                }
              };
              const input = function(e) {
                if (e.target.getAttribute("data-mask") || e.target.mask) {
                  jSuites.mask(e);
                }
              };
              document.addEventListener("mouseup", mouseUp);
              document.addEventListener("mousedown", mouseDown);
              document.addEventListener("mousemove", mouseMove);
              document.addEventListener("mouseover", mouseOver);
              document.addEventListener("dblclick", dblClick);
              document.addEventListener("keydown", keyDown);
              document.addEventListener("contextmenu", contextMenu);
              document.addEventListener("input", input);
            };
            if (typeof document !== "undefined" && !document.jsuitesComponents) {
              Events();
            }
            var jsuites = jSuites;
          }();
          __webpack_exports__ = __webpack_exports__["default"];
          return __webpack_exports__;
        }()
      );
    });
  }
});

export {
  require_jsuites
};
//# sourceMappingURL=chunk-RUEBEO5X.js.map
