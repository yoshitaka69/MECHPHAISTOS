{
  "version": 3,
  "sources": ["../../handsontable/editors/handsontableEditor/handsontableEditor.mjs", "../../handsontable/editors/autocompleteEditor/autocompleteEditor.mjs", "../../handsontable/editors/checkboxEditor/checkboxEditor.mjs", "../../handsontable/editors/dropdownEditor/dropdownEditor.mjs", "../../handsontable/editors/numericEditor/numericEditor.mjs", "../../handsontable/editors/passwordEditor/passwordEditor.mjs", "../../handsontable/editors/selectEditor/selectEditor.mjs", "../../handsontable/editors/timeEditor/timeEditor.mjs"],
  "sourcesContent": ["import { TextEditor } from \"../textEditor/index.mjs\";\nimport { setCaretPosition } from \"../../helpers/dom/element.mjs\";\nimport { stopImmediatePropagation } from \"../../helpers/dom/event.mjs\";\nimport { extend } from \"../../helpers/object.mjs\";\nimport { SHORTCUTS_GROUP_NAVIGATION } from \"../../editorManager.mjs\";\nconst SHORTCUTS_GROUP = 'handsontableEditor';\nexport const EDITOR_TYPE = 'handsontable';\n\n/**\n * @private\n * @class HandsontableEditor\n */\nexport class HandsontableEditor extends TextEditor {\n  static get EDITOR_TYPE() {\n    return EDITOR_TYPE;\n  }\n\n  /**\n   * Opens the editor and adjust its size.\n   */\n  open() {\n    super.open();\n    if (this.htEditor) {\n      this.htEditor.destroy();\n    }\n    if (this.htContainer.style.display === 'none') {\n      this.htContainer.style.display = '';\n    }\n\n    // Constructs and initializes a new Handsontable instance\n    this.htEditor = new this.hot.constructor(this.htContainer, this.htOptions);\n    this.htEditor.init();\n    this.htEditor.rootElement.style.display = '';\n    if (this.cellProperties.strict) {\n      this.htEditor.selectCell(0, 0);\n    } else {\n      this.htEditor.deselectCell();\n    }\n    setCaretPosition(this.TEXTAREA, 0, this.TEXTAREA.value.length);\n    this.refreshDimensions();\n  }\n\n  /**\n   * Closes the editor.\n   */\n  close() {\n    if (this.htEditor) {\n      this.htEditor.rootElement.style.display = 'none';\n    }\n    this.removeHooksByKey('beforeKeyDown');\n    super.close();\n  }\n\n  /**\n   * Prepares editor's meta data and configuration of the internal Handsontable's instance.\n   *\n   * @param {number} row The visual row index.\n   * @param {number} col The visual column index.\n   * @param {number|string} prop The column property (passed when datasource is an array of objects).\n   * @param {HTMLTableCellElement} td The rendered cell element.\n   * @param {*} value The rendered value.\n   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n   */\n  prepare(row, col, prop, td, value, cellProperties) {\n    super.prepare(row, col, prop, td, value, cellProperties);\n    const parent = this;\n    const options = {\n      startRows: 0,\n      startCols: 0,\n      minRows: 0,\n      minCols: 0,\n      className: 'listbox',\n      copyPaste: false,\n      autoColumnSize: false,\n      autoRowSize: false,\n      readOnly: true,\n      fillHandle: false,\n      autoWrapCol: false,\n      autoWrapRow: false,\n      ariaTags: false,\n      afterOnCellMouseDown(_, coords) {\n        const sourceValue = this.getSourceData(coords.row, coords.col);\n\n        // if the value is undefined then it means we don't want to set the value\n        if (sourceValue !== undefined) {\n          parent.setValue(sourceValue);\n        }\n        parent.hot.destroyEditor();\n      },\n      preventWheel: true,\n      layoutDirection: this.hot.isRtl() ? 'rtl' : 'ltr'\n    };\n    if (this.cellProperties.handsontable) {\n      extend(options, cellProperties.handsontable);\n    }\n    this.htOptions = options;\n  }\n\n  /**\n   * Begins editing on a highlighted cell and hides fillHandle corner if was present.\n   *\n   * @param {*} newInitialValue The editor initial value.\n   * @param {*} event The keyboard event object.\n   */\n  beginEditing(newInitialValue, event) {\n    const onBeginEditing = this.hot.getSettings().onBeginEditing;\n    if (onBeginEditing && onBeginEditing() === false) {\n      return;\n    }\n    super.beginEditing(newInitialValue, event);\n  }\n\n  /**\n   * Creates an editor's elements and adds necessary CSS classnames.\n   */\n  createElements() {\n    super.createElements();\n    const DIV = this.hot.rootDocument.createElement('DIV');\n    DIV.className = 'handsontableEditor';\n    this.TEXTAREA_PARENT.appendChild(DIV);\n    this.htContainer = DIV;\n    this.assignHooks();\n  }\n\n  /**\n   * Finishes editing and start saving or restoring process for editing cell or last selected range.\n   *\n   * @param {boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.\n   * @param {boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.\n   * @param {Function} callback The callback function, fired after editor closing.\n   */\n  finishEditing(restoreOriginalValue, ctrlDown, callback) {\n    if (this.htEditor && this.htEditor.isListening()) {\n      // if focus is still in the HOT editor\n      this.hot.listen(); // return the focus to the parent HOT instance\n    }\n\n    if (this.htEditor && this.htEditor.getSelectedLast()) {\n      const value = this.htEditor.getValue();\n      if (value !== undefined) {\n        // if the value is undefined then it means we don't want to set the value\n        this.setValue(value);\n      }\n    }\n    super.finishEditing(restoreOriginalValue, ctrlDown, callback);\n  }\n\n  /**\n   * Assigns afterDestroy callback to prevent memory leaks.\n   *\n   * @private\n   */\n  assignHooks() {\n    this.hot.addHook('afterDestroy', () => {\n      if (this.htEditor) {\n        this.htEditor.destroy();\n      }\n    });\n  }\n\n  /**\n   * Register shortcuts responsible for handling editor.\n   *\n   * @private\n   */\n  registerShortcuts() {\n    const shortcutManager = this.hot.getShortcutManager();\n    const editorContext = shortcutManager.getContext('editor');\n    super.registerShortcuts();\n    const contextConfig = {\n      group: SHORTCUTS_GROUP,\n      relativeToGroup: SHORTCUTS_GROUP_NAVIGATION,\n      position: 'before'\n    };\n    const action = (rowToSelect, event) => {\n      const innerHOT = this.htEditor;\n      if (rowToSelect !== undefined) {\n        if (rowToSelect < 0 || innerHOT.flipped && rowToSelect > innerHOT.countRows() - 1) {\n          innerHOT.deselectCell();\n        } else {\n          innerHOT.selectCell(rowToSelect, 0);\n        }\n        if (innerHOT.getData().length) {\n          event.preventDefault();\n          stopImmediatePropagation(event);\n          this.hot.listen();\n          this.TEXTAREA.focus();\n          return false;\n        }\n      }\n    };\n    editorContext.addShortcuts([{\n      keys: [['ArrowUp']],\n      callback: event => {\n        const innerHOT = this.htEditor;\n        let rowToSelect;\n        let selectedRow;\n        if (!innerHOT.getSelectedLast() && innerHOT.flipped) {\n          rowToSelect = innerHOT.countRows() - 1;\n        } else if (innerHOT.getSelectedLast()) {\n          if (innerHOT.flipped) {\n            selectedRow = innerHOT.getSelectedLast()[0];\n            rowToSelect = Math.max(0, selectedRow - 1);\n          } else {\n            selectedRow = innerHOT.getSelectedLast()[0];\n            rowToSelect = selectedRow - 1;\n          }\n        }\n        return action(rowToSelect, event);\n      },\n      preventDefault: false // Doesn't block default behaviour (navigation) for a `textArea` HTMLElement.\n    }, {\n      keys: [['ArrowDown']],\n      callback: event => {\n        const innerHOT = this.htEditor;\n        let rowToSelect;\n        let selectedRow;\n        if (!innerHOT.getSelectedLast() && !innerHOT.flipped) {\n          rowToSelect = 0;\n        } else if (innerHOT.getSelectedLast()) {\n          if (innerHOT.flipped) {\n            rowToSelect = innerHOT.getSelectedLast()[0] + 1;\n          } else if (!innerHOT.flipped) {\n            const lastRow = innerHOT.countRows() - 1;\n            selectedRow = innerHOT.getSelectedLast()[0];\n            rowToSelect = Math.min(lastRow, selectedRow + 1);\n          }\n        }\n        return action(rowToSelect, event);\n      },\n      preventDefault: false // Doesn't block default behaviour (navigation) for a `textArea` HTMLElement.\n    }], contextConfig);\n  }\n\n  /**\n   * Unregister shortcuts responsible for handling editor.\n   *\n   * @private\n   */\n  unregisterShortcuts() {\n    super.unregisterShortcuts();\n    const shortcutManager = this.hot.getShortcutManager();\n    const editorContext = shortcutManager.getContext('editor');\n    editorContext.removeShortcutsByGroup(SHORTCUTS_GROUP);\n  }\n}", "import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nimport { HandsontableEditor } from \"../handsontableEditor/index.mjs\";\nimport { arrayMap, pivot } from \"../../helpers/array.mjs\";\nimport { addClass, getCaretPosition, getScrollbarWidth, getSelectionEndPosition, getTrimmingContainer, offset, outerHeight, outerWidth, setAttribute, setCaretPosition } from \"../../helpers/dom/element.mjs\";\nimport { isDefined, stringify } from \"../../helpers/mixed.mjs\";\nimport { stripTags } from \"../../helpers/string.mjs\";\nimport { KEY_CODES, isPrintableChar } from \"../../helpers/unicode.mjs\";\nimport { isMacOS } from \"../../helpers/browser.mjs\";\nimport { textRenderer } from \"../../renderers/textRenderer/index.mjs\";\nimport { A11Y_ACTIVEDESCENDANT, A11Y_AUTOCOMPLETE, A11Y_COMBOBOX, A11Y_CONTROLS, A11Y_EXPANDED, A11Y_HASPOPUP, A11Y_LISTBOX, A11Y_LIVE, A11Y_OPTION, A11Y_POSINSET, A11Y_PRESENTATION, A11Y_RELEVANT, A11Y_SELECTED, A11Y_SETSIZE, A11Y_TEXT } from \"../../helpers/a11y.mjs\";\nexport const EDITOR_TYPE = 'autocomplete';\n\n/**\n * @private\n * @class AutocompleteEditor\n */\nvar _idPrefix = /*#__PURE__*/new WeakMap();\nexport class AutocompleteEditor extends HandsontableEditor {\n  constructor() {\n    super(...arguments);\n    /**\n     * Query string to turn available values over.\n     *\n     * @type {string}\n     */\n    _defineProperty(this, \"query\", null);\n    /**\n     * Contains stripped choices.\n     *\n     * @type {string[]}\n     */\n    _defineProperty(this, \"strippedChoices\", []);\n    /**\n     * Contains raw choices.\n     *\n     * @type {Array}\n     */\n    _defineProperty(this, \"rawChoices\", []);\n    /**\n     * Holds the prefix of the editor's id.\n     *\n     * @type {string}\n     */\n    _classPrivateFieldInitSpec(this, _idPrefix, {\n      writable: true,\n      value: this.hot.guid.slice(0, 9)\n    });\n    /**\n     * Filters and sorts by relevance.\n     *\n     * @param {*} value The selected value.\n     * @param {string[]} choices The list of available choices.\n     * @param {boolean} caseSensitive Indicates if it's sorted by case.\n     * @returns {number[]} Array of indexes in original choices array.\n     */\n    _defineProperty(this, \"sortByRelevance\", function (value, choices, caseSensitive) {\n      const choicesRelevance = [];\n      const result = [];\n      const valueLength = value.length;\n      let choicesCount = choices.length;\n      let charsLeft;\n      let currentItem;\n      let i;\n      let valueIndex;\n      if (valueLength === 0) {\n        for (i = 0; i < choicesCount; i++) {\n          result.push(i);\n        }\n        return result;\n      }\n      for (i = 0; i < choicesCount; i++) {\n        currentItem = stripTags(stringify(choices[i]));\n        if (caseSensitive) {\n          valueIndex = currentItem.indexOf(value);\n        } else {\n          const locale = this.cellProperties.locale;\n          valueIndex = currentItem.toLocaleLowerCase(locale).indexOf(value.toLocaleLowerCase(locale));\n        }\n        if (valueIndex !== -1) {\n          charsLeft = currentItem.length - valueIndex - valueLength;\n          choicesRelevance.push({\n            baseIndex: i,\n            index: valueIndex,\n            charsLeft,\n            value: currentItem\n          });\n        }\n      }\n      choicesRelevance.sort((a, b) => {\n        if (b.index === -1) {\n          return -1;\n        }\n        if (a.index === -1) {\n          return 1;\n        }\n        if (a.index < b.index) {\n          return -1;\n        } else if (b.index < a.index) {\n          return 1;\n        } else if (a.index === b.index) {\n          if (a.charsLeft < b.charsLeft) {\n            return -1;\n          } else if (a.charsLeft > b.charsLeft) {\n            return 1;\n          }\n        }\n        return 0;\n      });\n      for (i = 0, choicesCount = choicesRelevance.length; i < choicesCount; i++) {\n        result.push(choicesRelevance[i].baseIndex);\n      }\n      return result;\n    });\n  }\n  static get EDITOR_TYPE() {\n    return EDITOR_TYPE;\n  }\n  /**\n   * Gets current value from editable element.\n   *\n   * @returns {string}\n   */\n  getValue() {\n    const selectedValue = this.rawChoices.find(value => {\n      const strippedValue = this.stripValueIfNeeded(value);\n      return strippedValue === this.TEXTAREA.value;\n    });\n    if (isDefined(selectedValue)) {\n      return selectedValue;\n    }\n    return this.TEXTAREA.value;\n  }\n\n  /**\n   * Creates an editor's elements and adds necessary CSS classnames.\n   */\n  createElements() {\n    super.createElements();\n    addClass(this.htContainer, 'autocompleteEditor');\n    addClass(this.htContainer, this.hot.rootWindow.navigator.platform.indexOf('Mac') === -1 ? '' : 'htMacScroll');\n    if (this.hot.getSettings().ariaTags) {\n      setAttribute(this.TEXTAREA, [A11Y_TEXT(), A11Y_COMBOBOX(), A11Y_HASPOPUP('listbox'), A11Y_AUTOCOMPLETE()]);\n    }\n  }\n\n  /**\n   * Prepares editor's metadata and configuration of the internal Handsontable's instance.\n   *\n   * @param {number} row The visual row index.\n   * @param {number} col The visual column index.\n   * @param {number|string} prop The column property (passed when datasource is an array of objects).\n   * @param {HTMLTableCellElement} td The rendered cell element.\n   * @param {*} value The rendered value.\n   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n   */\n  prepare(row, col, prop, td, value, cellProperties) {\n    super.prepare(row, col, prop, td, value, cellProperties);\n    if (this.hot.getSettings().ariaTags) {\n      setAttribute(this.TEXTAREA, [A11Y_EXPANDED('false'), A11Y_CONTROLS(`${_classPrivateFieldGet(this, _idPrefix)}-listbox-${row}-${col}`)]);\n    }\n  }\n\n  /**\n   * Opens the editor and adjust its size and internal Handsontable's instance.\n   */\n  open() {\n    super.open();\n    const trimDropdown = this.cellProperties.trimDropdown === undefined ? true : this.cellProperties.trimDropdown;\n    const rootInstanceAriaTagsEnabled = this.hot.getSettings().ariaTags;\n    const sourceArray = Array.isArray(this.cellProperties.source) ? this.cellProperties.source : null;\n    const sourceSize = sourceArray === null || sourceArray === void 0 ? void 0 : sourceArray.length;\n    const {\n      row: rowIndex,\n      col: colIndex\n    } = this;\n    this.showEditableElement();\n    this.focus();\n    let scrollbarWidth = getScrollbarWidth();\n    if (scrollbarWidth === 0 && isMacOS()) {\n      scrollbarWidth += 15; // default scroll bar width if scroll bars are visible only when scrolling\n    }\n\n    this.addHook('beforeKeyDown', event => this.onBeforeKeyDown(event));\n    this.htEditor.updateSettings({\n      colWidths: trimDropdown ? [outerWidth(this.TEXTAREA) - 2] : undefined,\n      width: trimDropdown ? outerWidth(this.TEXTAREA) + scrollbarWidth : undefined,\n      autoColumnSize: true,\n      renderer: (hotInstance, TD, row, col, prop, value, cellProperties) => {\n        textRenderer(hotInstance, TD, row, col, prop, value, cellProperties);\n        const {\n          filteringCaseSensitive,\n          allowHtml,\n          locale\n        } = this.cellProperties;\n        const query = this.query;\n        let cellValue = stringify(value);\n        let indexOfMatch;\n        let match;\n        if (cellValue && !allowHtml) {\n          indexOfMatch = filteringCaseSensitive === true ? cellValue.indexOf(query) : cellValue.toLocaleLowerCase(locale).indexOf(query.toLocaleLowerCase(locale));\n          if (indexOfMatch !== -1) {\n            match = cellValue.substr(indexOfMatch, query.length);\n            cellValue = cellValue.replace(match, `<strong>${match}</strong>`);\n          }\n        }\n        if (rootInstanceAriaTagsEnabled) {\n          setAttribute(TD, [A11Y_OPTION(),\n          // Add `setsize` and `posinset` only if the source is an array.\n          ...(sourceArray ? [A11Y_SETSIZE(sourceSize)] : []), ...(sourceArray ? [A11Y_POSINSET(sourceArray.indexOf(value) + 1)] : []), ['id', `${this.htEditor.rootElement.id}_${row}-${col}`]]);\n        }\n        TD.innerHTML = cellValue;\n      },\n      afterSelection: (startRow, startCol) => {\n        if (rootInstanceAriaTagsEnabled) {\n          const TD = this.htEditor.getCell(startRow, startCol, true);\n          setAttribute(TD, [A11Y_SELECTED()]);\n          setAttribute(this.TEXTAREA, ...A11Y_ACTIVEDESCENDANT(TD.id));\n        }\n      }\n    });\n    if (rootInstanceAriaTagsEnabled) {\n      // Add `role=presentation` to the main table to prevent the readers from treating the option list as a table.\n      setAttribute(this.htEditor.view._wt.wtOverlays.wtTable.TABLE, ...A11Y_PRESENTATION());\n      setAttribute(this.htEditor.rootElement, [A11Y_LISTBOX(), A11Y_LIVE('polite'), A11Y_RELEVANT('text'), ['id', `${_classPrivateFieldGet(this, _idPrefix)}-listbox-${rowIndex}-${colIndex}`]]);\n      setAttribute(this.TEXTAREA, ...A11Y_EXPANDED('true'));\n    }\n    this.hot._registerTimeout(() => {\n      this.queryChoices(this.TEXTAREA.value);\n    });\n  }\n\n  /**\n   * Closes the editor.\n   */\n  close() {\n    this.removeHooksByKey('beforeKeyDown');\n    super.close();\n    if (this.hot.getSettings().ariaTags) {\n      setAttribute(this.TEXTAREA, [A11Y_EXPANDED('false')]);\n    }\n  }\n\n  /**\n   * Verifies result of validation or closes editor if user's cancelled changes.\n   *\n   * @param {boolean|undefined} result If `false` and the cell using allowInvalid option,\n   *                                   then an editor won't be closed until validation is passed.\n   */\n  discardEditor(result) {\n    super.discardEditor(result);\n    this.hot.view.render();\n  }\n\n  /**\n   * Prepares choices list based on applied argument.\n   *\n   * @private\n   * @param {string} query The query.\n   */\n  queryChoices(query) {\n    const source = this.cellProperties.source;\n    this.query = query;\n    if (typeof source === 'function') {\n      source.call(this.cellProperties, query, choices => {\n        this.rawChoices = choices;\n        this.updateChoicesList(this.stripValuesIfNeeded(choices));\n      });\n    } else if (Array.isArray(source)) {\n      this.rawChoices = source;\n      this.updateChoicesList(this.stripValuesIfNeeded(source));\n    } else {\n      this.updateChoicesList([]);\n    }\n  }\n\n  /**\n   * Updates list of the possible completions to choose.\n   *\n   * @private\n   * @param {Array} choicesList The choices list to process.\n   */\n  updateChoicesList(choicesList) {\n    const pos = getCaretPosition(this.TEXTAREA);\n    const endPos = getSelectionEndPosition(this.TEXTAREA);\n    const sortByRelevanceSetting = this.cellProperties.sortByRelevance;\n    const filterSetting = this.cellProperties.filter;\n    let orderByRelevance = null;\n    let highlightIndex = null;\n    let choices = choicesList;\n    if (sortByRelevanceSetting) {\n      orderByRelevance = this.sortByRelevance(this.stripValueIfNeeded(this.getValue()), choices, this.cellProperties.filteringCaseSensitive);\n    }\n    const orderByRelevanceLength = Array.isArray(orderByRelevance) ? orderByRelevance.length : 0;\n    if (filterSetting === false) {\n      if (orderByRelevanceLength) {\n        highlightIndex = orderByRelevance[0];\n      }\n    } else {\n      const sorted = [];\n      for (let i = 0, choicesCount = choices.length; i < choicesCount; i++) {\n        if (sortByRelevanceSetting && orderByRelevanceLength <= i) {\n          break;\n        }\n        if (orderByRelevanceLength) {\n          sorted.push(choices[orderByRelevance[i]]);\n        } else {\n          sorted.push(choices[i]);\n        }\n      }\n      highlightIndex = 0;\n      choices = sorted;\n    }\n    this.strippedChoices = choices;\n    this.htEditor.loadData(pivot([choices]));\n    if (choices.length === 0) {\n      this.htEditor.rootElement.style.display = 'none';\n    } else {\n      this.htEditor.rootElement.style.display = '';\n      this.updateDropdownHeight();\n      this.flipDropdownIfNeeded();\n      if (this.cellProperties.strict === true) {\n        this.highlightBestMatchingChoice(highlightIndex);\n      }\n    }\n    this.hot.listen();\n    setCaretPosition(this.TEXTAREA, pos, pos === endPos ? undefined : endPos);\n  }\n\n  /**\n   * Checks where is enough place to open editor.\n   *\n   * @private\n   * @returns {boolean}\n   */\n  flipDropdownIfNeeded() {\n    const trimmingContainer = getTrimmingContainer(this.hot.view._wt.wtTable.TABLE);\n    const isWindowAsScrollableElement = trimmingContainer === this.hot.rootWindow;\n    const preventOverflow = this.cellProperties.preventOverflow;\n    if (isWindowAsScrollableElement || !isWindowAsScrollableElement && (preventOverflow || preventOverflow === 'horizontal')) {\n      return false;\n    }\n    const textareaOffset = offset(this.TEXTAREA);\n    const textareaHeight = outerHeight(this.TEXTAREA);\n    const dropdownHeight = this.getDropdownHeight();\n    const trimmingContainerScrollTop = trimmingContainer.scrollTop;\n    const headersHeight = outerHeight(this.hot.view._wt.wtTable.THEAD);\n    const containerOffset = offset(trimmingContainer);\n    const spaceAbove = textareaOffset.top - containerOffset.top - headersHeight + trimmingContainerScrollTop;\n    const spaceBelow = trimmingContainer.scrollHeight - spaceAbove - headersHeight - textareaHeight;\n    const flipNeeded = dropdownHeight > spaceBelow && spaceAbove > spaceBelow;\n    if (flipNeeded) {\n      this.flipDropdown(dropdownHeight);\n    } else {\n      this.unflipDropdown();\n    }\n    this.limitDropdownIfNeeded(flipNeeded ? spaceAbove : spaceBelow, dropdownHeight);\n    return flipNeeded;\n  }\n\n  /**\n   * Checks if the internal table should generate scrollbar or could be rendered without it.\n   *\n   * @private\n   * @param {number} spaceAvailable The free space as height defined in px available for dropdown list.\n   * @param {number} dropdownHeight The dropdown height.\n   */\n  limitDropdownIfNeeded(spaceAvailable, dropdownHeight) {\n    if (dropdownHeight > spaceAvailable) {\n      let tempHeight = 0;\n      let i = 0;\n      let lastRowHeight = 0;\n      let height = null;\n      do {\n        lastRowHeight = this.htEditor.getRowHeight(i) || this.htEditor.view._wt.getSetting('defaultRowHeight');\n        tempHeight += lastRowHeight;\n        i += 1;\n      } while (tempHeight < spaceAvailable);\n      height = tempHeight - lastRowHeight;\n      if (this.htEditor.flipped) {\n        this.htEditor.rootElement.style.top = `${parseInt(this.htEditor.rootElement.style.top, 10) + dropdownHeight - height}px`; // eslint-disable-line max-len\n      }\n\n      this.setDropdownHeight(tempHeight - lastRowHeight);\n    }\n  }\n\n  /**\n   * Configures editor to open it at the top.\n   *\n   * @private\n   * @param {number} dropdownHeight The dropdown height.\n   */\n  flipDropdown(dropdownHeight) {\n    const dropdownStyle = this.htEditor.rootElement.style;\n    dropdownStyle.position = 'absolute';\n    dropdownStyle.top = `${-dropdownHeight}px`;\n    this.htEditor.flipped = true;\n  }\n\n  /**\n   * Configures editor to open it at the bottom.\n   *\n   * @private\n   */\n  unflipDropdown() {\n    const dropdownStyle = this.htEditor.rootElement.style;\n    dropdownStyle.position = 'absolute';\n    dropdownStyle.top = '';\n    this.htEditor.flipped = undefined;\n  }\n\n  /**\n   * Updates width and height of the internal Handsontable's instance.\n   *\n   * @private\n   */\n  updateDropdownHeight() {\n    const currentDropdownWidth = this.htEditor.getColWidth(0) + getScrollbarWidth(this.hot.rootDocument) + 2;\n    const trimDropdown = this.cellProperties.trimDropdown;\n    this.htEditor.updateSettings({\n      height: this.getDropdownHeight(),\n      width: trimDropdown ? undefined : currentDropdownWidth\n    });\n    this.htEditor.view._wt.wtTable.alignOverlaysWithTrimmingContainer();\n  }\n\n  /**\n   * Sets new height of the internal Handsontable's instance.\n   *\n   * @private\n   * @param {number} height The new dropdown height.\n   */\n  setDropdownHeight(height) {\n    this.htEditor.updateSettings({\n      height\n    });\n  }\n\n  /**\n   * Creates new selection on specified row index, or deselects selected cells.\n   *\n   * @private\n   * @param {number|undefined} index The visual row index.\n   */\n  highlightBestMatchingChoice(index) {\n    if (typeof index === 'number') {\n      this.htEditor.selectCell(index, 0, undefined, undefined, undefined, false);\n    } else {\n      this.htEditor.deselectCell();\n    }\n  }\n\n  /**\n   * Calculates and return the internal Handsontable's height.\n   *\n   * @private\n   * @returns {number}\n   */\n  getDropdownHeight() {\n    const firstRowHeight = this.htEditor.getRowHeight(0) || 23;\n    const visibleRows = this.cellProperties.visibleRows;\n    return this.strippedChoices.length >= visibleRows ? visibleRows * firstRowHeight : this.strippedChoices.length * firstRowHeight + 8; // eslint-disable-line max-len\n  }\n\n  /**\n   * Sanitizes value from potential dangerous tags.\n   *\n   * @private\n   * @param {string} value The value to sanitize.\n   * @returns {string}\n   */\n  stripValueIfNeeded(value) {\n    return this.stripValuesIfNeeded([value])[0];\n  }\n\n  /**\n   * Sanitizes an array of the values from potential dangerous tags.\n   *\n   * @private\n   * @param {string[]} values The value to sanitize.\n   * @returns {string[]}\n   */\n  stripValuesIfNeeded(values) {\n    const {\n      allowHtml\n    } = this.cellProperties;\n    const stringifiedValues = arrayMap(values, value => stringify(value));\n    const strippedValues = arrayMap(stringifiedValues, value => allowHtml ? value : stripTags(value));\n    return strippedValues;\n  }\n\n  /**\n   * Captures use of arrow down and up to control their behaviour.\n   *\n   * @private\n   * @param {number} keyCode The keyboard keycode.\n   * @returns {boolean}\n   */\n  allowKeyEventPropagation(keyCode) {\n    const selectedRange = this.htEditor.getSelectedRangeLast();\n    const selected = {\n      row: selectedRange ? selectedRange.from.row : -1\n    };\n    let allowed = false;\n    if (keyCode === KEY_CODES.ARROW_DOWN && selected.row > 0 && selected.row < this.htEditor.countRows() - 1) {\n      allowed = true;\n    }\n    if (keyCode === KEY_CODES.ARROW_UP && selected.row > -1) {\n      allowed = true;\n    }\n    return allowed;\n  }\n\n  /**\n   * OnBeforeKeyDown callback.\n   *\n   * @private\n   * @param {KeyboardEvent} event The keyboard event object.\n   */\n  onBeforeKeyDown(event) {\n    if (isPrintableChar(event.keyCode) || event.keyCode === KEY_CODES.BACKSPACE || event.keyCode === KEY_CODES.DELETE || event.keyCode === KEY_CODES.INSERT) {\n      // for Windows 10 + FF86 there is need to add delay to make sure that the value taken from\n      // the textarea is the freshest value. Otherwise the list of choices does not update correctly (see #7570).\n      // On the more modern version of the FF (~ >=91) it seems that the issue is not present or it is\n      // more difficult to induce.\n      let timeOffset = 10;\n\n      // on ctl+c / cmd+c don't update suggestion list\n      if (event.keyCode === KEY_CODES.C && (event.ctrlKey || event.metaKey)) {\n        return;\n      }\n      if (!this.isOpened()) {\n        timeOffset += 10;\n      }\n      if (this.htEditor) {\n        this.hot._registerTimeout(() => {\n          this.queryChoices(this.TEXTAREA.value);\n        }, timeOffset);\n      }\n    }\n  }\n}", "import { BaseEditor } from \"../baseEditor/index.mjs\";\nimport { hasClass } from \"../../helpers/dom/element.mjs\";\nexport const EDITOR_TYPE = 'checkbox';\n\n/**\n * @private\n * @class CheckboxEditor\n */\nexport class CheckboxEditor extends BaseEditor {\n  static get EDITOR_TYPE() {\n    return EDITOR_TYPE;\n  }\n  beginEditing(initialValue, event) {\n    // Just some events connected with checkbox editor are delegated here. Some `keydown` events like `enter` and `space` key press\n    // are handled inside `checkboxRenderer`. Some events come here from `editorManager`. Below `if` statement was created by author\n    // for purpose of handling only `doubleclick` event which may be done on a cell with checkbox.\n\n    if (event && event.type === 'mouseup') {\n      const checkbox = this.TD.querySelector('input[type=\"checkbox\"]');\n      if (!hasClass(checkbox, 'htBadValue')) {\n        checkbox.click();\n      }\n    }\n  }\n  finishEditing() {}\n  init() {}\n  open() {}\n  close() {}\n  getValue() {}\n  setValue() {}\n  focus() {}\n}", "import { AutocompleteEditor } from \"../autocompleteEditor/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nexport const EDITOR_TYPE = 'dropdown';\n\n/**\n * @private\n * @class DropdownEditor\n */\nexport class DropdownEditor extends AutocompleteEditor {\n  static get EDITOR_TYPE() {\n    return EDITOR_TYPE;\n  }\n\n  /**\n   * @param {number} row The visual row index.\n   * @param {number} col The visual column index.\n   * @param {number|string} prop The column property (passed when datasource is an array of objects).\n   * @param {HTMLTableCellElement} td The rendered cell element.\n   * @param {*} value The rendered value.\n   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n   */\n  prepare(row, col, prop, td, value, cellProperties) {\n    super.prepare(row, col, prop, td, value, cellProperties);\n    this.cellProperties.filter = false;\n    this.cellProperties.strict = true;\n  }\n}\nHooks.getSingleton().add('beforeValidate', function (value, row, col) {\n  const cellMeta = this.getCellMeta(row, this.propToCol(col));\n  if (cellMeta.editor === DropdownEditor) {\n    if (cellMeta.strict === undefined) {\n      cellMeta.filter = false;\n      cellMeta.strict = true;\n    }\n  }\n});", "import { TextEditor } from \"../textEditor/index.mjs\";\nexport const EDITOR_TYPE = 'numeric';\n\n/**\n * @private\n * @class NumericEditor\n */\nexport class NumericEditor extends TextEditor {\n  static get EDITOR_TYPE() {\n    return EDITOR_TYPE;\n  }\n}", "import { TextEditor } from \"../textEditor/index.mjs\";\nimport { empty, setAttribute } from \"../../helpers/dom/element.mjs\";\nimport { A11Y_HIDDEN } from \"../../helpers/a11y.mjs\";\nexport const EDITOR_TYPE = 'password';\n\n/**\n * @private\n * @class PasswordEditor\n */\nexport class PasswordEditor extends TextEditor {\n  static get EDITOR_TYPE() {\n    return EDITOR_TYPE;\n  }\n  createElements() {\n    super.createElements();\n    this.TEXTAREA = this.hot.rootDocument.createElement('input');\n    this.TEXTAREA.setAttribute('type', 'password');\n    this.TEXTAREA.setAttribute('data-hot-input', ''); // Makes the element recognizable by Hot as its own component's element.\n    this.TEXTAREA.className = 'handsontableInput';\n    this.textareaStyle = this.TEXTAREA.style;\n    this.textareaStyle.width = 0;\n    this.textareaStyle.height = 0;\n    if (this.hot.getSettings().ariaTags) {\n      setAttribute(this.TEXTAREA, [A11Y_HIDDEN()]);\n    }\n    empty(this.TEXTAREA_PARENT);\n    this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);\n  }\n}", "import { BaseEditor, EDITOR_STATE } from \"../baseEditor/index.mjs\";\nimport { addClass, empty, fastInnerHTML, hasClass, removeClass } from \"../../helpers/dom/element.mjs\";\nimport { objectEach } from \"../../helpers/object.mjs\";\nconst EDITOR_VISIBLE_CLASS_NAME = 'ht_editor_visible';\nconst SHORTCUTS_GROUP = 'selectEditor';\nexport const EDITOR_TYPE = 'select';\n\n/**\n * @private\n * @class SelectEditor\n */\nexport class SelectEditor extends BaseEditor {\n  static get EDITOR_TYPE() {\n    return EDITOR_TYPE;\n  }\n\n  /**\n   * Initializes editor instance, DOM Element and mount hooks.\n   */\n  init() {\n    this.select = this.hot.rootDocument.createElement('SELECT');\n    addClass(this.select, 'htSelectEditor');\n    this.select.style.display = 'none';\n    this.hot.rootElement.appendChild(this.select);\n    this.registerHooks();\n  }\n\n  /**\n   * Returns select's value.\n   *\n   * @returns {*}\n   */\n  getValue() {\n    return this.select.value;\n  }\n\n  /**\n   * Sets value in the select element.\n   *\n   * @param {*} value A new select's value.\n   */\n  setValue(value) {\n    this.select.value = value;\n  }\n\n  /**\n   * Opens the editor and adjust its size.\n   */\n  open() {\n    this._opened = true;\n    this.refreshDimensions();\n    this.select.style.display = '';\n    const shortcutManager = this.hot.getShortcutManager();\n    shortcutManager.setActiveContextName('editor');\n    this.registerShortcuts();\n  }\n\n  /**\n   * Closes the editor.\n   */\n  close() {\n    this._opened = false;\n    this.select.style.display = 'none';\n    if (hasClass(this.select, EDITOR_VISIBLE_CLASS_NAME)) {\n      removeClass(this.select, EDITOR_VISIBLE_CLASS_NAME);\n    }\n    this.unregisterShortcuts();\n    this.clearHooks();\n  }\n\n  /**\n   * Sets focus state on the select element.\n   */\n  focus() {\n    this.select.focus();\n  }\n\n  /**\n   * Binds hooks to refresh editor's size after scrolling of the viewport or resizing of columns/rows.\n   *\n   * @private\n   */\n  registerHooks() {\n    this.addHook('afterScrollHorizontally', () => this.refreshDimensions());\n    this.addHook('afterScrollVertically', () => this.refreshDimensions());\n    this.addHook('afterColumnResize', () => this.refreshDimensions());\n    this.addHook('afterRowResize', () => this.refreshDimensions());\n  }\n\n  /**\n   * Prepares editor's meta data and a list of available options.\n   *\n   * @param {number} row The visual row index.\n   * @param {number} col The visual column index.\n   * @param {number|string} prop The column property (passed when datasource is an array of objects).\n   * @param {HTMLTableCellElement} td The rendered cell element.\n   * @param {*} value The rendered value.\n   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n   */\n  prepare(row, col, prop, td, value, cellProperties) {\n    super.prepare(row, col, prop, td, value, cellProperties);\n    const selectOptions = this.cellProperties.selectOptions;\n    let options;\n    if (typeof selectOptions === 'function') {\n      options = this.prepareOptions(selectOptions(this.row, this.col, this.prop));\n    } else {\n      options = this.prepareOptions(selectOptions);\n    }\n    empty(this.select);\n    objectEach(options, (optionValue, key) => {\n      const optionElement = this.hot.rootDocument.createElement('OPTION');\n      optionElement.value = key;\n      fastInnerHTML(optionElement, optionValue);\n      this.select.appendChild(optionElement);\n    });\n  }\n\n  /**\n   * Creates consistent list of available options.\n   *\n   * @private\n   * @param {Array|object} optionsToPrepare The list of the values to render in the select eleemnt.\n   * @returns {object}\n   */\n  prepareOptions(optionsToPrepare) {\n    let preparedOptions = {};\n    if (Array.isArray(optionsToPrepare)) {\n      for (let i = 0, len = optionsToPrepare.length; i < len; i++) {\n        preparedOptions[optionsToPrepare[i]] = optionsToPrepare[i];\n      }\n    } else if (typeof optionsToPrepare === 'object') {\n      preparedOptions = optionsToPrepare;\n    }\n    return preparedOptions;\n  }\n\n  /**\n   * Refreshes editor's value using source data.\n   *\n   * @private\n   */\n  refreshValue() {\n    const sourceData = this.hot.getSourceDataAtCell(this.row, this.prop);\n    this.originalValue = sourceData;\n    this.setValue(sourceData);\n    this.refreshDimensions();\n  }\n\n  /**\n   * Refreshes editor's size and position.\n   *\n   * @private\n   */\n  refreshDimensions() {\n    if (this.state !== EDITOR_STATE.EDITING) {\n      return;\n    }\n    this.TD = this.getEditedCell();\n\n    // TD is outside of the viewport.\n    if (!this.TD) {\n      this.close();\n      return;\n    }\n    const {\n      top,\n      start,\n      width,\n      height\n    } = this.getEditedCellRect();\n    const selectStyle = this.select.style;\n    selectStyle.height = `${height}px`;\n    selectStyle.width = `${width}px`;\n    selectStyle.top = `${top}px`;\n    selectStyle[this.hot.isRtl() ? 'right' : 'left'] = `${start}px`;\n    selectStyle.margin = '0px';\n    addClass(this.select, EDITOR_VISIBLE_CLASS_NAME);\n  }\n\n  /**\n   * Register shortcuts responsible for handling editor.\n   *\n   * @private\n   */\n  registerShortcuts() {\n    const shortcutManager = this.hot.getShortcutManager();\n    const editorContext = shortcutManager.getContext('editor');\n    const contextConfig = {\n      group: SHORTCUTS_GROUP\n    };\n\n    // Actions from fast edit works.\n    if (this.isInFullEditMode() === false) {\n      return;\n    }\n    editorContext.addShortcuts([{\n      keys: [['ArrowUp']],\n      callback: () => {\n        const previousOptionIndex = this.select.selectedIndex - 1;\n        if (previousOptionIndex >= 0) {\n          this.select[previousOptionIndex].selected = true;\n        }\n      }\n    }, {\n      keys: [['ArrowDown']],\n      callback: () => {\n        const nextOptionIndex = this.select.selectedIndex + 1;\n        if (nextOptionIndex <= this.select.length - 1) {\n          this.select[nextOptionIndex].selected = true;\n        }\n      }\n    }], contextConfig);\n  }\n\n  /**\n   * Unregister shortcuts responsible for handling editor.\n   *\n   * @private\n   */\n  unregisterShortcuts() {\n    const shortcutManager = this.hot.getShortcutManager();\n    const editorContext = shortcutManager.getContext('editor');\n    editorContext.removeShortcutsByGroup(SHORTCUTS_GROUP);\n  }\n}", "import { TextEditor } from \"../textEditor/index.mjs\";\nexport const EDITOR_TYPE = 'time';\n\n/**\n * @private\n * @class TimeEditor\n */\nexport class TimeEditor extends TextEditor {\n  static get EDITOR_TYPE() {\n    return EDITOR_TYPE;\n  }\n\n  /**\n   * Prepares editor's meta data.\n   *\n   * @param {number} row The visual row index.\n   * @param {number} col The visual column index.\n   * @param {number|string} prop The column property (passed when datasource is an array of objects).\n   * @param {HTMLTableCellElement} td The rendered cell element.\n   * @param {*} value The rendered value.\n   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n   */\n  prepare(row, col, prop, td, value, cellProperties) {\n    super.prepare(row, col, prop, td, value, cellProperties);\n    this.TEXTAREA.dir = 'ltr';\n  }\n}"],
  "mappings": "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",
  "names": ["EDITOR_TYPE", "EDITOR_TYPE", "EDITOR_TYPE", "EDITOR_TYPE", "EDITOR_TYPE", "SHORTCUTS_GROUP", "EDITOR_TYPE", "EDITOR_TYPE"]
}
