{
  "version": 3,
  "sources": ["../../core-js/internals/function-uncurry-this-clause.js", "../../core-js/internals/function-bind-context.js", "../../core-js/internals/validate-arguments-length.js", "../../core-js/internals/engine-is-ios.js", "../../core-js/internals/engine-is-node.js", "../../core-js/internals/task.js", "../../core-js/modules/web.clear-immediate.js", "../../core-js/internals/engine-is-bun.js", "../../core-js/internals/schedulers-fix.js", "../../core-js/modules/web.set-immediate.js", "../../core-js/modules/web.immediate.js", "../../handsontable/focusManager.mjs", "../../handsontable/utils/rootInstance.mjs", "../../handsontable/tableView.mjs", "../../handsontable/dataMap/dataSource.mjs", "../../handsontable/i18n/utils.mjs", "../../handsontable/i18n/phraseFormatters/pluralize.mjs", "../../handsontable/i18n/phraseFormatters/index.mjs", "../../handsontable/i18n/languages/en-US.mjs", "../../handsontable/i18n/registry.mjs", "../../handsontable/dataMap/dataMap.mjs", "../../handsontable/dataMap/metaManager/utils.mjs", "../../handsontable/dataMap/metaManager/metaSchema.mjs", "../../handsontable/dataMap/metaManager/metaLayers/globalMeta.mjs", "../../handsontable/dataMap/metaManager/metaLayers/tableMeta.mjs", "../../handsontable/dataMap/metaManager/lazyFactoryMap.mjs", "../../handsontable/dataMap/metaManager/metaLayers/columnMeta.mjs", "../../handsontable/dataMap/metaManager/metaLayers/cellMeta.mjs", "../../handsontable/dataMap/metaManager/index.mjs", "../../handsontable/dataMap/replaceData.mjs", "../../handsontable/dataMap/metaManager/mods/dynamicCellMeta.mjs", "../../handsontable/dataMap/metaManager/mods/extendMetaProperties.mjs", "../../handsontable/core/focusCatcher/focusDetector.mjs", "../../handsontable/core/focusCatcher/index.mjs", "../../handsontable/shortcuts/utils.mjs", "../../handsontable/shortcuts/context.mjs", "../../handsontable/shortcuts/keyObserver.mjs", "../../handsontable/shortcuts/recorder.mjs", "../../handsontable/shortcuts/manager.mjs", "../../handsontable/core.mjs", "../../handsontable/base.mjs"],
  "sourcesContent": ["'use strict';\nvar classofRaw = require('../internals/classof-raw');\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nmodule.exports = function (fn) {\n  // Nashorn bug:\n  //   https://github.com/zloirock/core-js/issues/1128\n  //   https://github.com/zloirock/core-js/issues/1130\n  if (classofRaw(fn) === 'Function') return uncurryThis(fn);\n};\n", "'use strict';\nvar uncurryThis = require('../internals/function-uncurry-this-clause');\nvar aCallable = require('../internals/a-callable');\nvar NATIVE_BIND = require('../internals/function-bind-native');\n\nvar bind = uncurryThis(uncurryThis.bind);\n\n// optional / simple context binding\nmodule.exports = function (fn, that) {\n  aCallable(fn);\n  return that === undefined ? fn : NATIVE_BIND ? bind(fn, that) : function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n", "'use strict';\nvar $TypeError = TypeError;\n\nmodule.exports = function (passed, required) {\n  if (passed < required) throw new $TypeError('Not enough arguments');\n  return passed;\n};\n", "'use strict';\nvar userAgent = require('../internals/engine-user-agent');\n\n// eslint-disable-next-line redos/no-vulnerable -- safe\nmodule.exports = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent);\n", "'use strict';\nvar global = require('../internals/global');\nvar classof = require('../internals/classof-raw');\n\nmodule.exports = classof(global.process) === 'process';\n", "'use strict';\nvar global = require('../internals/global');\nvar apply = require('../internals/function-apply');\nvar bind = require('../internals/function-bind-context');\nvar isCallable = require('../internals/is-callable');\nvar hasOwn = require('../internals/has-own-property');\nvar fails = require('../internals/fails');\nvar html = require('../internals/html');\nvar arraySlice = require('../internals/array-slice');\nvar createElement = require('../internals/document-create-element');\nvar validateArgumentsLength = require('../internals/validate-arguments-length');\nvar IS_IOS = require('../internals/engine-is-ios');\nvar IS_NODE = require('../internals/engine-is-node');\n\nvar set = global.setImmediate;\nvar clear = global.clearImmediate;\nvar process = global.process;\nvar Dispatch = global.Dispatch;\nvar Function = global.Function;\nvar MessageChannel = global.MessageChannel;\nvar String = global.String;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar $location, defer, channel, port;\n\nfails(function () {\n  // Deno throws a ReferenceError on `location` access without `--location` flag\n  $location = global.location;\n});\n\nvar run = function (id) {\n  if (hasOwn(queue, id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\n\nvar runner = function (id) {\n  return function () {\n    run(id);\n  };\n};\n\nvar eventListener = function (event) {\n  run(event.data);\n};\n\nvar globalPostMessageDefer = function (id) {\n  // old engines have not location.origin\n  global.postMessage(String(id), $location.protocol + '//' + $location.host);\n};\n\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!set || !clear) {\n  set = function setImmediate(handler) {\n    validateArgumentsLength(arguments.length, 1);\n    var fn = isCallable(handler) ? handler : Function(handler);\n    var args = arraySlice(arguments, 1);\n    queue[++counter] = function () {\n      apply(fn, undefined, args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clear = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (IS_NODE) {\n    defer = function (id) {\n      process.nextTick(runner(id));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(runner(id));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  // except iOS - https://github.com/zloirock/core-js/issues/624\n  } else if (MessageChannel && !IS_IOS) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = eventListener;\n    defer = bind(port.postMessage, port);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (\n    global.addEventListener &&\n    isCallable(global.postMessage) &&\n    !global.importScripts &&\n    $location && $location.protocol !== 'file:' &&\n    !fails(globalPostMessageDefer)\n  ) {\n    defer = globalPostMessageDefer;\n    global.addEventListener('message', eventListener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in createElement('script')) {\n    defer = function (id) {\n      html.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(runner(id), 0);\n    };\n  }\n}\n\nmodule.exports = {\n  set: set,\n  clear: clear\n};\n", "'use strict';\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar clearImmediate = require('../internals/task').clear;\n\n// `clearImmediate` method\n// http://w3c.github.io/setImmediate/#si-clearImmediate\n$({ global: true, bind: true, enumerable: true, forced: global.clearImmediate !== clearImmediate }, {\n  clearImmediate: clearImmediate\n});\n", "'use strict';\n/* global Bun -- Bun case */\nmodule.exports = typeof Bun == 'function' && Bun && typeof Bun.version == 'string';\n", "'use strict';\nvar global = require('../internals/global');\nvar apply = require('../internals/function-apply');\nvar isCallable = require('../internals/is-callable');\nvar ENGINE_IS_BUN = require('../internals/engine-is-bun');\nvar USER_AGENT = require('../internals/engine-user-agent');\nvar arraySlice = require('../internals/array-slice');\nvar validateArgumentsLength = require('../internals/validate-arguments-length');\n\nvar Function = global.Function;\n// dirty IE9- and Bun 0.3.0- checks\nvar WRAP = /MSIE .\\./.test(USER_AGENT) || ENGINE_IS_BUN && (function () {\n  var version = global.Bun.version.split('.');\n  return version.length < 3 || version[0] === '0' && (version[1] < 3 || version[1] === '3' && version[2] === '0');\n})();\n\n// IE9- / Bun 0.3.0- setTimeout / setInterval / setImmediate additional parameters fix\n// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers\n// https://github.com/oven-sh/bun/issues/1633\nmodule.exports = function (scheduler, hasTimeArg) {\n  var firstParamIndex = hasTimeArg ? 2 : 1;\n  return WRAP ? function (handler, timeout /* , ...arguments */) {\n    var boundArgs = validateArgumentsLength(arguments.length, 1) > firstParamIndex;\n    var fn = isCallable(handler) ? handler : Function(handler);\n    var params = boundArgs ? arraySlice(arguments, firstParamIndex) : [];\n    var callback = boundArgs ? function () {\n      apply(fn, this, params);\n    } : fn;\n    return hasTimeArg ? scheduler(callback, timeout) : scheduler(callback);\n  } : scheduler;\n};\n", "'use strict';\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar setTask = require('../internals/task').set;\nvar schedulersFix = require('../internals/schedulers-fix');\n\n// https://github.com/oven-sh/bun/issues/1633\nvar setImmediate = global.setImmediate ? schedulersFix(setTask, false) : setTask;\n\n// `setImmediate` method\n// http://w3c.github.io/setImmediate/#si-setImmediate\n$({ global: true, bind: true, enumerable: true, forced: global.setImmediate !== setImmediate }, {\n  setImmediate: setImmediate\n});\n", "'use strict';\n// TODO: Remove this module from `core-js@4` since it's split to modules listed below\nrequire('../modules/web.clear-immediate');\nrequire('../modules/web.set-immediate');\n", "import \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { warn } from \"./helpers/console.mjs\";\nimport { isOutsideInput } from \"./helpers/dom/element.mjs\";\nimport { debounce } from \"./helpers/function.mjs\";\n/**\n * Possible focus modes.\n * - CELL - The browser's focus stays on the lastly selected cell element.\n * - MIXED - The browser's focus switches from the lastly selected cell element to the currently active editor's\n * `TEXTAREA` element after a delay defined in the manager.\n *\n * @type {{CELL: string, MIXED: string}}\n */\nconst FOCUS_MODES = Object.freeze({\n  CELL: 'cell',\n  MIXED: 'mixed'\n});\n\n/**\n * Manages the browser's focus in the table.\n */\nvar _hot = /*#__PURE__*/new WeakMap();\nvar _focusMode = /*#__PURE__*/new WeakMap();\nvar _refocusDelay = /*#__PURE__*/new WeakMap();\nvar _refocusElementGetter = /*#__PURE__*/new WeakMap();\nvar _debouncedSelect = /*#__PURE__*/new WeakMap();\nvar _getSelectedCell = /*#__PURE__*/new WeakSet();\nvar _focusCell = /*#__PURE__*/new WeakSet();\nvar _focusEditorElement = /*#__PURE__*/new WeakSet();\nvar _onUpdateSettings = /*#__PURE__*/new WeakSet();\nexport class FocusManager {\n  constructor(hotInstance) {\n    var _this = this;\n    /**\n     * Update the manager configuration after calling `updateSettings`.\n     *\n     * @param {object} newSettings The new settings passed to the `updateSettings` method.\n     */\n    _classPrivateMethodInitSpec(this, _onUpdateSettings);\n    /**\n     * Manage the browser's focus after cell selection end.\n     */\n    _classPrivateMethodInitSpec(this, _focusEditorElement);\n    /**\n     * Manage the browser's focus after each cell selection change.\n     */\n    _classPrivateMethodInitSpec(this, _focusCell);\n    /**\n     * Get and return the currently selected and highlighted cell/header element.\n     *\n     * @param {Function} callback Callback function to be called after the cell element is retrieved.\n     */\n    _classPrivateMethodInitSpec(this, _getSelectedCell);\n    /**\n     * The Handsontable instance.\n     */\n    _classPrivateFieldInitSpec(this, _hot, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * The currently enabled focus mode.\n     * Can be either:\n     *\n     * - 'cell' - The browser's focus stays on the lastly selected cell element.\n     * - 'mixed' - The browser's focus switches from the lastly selected cell element to the currently active editor's\n     * `TEXTAREA` element after a delay defined in the manager.\n     *\n     * @type {'cell' | 'mixed'}\n     */\n    _classPrivateFieldInitSpec(this, _focusMode, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * The delay after which the focus switches from the lastly selected cell to the active editor's `TEXTAREA`\n     * element if the focus mode is set to 'mixed'.\n     *\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _refocusDelay, {\n      writable: true,\n      value: 50\n    });\n    /**\n     * Getter function for the element to be used when refocusing the browser after a delay. If `null`, the active\n     * editor's `TEXTAREA` element will be used.\n     *\n     * @type {null|Function}\n     */\n    _classPrivateFieldInitSpec(this, _refocusElementGetter, {\n      writable: true,\n      value: null\n    });\n    /**\n     * Map of the debounced `select` functions.\n     *\n     * @type {Map<number, Function>}\n     */\n    _classPrivateFieldInitSpec(this, _debouncedSelect, {\n      writable: true,\n      value: new Map()\n    });\n    const hotSettings = hotInstance.getSettings();\n    _classPrivateFieldSet(this, _hot, hotInstance);\n    _classPrivateFieldSet(this, _focusMode, hotSettings.imeFastEdit ? FOCUS_MODES.MIXED : FOCUS_MODES.CELL);\n    _classPrivateFieldGet(this, _hot).addHook('afterUpdateSettings', function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return _classPrivateMethodGet(_this, _onUpdateSettings, _onUpdateSettings2).call(_this, ...args);\n    });\n    _classPrivateFieldGet(this, _hot).addHook('afterSelection', function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return _classPrivateMethodGet(_this, _focusCell, _focusCell2).call(_this, ...args);\n    });\n    _classPrivateFieldGet(this, _hot).addHook('afterSelectionEnd', function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      return _classPrivateMethodGet(_this, _focusEditorElement, _focusEditorElement2).call(_this, ...args);\n    });\n  }\n\n  /**\n   * Get the current focus mode.\n   *\n   * @returns {'cell' | 'mixed'}\n   */\n  getFocusMode() {\n    return _classPrivateFieldGet(this, _focusMode);\n  }\n\n  /**\n   * Set the focus mode.\n   *\n   * @param {'cell' | 'mixed'} focusMode The new focus mode.\n   */\n  setFocusMode(focusMode) {\n    if (Object.values(FOCUS_MODES).includes(focusMode)) {\n      _classPrivateFieldSet(this, _focusMode, focusMode);\n    } else {\n      warn(`\"${focusMode}\" is not a valid focus mode.`);\n    }\n  }\n\n  /**\n   * Get the delay after which the focus will change from the cell elements to the active editor's `TEXTAREA`\n   * element if the focus mode is set to 'mixed'.\n   *\n   * @returns {number} Delay in milliseconds.\n   */\n  getRefocusDelay() {\n    return _classPrivateFieldGet(this, _refocusDelay);\n  }\n\n  /**\n   * Set the delay after which the focus will change from the cell elements to the active editor's `TEXTAREA`\n   * element if the focus mode is set to 'mixed'.\n   *\n   * @param {number} delay Delay in milliseconds.\n   */\n  setRefocusDelay(delay) {\n    _classPrivateFieldSet(this, _refocusDelay, delay);\n  }\n\n  /**\n   * Set the function to be used as the \"refocus element\" getter. It should return a focusable HTML element.\n   *\n   * @param {Function} getRefocusElementFunction The refocus element getter.\n   */\n  setRefocusElementGetter(getRefocusElementFunction) {\n    _classPrivateFieldSet(this, _refocusElementGetter, getRefocusElementFunction);\n  }\n\n  /**\n   * Get the element to be used when refocusing the browser after a delay in case of the focus mode being 'mixed'.\n   *\n   * @returns {HTMLTextAreaElement|HTMLElement|undefined}\n   */\n  getRefocusElement() {\n    if (typeof _classPrivateFieldGet(this, _refocusElementGetter) === 'function') {\n      return _classPrivateFieldGet(this, _refocusElementGetter).call(this);\n    } else {\n      var _classPrivateFieldGet2;\n      return (_classPrivateFieldGet2 = _classPrivateFieldGet(this, _hot).getActiveEditor()) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.TEXTAREA;\n    }\n  }\n\n  /**\n   * Set the browser's focus to the highlighted cell of the last selection.\n   *\n   * @param {HTMLTableCellElement} [selectedCell] The highlighted cell/header element.\n   */\n  focusOnHighlightedCell(selectedCell) {\n    const focusElement = element => {\n      var _classPrivateFieldGet3, _classPrivateFieldGet4;\n      const currentHighlightCoords = (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _hot).getSelectedRangeLast()) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.highlight;\n      if (!currentHighlightCoords) {\n        return;\n      }\n      let elementToBeFocused = _classPrivateFieldGet(this, _hot).runHooks('modifyFocusedElement', currentHighlightCoords.row, currentHighlightCoords.col, element);\n      if (!(elementToBeFocused instanceof HTMLElement)) {\n        elementToBeFocused = element;\n      }\n      if (elementToBeFocused && !((_classPrivateFieldGet4 = _classPrivateFieldGet(this, _hot).getActiveEditor()) !== null && _classPrivateFieldGet4 !== void 0 && _classPrivateFieldGet4.isOpened())) {\n        elementToBeFocused.focus({\n          preventScroll: true\n        });\n      }\n    };\n    if (selectedCell) {\n      focusElement(selectedCell);\n    } else {\n      _classPrivateMethodGet(this, _getSelectedCell, _getSelectedCell2).call(this, element => focusElement(element));\n    }\n  }\n\n  /**\n   * Set the focus to the active editor's `TEXTAREA` element after the provided delay. If no delay is provided, it\n   * will be taken from the manager's configuration.\n   *\n   * @param {number} [delay] Delay in milliseconds.\n   */\n  refocusToEditorTextarea() {\n    var _classPrivateFieldGet5;\n    let delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _classPrivateFieldGet(this, _refocusDelay);\n    const refocusElement = this.getRefocusElement();\n\n    // Re-focus on the editor's `TEXTAREA` element (or a predefined element) if the `imeFastEdit` option is enabled.\n    if (_classPrivateFieldGet(this, _hot).getSettings().imeFastEdit && !((_classPrivateFieldGet5 = _classPrivateFieldGet(this, _hot).getActiveEditor()) !== null && _classPrivateFieldGet5 !== void 0 && _classPrivateFieldGet5.isOpened()) && !!refocusElement) {\n      if (!_classPrivateFieldGet(this, _debouncedSelect).has(delay)) {\n        _classPrivateFieldGet(this, _debouncedSelect).set(delay, debounce(() => {\n          refocusElement.select();\n        }, delay));\n      }\n      _classPrivateFieldGet(this, _debouncedSelect).get(delay)();\n    }\n  }\n}\nfunction _getSelectedCell2(callback) {\n  var _classPrivateFieldGet6;\n  const highlight = (_classPrivateFieldGet6 = _classPrivateFieldGet(this, _hot).getSelectedRangeLast()) === null || _classPrivateFieldGet6 === void 0 ? void 0 : _classPrivateFieldGet6.highlight;\n  if (!highlight || !_classPrivateFieldGet(this, _hot).selection.isCellVisible(highlight)) {\n    callback(null);\n    return;\n  }\n  const cell = _classPrivateFieldGet(this, _hot).getCell(highlight.row, highlight.col, true);\n  if (cell === null) {\n    _classPrivateFieldGet(this, _hot).addHookOnce('afterScroll', () => {\n      callback(_classPrivateFieldGet(this, _hot).getCell(highlight.row, highlight.col, true));\n    });\n  } else {\n    callback(cell);\n  }\n}\nfunction _focusCell2() {\n  _classPrivateMethodGet(this, _getSelectedCell, _getSelectedCell2).call(this, selectedCell => {\n    const {\n      activeElement\n    } = _classPrivateFieldGet(this, _hot).rootDocument;\n\n    // Blurring the `activeElement` removes the unwanted border around the focusable element (#6877)\n    // and resets the `document.activeElement` property. The blurring should happen only when the\n    // previously selected input element has not belonged to the Handsontable editor. If blurring is\n    // triggered for all elements, there is a problem with the disappearing IME editor (#9672).\n    if (activeElement && isOutsideInput(activeElement)) {\n      activeElement.blur();\n    }\n    this.focusOnHighlightedCell(selectedCell);\n  });\n}\nfunction _focusEditorElement2() {\n  _classPrivateMethodGet(this, _getSelectedCell, _getSelectedCell2).call(this, selectedCell => {\n    if (this.getFocusMode() === FOCUS_MODES.MIXED && selectedCell.nodeName === 'TD') {\n      this.refocusToEditorTextarea();\n    }\n  });\n}\nfunction _onUpdateSettings2(newSettings) {\n  if (newSettings.imeFastEdit && this.getFocusMode() !== FOCUS_MODES.MIXED) {\n    this.setFocusMode(FOCUS_MODES.MIXED);\n  } else if (!newSettings.imeFastEdit && this.getFocusMode() !== FOCUS_MODES.CELL) {\n    this.setFocusMode(FOCUS_MODES.CELL);\n  }\n}", "export const holder = new WeakMap();\nexport const rootInstanceSymbol = Symbol('rootInstance');\n\n/**\n * Register an object as a root instance.\n *\n * @param  {object} object An object to associate with root instance flag.\n */\nexport function registerAsRootInstance(object) {\n  holder.set(object, true);\n}\n\n/**\n * Check if the source of the root indication call is valid.\n *\n * @param  {symbol} rootSymbol A symbol as a source of truth.\n * @returns {boolean}\n */\nexport function hasValidParameter(rootSymbol) {\n  return rootSymbol === rootInstanceSymbol;\n}\n\n/**\n * Check if passed an object was flagged as a root instance.\n *\n * @param  {object} object An object to check.\n * @returns {boolean}\n */\nexport function isRootInstance(object) {\n  return holder.has(object);\n}", "import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { addClass, clearTextSelection, empty, fastInnerHTML, fastInnerText, getScrollbarWidth, hasClass, isChildOf, isInput, isOutsideInput, isVisible, setAttribute } from \"./helpers/dom/element.mjs\";\nimport EventManager from \"./eventManager.mjs\";\nimport { isImmediatePropagationStopped, isRightClick, isLeftClick } from \"./helpers/dom/event.mjs\";\nimport Walkontable from \"./3rdparty/walkontable/src/index.mjs\";\nimport { handleMouseEvent } from \"./selection/mouseEventHandler.mjs\";\nimport { isRootInstance } from \"./utils/rootInstance.mjs\";\nimport { A11Y_COLCOUNT, A11Y_MULTISELECTABLE, A11Y_PRESENTATION, A11Y_ROWCOUNT, A11Y_TREEGRID } from \"./helpers/a11y.mjs\";\n/**\n * @class TableView\n * @private\n */\nvar _columnHeadersCount = /*#__PURE__*/new WeakMap();\nvar _rowHeadersCount = /*#__PURE__*/new WeakMap();\nvar _selectionMouseDown = /*#__PURE__*/new WeakMap();\nvar _mouseDown = /*#__PURE__*/new WeakMap();\nvar _table = /*#__PURE__*/new WeakMap();\nvar _lastWidth = /*#__PURE__*/new WeakMap();\nvar _lastHeight = /*#__PURE__*/new WeakMap();\nvar _getAriaColcount = /*#__PURE__*/new WeakSet();\nvar _updateAriaColcount = /*#__PURE__*/new WeakSet();\nclass TableView {\n  /**\n   * @param {Hanstontable} hotInstance Instance of {@link Handsontable}.\n   */\n  constructor(hotInstance) {\n    /**\n     * Update the `aria-colcount` attribute by the provided value.\n     *\n     * @param {number} delta The number of columns to add or remove to the aria tag.\n     */\n    _classPrivateMethodInitSpec(this, _updateAriaColcount);\n    /**\n     * Return the value of the `aria-colcount` attribute.\n     *\n     * @returns {number} The value of the `aria-colcount` attribute.\n     */\n    _classPrivateMethodInitSpec(this, _getAriaColcount);\n    /**\n     * Instance of {@link Handsontable}.\n     *\n     * @private\n     * @type {Handsontable}\n     */\n    _defineProperty(this, \"hot\", void 0);\n    /**\n     * Instance of {@link EventManager}.\n     *\n     * @private\n     * @type {EventManager}\n     */\n    _defineProperty(this, \"eventManager\", void 0);\n    /**\n     * Current Handsontable's GridSettings object.\n     *\n     * @private\n     * @type {GridSettings}\n     */\n    _defineProperty(this, \"settings\", void 0);\n    /**\n     * Main <THEAD> element.\n     *\n     * @private\n     * @type {HTMLTableSectionElement}\n     */\n    _defineProperty(this, \"THEAD\", void 0);\n    /**\n     * Main <TBODY> element.\n     *\n     * @private\n     * @type {HTMLTableSectionElement}\n     */\n    _defineProperty(this, \"TBODY\", void 0);\n    /**\n     * Main Walkontable instance.\n     *\n     * @private\n     * @type {Walkontable}\n     */\n    _defineProperty(this, \"_wt\", void 0);\n    /**\n     * Main Walkontable instance.\n     *\n     * @type {Walkontable}\n     */\n    _defineProperty(this, \"activeWt\", void 0);\n    /**\n     * The total number of the column header renderers applied to the table through the\n     * `afterGetColumnHeaderRenderers` hook.\n     *\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _columnHeadersCount, {\n      writable: true,\n      value: 0\n    });\n    /**\n     * The total number of the row header renderers applied to the table through the\n     * `afterGetRowHeaderRenderers` hook.\n     *\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _rowHeadersCount, {\n      writable: true,\n      value: 0\n    });\n    /**\n     * The flag determines if the `adjustElementsSize` method call was made during\n     * the render suspending. If true, the method has to be triggered once after render\n     * resuming.\n     *\n     * @private\n     * @type {boolean}\n     */\n    _defineProperty(this, \"postponedAdjustElementsSize\", false);\n    /**\n     * Defines if the text should be selected during mousemove.\n     *\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _selectionMouseDown, {\n      writable: true,\n      value: false\n    });\n    /**\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _mouseDown, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * Main <TABLE> element.\n     *\n     * @type {HTMLTableElement}\n     */\n    _classPrivateFieldInitSpec(this, _table, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * Cached width of the rootElement.\n     *\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _lastWidth, {\n      writable: true,\n      value: 0\n    });\n    /**\n     * Cached height of the rootElement.\n     *\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _lastHeight, {\n      writable: true,\n      value: 0\n    });\n    this.hot = hotInstance;\n    this.eventManager = new EventManager(this.hot);\n    this.settings = this.hot.getSettings();\n    this.createElements();\n    this.registerEvents();\n    this.initializeWalkontable();\n  }\n\n  /**\n   * Renders WalkontableUI.\n   */\n  render() {\n    if (!this.hot.isRenderSuspended()) {\n      this.hot.runHooks('beforeRender', this.hot.forceFullRender);\n      if (this.postponedAdjustElementsSize) {\n        this.postponedAdjustElementsSize = false;\n        this.adjustElementsSize(true);\n      }\n      this._wt.draw(!this.hot.forceFullRender);\n      this.hot.runHooks('afterRender', this.hot.forceFullRender);\n      this.hot.forceFullRender = false;\n      this.hot.renderCall = false;\n    }\n  }\n\n  /**\n   * Adjust overlays elements size and master table size.\n   *\n   * @param {boolean} [force=false] When `true`, it adjust the DOM nodes sizes for all overlays.\n   */\n  adjustElementsSize() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (this.hot.isRenderSuspended()) {\n      this.postponedAdjustElementsSize = true;\n    } else {\n      this._wt.wtOverlays.adjustElementsSize(force);\n    }\n  }\n\n  /**\n   * Returns td object given coordinates.\n   *\n   * @param {CellCoords} coords Renderable cell coordinates.\n   * @param {boolean} topmost Indicates whether the cell should be calculated from the topmost.\n   * @returns {HTMLTableCellElement|null}\n   */\n  getCellAtCoords(coords, topmost) {\n    const td = this._wt.getCell(coords, topmost);\n    if (td < 0) {\n      // there was an exit code (cell is out of bounds)\n      return null;\n    }\n    return td;\n  }\n\n  /**\n   * Scroll viewport to a cell.\n   *\n   * @param {CellCoords} coords Renderable cell coordinates.\n   * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.\n   * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right side of the table.\n   * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom side of the table.\n   * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left side of the table.\n   * @returns {boolean}\n   */\n  scrollViewport(coords, snapToTop, snapToRight, snapToBottom, snapToLeft) {\n    return this._wt.scrollViewport(coords, snapToTop, snapToRight, snapToBottom, snapToLeft);\n  }\n\n  /**\n   * Scroll viewport to a column.\n   *\n   * @param {number} column Renderable column index.\n   * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right side of the table.\n   * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left side of the table.\n   * @returns {boolean}\n   */\n  scrollViewportHorizontally(column, snapToRight, snapToLeft) {\n    return this._wt.scrollViewportHorizontally(column, snapToRight, snapToLeft);\n  }\n\n  /**\n   * Scroll viewport to a row.\n   *\n   * @param {number} row Renderable row index.\n   * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.\n   * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom side of the table.\n   * @returns {boolean}\n   */\n  scrollViewportVertically(row, snapToTop, snapToBottom) {\n    return this._wt.scrollViewportVertically(row, snapToTop, snapToBottom);\n  }\n\n  /**\n   * Prepares DOMElements and adds correct className to the root element.\n   *\n   * @private\n   */\n  createElements() {\n    const {\n      rootElement,\n      rootDocument\n    } = this.hot;\n    const originalStyle = rootElement.getAttribute('style');\n    if (originalStyle) {\n      rootElement.setAttribute('data-originalstyle', originalStyle); // needed to retrieve original style in jsFiddle link generator in HT examples. may be removed in future versions\n    }\n\n    addClass(rootElement, 'handsontable');\n    _classPrivateFieldSet(this, _table, rootDocument.createElement('TABLE'));\n    addClass(_classPrivateFieldGet(this, _table), 'htCore');\n    if (this.hot.getSettings().tableClassName) {\n      addClass(_classPrivateFieldGet(this, _table), this.hot.getSettings().tableClassName);\n    }\n    if (this.settings.ariaTags) {\n      setAttribute(_classPrivateFieldGet(this, _table), [A11Y_PRESENTATION()]);\n      setAttribute(rootElement, [A11Y_TREEGRID(), A11Y_ROWCOUNT(-1), A11Y_COLCOUNT(this.hot.countCols()), A11Y_MULTISELECTABLE()]);\n    }\n    this.THEAD = rootDocument.createElement('THEAD');\n    _classPrivateFieldGet(this, _table).appendChild(this.THEAD);\n    this.TBODY = rootDocument.createElement('TBODY');\n    _classPrivateFieldGet(this, _table).appendChild(this.TBODY);\n    this.hot.table = _classPrivateFieldGet(this, _table);\n    this.hot.container.insertBefore(_classPrivateFieldGet(this, _table), this.hot.container.firstChild);\n  }\n\n  /**\n   * Attaches necessary listeners.\n   *\n   * @private\n   */\n  registerEvents() {\n    const {\n      rootElement,\n      rootDocument,\n      selection\n    } = this.hot;\n    const documentElement = rootDocument.documentElement;\n    this.eventManager.addEventListener(rootElement, 'mousedown', event => {\n      _classPrivateFieldSet(this, _selectionMouseDown, true);\n      if (!this.isTextSelectionAllowed(event.target)) {\n        const {\n          rootWindow\n        } = this.hot;\n        clearTextSelection(rootWindow);\n        event.preventDefault();\n        rootWindow.focus(); // make sure that window that contains HOT is active. Important when HOT is in iframe.\n      }\n    });\n\n    this.eventManager.addEventListener(rootElement, 'mouseup', () => {\n      _classPrivateFieldSet(this, _selectionMouseDown, false);\n    });\n    this.eventManager.addEventListener(rootElement, 'mousemove', event => {\n      if (_classPrivateFieldGet(this, _selectionMouseDown) && !this.isTextSelectionAllowed(event.target)) {\n        // Clear selection only when fragmentSelection is enabled, otherwise clearing selection breaks the IME editor.\n        if (this.settings.fragmentSelection) {\n          clearTextSelection(this.hot.rootWindow);\n        }\n        event.preventDefault();\n      }\n    });\n    this.eventManager.addEventListener(documentElement, 'keyup', event => {\n      // TODO: is it the best place and way to finish cell selection?\n      if (selection.isInProgress() && !event.shiftKey) {\n        selection.finish();\n      }\n    });\n    this.eventManager.addEventListener(documentElement, 'mouseup', event => {\n      if (selection.isInProgress() && isLeftClick(event)) {\n        selection.finish();\n      }\n      _classPrivateFieldSet(this, _mouseDown, false);\n      const isOutsideInputElement = isOutsideInput(rootDocument.activeElement);\n      if (!isOutsideInputElement) {\n        return;\n      }\n      if (isOutsideInputElement || !selection.isSelected() && !selection.isSelectedByAnyHeader() && !rootElement.contains(event.target) && !isRightClick(event)) {\n        this.hot.unlisten();\n      }\n    });\n    this.eventManager.addEventListener(documentElement, 'contextmenu', event => {\n      if (selection.isInProgress() && isRightClick(event)) {\n        selection.finish();\n        _classPrivateFieldSet(this, _mouseDown, false);\n      }\n    });\n    this.eventManager.addEventListener(documentElement, 'touchend', () => {\n      if (selection.isInProgress()) {\n        selection.finish();\n      }\n      _classPrivateFieldSet(this, _mouseDown, false);\n    });\n    this.eventManager.addEventListener(documentElement, 'mousedown', event => {\n      const originalTarget = event.target;\n      const eventX = event.x || event.clientX;\n      const eventY = event.y || event.clientY;\n      let next = event.target;\n      if (_classPrivateFieldGet(this, _mouseDown) || !rootElement || !this.hot.view) {\n        return; // it must have been started in a cell\n      }\n\n      // immediate click on \"holder\" means click on the right side of vertical scrollbar\n      const {\n        holder\n      } = this.hot.view._wt.wtTable;\n      if (next === holder) {\n        const scrollbarWidth = getScrollbarWidth(rootDocument);\n        if (rootDocument.elementFromPoint(eventX + scrollbarWidth, eventY) !== holder || rootDocument.elementFromPoint(eventX, eventY + scrollbarWidth) !== holder) {\n          return;\n        }\n      } else {\n        while (next !== documentElement) {\n          if (next === null) {\n            if (event.isTargetWebComponent) {\n              break;\n            }\n\n            // click on something that was a row but now is detached (possibly because your click triggered a rerender)\n            return;\n          }\n          if (next === rootElement) {\n            // click inside container\n            return;\n          }\n          next = next.parentNode;\n        }\n      }\n\n      // function did not return until here, we have an outside click!\n      const outsideClickDeselects = typeof this.settings.outsideClickDeselects === 'function' ? this.settings.outsideClickDeselects(originalTarget) : this.settings.outsideClickDeselects;\n      if (outsideClickDeselects) {\n        this.hot.deselectCell();\n      } else {\n        this.hot.destroyEditor(false, false);\n      }\n    });\n    this.eventManager.addEventListener(_classPrivateFieldGet(this, _table), 'selectstart', event => {\n      if (this.settings.fragmentSelection || isInput(event.target)) {\n        return;\n      }\n      // https://github.com/handsontable/handsontable/issues/160\n      // Prevent text from being selected when performing drag down.\n      event.preventDefault();\n    });\n  }\n\n  /**\n   * Translate renderable cell coordinates to visual coordinates.\n   *\n   * @param {CellCoords} coords The cell coordinates.\n   * @returns {CellCoords}\n   */\n  translateFromRenderableToVisualCoords(_ref) {\n    let {\n      row,\n      col\n    } = _ref;\n    // TODO: To consider an idea to reusing the CellCoords instance instead creating new one.\n    return this.hot._createCellCoords(...this.translateFromRenderableToVisualIndex(row, col));\n  }\n\n  /**\n   * Translate renderable row and column indexes to visual row and column indexes.\n   *\n   * @param {number} renderableRow Renderable row index.\n   * @param {number} renderableColumn Renderable columnIndex.\n   * @returns {number[]}\n   */\n  translateFromRenderableToVisualIndex(renderableRow, renderableColumn) {\n    // TODO: Some helper may be needed.\n    // We perform translation for indexes (without headers).\n    let visualRow = renderableRow >= 0 ? this.hot.rowIndexMapper.getVisualFromRenderableIndex(renderableRow) : renderableRow;\n    let visualColumn = renderableColumn >= 0 ? this.hot.columnIndexMapper.getVisualFromRenderableIndex(renderableColumn) : renderableColumn;\n    if (visualRow === null) {\n      visualRow = renderableRow;\n    }\n    if (visualColumn === null) {\n      visualColumn = renderableColumn;\n    }\n    return [visualRow, visualColumn];\n  }\n\n  /**\n   * Returns the number of renderable indexes.\n   *\n   * @private\n   * @param {IndexMapper} indexMapper The IndexMapper instance for specific axis.\n   * @param {number} maxElements Maximum number of elements (rows or columns).\n   *\n   * @returns {number|*}\n   */\n  countRenderableIndexes(indexMapper, maxElements) {\n    const consideredElements = Math.min(indexMapper.getNotTrimmedIndexesLength(), maxElements);\n    // Don't take hidden indexes into account. We are looking just for renderable indexes.\n    const firstNotHiddenIndex = indexMapper.getNearestNotHiddenIndex(consideredElements - 1, -1);\n\n    // There are no renderable indexes.\n    if (firstNotHiddenIndex === null) {\n      return 0;\n    }\n    return indexMapper.getRenderableFromVisualIndex(firstNotHiddenIndex) + 1;\n  }\n\n  /**\n   * Returns the number of renderable columns.\n   *\n   * @returns {number}\n   */\n  countRenderableColumns() {\n    return this.countRenderableIndexes(this.hot.columnIndexMapper, this.settings.maxCols);\n  }\n\n  /**\n   * Returns the number of renderable rows.\n   *\n   * @returns {number}\n   */\n  countRenderableRows() {\n    return this.countRenderableIndexes(this.hot.rowIndexMapper, this.settings.maxRows);\n  }\n\n  /**\n   * Returns number of not hidden row indexes counting from the passed starting index.\n   * The counting direction can be controlled by `incrementBy` argument.\n   *\n   * @param {number} visualIndex The visual index from which the counting begins.\n   * @param {number} incrementBy If `-1` then counting is backwards or forward when `1`.\n   * @returns {number}\n   */\n  countNotHiddenRowIndexes(visualIndex, incrementBy) {\n    return this.countNotHiddenIndexes(visualIndex, incrementBy, this.hot.rowIndexMapper, this.countRenderableRows());\n  }\n\n  /**\n   * Returns number of not hidden column indexes counting from the passed starting index.\n   * The counting direction can be controlled by `incrementBy` argument.\n   *\n   * @param {number} visualIndex The visual index from which the counting begins.\n   * @param {number} incrementBy If `-1` then counting is backwards or forward when `1`.\n   * @returns {number}\n   */\n  countNotHiddenColumnIndexes(visualIndex, incrementBy) {\n    return this.countNotHiddenIndexes(visualIndex, incrementBy, this.hot.columnIndexMapper, this.countRenderableColumns());\n  }\n\n  /**\n   * Returns number of not hidden indexes counting from the passed starting index.\n   * The counting direction can be controlled by `incrementBy` argument.\n   *\n   * @param {number} visualIndex The visual index from which the counting begins.\n   * @param {number} incrementBy If `-1` then counting is backwards or forward when `1`.\n   * @param {IndexMapper} indexMapper The IndexMapper instance for specific axis.\n   * @param {number} renderableIndexesCount Total count of renderable indexes for specific axis.\n   * @returns {number}\n   */\n  countNotHiddenIndexes(visualIndex, incrementBy, indexMapper, renderableIndexesCount) {\n    if (isNaN(visualIndex) || visualIndex < 0) {\n      return 0;\n    }\n    const firstVisibleIndex = indexMapper.getNearestNotHiddenIndex(visualIndex, incrementBy);\n    const renderableIndex = indexMapper.getRenderableFromVisualIndex(firstVisibleIndex);\n    if (!Number.isInteger(renderableIndex)) {\n      return 0;\n    }\n    let notHiddenIndexes = 0;\n    if (incrementBy < 0) {\n      // Zero-based numbering for renderable indexes corresponds to a number of not hidden indexes.\n      notHiddenIndexes = renderableIndex + 1;\n    } else if (incrementBy > 0) {\n      notHiddenIndexes = renderableIndexesCount - renderableIndex;\n    }\n    return notHiddenIndexes;\n  }\n\n  /**\n   * The function returns the number of not hidden column indexes that fit between the first and\n   * last fixed column in the left (or right in RTL mode) overlay.\n   *\n   * @returns {number}\n   */\n  countNotHiddenFixedColumnsStart() {\n    const countCols = this.hot.countCols();\n    const visualFixedColumnsStart = Math.min(parseInt(this.settings.fixedColumnsStart, 10), countCols) - 1;\n    return this.countNotHiddenColumnIndexes(visualFixedColumnsStart, -1);\n  }\n\n  /**\n   * The function returns the number of not hidden row indexes that fit between the first and\n   * last fixed row in the top overlay.\n   *\n   * @returns {number}\n   */\n  countNotHiddenFixedRowsTop() {\n    const countRows = this.hot.countRows();\n    const visualFixedRowsTop = Math.min(parseInt(this.settings.fixedRowsTop, 10), countRows) - 1;\n    return this.countNotHiddenRowIndexes(visualFixedRowsTop, -1);\n  }\n\n  /**\n   * The function returns the number of not hidden row indexes that fit between the first and\n   * last fixed row in the bottom overlay.\n   *\n   * @returns {number}\n   */\n  countNotHiddenFixedRowsBottom() {\n    const countRows = this.hot.countRows();\n    const visualFixedRowsBottom = Math.max(countRows - parseInt(this.settings.fixedRowsBottom, 10), 0);\n    return this.countNotHiddenRowIndexes(visualFixedRowsBottom, 1);\n  }\n\n  /**\n   * The function returns the number of renderable column indexes within the passed range of the visual indexes.\n   *\n   * @param {number} columnStart The column visual start index.\n   * @param {number} columnEnd The column visual end index.\n   * @returns {number}\n   */\n  countRenderableColumnsInRange(columnStart, columnEnd) {\n    let count = 0;\n    for (let column = columnStart; column <= columnEnd; column++) {\n      if (this.hot.columnIndexMapper.getRenderableFromVisualIndex(column) !== null) {\n        count += 1;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * The function returns the number of renderable row indexes within the passed range of the visual indexes.\n   *\n   * @param {number} rowStart The row visual start index.\n   * @param {number} rowEnd The row visual end index.\n   * @returns {number}\n   */\n  countRenderableRowsInRange(rowStart, rowEnd) {\n    let count = 0;\n    for (let row = rowStart; row <= rowEnd; row++) {\n      if (this.hot.rowIndexMapper.getRenderableFromVisualIndex(row) !== null) {\n        count += 1;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Checks if at least one cell than belongs to the main table is not covered by the top, left or\n   * bottom overlay.\n   *\n   * @returns {boolean}\n   */\n  isMainTableNotFullyCoveredByOverlays() {\n    const fixedAllRows = this.countNotHiddenFixedRowsTop() + this.countNotHiddenFixedRowsBottom();\n    const fixedAllColumns = this.countNotHiddenFixedColumnsStart();\n    return this.hot.countRenderedRows() > fixedAllRows && this.hot.countRenderedCols() > fixedAllColumns;\n  }\n\n  /**\n   * Defines default configuration and initializes WalkOnTable instance.\n   *\n   * @private\n   */\n  initializeWalkontable() {\n    const walkontableConfig = {\n      ariaTags: this.settings.ariaTags,\n      rtlMode: this.hot.isRtl(),\n      externalRowCalculator: this.hot.getPlugin('autoRowSize') && this.hot.getPlugin('autoRowSize').isEnabled(),\n      table: _classPrivateFieldGet(this, _table),\n      isDataViewInstance: () => isRootInstance(this.hot),\n      preventOverflow: () => this.settings.preventOverflow,\n      preventWheel: () => this.settings.preventWheel,\n      stretchH: () => this.settings.stretchH,\n      data: (renderableRow, renderableColumn) => {\n        return this.hot.getDataAtCell(...this.translateFromRenderableToVisualIndex(renderableRow, renderableColumn));\n      },\n      totalRows: () => this.countRenderableRows(),\n      totalColumns: () => this.countRenderableColumns(),\n      // Number of renderable columns for the left overlay.\n      fixedColumnsStart: () => this.countNotHiddenFixedColumnsStart(),\n      // Number of renderable rows for the top overlay.\n      fixedRowsTop: () => this.countNotHiddenFixedRowsTop(),\n      // Number of renderable rows for the bottom overlay.\n      fixedRowsBottom: () => this.countNotHiddenFixedRowsBottom(),\n      // Enable the inline start overlay when conditions are met.\n      shouldRenderInlineStartOverlay: () => {\n        return this.settings.fixedColumnsStart > 0 || walkontableConfig.rowHeaders().length > 0;\n      },\n      // Enable the top overlay when conditions are met.\n      shouldRenderTopOverlay: () => {\n        return this.settings.fixedRowsTop > 0 || walkontableConfig.columnHeaders().length > 0;\n      },\n      // Enable the bottom overlay when conditions are met.\n      shouldRenderBottomOverlay: () => {\n        return this.settings.fixedRowsBottom > 0;\n      },\n      minSpareRows: () => this.settings.minSpareRows,\n      renderAllRows: this.settings.renderAllRows,\n      rowHeaders: () => {\n        const headerRenderers = [];\n        if (this.hot.hasRowHeaders()) {\n          headerRenderers.push((renderableRowIndex, TH) => {\n            // TODO: Some helper may be needed.\n            // We perform translation for row indexes (without row headers).\n            const visualRowIndex = renderableRowIndex >= 0 ? this.hot.rowIndexMapper.getVisualFromRenderableIndex(renderableRowIndex) : renderableRowIndex;\n            this.appendRowHeader(visualRowIndex, TH);\n          });\n        }\n        this.hot.runHooks('afterGetRowHeaderRenderers', headerRenderers);\n        _classPrivateFieldSet(this, _rowHeadersCount, headerRenderers.length);\n        if (this.hot.getSettings().ariaTags) {\n          // Update the aria-colcount attribute.\n          // Only needs to be done once after initialization/data update.\n          if (_classPrivateMethodGet(this, _getAriaColcount, _getAriaColcount2).call(this) === this.hot.countCols()) {\n            _classPrivateMethodGet(this, _updateAriaColcount, _updateAriaColcount2).call(this, _classPrivateFieldGet(this, _rowHeadersCount));\n          }\n        }\n        return headerRenderers;\n      },\n      columnHeaders: () => {\n        const headerRenderers = [];\n        if (this.hot.hasColHeaders()) {\n          headerRenderers.push((renderedColumnIndex, TH) => {\n            // TODO: Some helper may be needed.\n            // We perform translation for columns indexes (without column headers).\n            const visualColumnsIndex = renderedColumnIndex >= 0 ? this.hot.columnIndexMapper.getVisualFromRenderableIndex(renderedColumnIndex) : renderedColumnIndex;\n            this.appendColHeader(visualColumnsIndex, TH);\n          });\n        }\n        this.hot.runHooks('afterGetColumnHeaderRenderers', headerRenderers);\n        _classPrivateFieldSet(this, _columnHeadersCount, headerRenderers.length);\n        return headerRenderers;\n      },\n      columnWidth: renderedColumnIndex => {\n        const visualIndex = this.hot.columnIndexMapper.getVisualFromRenderableIndex(renderedColumnIndex);\n\n        // It's not a bug that we can't find visual index for some handled by method indexes. The function is called also\n        // for indexes that are not displayed (indexes that are beyond the grid's boundaries), i.e. when `fixedColumnsStart` > `startCols` (wrong config?) or\n        // scrolling and dataset is empty (scroll should handle that?).\n        return this.hot.getColWidth(visualIndex === null ? renderedColumnIndex : visualIndex);\n      },\n      rowHeight: renderedRowIndex => {\n        const visualIndex = this.hot.rowIndexMapper.getVisualFromRenderableIndex(renderedRowIndex);\n        return this.hot.getRowHeight(visualIndex === null ? renderedRowIndex : visualIndex);\n      },\n      cellRenderer: (renderedRowIndex, renderedColumnIndex, TD) => {\n        const [visualRowIndex, visualColumnIndex] = this.translateFromRenderableToVisualIndex(renderedRowIndex, renderedColumnIndex);\n\n        // Coords may be modified. For example, by the `MergeCells` plugin. It should affect cell value and cell meta.\n        const modifiedCellCoords = this.hot.runHooks('modifyGetCellCoords', visualRowIndex, visualColumnIndex);\n        let visualRowToCheck = visualRowIndex;\n        let visualColumnToCheck = visualColumnIndex;\n        if (Array.isArray(modifiedCellCoords)) {\n          [visualRowToCheck, visualColumnToCheck] = modifiedCellCoords;\n        }\n        const cellProperties = this.hot.getCellMeta(visualRowToCheck, visualColumnToCheck);\n        const prop = this.hot.colToProp(visualColumnToCheck);\n        let value = this.hot.getDataAtRowProp(visualRowToCheck, prop);\n        if (this.hot.hasHook('beforeValueRender')) {\n          value = this.hot.runHooks('beforeValueRender', value, cellProperties);\n        }\n        this.hot.runHooks('beforeRenderer', TD, visualRowIndex, visualColumnIndex, prop, value, cellProperties);\n        this.hot.getCellRenderer(cellProperties)(this.hot, TD, visualRowIndex, visualColumnIndex, prop, value, cellProperties);\n        this.hot.runHooks('afterRenderer', TD, visualRowIndex, visualColumnIndex, prop, value, cellProperties);\n      },\n      selections: this.hot.selection.highlight,\n      hideBorderOnMouseDownOver: () => this.settings.fragmentSelection,\n      onWindowResize: () => {\n        if (this.hot && !this.hot.isDestroyed) {\n          this.hot.refreshDimensions();\n        }\n      },\n      onContainerElementResize: () => {\n        if (this.hot && !this.hot.isDestroyed && isVisible(this.hot.rootElement)) {\n          this.hot.refreshDimensions();\n        }\n      },\n      onCellMouseDown: (event, coords, TD, wt) => {\n        const visualCoords = this.translateFromRenderableToVisualCoords(coords);\n        const controller = {\n          row: false,\n          column: false,\n          cell: false\n        };\n        this.hot.listen();\n        this.activeWt = wt;\n        _classPrivateFieldSet(this, _mouseDown, true);\n        this.hot.runHooks('beforeOnCellMouseDown', event, visualCoords, TD, controller);\n        if (isImmediatePropagationStopped(event)) {\n          return;\n        }\n        handleMouseEvent(event, {\n          coords: visualCoords,\n          selection: this.hot.selection,\n          controller,\n          cellCoordsFactory: (row, column) => this.hot._createCellCoords(row, column)\n        });\n        this.hot.runHooks('afterOnCellMouseDown', event, visualCoords, TD);\n        this.activeWt = this._wt;\n      },\n      onCellContextMenu: (event, coords, TD, wt) => {\n        const visualCoords = this.translateFromRenderableToVisualCoords(coords);\n        this.activeWt = wt;\n        _classPrivateFieldSet(this, _mouseDown, false);\n        if (this.hot.selection.isInProgress()) {\n          this.hot.selection.finish();\n        }\n        this.hot.runHooks('beforeOnCellContextMenu', event, visualCoords, TD);\n        if (isImmediatePropagationStopped(event)) {\n          return;\n        }\n        this.hot.runHooks('afterOnCellContextMenu', event, visualCoords, TD);\n        this.activeWt = this._wt;\n      },\n      onCellMouseOut: (event, coords, TD, wt) => {\n        const visualCoords = this.translateFromRenderableToVisualCoords(coords);\n        this.activeWt = wt;\n        this.hot.runHooks('beforeOnCellMouseOut', event, visualCoords, TD);\n        if (isImmediatePropagationStopped(event)) {\n          return;\n        }\n        this.hot.runHooks('afterOnCellMouseOut', event, visualCoords, TD);\n        this.activeWt = this._wt;\n      },\n      onCellMouseOver: (event, coords, TD, wt) => {\n        const visualCoords = this.translateFromRenderableToVisualCoords(coords);\n        const controller = {\n          row: false,\n          column: false,\n          cell: false\n        };\n        this.activeWt = wt;\n        this.hot.runHooks('beforeOnCellMouseOver', event, visualCoords, TD, controller);\n        if (isImmediatePropagationStopped(event)) {\n          return;\n        }\n        if (_classPrivateFieldGet(this, _mouseDown)) {\n          handleMouseEvent(event, {\n            coords: visualCoords,\n            selection: this.hot.selection,\n            controller,\n            cellCoordsFactory: (row, column) => this.hot._createCellCoords(row, column)\n          });\n        }\n        this.hot.runHooks('afterOnCellMouseOver', event, visualCoords, TD);\n        this.activeWt = this._wt;\n      },\n      onCellMouseUp: (event, coords, TD, wt) => {\n        const visualCoords = this.translateFromRenderableToVisualCoords(coords);\n        this.activeWt = wt;\n        this.hot.runHooks('beforeOnCellMouseUp', event, visualCoords, TD);\n\n        // TODO: The second condition check is a workaround. Callback corresponding the method `updateSettings`\n        // disable plugin and enable it again. Disabling plugin closes the menu. Thus, calling the\n        // `updateSettings` in a body of any callback executed right after some context-menu action\n        // breaks the table (#7231).\n        if (isImmediatePropagationStopped(event) || this.hot.isDestroyed) {\n          return;\n        }\n        this.hot.runHooks('afterOnCellMouseUp', event, visualCoords, TD);\n        this.activeWt = this._wt;\n      },\n      onCellCornerMouseDown: event => {\n        event.preventDefault();\n        this.hot.runHooks('afterOnCellCornerMouseDown', event);\n      },\n      onCellCornerDblClick: event => {\n        event.preventDefault();\n        this.hot.runHooks('afterOnCellCornerDblClick', event);\n      },\n      beforeDraw: (force, skipRender) => this.beforeRender(force, skipRender),\n      onDraw: force => this.afterRender(force),\n      onBeforeViewportScrollVertically: renderableRow => {\n        const rowMapper = this.hot.rowIndexMapper;\n        const areColumnHeadersSelected = renderableRow < 0;\n        let visualRow = renderableRow;\n        if (!areColumnHeadersSelected) {\n          visualRow = rowMapper.getVisualFromRenderableIndex(renderableRow);\n\n          // for an empty data return index as is\n          if (visualRow === null) {\n            return renderableRow;\n          }\n        }\n        visualRow = this.hot.runHooks('beforeViewportScrollVertically', visualRow);\n        this.hot.runHooks('beforeViewportScroll');\n        if (!areColumnHeadersSelected) {\n          return rowMapper.getRenderableFromVisualIndex(visualRow);\n        }\n        return visualRow;\n      },\n      onBeforeViewportScrollHorizontally: renderableColumn => {\n        const columnMapper = this.hot.columnIndexMapper;\n        const areRowHeadersSelected = renderableColumn < 0;\n        let visualColumn = renderableColumn;\n        if (!areRowHeadersSelected) {\n          visualColumn = columnMapper.getVisualFromRenderableIndex(renderableColumn);\n\n          // for an empty data return index as is\n          if (visualColumn === null) {\n            return renderableColumn;\n          }\n        }\n        visualColumn = this.hot.runHooks('beforeViewportScrollHorizontally', visualColumn);\n        this.hot.runHooks('beforeViewportScroll');\n        if (!areRowHeadersSelected) {\n          return columnMapper.getRenderableFromVisualIndex(visualColumn);\n        }\n        return visualColumn;\n      },\n      onScrollVertically: () => {\n        this.hot.runHooks('afterScrollVertically');\n        this.hot.runHooks('afterScroll');\n      },\n      onScrollHorizontally: () => {\n        this.hot.runHooks('afterScrollHorizontally');\n        this.hot.runHooks('afterScroll');\n      },\n      onBeforeRemoveCellClassNames: () => this.hot.runHooks('beforeRemoveCellClassNames'),\n      onBeforeHighlightingRowHeader: (renderableRow, headerLevel, highlightMeta) => {\n        const rowMapper = this.hot.rowIndexMapper;\n        const areColumnHeadersSelected = renderableRow < 0;\n        let visualRow = renderableRow;\n        if (!areColumnHeadersSelected) {\n          visualRow = rowMapper.getVisualFromRenderableIndex(renderableRow);\n        }\n        const newVisualRow = this.hot.runHooks('beforeHighlightingRowHeader', visualRow, headerLevel, highlightMeta);\n        if (!areColumnHeadersSelected) {\n          return rowMapper.getRenderableFromVisualIndex(rowMapper.getNearestNotHiddenIndex(newVisualRow, 1));\n        }\n        return newVisualRow;\n      },\n      onBeforeHighlightingColumnHeader: (renderableColumn, headerLevel, highlightMeta) => {\n        const columnMapper = this.hot.columnIndexMapper;\n        const areRowHeadersSelected = renderableColumn < 0;\n        let visualColumn = renderableColumn;\n        if (!areRowHeadersSelected) {\n          visualColumn = columnMapper.getVisualFromRenderableIndex(renderableColumn);\n        }\n        const newVisualColumn = this.hot.runHooks('beforeHighlightingColumnHeader', visualColumn, headerLevel, highlightMeta);\n        if (!areRowHeadersSelected) {\n          return columnMapper.getRenderableFromVisualIndex(columnMapper.getNearestNotHiddenIndex(newVisualColumn, 1));\n        }\n        return newVisualColumn;\n      },\n      onAfterDrawSelection: (currentRow, currentColumn, layerLevel) => {\n        let cornersOfSelection;\n        const [visualRowIndex, visualColumnIndex] = this.translateFromRenderableToVisualIndex(currentRow, currentColumn);\n        const selectedRange = this.hot.selection.getSelectedRange();\n        const selectionRangeSize = selectedRange.size();\n        if (selectionRangeSize > 0) {\n          const selectionForLayer = selectedRange.peekByIndex(layerLevel !== null && layerLevel !== void 0 ? layerLevel : 0);\n          cornersOfSelection = [selectionForLayer.from.row, selectionForLayer.from.col, selectionForLayer.to.row, selectionForLayer.to.col];\n        }\n        return this.hot.runHooks('afterDrawSelection', visualRowIndex, visualColumnIndex, cornersOfSelection, layerLevel);\n      },\n      onBeforeDrawBorders: (corners, borderClassName) => {\n        const [startRenderableRow, startRenderableColumn, endRenderableRow, endRenderableColumn] = corners;\n        const visualCorners = [this.hot.rowIndexMapper.getVisualFromRenderableIndex(startRenderableRow), this.hot.columnIndexMapper.getVisualFromRenderableIndex(startRenderableColumn), this.hot.rowIndexMapper.getVisualFromRenderableIndex(endRenderableRow), this.hot.columnIndexMapper.getVisualFromRenderableIndex(endRenderableColumn)];\n        return this.hot.runHooks('beforeDrawBorders', visualCorners, borderClassName);\n      },\n      onBeforeTouchScroll: () => this.hot.runHooks('beforeTouchScroll'),\n      onAfterMomentumScroll: () => this.hot.runHooks('afterMomentumScroll'),\n      onBeforeStretchingColumnWidth: (stretchedWidth, renderedColumnIndex) => {\n        const visualColumnIndex = this.hot.columnIndexMapper.getVisualFromRenderableIndex(renderedColumnIndex);\n        return this.hot.runHooks('beforeStretchingColumnWidth', stretchedWidth, visualColumnIndex);\n      },\n      onModifyRowHeaderWidth: rowHeaderWidth => this.hot.runHooks('modifyRowHeaderWidth', rowHeaderWidth),\n      onModifyGetCellCoords: (renderableRowIndex, renderableColumnIndex, topmost) => {\n        const rowMapper = this.hot.rowIndexMapper;\n        const columnMapper = this.hot.columnIndexMapper;\n\n        // Callback handle also headers. We shouldn't translate them.\n        const visualColumnIndex = renderableColumnIndex >= 0 ? columnMapper.getVisualFromRenderableIndex(renderableColumnIndex) : renderableColumnIndex;\n        const visualRowIndex = renderableRowIndex >= 0 ? rowMapper.getVisualFromRenderableIndex(renderableRowIndex) : renderableRowIndex;\n        const visualIndexes = this.hot.runHooks('modifyGetCellCoords', visualRowIndex, visualColumnIndex, topmost);\n        if (Array.isArray(visualIndexes)) {\n          const [visualRowFrom, visualColumnFrom, visualRowTo, visualColumnTo] = visualIndexes;\n\n          // Result of the hook is handled by the Walkontable (renderable indexes).\n          return [visualRowFrom >= 0 ? rowMapper.getRenderableFromVisualIndex(rowMapper.getNearestNotHiddenIndex(visualRowFrom, 1)) : visualRowFrom, visualColumnFrom >= 0 ? columnMapper.getRenderableFromVisualIndex(columnMapper.getNearestNotHiddenIndex(visualColumnFrom, 1)) : visualColumnFrom, visualRowTo >= 0 ? rowMapper.getRenderableFromVisualIndex(rowMapper.getNearestNotHiddenIndex(visualRowTo, -1)) : visualRowTo, visualColumnTo >= 0 ? columnMapper.getRenderableFromVisualIndex(columnMapper.getNearestNotHiddenIndex(visualColumnTo, -1)) : visualColumnTo];\n        }\n      },\n      viewportRowCalculatorOverride: calc => {\n        let viewportOffset = this.settings.viewportRowRenderingOffset;\n        if (viewportOffset === 'auto' && this.settings.fixedRowsTop) {\n          viewportOffset = 10;\n        }\n        if (viewportOffset > 0 || viewportOffset === 'auto') {\n          const renderableRows = this.countRenderableRows();\n          const firstRenderedRow = calc.startRow;\n          const lastRenderedRow = calc.endRow;\n          if (typeof viewportOffset === 'number') {\n            calc.startRow = Math.max(firstRenderedRow - viewportOffset, 0);\n            calc.endRow = Math.min(lastRenderedRow + viewportOffset, renderableRows - 1);\n          } else if (viewportOffset === 'auto') {\n            const offset = Math.ceil(lastRenderedRow / renderableRows * 12);\n            calc.startRow = Math.max(firstRenderedRow - offset, 0);\n            calc.endRow = Math.min(lastRenderedRow + offset, renderableRows - 1);\n          }\n        }\n        this.hot.runHooks('afterViewportRowCalculatorOverride', calc);\n      },\n      viewportColumnCalculatorOverride: calc => {\n        let viewportOffset = this.settings.viewportColumnRenderingOffset;\n        if (viewportOffset === 'auto' && this.settings.fixedColumnsStart) {\n          viewportOffset = 10;\n        }\n        if (viewportOffset > 0 || viewportOffset === 'auto') {\n          const renderableColumns = this.countRenderableColumns();\n          const firstRenderedColumn = calc.startColumn;\n          const lastRenderedColumn = calc.endColumn;\n          if (typeof viewportOffset === 'number') {\n            calc.startColumn = Math.max(firstRenderedColumn - viewportOffset, 0);\n            calc.endColumn = Math.min(lastRenderedColumn + viewportOffset, renderableColumns - 1);\n          }\n          if (viewportOffset === 'auto') {\n            const offset = Math.ceil(lastRenderedColumn / renderableColumns * 6);\n            calc.startColumn = Math.max(firstRenderedColumn - offset, 0);\n            calc.endColumn = Math.min(lastRenderedColumn + offset, renderableColumns - 1);\n          }\n        }\n        this.hot.runHooks('afterViewportColumnCalculatorOverride', calc);\n      },\n      rowHeaderWidth: () => this.settings.rowHeaderWidth,\n      columnHeaderHeight: () => {\n        const columnHeaderHeight = this.hot.runHooks('modifyColumnHeaderHeight');\n        return this.settings.columnHeaderHeight || columnHeaderHeight;\n      }\n    };\n    this.hot.runHooks('beforeInitWalkontable', walkontableConfig);\n    this._wt = new Walkontable(walkontableConfig);\n    this.activeWt = this._wt;\n    const spreader = this._wt.wtTable.spreader;\n    // We have to cache width and height after Walkontable initialization.\n    const {\n      width,\n      height\n    } = this.hot.rootElement.getBoundingClientRect();\n    this.setLastSize(width, height);\n    this.eventManager.addEventListener(spreader, 'mousedown', event => {\n      // right mouse button exactly on spreader means right click on the right hand side of vertical scrollbar\n      if (event.target === spreader && event.which === 3) {\n        event.stopPropagation();\n      }\n    });\n    this.eventManager.addEventListener(spreader, 'contextmenu', event => {\n      // right mouse button exactly on spreader means right click on the right hand side of vertical scrollbar\n      if (event.target === spreader && event.which === 3) {\n        event.stopPropagation();\n      }\n    });\n    this.eventManager.addEventListener(this.hot.rootDocument.documentElement, 'click', () => {\n      if (this.settings.observeDOMVisibility) {\n        if (this._wt.drawInterrupted) {\n          this.hot.forceFullRender = true;\n          this.render();\n        }\n      }\n    });\n  }\n\n  /**\n   * Checks if it's possible to create text selection in element.\n   *\n   * @private\n   * @param {HTMLElement} el The element to check.\n   * @returns {boolean}\n   */\n  isTextSelectionAllowed(el) {\n    if (isInput(el)) {\n      return true;\n    }\n    const isChildOfTableBody = isChildOf(el, this.hot.view._wt.wtTable.spreader);\n    if (this.settings.fragmentSelection === true && isChildOfTableBody) {\n      return true;\n    }\n    if (this.settings.fragmentSelection === 'cell' && this.isSelectedOnlyCell() && isChildOfTableBody) {\n      return true;\n    }\n    if (!this.settings.fragmentSelection && this.isCellEdited() && this.isSelectedOnlyCell()) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Checks if user's been called mousedown.\n   *\n   * @private\n   * @returns {boolean}\n   */\n  isMouseDown() {\n    return _classPrivateFieldGet(this, _mouseDown);\n  }\n\n  /**\n   * Check if selected only one cell.\n   *\n   * @private\n   * @returns {boolean}\n   */\n  isSelectedOnlyCell() {\n    var _this$hot$getSelected, _this$hot$getSelected2;\n    return (_this$hot$getSelected = (_this$hot$getSelected2 = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected2 === void 0 ? void 0 : _this$hot$getSelected2.isSingleCell()) !== null && _this$hot$getSelected !== void 0 ? _this$hot$getSelected : false;\n  }\n\n  /**\n   * Checks if active cell is editing.\n   *\n   * @private\n   * @returns {boolean}\n   */\n  isCellEdited() {\n    const activeEditor = this.hot.getActiveEditor();\n    return activeEditor && activeEditor.isOpened();\n  }\n\n  /**\n   * `beforeDraw` callback.\n   *\n   * @private\n   * @param {boolean} force If `true` rendering was triggered by a change of settings or data or `false` if\n   *                        rendering was triggered by scrolling or moving selection.\n   * @param {object} skipRender Object with `skipRender` property, if it is set to `true ` the next rendering\n   *                            cycle will be skipped.\n   */\n  beforeRender(force, skipRender) {\n    if (force) {\n      // this.hot.forceFullRender = did Handsontable request full render?\n      this.hot.runHooks('beforeViewRender', this.hot.forceFullRender, skipRender);\n    }\n  }\n\n  /**\n   * `afterRender` callback.\n   *\n   * @private\n   * @param {boolean} force If `true` rendering was triggered by a change of settings or data or `false` if\n   *                        rendering was triggered by scrolling or moving selection.\n   */\n  afterRender(force) {\n    if (force) {\n      // this.hot.forceFullRender = did Handsontable request full render?\n      this.hot.runHooks('afterViewRender', this.hot.forceFullRender);\n    }\n  }\n\n  /**\n   * Append row header to a TH element.\n   *\n   * @private\n   * @param {number} visualRowIndex The visual row index.\n   * @param {HTMLTableHeaderCellElement} TH The table header element.\n   */\n  appendRowHeader(visualRowIndex, TH) {\n    if (TH.firstChild) {\n      const container = TH.firstChild;\n      if (!hasClass(container, 'relative')) {\n        empty(TH);\n        this.appendRowHeader(visualRowIndex, TH);\n        return;\n      }\n      this.updateCellHeader(container.querySelector('.rowHeader'), visualRowIndex, this.hot.getRowHeader);\n    } else {\n      const {\n        rootDocument,\n        getRowHeader\n      } = this.hot;\n      const div = rootDocument.createElement('div');\n      const span = rootDocument.createElement('span');\n      div.className = 'relative';\n      span.className = 'rowHeader';\n      this.updateCellHeader(span, visualRowIndex, getRowHeader);\n      div.appendChild(span);\n      TH.appendChild(div);\n    }\n    this.hot.runHooks('afterGetRowHeader', visualRowIndex, TH);\n  }\n\n  /**\n   * Append column header to a TH element.\n   *\n   * @private\n   * @param {number} visualColumnIndex Visual column index.\n   * @param {HTMLTableCellElement} TH The table header element.\n   * @param {Function} [label] The function that returns the header label.\n   * @param {number} [headerLevel=0] The index of header level counting from the top (positive\n   *                                 values counting from 0 to N).\n   */\n  appendColHeader(visualColumnIndex, TH) {\n    let label = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.hot.getColHeader;\n    let headerLevel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    if (TH.firstChild) {\n      const container = TH.firstChild;\n      if (hasClass(container, 'relative')) {\n        this.updateCellHeader(container.querySelector('.colHeader'), visualColumnIndex, label, headerLevel);\n      } else {\n        empty(TH);\n        this.appendColHeader(visualColumnIndex, TH, label, headerLevel);\n      }\n    } else {\n      const {\n        rootDocument\n      } = this.hot;\n      const div = rootDocument.createElement('div');\n      const span = rootDocument.createElement('span');\n      div.className = 'relative';\n      span.className = 'colHeader';\n      if (this.settings.ariaTags) {\n        setAttribute(div, ...A11Y_PRESENTATION());\n        setAttribute(span, ...A11Y_PRESENTATION());\n      }\n      this.updateCellHeader(span, visualColumnIndex, label, headerLevel);\n      div.appendChild(span);\n      TH.appendChild(div);\n    }\n    this.hot.runHooks('afterGetColHeader', visualColumnIndex, TH, headerLevel);\n  }\n\n  /**\n   * Updates header cell content.\n   *\n   * @private\n   * @param {HTMLElement} element Element to update.\n   * @param {number} index Row index or column index.\n   * @param {Function} content Function which should be returns content for this cell.\n   * @param {number} [headerLevel=0] The index of header level counting from the top (positive\n   *                                 values counting from 0 to N).\n   */\n  updateCellHeader(element, index, content) {\n    let headerLevel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    let renderedIndex = index;\n    const parentOverlay = this._wt.wtOverlays.getParentOverlay(element) || this._wt;\n\n    // prevent wrong calculations from SampleGenerator\n    if (element.parentNode) {\n      if (hasClass(element, 'colHeader')) {\n        renderedIndex = parentOverlay.wtTable.columnFilter.sourceToRendered(index);\n      } else if (hasClass(element, 'rowHeader')) {\n        renderedIndex = parentOverlay.wtTable.rowFilter.sourceToRendered(index);\n      }\n    }\n    if (renderedIndex > -1) {\n      fastInnerHTML(element, content(index, headerLevel));\n    } else {\n      // workaround for https://github.com/handsontable/handsontable/issues/1946\n      fastInnerText(element, String.fromCharCode(160));\n      addClass(element, 'cornerHeader');\n    }\n  }\n\n  /**\n   * Given a element's left (or right in RTL mode) position relative to the viewport, returns maximum\n   * element width until the right (or left) edge of the viewport (before scrollbar).\n   *\n   * @private\n   * @param {number} inlineOffset The left (or right in RTL mode) offset.\n   * @returns {number}\n   */\n  maximumVisibleElementWidth(inlineOffset) {\n    const workspaceWidth = this._wt.wtViewport.getWorkspaceWidth();\n    const maxWidth = workspaceWidth - inlineOffset;\n    return maxWidth > 0 ? maxWidth : 0;\n  }\n\n  /**\n   * Given a element's top position relative to the viewport, returns maximum element height until the bottom\n   * edge of the viewport (before scrollbar).\n   *\n   * @private\n   * @param {number} topOffset The top offset.\n   * @returns {number}\n   */\n  maximumVisibleElementHeight(topOffset) {\n    const workspaceHeight = this._wt.wtViewport.getWorkspaceHeight();\n    const maxHeight = workspaceHeight - topOffset;\n    return maxHeight > 0 ? maxHeight : 0;\n  }\n\n  /**\n   * Sets new dimensions of the container.\n   *\n   * @param {number} width The table width.\n   * @param {number} height The table height.\n   */\n  setLastSize(width, height) {\n    _classPrivateFieldSet(this, _lastWidth, width);\n    _classPrivateFieldSet(this, _lastHeight, height);\n  }\n\n  /**\n   * Returns cached dimensions.\n   *\n   * @returns {object}\n   */\n  getLastSize() {\n    return {\n      width: _classPrivateFieldGet(this, _lastWidth),\n      height: _classPrivateFieldGet(this, _lastHeight)\n    };\n  }\n\n  /**\n   * Returns the first fully visible row in the table viewport.\n   *\n   * @returns {number}\n   */\n  getFirstFullyVisibleRow() {\n    return this.hot.rowIndexMapper.getVisualFromRenderableIndex(this.hot.view._wt.wtScroll.getFirstVisibleRow());\n  }\n\n  /**\n   * Returns the last fully visible row in the table viewport.\n   *\n   * @returns {number}\n   */\n  getLastFullyVisibleRow() {\n    return this.hot.rowIndexMapper.getVisualFromRenderableIndex(this.hot.view._wt.wtScroll.getLastVisibleRow());\n  }\n\n  /**\n   * Returns the first fully visible column in the table viewport.\n   *\n   * @returns {number}\n   */\n  getFirstFullyVisibleColumn() {\n    return this.hot.columnIndexMapper.getVisualFromRenderableIndex(this.hot.view._wt.wtScroll.getFirstVisibleColumn());\n  }\n\n  /**\n   * Returns the last fully visible column in the table viewport.\n   *\n   * @returns {number}\n   */\n  getLastFullyVisibleColumn() {\n    return this.hot.columnIndexMapper.getVisualFromRenderableIndex(this.hot.view._wt.wtScroll.getLastVisibleColumn());\n  }\n\n  /**\n   * Returns the total count of the rendered column headers.\n   *\n   * @returns {number}\n   */\n  getColumnHeadersCount() {\n    return _classPrivateFieldGet(this, _columnHeadersCount);\n  }\n\n  /**\n   * Returns the total count of the rendered row headers.\n   *\n   * @returns {number}\n   */\n  getRowHeadersCount() {\n    return _classPrivateFieldGet(this, _rowHeadersCount);\n  }\n  /**\n   * Destroys internal WalkOnTable's instance. Detaches all of the bonded listeners.\n   *\n   * @private\n   */\n  destroy() {\n    this._wt.destroy();\n    this.eventManager.destroy();\n  }\n}\nfunction _getAriaColcount2() {\n  return parseInt(this.hot.rootElement.getAttribute(A11Y_COLCOUNT()[0]), 10);\n}\nfunction _updateAriaColcount2(delta) {\n  const colCount = _classPrivateMethodGet(this, _getAriaColcount, _getAriaColcount2).call(this) + delta;\n  setAttribute(this.hot.rootElement, ...A11Y_COLCOUNT(colCount));\n}\nexport default TableView;", "import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { createObjectPropListener, getProperty, isObject, objectEach, setProperty } from \"../helpers/object.mjs\";\nimport { countFirstRowKeys } from \"../helpers/data.mjs\";\nimport { arrayEach } from \"../helpers/array.mjs\";\nimport { rangeEach } from \"../helpers/number.mjs\";\nimport { isFunction } from \"../helpers/function.mjs\";\n/**\n * @class DataSource\n * @private\n */\nclass DataSource {\n  constructor(hotInstance) {\n    let dataSource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    /**\n     * Instance of Handsontable.\n     *\n     * @type {Handsontable}\n     */\n    _defineProperty(this, \"hot\", void 0);\n    /**\n     * Data source.\n     *\n     * @type {Array}\n     */\n    _defineProperty(this, \"data\", void 0);\n    /**\n     * Type of data source.\n     *\n     * @type {string}\n     * @default 'array'\n     */\n    _defineProperty(this, \"dataType\", 'array');\n    _defineProperty(this, \"colToProp\", () => {});\n    _defineProperty(this, \"propToCol\", () => {});\n    this.hot = hotInstance;\n    this.data = dataSource;\n  }\n\n  /**\n   * Run the `modifyRowData` hook and return either the modified or the source data for the provided row.\n   *\n   * @private\n   * @param {number} rowIndex Row index.\n   * @returns {Array|object} Source or modified row of data.\n   */\n  modifyRowData(rowIndex) {\n    let modifyRowData;\n    if (this.hot.hasHook('modifyRowData')) {\n      modifyRowData = this.hot.runHooks('modifyRowData', rowIndex);\n    }\n    return modifyRowData !== undefined && !Number.isInteger(modifyRowData) ? modifyRowData : this.data[rowIndex];\n  }\n\n  /**\n   * Get all data.\n   *\n   * @param {boolean} [toArray=false] If `true` return source data as an array of arrays even when source data was provided\n   *                                  in another format.\n   * @returns {Array}\n   */\n  getData() {\n    let toArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (!this.data || this.data.length === 0) {\n      return this.data;\n    }\n    return this.getByRange(null, null, toArray);\n  }\n\n  /**\n   * Set new data source.\n   *\n   * @param {Array} data The new data.\n   */\n  setData(data) {\n    this.data = data;\n  }\n\n  /**\n   * Returns array of column values from the data source. `column` is the index of the row in the data source.\n   *\n   * @param {number} column Visual column index.\n   * @returns {Array}\n   */\n  getAtColumn(column) {\n    const result = [];\n    arrayEach(this.data, (row, rowIndex) => {\n      const value = this.getAtCell(rowIndex, column);\n      result.push(value);\n    });\n    return result;\n  }\n\n  /**\n   * Returns a single row of the data or a subset of its columns. If a column range or `toArray` arguments are provided, it\n   * operates only on the columns declared by the `columns` setting or the data schema.\n   *\n   * @param {number} row Physical row index.\n   * @param {number} [startColumn] Starting index for the column range (optional).\n   * @param {number} [endColumn] Ending index for the column range (optional).\n   * @param {boolean} [toArray=false] `true` if the returned value should be forced to be presented as an array.\n   * @returns {Array|object}\n   */\n  getAtRow(row, startColumn, endColumn) {\n    let toArray = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const getAllProps = startColumn === undefined && endColumn === undefined;\n    let dataRow = null;\n    let newDataRow = null;\n    dataRow = this.modifyRowData(row);\n    if (Array.isArray(dataRow)) {\n      newDataRow = [];\n      if (getAllProps) {\n        dataRow.forEach((cell, column) => {\n          newDataRow[column] = this.getAtPhysicalCell(row, column, dataRow);\n        });\n      } else {\n        // Only the columns from the provided range\n        rangeEach(startColumn, endColumn, column => {\n          newDataRow[column - startColumn] = this.getAtPhysicalCell(row, column, dataRow);\n        });\n      }\n    } else if (isObject(dataRow) || isFunction(dataRow)) {\n      if (toArray) {\n        newDataRow = [];\n      } else {\n        newDataRow = {};\n      }\n      if (!getAllProps || toArray) {\n        const rangeStart = 0;\n        const rangeEnd = this.countFirstRowKeys() - 1;\n        rangeEach(rangeStart, rangeEnd, column => {\n          const prop = this.colToProp(column);\n          if (column >= (startColumn || rangeStart) && column <= (endColumn || rangeEnd) && !Number.isInteger(prop)) {\n            const cellValue = this.getAtPhysicalCell(row, prop, dataRow);\n            if (toArray) {\n              newDataRow.push(cellValue);\n            } else {\n              setProperty(newDataRow, prop, cellValue);\n            }\n          }\n        });\n      } else {\n        objectEach(dataRow, (value, prop) => {\n          setProperty(newDataRow, prop, this.getAtPhysicalCell(row, prop, dataRow));\n        });\n      }\n    }\n    return newDataRow;\n  }\n\n  /**\n   * Set the provided value in the source data set at the provided coordinates.\n   *\n   * @param {number} row Physical row index.\n   * @param {number|string} column Property name / physical column index.\n   * @param {*} value The value to be set at the provided coordinates.\n   */\n  setAtCell(row, column, value) {\n    if (row >= this.countRows() || column >= this.countFirstRowKeys()) {\n      // Not enough rows and/or columns.\n      return;\n    }\n    if (this.hot.hasHook('modifySourceData')) {\n      const valueHolder = createObjectPropListener(value);\n      this.hot.runHooks('modifySourceData', row, column, valueHolder, 'set');\n      if (valueHolder.isTouched()) {\n        value = valueHolder.value;\n      }\n    }\n    if (!Number.isInteger(column)) {\n      // column argument is the prop name\n      setProperty(this.data[row], column, value);\n    } else {\n      this.data[row][column] = value;\n    }\n  }\n\n  /**\n   * Get data from the source data set using the physical indexes.\n   *\n   * @private\n   * @param {number} row Physical row index.\n   * @param {string|number|Function} column Physical column index / property / function.\n   * @param {Array|object} dataRow A representation of a data row.\n   * @returns {*} Value at the provided coordinates.\n   */\n  getAtPhysicalCell(row, column, dataRow) {\n    let result = null;\n    if (dataRow) {\n      if (typeof column === 'string') {\n        result = getProperty(dataRow, column);\n      } else if (typeof column === 'function') {\n        result = column(dataRow);\n      } else {\n        result = dataRow[column];\n      }\n    }\n    if (this.hot.hasHook('modifySourceData')) {\n      const valueHolder = createObjectPropListener(result);\n      this.hot.runHooks('modifySourceData', row, column, valueHolder, 'get');\n      if (valueHolder.isTouched()) {\n        result = valueHolder.value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Returns a single value from the data.\n   *\n   * @param {number} row Physical row index.\n   * @param {number} columnOrProp Visual column index or property.\n   * @returns {*}\n   */\n  getAtCell(row, columnOrProp) {\n    const dataRow = this.modifyRowData(row);\n    return this.getAtPhysicalCell(row, this.colToProp(columnOrProp), dataRow);\n  }\n\n  /**\n   * Returns source data by passed range.\n   *\n   * @param {object} [start] Object with physical `row` and `col` keys (or visual column index, if data type is an array of objects).\n   * @param {object} [end] Object with physical `row` and `col` keys (or visual column index, if data type is an array of objects).\n   * @param {boolean} [toArray=false] If `true` return source data as an array of arrays even when source data was provided\n   *                                  in another format.\n   * @returns {Array}\n   */\n  getByRange() {\n    let start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let toArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let getAllProps = false;\n    let startRow = null;\n    let startCol = null;\n    let endRow = null;\n    let endCol = null;\n    if (start === null || end === null) {\n      getAllProps = true;\n      startRow = 0;\n      endRow = this.countRows() - 1;\n    } else {\n      startRow = Math.min(start.row, end.row);\n      startCol = Math.min(start.col, end.col);\n      endRow = Math.max(start.row, end.row);\n      endCol = Math.max(start.col, end.col);\n    }\n    const result = [];\n    rangeEach(startRow, endRow, currentRow => {\n      result.push(getAllProps ? this.getAtRow(currentRow, undefined, undefined, toArray) : this.getAtRow(currentRow, startCol, endCol, toArray));\n    });\n    return result;\n  }\n\n  /**\n   * Count number of rows.\n   *\n   * @returns {number}\n   */\n  countRows() {\n    if (this.hot.hasHook('modifySourceLength')) {\n      const modifiedSourceLength = this.hot.runHooks('modifySourceLength');\n      if (Number.isInteger(modifiedSourceLength)) {\n        return modifiedSourceLength;\n      }\n    }\n    return this.data.length;\n  }\n\n  /**\n   * Count number of columns.\n   *\n   * @returns {number}\n   */\n  countFirstRowKeys() {\n    return countFirstRowKeys(this.data);\n  }\n\n  /**\n   * Destroy instance.\n   */\n  destroy() {\n    this.data = null;\n    this.hot = null;\n  }\n}\nexport default DataSource;", "import { isUndefined, isDefined } from \"./../helpers/mixed.mjs\";\nimport { objectEach } from \"./../helpers/object.mjs\";\nimport { error } from \"./../helpers/console.mjs\";\nimport { toSingleLine } from \"./../helpers/templateLiteralTag.mjs\";\n/**\n * Perform shallow extend of a target object with only this extension's properties which doesn't exist in the target.\n *\n * TODO: Maybe it should be moved to global helpers? It's changed `extend` function.\n *\n * @param {object} target An object that will receive the new properties.\n * @param {object} extension An object containing additional properties to merge into the target.\n * @returns {object}\n */\nexport function extendNotExistingKeys(target, extension) {\n  objectEach(extension, (value, key) => {\n    if (isUndefined(target[key])) {\n      target[key] = value;\n    }\n  });\n  return target;\n}\n\n/**\n * Create range of values basing on cell indexes. For example, it will create below ranges for specified function arguments:\n *\n * createCellHeadersRange(2, 7) => `2-7`\n * createCellHeadersRange(7, 2) => `2-7`\n * createCellHeadersRange(0, 4, 'A', 'D') => `A-D`\n * createCellHeadersRange(4, 0, 'D', 'A') => `A-D`.\n *\n * @param {number} firstRowIndex Index of \"first\" cell.\n * @param {number} nextRowIndex Index of \"next\" cell.\n * @param {*} fromValue Value which will represent \"first\" cell.\n * @param {*} toValue Value which will represent \"next\" cell.\n * @returns {string} Value representing range i.e. A-Z, 11-15.\n */\nexport function createCellHeadersRange(firstRowIndex, nextRowIndex) {\n  let fromValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : firstRowIndex;\n  let toValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : nextRowIndex;\n  // Will swap `fromValue` with `toValue` if it's necessary.\n  let [from, to] = [fromValue, toValue];\n  if (firstRowIndex > nextRowIndex) {\n    [from, to] = [to, from];\n  }\n  return `${from}-${to}`;\n}\n\n/**\n * Normalize language code. It takes handled languageCode proposition and change it to proper languageCode.\n * For example, when it takes `eN-us` as parameter it return `en-US`.\n *\n * @param {string} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @returns {string}\n */\nexport function normalizeLanguageCode(languageCode) {\n  const languageCodePattern = /^([a-zA-Z]{2})-([a-zA-Z]{2})$/;\n  const partsOfLanguageCode = languageCodePattern.exec(languageCode);\n  if (partsOfLanguageCode) {\n    return `${partsOfLanguageCode[1].toLowerCase()}-${partsOfLanguageCode[2].toUpperCase()}`;\n  }\n  return languageCode;\n}\n\n/**\n *\n * Warn user if there is no registered language.\n *\n * @param {string} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n */\nexport function warnUserAboutLanguageRegistration(languageCode) {\n  if (isDefined(languageCode)) {\n    error(toSingleLine`Language with code \"${languageCode}\" was not found. You should register particular language\\x20\n    before using it. Read more about this issue at: https://docs.handsontable.com/i18n/missing-language-code.`);\n  }\n}", "/**\n * Try to choose plural form from available phrase propositions.\n *\n * @param {Array} phrasePropositions List of phrases propositions.\n * @param {number} pluralForm Number determining which phrase form should be used.\n *\n * @returns {string|Array} One particular phrase if it's possible, list of unchanged phrase propositions otherwise.\n */\nexport default function pluralize(phrasePropositions, pluralForm) {\n  const isPluralizable = Array.isArray(phrasePropositions) && Number.isInteger(pluralForm);\n  if (isPluralizable) {\n    return phrasePropositions[pluralForm];\n  }\n  return phrasePropositions;\n}", "import staticRegister from \"./../../utils/staticRegister.mjs\";\nimport pluralizeFn from \"./pluralize.mjs\";\nconst {\n  register: registerGloballyPhraseFormatter,\n  getValues: getGlobalPhraseFormatters\n} = staticRegister('phraseFormatters');\n\n/**\n * Register phrase formatter.\n *\n * @param {string} name Name of formatter.\n * @param {Function} formatterFn Function which will be applied on phrase propositions. It will transform them if it's possible.\n */\nexport function register(name, formatterFn) {\n  registerGloballyPhraseFormatter(name, formatterFn);\n}\n\n/**\n * Get all registered previously formatters.\n *\n * @returns {Array}\n */\nexport function getAll() {\n  return getGlobalPhraseFormatters();\n}\nexport { register as registerPhraseFormatter, getAll as getPhraseFormatters };\nregister('pluralize', pluralizeFn);", "/**\n * @preserve\n * Authors: Handsoncode\n * Last updated: Nov 15, 2017\n *\n * Description: Definition file for English - United States language-country.\n */\nimport * as C from \"../constants.mjs\";\nconst dictionary = {\n  languageCode: 'en-US',\n  [C.CONTEXTMENU_ITEMS_NO_ITEMS]: 'No available options',\n  [C.CONTEXTMENU_ITEMS_ROW_ABOVE]: 'Insert row above',\n  [C.CONTEXTMENU_ITEMS_ROW_BELOW]: 'Insert row below',\n  [C.CONTEXTMENU_ITEMS_INSERT_LEFT]: 'Insert column left',\n  [C.CONTEXTMENU_ITEMS_INSERT_RIGHT]: 'Insert column right',\n  [C.CONTEXTMENU_ITEMS_REMOVE_ROW]: ['Remove row', 'Remove rows'],\n  [C.CONTEXTMENU_ITEMS_REMOVE_COLUMN]: ['Remove column', 'Remove columns'],\n  [C.CONTEXTMENU_ITEMS_UNDO]: 'Undo',\n  [C.CONTEXTMENU_ITEMS_REDO]: 'Redo',\n  [C.CONTEXTMENU_ITEMS_READ_ONLY]: 'Read only',\n  [C.CONTEXTMENU_ITEMS_CLEAR_COLUMN]: 'Clear column',\n  [C.CONTEXTMENU_ITEMS_ALIGNMENT]: 'Alignment',\n  [C.CONTEXTMENU_ITEMS_ALIGNMENT_LEFT]: 'Left',\n  [C.CONTEXTMENU_ITEMS_ALIGNMENT_CENTER]: 'Center',\n  [C.CONTEXTMENU_ITEMS_ALIGNMENT_RIGHT]: 'Right',\n  [C.CONTEXTMENU_ITEMS_ALIGNMENT_JUSTIFY]: 'Justify',\n  [C.CONTEXTMENU_ITEMS_ALIGNMENT_TOP]: 'Top',\n  [C.CONTEXTMENU_ITEMS_ALIGNMENT_MIDDLE]: 'Middle',\n  [C.CONTEXTMENU_ITEMS_ALIGNMENT_BOTTOM]: 'Bottom',\n  [C.CONTEXTMENU_ITEMS_FREEZE_COLUMN]: 'Freeze column',\n  [C.CONTEXTMENU_ITEMS_UNFREEZE_COLUMN]: 'Unfreeze column',\n  [C.CONTEXTMENU_ITEMS_BORDERS]: 'Borders',\n  [C.CONTEXTMENU_ITEMS_BORDERS_TOP]: 'Top',\n  [C.CONTEXTMENU_ITEMS_BORDERS_RIGHT]: 'Right',\n  [C.CONTEXTMENU_ITEMS_BORDERS_BOTTOM]: 'Bottom',\n  [C.CONTEXTMENU_ITEMS_BORDERS_LEFT]: 'Left',\n  [C.CONTEXTMENU_ITEMS_REMOVE_BORDERS]: 'Remove border(s)',\n  [C.CONTEXTMENU_ITEMS_ADD_COMMENT]: 'Add comment',\n  [C.CONTEXTMENU_ITEMS_EDIT_COMMENT]: 'Edit comment',\n  [C.CONTEXTMENU_ITEMS_REMOVE_COMMENT]: 'Delete comment',\n  [C.CONTEXTMENU_ITEMS_READ_ONLY_COMMENT]: 'Read-only comment',\n  [C.CONTEXTMENU_ITEMS_MERGE_CELLS]: 'Merge cells',\n  [C.CONTEXTMENU_ITEMS_UNMERGE_CELLS]: 'Unmerge cells',\n  [C.CONTEXTMENU_ITEMS_COPY]: 'Copy',\n  [C.CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_HEADERS]: ['Copy with header', 'Copy with headers'],\n  [C.CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_GROUP_HEADERS]: ['Copy with group header', 'Copy with group headers'],\n  [C.CONTEXTMENU_ITEMS_COPY_COLUMN_HEADERS_ONLY]: ['Copy header only', 'Copy headers only'],\n  [C.CONTEXTMENU_ITEMS_CUT]: 'Cut',\n  [C.CONTEXTMENU_ITEMS_NESTED_ROWS_INSERT_CHILD]: 'Insert child row',\n  [C.CONTEXTMENU_ITEMS_NESTED_ROWS_DETACH_CHILD]: 'Detach from parent',\n  [C.CONTEXTMENU_ITEMS_HIDE_COLUMN]: ['Hide column', 'Hide columns'],\n  [C.CONTEXTMENU_ITEMS_SHOW_COLUMN]: ['Show column', 'Show columns'],\n  [C.CONTEXTMENU_ITEMS_HIDE_ROW]: ['Hide row', 'Hide rows'],\n  [C.CONTEXTMENU_ITEMS_SHOW_ROW]: ['Show row', 'Show rows'],\n  [C.FILTERS_CONDITIONS_NONE]: 'None',\n  [C.FILTERS_CONDITIONS_EMPTY]: 'Is empty',\n  [C.FILTERS_CONDITIONS_NOT_EMPTY]: 'Is not empty',\n  [C.FILTERS_CONDITIONS_EQUAL]: 'Is equal to',\n  [C.FILTERS_CONDITIONS_NOT_EQUAL]: 'Is not equal to',\n  [C.FILTERS_CONDITIONS_BEGINS_WITH]: 'Begins with',\n  [C.FILTERS_CONDITIONS_ENDS_WITH]: 'Ends with',\n  [C.FILTERS_CONDITIONS_CONTAINS]: 'Contains',\n  [C.FILTERS_CONDITIONS_NOT_CONTAIN]: 'Does not contain',\n  [C.FILTERS_CONDITIONS_GREATER_THAN]: 'Greater than',\n  [C.FILTERS_CONDITIONS_GREATER_THAN_OR_EQUAL]: 'Greater than or equal to',\n  [C.FILTERS_CONDITIONS_LESS_THAN]: 'Less than',\n  [C.FILTERS_CONDITIONS_LESS_THAN_OR_EQUAL]: 'Less than or equal to',\n  [C.FILTERS_CONDITIONS_BETWEEN]: 'Is between',\n  [C.FILTERS_CONDITIONS_NOT_BETWEEN]: 'Is not between',\n  [C.FILTERS_CONDITIONS_AFTER]: 'After',\n  [C.FILTERS_CONDITIONS_BEFORE]: 'Before',\n  [C.FILTERS_CONDITIONS_TODAY]: 'Today',\n  [C.FILTERS_CONDITIONS_TOMORROW]: 'Tomorrow',\n  [C.FILTERS_CONDITIONS_YESTERDAY]: 'Yesterday',\n  [C.FILTERS_VALUES_BLANK_CELLS]: 'Blank cells',\n  [C.FILTERS_DIVS_FILTER_BY_CONDITION]: 'Filter by condition',\n  [C.FILTERS_DIVS_FILTER_BY_VALUE]: 'Filter by value',\n  [C.FILTERS_LABELS_CONJUNCTION]: 'And',\n  [C.FILTERS_LABELS_DISJUNCTION]: 'Or',\n  [C.FILTERS_BUTTONS_SELECT_ALL]: 'Select all',\n  [C.FILTERS_BUTTONS_CLEAR]: 'Clear',\n  [C.FILTERS_BUTTONS_OK]: 'OK',\n  [C.FILTERS_BUTTONS_CANCEL]: 'Cancel',\n  [C.FILTERS_BUTTONS_PLACEHOLDER_SEARCH]: 'Search',\n  [C.FILTERS_BUTTONS_PLACEHOLDER_VALUE]: 'Value',\n  [C.FILTERS_BUTTONS_PLACEHOLDER_SECOND_VALUE]: 'Second value',\n  [C.CHECKBOX_CHECKED]: 'Checked',\n  [C.CHECKBOX_UNCHECKED]: 'Unchecked'\n};\nexport default dictionary;", "import { isObject, deepClone } from \"../helpers/object.mjs\";\nimport { arrayEach } from \"./../helpers/array.mjs\";\nimport { isUndefined } from \"../helpers/mixed.mjs\";\nimport { extendNotExistingKeys, normalizeLanguageCode, warnUserAboutLanguageRegistration } from \"./utils.mjs\";\nimport staticRegister from \"../utils/staticRegister.mjs\";\nimport { getPhraseFormatters } from \"./phraseFormatters/index.mjs\";\nimport DEFAULT_DICTIONARY from \"./languages/en-US.mjs\";\nimport * as _dictionaryKeys from \"./constants.mjs\";\nexport const dictionaryKeys = _dictionaryKeys;\nexport const DEFAULT_LANGUAGE_CODE = DEFAULT_DICTIONARY.languageCode;\nconst {\n  register: registerGloballyLanguageDictionary,\n  getItem: getGlobalLanguageDictionary,\n  hasItem: hasGlobalLanguageDictionary,\n  getValues: getGlobalLanguagesDictionaries\n} = staticRegister('languagesDictionaries');\n\n/**\n * Register automatically the default language dictionary.\n */\nregisterLanguageDictionary(DEFAULT_DICTIONARY);\n\n/**\n * Register language dictionary for specific language code.\n *\n * @param {string|object} languageCodeOrDictionary Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE' or object representing dictionary.\n * @param {object} dictionary Dictionary for specific language (optional if first parameter has already dictionary).\n * @returns {object}\n */\nexport function registerLanguageDictionary(languageCodeOrDictionary, dictionary) {\n  let languageCode = languageCodeOrDictionary;\n  let dictionaryObject = dictionary;\n\n  // Dictionary passed as first argument.\n  if (isObject(languageCodeOrDictionary)) {\n    dictionaryObject = languageCodeOrDictionary;\n    languageCode = dictionaryObject.languageCode;\n  }\n  extendLanguageDictionary(languageCode, dictionaryObject);\n  registerGloballyLanguageDictionary(languageCode, deepClone(dictionaryObject));\n\n  // We do not allow user to work with dictionary by reference, it can cause lot of bugs.\n  return deepClone(dictionaryObject);\n}\n\n/**\n * Extend handled dictionary by default language dictionary. As result, if any dictionary key isn't defined for specific language, it will be filled with default language value (\"dictionary gaps\" are supplemented).\n *\n * @private\n * @param {string} languageCode Language code.\n * @param {object} dictionary Dictionary which is extended.\n */\nfunction extendLanguageDictionary(languageCode, dictionary) {\n  if (languageCode !== DEFAULT_LANGUAGE_CODE) {\n    extendNotExistingKeys(dictionary, getGlobalLanguageDictionary(DEFAULT_LANGUAGE_CODE));\n  }\n}\n\n/**\n * Get language dictionary for specific language code.\n *\n * @param {string} languageCode Language code.\n * @returns {object} Object with constants representing identifiers for translation (as keys) and corresponding translation phrases (as values).\n */\nexport function getLanguageDictionary(languageCode) {\n  if (!hasLanguageDictionary(languageCode)) {\n    return null;\n  }\n  return deepClone(getGlobalLanguageDictionary(languageCode));\n}\n\n/**\n *\n * Get if language with specified language code was registered.\n *\n * @param {string} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @returns {boolean}\n */\nexport function hasLanguageDictionary(languageCode) {\n  return hasGlobalLanguageDictionary(languageCode);\n}\n\n/**\n * Get default language dictionary.\n *\n * @returns {object} Object with constants representing identifiers for translation (as keys) and corresponding translation phrases (as values).\n */\nexport function getDefaultLanguageDictionary() {\n  return DEFAULT_DICTIONARY;\n}\n\n/**\n * Get registered language dictionaries.\n *\n * @returns {Array}\n */\nexport function getLanguagesDictionaries() {\n  return getGlobalLanguagesDictionaries();\n}\n\n/**\n * Get phrase for specified dictionary key.\n *\n * @param {string} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @param {string} dictionaryKey Constant which is dictionary key.\n * @param {*} argumentsForFormatters Arguments which will be handled by formatters.\n *\n * @returns {string}\n */\nexport function getTranslatedPhrase(languageCode, dictionaryKey, argumentsForFormatters) {\n  const languageDictionary = getLanguageDictionary(languageCode);\n  if (languageDictionary === null) {\n    return null;\n  }\n  const phrasePropositions = languageDictionary[dictionaryKey];\n  if (isUndefined(phrasePropositions)) {\n    return null;\n  }\n  const formattedPhrase = getFormattedPhrase(phrasePropositions, argumentsForFormatters);\n  if (Array.isArray(formattedPhrase)) {\n    return formattedPhrase[0];\n  }\n  return formattedPhrase;\n}\n\n/**\n * Get formatted phrase from phrases propositions for specified dictionary key.\n *\n * @private\n * @param {Array|string} phrasePropositions List of phrase propositions.\n * @param {*} argumentsForFormatters Arguments which will be handled by formatters.\n *\n * @returns {Array|string}\n */\nfunction getFormattedPhrase(phrasePropositions, argumentsForFormatters) {\n  let formattedPhrasePropositions = phrasePropositions;\n  arrayEach(getPhraseFormatters(), formatter => {\n    formattedPhrasePropositions = formatter(phrasePropositions, argumentsForFormatters);\n  });\n  return formattedPhrasePropositions;\n}\n\n/**\n * Returns valid language code. If the passed language code doesn't exist default one will be used.\n *\n * @param {string} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @returns {string}\n */\nexport function getValidLanguageCode(languageCode) {\n  let normalizedLanguageCode = normalizeLanguageCode(languageCode);\n  if (!hasLanguageDictionary(normalizedLanguageCode)) {\n    normalizedLanguageCode = DEFAULT_LANGUAGE_CODE;\n    warnUserAboutLanguageRegistration(languageCode);\n  }\n  return normalizedLanguageCode;\n}", "import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { stringify } from \"../3rdparty/SheetClip/index.mjs\";\nimport { countFirstRowKeys } from \"../helpers/data.mjs\";\nimport { createObjectPropListener, deepClone, deepExtend, deepObjectSize, duckSchema, hasOwnProperty, isObject, objectEach } from \"../helpers/object.mjs\";\nimport { extendArray, to2dArray } from \"../helpers/array.mjs\";\nimport { rangeEach } from \"../helpers/number.mjs\";\nimport { isDefined } from \"../helpers/mixed.mjs\";\n/*\nThis class contains open-source contributions covered by the MIT license.\n\n1) In the `createRow` method: Row creation using functional `dataSchema` value\n2) In the `set` method: Data setting using functional `prop` value\n3) in the `get` method: Data getting using functional `prop` value\n\nThe remaining part of this code comment contains the full license text of these contributions.\n\n======\n\nThe MIT License\n\nCopyright 2013 Nicholas Bollweg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n/**\n * Utility class that gets and saves data from/to the data source using mapping of columns numbers to object property names.\n *\n * @todo Refactor arguments of methods getRange, getText to be numbers (not objects).\n * @todo Remove priv, GridSettings from object constructor.\n *\n * @class DataMap\n * @private\n */\nclass DataMap {\n  /**\n   * @type {number}\n   */\n  static get DESTINATION_RENDERER() {\n    return 1;\n  }\n\n  /**\n   * @type {number}\n   */\n  static get DESTINATION_CLIPBOARD_GENERATOR() {\n    return 2;\n  }\n\n  /**\n   * Instance of {@link Handsontable}.\n   *\n   * @private\n   * @type {Handsontable}\n   */\n\n  /**\n   * @param {object} hotInstance Instance of Handsontable.\n   * @param {Array} data Array of arrays or array of objects containing data.\n   * @param {MetaManager} metaManager The meta manager instance.\n   */\n  constructor(hotInstance, data, metaManager) {\n    _defineProperty(this, \"hot\", void 0);\n    /**\n     * Instance of {@link MetaManager}.\n     *\n     * @private\n     * @type {MetaManager}\n     */\n    _defineProperty(this, \"metaManager\", void 0);\n    /**\n     * Instance of {@link TableMeta}.\n     *\n     * @private\n     * @type {TableMeta}\n     */\n    _defineProperty(this, \"tableMeta\", void 0);\n    /**\n     * Reference to the original dataset.\n     *\n     * @type {*}\n     */\n    _defineProperty(this, \"dataSource\", void 0);\n    /**\n     * Generated schema based on the first row from the source data.\n     *\n     * @type {object}\n     */\n    _defineProperty(this, \"duckSchema\", void 0);\n    /**\n     * Cached array of properties to columns.\n     *\n     * @type {Array}\n     */\n    _defineProperty(this, \"colToPropCache\", void 0);\n    /**\n     * Cached map of properties to columns.\n     *\n     * @type {Map}\n     */\n    _defineProperty(this, \"propToColCache\", void 0);\n    this.hot = hotInstance;\n    this.metaManager = metaManager;\n    this.tableMeta = metaManager.getTableMeta();\n    this.dataSource = data;\n    this.duckSchema = this.createDuckSchema();\n    this.createMap();\n  }\n\n  /**\n   * Generates cache for property to and from column addressation.\n   */\n  createMap() {\n    const schema = this.getSchema();\n    if (typeof schema === 'undefined') {\n      throw new Error('trying to create `columns` definition but you didn\\'t provide `schema` nor `data`');\n    }\n    const columns = this.tableMeta.columns;\n    let i;\n    this.colToPropCache = [];\n    this.propToColCache = new Map();\n    if (columns) {\n      let columnsLen = 0;\n      let filteredIndex = 0;\n      let columnsAsFunc = false;\n      if (typeof columns === 'function') {\n        const schemaLen = deepObjectSize(schema);\n        columnsLen = schemaLen > 0 ? schemaLen : this.countFirstRowKeys();\n        columnsAsFunc = true;\n      } else {\n        const maxCols = this.tableMeta.maxCols;\n        columnsLen = Math.min(maxCols, columns.length);\n      }\n      for (i = 0; i < columnsLen; i++) {\n        const column = columnsAsFunc ? columns(i) : columns[i];\n        if (isObject(column)) {\n          if (typeof column.data !== 'undefined') {\n            const index = columnsAsFunc ? filteredIndex : i;\n            this.colToPropCache[index] = column.data;\n            this.propToColCache.set(column.data, index);\n          }\n          filteredIndex += 1;\n        }\n      }\n    } else {\n      this.recursiveDuckColumns(schema);\n    }\n  }\n\n  /**\n   * Get the amount of physical columns in the first data row.\n   *\n   * @returns {number} Amount of physical columns in the first data row.\n   */\n  countFirstRowKeys() {\n    return countFirstRowKeys(this.dataSource);\n  }\n\n  /**\n   * Generates columns' translation cache.\n   *\n   * @param {object} schema An object to generate schema from.\n   * @param {number} lastCol The column index.\n   * @param {number} parent The property cache for recursive calls.\n   * @returns {number}\n   */\n  recursiveDuckColumns(schema, lastCol, parent) {\n    let lastColumn = lastCol;\n    let propertyParent = parent;\n    let prop;\n    if (typeof lastColumn === 'undefined') {\n      lastColumn = 0;\n      propertyParent = '';\n    }\n    if (typeof schema === 'object' && !Array.isArray(schema)) {\n      objectEach(schema, (value, key) => {\n        if (value === null) {\n          prop = propertyParent + key;\n          this.colToPropCache.push(prop);\n          this.propToColCache.set(prop, lastColumn);\n          lastColumn += 1;\n        } else {\n          lastColumn = this.recursiveDuckColumns(value, lastColumn, `${key}.`);\n        }\n      });\n    }\n    return lastColumn;\n  }\n\n  /**\n   * Returns property name that corresponds with the given column index.\n   *\n   * @param {string|number} column Visual column index or another passed argument.\n   * @returns {string|number} Column property, physical column index or passed argument.\n   */\n  colToProp(column) {\n    // TODO: Should it work? Please, look at the test:\n    // \"it should return the provided property name, when the user passes a property name as a column number\".\n    if (Number.isInteger(column) === false) {\n      return column;\n    }\n    const physicalColumn = this.hot.toPhysicalColumn(column);\n\n    // Out of range, not visible column index.\n    if (physicalColumn === null) {\n      return column;\n    }\n\n    // Cached property.\n    if (this.colToPropCache && isDefined(this.colToPropCache[physicalColumn])) {\n      return this.colToPropCache[physicalColumn];\n    }\n    return physicalColumn;\n  }\n\n  /**\n   * Translates property into visual column index.\n   *\n   * @param {string|number} prop Column property which may be also a physical column index.\n   * @returns {string|number} Visual column index or passed argument.\n   */\n  propToCol(prop) {\n    const cachedPhysicalIndex = this.propToColCache.get(prop);\n    if (isDefined(cachedPhysicalIndex)) {\n      return this.hot.toVisualColumn(cachedPhysicalIndex);\n    }\n\n    // Property may be a physical column index.\n    const visualColumn = this.hot.toVisualColumn(prop);\n    if (visualColumn === null) {\n      return prop;\n    }\n    return visualColumn;\n  }\n\n  /**\n   * Returns data's schema.\n   *\n   * @returns {object}\n   */\n  getSchema() {\n    const schema = this.tableMeta.dataSchema;\n    if (schema) {\n      if (typeof schema === 'function') {\n        return schema();\n      }\n      return schema;\n    }\n    return this.duckSchema;\n  }\n\n  /**\n   * Creates the duck schema based on the current dataset.\n   *\n   * @returns {Array|object}\n   */\n  createDuckSchema() {\n    return this.dataSource && this.dataSource[0] ? duckSchema(this.dataSource[0]) : {};\n  }\n\n  /**\n   * Refresh the data schema.\n   */\n  refreshDuckSchema() {\n    this.duckSchema = this.createDuckSchema();\n  }\n\n  /**\n   * Creates row at the bottom of the data array.\n   *\n   * @param {number} [index] Physical index of the row before which the new row will be inserted.\n   * @param {number} [amount=1] An amount of rows to add.\n   * @param {object} [options] Additional options for created rows.\n   * @param {string} [options.source] Source of method call.\n   * @param {'above'|'below'} [options.mode] Sets where the row is inserted: above or below the passed index.\n   * @fires Hooks#afterCreateRow\n   * @returns {number} Returns number of created rows.\n   */\n  createRow(index) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let {\n      source,\n      mode = 'above'\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const sourceRowsCount = this.hot.countSourceRows();\n    let physicalRowIndex = sourceRowsCount;\n    let numberOfCreatedRows = 0;\n    let rowIndex = index;\n    if (typeof rowIndex !== 'number' || rowIndex >= sourceRowsCount) {\n      rowIndex = sourceRowsCount;\n    }\n    if (rowIndex < this.hot.countRows()) {\n      physicalRowIndex = this.hot.toPhysicalRow(rowIndex);\n    }\n    const continueProcess = this.hot.runHooks('beforeCreateRow', rowIndex, amount, source);\n    if (continueProcess === false || physicalRowIndex === null) {\n      return {\n        delta: 0\n      };\n    }\n    const maxRows = this.tableMeta.maxRows;\n    const columnCount = this.getSchema().length;\n    const rowsToAdd = [];\n    while (numberOfCreatedRows < amount && sourceRowsCount + numberOfCreatedRows < maxRows) {\n      let row = null;\n      if (this.hot.dataType === 'array') {\n        if (this.tableMeta.dataSchema) {\n          // Clone template array\n          row = deepClone(this.getSchema());\n        } else {\n          row = [];\n          /* eslint-disable no-loop-func */\n          rangeEach(columnCount - 1, () => row.push(null));\n        }\n      } else if (this.hot.dataType === 'function') {\n        row = this.tableMeta.dataSchema(rowIndex + numberOfCreatedRows);\n      } else {\n        row = {};\n        deepExtend(row, this.getSchema());\n      }\n      rowsToAdd.push(row);\n      numberOfCreatedRows += 1;\n    }\n    this.hot.rowIndexMapper.insertIndexes(rowIndex, numberOfCreatedRows);\n    if (mode === 'below') {\n      physicalRowIndex = Math.min(physicalRowIndex + 1, sourceRowsCount);\n    }\n    this.spliceData(physicalRowIndex, 0, rowsToAdd);\n    const newVisualRowIndex = this.hot.toVisualRow(physicalRowIndex);\n\n    // In case the created rows are the only ones in the table, the column index mappers need to be rebuilt based on\n    // the number of columns created in the row or the schema.\n    if (this.hot.countSourceRows() === rowsToAdd.length) {\n      this.hot.columnIndexMapper.initToLength(this.hot.getInitialColumnCount());\n    }\n    if (numberOfCreatedRows > 0) {\n      if (index === undefined || index === null) {\n        // Creates the meta rows at the end of the rows collection without shifting the cells\n        // that were defined out of the range of the dataset.\n        this.metaManager.createRow(null, numberOfCreatedRows);\n      } else if (source !== 'auto') {\n        this.metaManager.createRow(physicalRowIndex, amount);\n      }\n    }\n    this.hot.runHooks('afterCreateRow', newVisualRowIndex, numberOfCreatedRows, source);\n    this.hot.forceFullRender = true; // used when data was changed\n\n    return {\n      delta: numberOfCreatedRows,\n      startPhysicalIndex: physicalRowIndex\n    };\n  }\n\n  /**\n   * Creates column at the right of the data array.\n   *\n   * @param {number} [index] Visual index of the column before which the new column will be inserted.\n   * @param {number} [amount=1] An amount of columns to add.\n   * @param {object} [options] Additional options for created columns.\n   * @param {string} [options.source] Source of method call.\n   * @param {'start'|'end'} [options.mode] Sets where the column is inserted: at the start (left in [LTR](@/api/options.md#layoutdirection), right in [RTL](@/api/options.md#layoutdirection)) or at the end (right in LTR, left in LTR)\n   * the passed index.\n   * @fires Hooks#afterCreateCol\n   * @returns {number} Returns number of created columns.\n   */\n  createCol(index) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let {\n      source,\n      mode = 'start'\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (!this.hot.isColumnModificationAllowed()) {\n      throw new Error('Cannot create new column. When data source in an object, ' + 'you can only have as much columns as defined in first data row, data schema or in the \\'columns\\' setting.' + 'If you want to be able to add new columns, you have to use array datasource.');\n    }\n    const dataSource = this.dataSource;\n    const maxCols = this.tableMeta.maxCols;\n    const countSourceCols = this.hot.countSourceCols();\n    let columnIndex = index;\n    if (typeof columnIndex !== 'number' || columnIndex >= countSourceCols) {\n      columnIndex = countSourceCols;\n    }\n    const continueProcess = this.hot.runHooks('beforeCreateCol', columnIndex, amount, source);\n    if (continueProcess === false) {\n      return {\n        delta: 0\n      };\n    }\n    let physicalColumnIndex = countSourceCols;\n    if (columnIndex < this.hot.countCols()) {\n      physicalColumnIndex = this.hot.toPhysicalColumn(columnIndex);\n    }\n    const numberOfSourceRows = this.hot.countSourceRows();\n    let nrOfColumns = this.hot.countCols();\n    let numberOfCreatedCols = 0;\n    let currentIndex = physicalColumnIndex;\n    if (mode === 'end') {\n      currentIndex = Math.min(currentIndex + 1, countSourceCols);\n    }\n    const startPhysicalIndex = currentIndex;\n    while (numberOfCreatedCols < amount && nrOfColumns < maxCols) {\n      if (typeof columnIndex !== 'number' || columnIndex >= nrOfColumns) {\n        if (numberOfSourceRows > 0) {\n          for (let row = 0; row < numberOfSourceRows; row += 1) {\n            if (typeof dataSource[row] === 'undefined') {\n              dataSource[row] = [];\n            }\n            dataSource[row].push(null);\n          }\n        } else {\n          dataSource.push([null]);\n        }\n      } else {\n        for (let row = 0; row < numberOfSourceRows; row++) {\n          dataSource[row].splice(currentIndex, 0, null);\n        }\n      }\n      numberOfCreatedCols += 1;\n      currentIndex += 1;\n      nrOfColumns += 1;\n    }\n    this.hot.columnIndexMapper.insertIndexes(columnIndex, numberOfCreatedCols);\n    if (numberOfCreatedCols > 0) {\n      if (index === undefined || index === null) {\n        // Creates the meta columns at the end of the columns collection without shifting the cells\n        // that were defined out of the range of the dataset.\n        this.metaManager.createColumn(null, numberOfCreatedCols);\n      } else if (source !== 'auto') {\n        this.metaManager.createColumn(startPhysicalIndex, amount);\n      }\n    }\n    const newVisualColumnIndex = this.hot.toVisualColumn(startPhysicalIndex);\n    this.hot.runHooks('afterCreateCol', newVisualColumnIndex, numberOfCreatedCols, source);\n    this.hot.forceFullRender = true; // used when data was changed\n\n    this.refreshDuckSchema();\n    return {\n      delta: numberOfCreatedCols,\n      startPhysicalIndex\n    };\n  }\n\n  /**\n   * Removes row from the data array.\n   *\n   * @fires Hooks#beforeRemoveRow\n   * @fires Hooks#afterRemoveRow\n   * @param {number} [index] Visual index of the row to be removed. If not provided, the last row will be removed.\n   * @param {number} [amount=1] Amount of the rows to be removed. If not provided, one row will be removed.\n   * @param {string} [source] Source of method call.\n   * @returns {boolean} Returns `false` when action was cancelled, otherwise `true`.\n   */\n  removeRow(index) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let source = arguments.length > 2 ? arguments[2] : undefined;\n    let rowIndex = Number.isInteger(index) ? index : -amount; // -amount = taking indexes from the end.\n    const removedPhysicalIndexes = this.visualRowsToPhysical(rowIndex, amount);\n    const sourceRowsLength = this.hot.countSourceRows();\n    rowIndex = (sourceRowsLength + rowIndex) % sourceRowsLength;\n\n    // It handle also callback from the `NestedRows` plugin. Removing parent node has effect in removing children nodes.\n    const actionWasNotCancelled = this.hot.runHooks('beforeRemoveRow', rowIndex, removedPhysicalIndexes.length, removedPhysicalIndexes, source);\n    if (actionWasNotCancelled === false) {\n      return false;\n    }\n\n    // List of removed indexes might be changed in the `beforeRemoveRow` hook. There may be new values.\n    const numberOfRemovedIndexes = removedPhysicalIndexes.length;\n    this.filterData(rowIndex, numberOfRemovedIndexes, removedPhysicalIndexes);\n\n    // TODO: Function `removeRow` should validate fully, probably above.\n    if (rowIndex < this.hot.countRows()) {\n      this.hot.rowIndexMapper.removeIndexes(removedPhysicalIndexes);\n      const customDefinedColumns = isDefined(this.tableMeta.columns) || isDefined(this.tableMeta.dataSchema);\n\n      // All rows have been removed. There shouldn't be any columns.\n      if (this.hot.rowIndexMapper.getNotTrimmedIndexesLength() === 0 && customDefinedColumns === false) {\n        this.hot.columnIndexMapper.setIndexesSequence([]);\n      }\n    }\n    const descendingPhysicalRows = removedPhysicalIndexes.slice(0).sort((a, b) => b - a);\n    descendingPhysicalRows.forEach(rowPhysicalIndex => {\n      this.metaManager.removeRow(rowPhysicalIndex, 1);\n    });\n    this.hot.runHooks('afterRemoveRow', rowIndex, numberOfRemovedIndexes, removedPhysicalIndexes, source);\n    this.hot.forceFullRender = true; // used when data was changed\n\n    return true;\n  }\n\n  /**\n   * Removes column from the data array.\n   *\n   * @fires Hooks#beforeRemoveCol\n   * @fires Hooks#afterRemoveCol\n   * @param {number} [index] Visual index of the column to be removed. If not provided, the last column will be removed.\n   * @param {number} [amount=1] Amount of the columns to be removed. If not provided, one column will be removed.\n   * @param {string} [source] Source of method call.\n   * @returns {boolean} Returns `false` when action was cancelled, otherwise `true`.\n   */\n  removeCol(index) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let source = arguments.length > 2 ? arguments[2] : undefined;\n    if (this.hot.dataType === 'object' || this.tableMeta.columns) {\n      throw new Error('cannot remove column with object data source or columns option specified');\n    }\n    let columnIndex = typeof index !== 'number' ? -amount : index;\n    columnIndex = (this.hot.countCols() + columnIndex) % this.hot.countCols();\n    const removedPhysicalIndexes = this.visualColumnsToPhysical(columnIndex, amount);\n    const descendingPhysicalColumns = removedPhysicalIndexes.slice(0).sort((a, b) => b - a);\n    const actionWasNotCancelled = this.hot.runHooks('beforeRemoveCol', columnIndex, amount, removedPhysicalIndexes, source);\n    if (actionWasNotCancelled === false) {\n      return false;\n    }\n    let isTableUniform = true;\n    const removedColumnsCount = descendingPhysicalColumns.length;\n    const data = this.dataSource;\n    for (let c = 0; c < removedColumnsCount; c++) {\n      if (isTableUniform && removedPhysicalIndexes[0] !== removedPhysicalIndexes[c] - c) {\n        isTableUniform = false;\n      }\n    }\n    if (isTableUniform) {\n      for (let r = 0, rlen = this.hot.countSourceRows(); r < rlen; r++) {\n        data[r].splice(removedPhysicalIndexes[0], amount);\n        if (r === 0) {\n          this.metaManager.removeColumn(removedPhysicalIndexes[0], amount);\n        }\n      }\n    } else {\n      for (let r = 0, rlen = this.hot.countSourceRows(); r < rlen; r++) {\n        for (let c = 0; c < removedColumnsCount; c++) {\n          data[r].splice(descendingPhysicalColumns[c], 1);\n          if (r === 0) {\n            this.metaManager.removeColumn(descendingPhysicalColumns[c], 1);\n          }\n        }\n      }\n    }\n\n    // TODO: Function `removeCol` should validate fully, probably above.\n    if (columnIndex < this.hot.countCols()) {\n      this.hot.columnIndexMapper.removeIndexes(removedPhysicalIndexes);\n\n      // All columns have been removed. There shouldn't be any rows.\n      if (this.hot.columnIndexMapper.getNotTrimmedIndexesLength() === 0) {\n        this.hot.rowIndexMapper.setIndexesSequence([]);\n      }\n    }\n    this.hot.runHooks('afterRemoveCol', columnIndex, amount, removedPhysicalIndexes, source);\n    this.hot.forceFullRender = true; // used when data was changed\n    this.refreshDuckSchema();\n    return true;\n  }\n\n  /**\n   * Add/Removes data from the column.\n   *\n   * @param {number} col Physical index of column in which do you want to do splice.\n   * @param {number} index Index at which to start changing the array. If negative, will begin that many elements from the end.\n   * @param {number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed.\n   * @param {Array} [elements] The new columns to add.\n   * @returns {Array} Returns removed portion of columns.\n   */\n  spliceCol(col, index, amount) {\n    const colData = this.hot.getDataAtCol(col);\n    const removed = colData.slice(index, index + amount);\n    const after = colData.slice(index + amount);\n    for (var _len = arguments.length, elements = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      elements[_key - 3] = arguments[_key];\n    }\n    extendArray(elements, after);\n    let i = 0;\n    while (i < amount) {\n      elements.push(null); // add null in place of removed elements\n      i += 1;\n    }\n    to2dArray(elements);\n    this.hot.populateFromArray(index, col, elements, null, null, 'spliceCol');\n    return removed;\n  }\n\n  /**\n   * Add/Removes data from the row.\n   *\n   * @param {number} row Physical index of row in which do you want to do splice.\n   * @param {number} index Index at which to start changing the array. If negative, will begin that many elements from the end.\n   * @param {number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed.\n   * @param {Array} [elements] The new rows to add.\n   * @returns {Array} Returns removed portion of rows.\n   */\n  spliceRow(row, index, amount) {\n    const rowData = this.hot.getSourceDataAtRow(row);\n    const removed = rowData.slice(index, index + amount);\n    const after = rowData.slice(index + amount);\n    for (var _len2 = arguments.length, elements = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n      elements[_key2 - 3] = arguments[_key2];\n    }\n    extendArray(elements, after);\n    let i = 0;\n    while (i < amount) {\n      elements.push(null); // add null in place of removed elements\n      i += 1;\n    }\n    this.hot.populateFromArray(row, index, [elements], null, null, 'spliceRow');\n    return removed;\n  }\n\n  /**\n   * Add/remove row(s) to/from the data source.\n   *\n   * @param {number} index Physical index of the element to add/remove.\n   * @param {number} deleteCount Number of rows to remove.\n   * @param {Array<object>} elements Row elements to be added.\n   */\n  spliceData(index, deleteCount, elements) {\n    const continueSplicing = this.hot.runHooks('beforeDataSplice', index, deleteCount, elements);\n    if (continueSplicing !== false) {\n      const newData = [...this.dataSource.slice(0, index), ...elements, ...this.dataSource.slice(index)];\n\n      // We try not to change the reference.\n      this.dataSource.length = 0;\n\n      // Pushing to array instead of using `splice`, because Babel changes the code to one that uses the `apply` method.\n      // The used method was cause of the problem described within #7840.\n      newData.forEach(row => this.dataSource.push(row));\n    }\n  }\n\n  /**\n   * Filter unwanted data elements from the data source.\n   *\n   * @param {number} index Visual index of the element to remove.\n   * @param {number} amount Number of rows to add/remove.\n   * @param {number} physicalRows Physical row indexes.\n   */\n  filterData(index, amount, physicalRows) {\n    // Custom data filtering (run as a consequence of calling the below hook) provide an array containing new data.\n    let data = this.hot.runHooks('filterData', index, amount, physicalRows);\n\n    // Hooks by default returns first argument (when there is no callback changing execution result).\n    if (Array.isArray(data) === false) {\n      data = this.dataSource.filter((row, rowIndex) => physicalRows.indexOf(rowIndex) === -1);\n    }\n    this.dataSource.length = 0;\n    Array.prototype.push.apply(this.dataSource, data);\n  }\n\n  /**\n   * Returns single value from the data array.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} prop The column property.\n   * @returns {*}\n   */\n  get(row, prop) {\n    const physicalRow = this.hot.toPhysicalRow(row);\n    let dataRow = this.dataSource[physicalRow];\n    // TODO: To remove, use 'modifyData' hook instead (see below)\n    const modifiedRowData = this.hot.runHooks('modifyRowData', physicalRow);\n    dataRow = isNaN(modifiedRowData) ? modifiedRowData : dataRow;\n    //\n\n    let value = null;\n\n    // try to get value under property `prop` (includes dot)\n    if (dataRow && dataRow.hasOwnProperty && hasOwnProperty(dataRow, prop)) {\n      value = dataRow[prop];\n    } else if (typeof prop === 'string' && prop.indexOf('.') > -1) {\n      const sliced = prop.split('.');\n      let out = dataRow;\n      if (!out) {\n        return null;\n      }\n      for (let i = 0, ilen = sliced.length; i < ilen; i++) {\n        out = out[sliced[i]];\n        if (typeof out === 'undefined') {\n          return null;\n        }\n      }\n      value = out;\n    } else if (typeof prop === 'function') {\n      value = prop(this.dataSource.slice(physicalRow, physicalRow + 1)[0]);\n    }\n    if (this.hot.hasHook('modifyData')) {\n      const valueHolder = createObjectPropListener(value);\n      this.hot.runHooks('modifyData', physicalRow, this.propToCol(prop), valueHolder, 'get');\n      if (valueHolder.isTouched()) {\n        value = valueHolder.value;\n      }\n    }\n    return value;\n  }\n\n  /**\n   * Returns single value from the data array (intended for clipboard copy to an external application).\n   *\n   * @param {number} row Physical row index.\n   * @param {number} prop The column property.\n   * @returns {string}\n   */\n  getCopyable(row, prop) {\n    if (this.hot.getCellMeta(row, this.propToCol(prop)).copyable) {\n      return this.get(row, prop);\n    }\n    return '';\n  }\n\n  /**\n   * Saves single value to the data array.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} prop The column property.\n   * @param {string} value The value to set.\n   */\n  set(row, prop, value) {\n    const physicalRow = this.hot.toPhysicalRow(row);\n    let newValue = value;\n    let dataRow = this.dataSource[physicalRow];\n    // TODO: To remove, use 'modifyData' hook instead (see below)\n    const modifiedRowData = this.hot.runHooks('modifyRowData', physicalRow);\n    dataRow = isNaN(modifiedRowData) ? modifiedRowData : dataRow;\n    //\n\n    if (this.hot.hasHook('modifyData')) {\n      const valueHolder = createObjectPropListener(newValue);\n      this.hot.runHooks('modifyData', physicalRow, this.propToCol(prop), valueHolder, 'set');\n      if (valueHolder.isTouched()) {\n        newValue = valueHolder.value;\n      }\n    }\n\n    // try to set value under property `prop` (includes dot)\n    if (dataRow && dataRow.hasOwnProperty && hasOwnProperty(dataRow, prop)) {\n      dataRow[prop] = newValue;\n    } else if (typeof prop === 'string' && prop.indexOf('.') > -1) {\n      const sliced = prop.split('.');\n      let out = dataRow;\n      let i = 0;\n      let ilen;\n      for (i = 0, ilen = sliced.length - 1; i < ilen; i++) {\n        if (typeof out[sliced[i]] === 'undefined') {\n          out[sliced[i]] = {};\n        }\n        out = out[sliced[i]];\n      }\n      out[sliced[i]] = newValue;\n    } else if (typeof prop === 'function') {\n      prop(this.dataSource.slice(physicalRow, physicalRow + 1)[0], newValue);\n    } else {\n      dataRow[prop] = newValue;\n    }\n  }\n\n  /**\n   * This ridiculous piece of code maps rows Id that are present in table data to those displayed for user.\n   * The trick is, the physical row id (stored in settings.data) is not necessary the same\n   * as the visual (displayed) row id (e.g. When sorting is applied).\n   *\n   * @param {number} index Visual row index.\n   * @param {number} amount An amount of rows to translate.\n   * @returns {number}\n   */\n  visualRowsToPhysical(index, amount) {\n    const totalRows = this.hot.countSourceRows();\n    const logicRows = [];\n    let physicRow = (totalRows + index) % totalRows;\n    let rowsToRemove = amount;\n    let row;\n    while (physicRow < totalRows && rowsToRemove) {\n      row = this.hot.toPhysicalRow(physicRow);\n      logicRows.push(row);\n      rowsToRemove -= 1;\n      physicRow += 1;\n    }\n    return logicRows;\n  }\n\n  /**\n   *\n   * @param {number} index Visual column index.\n   * @param {number} amount An amount of rows to translate.\n   * @returns {Array}\n   */\n  visualColumnsToPhysical(index, amount) {\n    const totalCols = this.hot.countCols();\n    const visualCols = [];\n    let physicalCol = (totalCols + index) % totalCols;\n    let colsToRemove = amount;\n    while (physicalCol < totalCols && colsToRemove) {\n      const col = this.hot.toPhysicalColumn(physicalCol);\n      visualCols.push(col);\n      colsToRemove -= 1;\n      physicalCol += 1;\n    }\n    return visualCols;\n  }\n\n  /**\n   * Clears the data array.\n   */\n  clear() {\n    for (let r = 0; r < this.hot.countSourceRows(); r++) {\n      for (let c = 0; c < this.hot.countCols(); c++) {\n        this.set(r, this.colToProp(c), '');\n      }\n    }\n  }\n\n  /**\n   * Get data length.\n   *\n   * @returns {number}\n   */\n  getLength() {\n    const maxRowsFromSettings = this.tableMeta.maxRows;\n    let maxRows;\n    if (maxRowsFromSettings < 0 || maxRowsFromSettings === 0) {\n      maxRows = 0;\n    } else {\n      maxRows = maxRowsFromSettings || Infinity;\n    }\n    const length = this.hot.rowIndexMapper.getNotTrimmedIndexesLength();\n    return Math.min(length, maxRows);\n  }\n\n  /**\n   * Returns the data array.\n   *\n   * @returns {Array}\n   */\n  getAll() {\n    const start = {\n      row: 0,\n      col: 0\n    };\n    const end = {\n      row: Math.max(this.hot.countRows() - 1, 0),\n      col: Math.max(this.hot.countCols() - 1, 0)\n    };\n    if (start.row - end.row === 0 && !this.hot.countSourceRows()) {\n      return [];\n    }\n    return this.getRange(start, end, DataMap.DESTINATION_RENDERER);\n  }\n\n  /**\n   * Count the number of columns cached in the `colToProp` cache.\n   *\n   * @returns {number} Amount of cached columns.\n   */\n  countCachedColumns() {\n    return this.colToPropCache.length;\n  }\n\n  /**\n   * Returns data range as array.\n   *\n   * @param {object} [start] Start selection position. Visual indexes.\n   * @param {object} [end] End selection position. Visual indexes.\n   * @param {number} destination Destination of datamap.get.\n   * @returns {Array}\n   */\n  getRange(start, end, destination) {\n    const output = [];\n    let r;\n    let c;\n    let row;\n    const maxRows = this.tableMeta.maxRows;\n    const maxCols = this.tableMeta.maxCols;\n    if (maxRows === 0 || maxCols === 0) {\n      return [];\n    }\n    const getFn = destination === DataMap.DESTINATION_CLIPBOARD_GENERATOR ? this.getCopyable : this.get;\n    const rlen = Math.min(Math.max(maxRows - 1, 0), Math.max(start.row, end.row));\n    const clen = Math.min(Math.max(maxCols - 1, 0), Math.max(start.col, end.col));\n    for (r = Math.min(start.row, end.row); r <= rlen; r++) {\n      row = [];\n      // We just store indexes for rows without headers.\n      const physicalRow = r >= 0 ? this.hot.toPhysicalRow(r) : r;\n      for (c = Math.min(start.col, end.col); c <= clen; c++) {\n        if (physicalRow === null) {\n          break;\n        }\n        row.push(getFn.call(this, r, this.colToProp(c)));\n      }\n      if (physicalRow !== null) {\n        output.push(row);\n      }\n    }\n    return output;\n  }\n\n  /**\n   * Return data as text (tab separated columns).\n   *\n   * @param {object} [start] Start selection position. Visual indexes.\n   * @param {object} [end] End selection position. Visual indexes.\n   * @returns {string}\n   */\n  getText(start, end) {\n    return stringify(this.getRange(start, end, DataMap.DESTINATION_RENDERER));\n  }\n\n  /**\n   * Return data as copyable text (tab separated columns intended for clipboard copy to an external application).\n   *\n   * @param {object} [start] Start selection position. Visual indexes.\n   * @param {object} [end] End selection position. Visual indexes.\n   * @returns {string}\n   */\n  getCopyableText(start, end) {\n    return stringify(this.getRange(start, end, DataMap.DESTINATION_CLIPBOARD_GENERATOR));\n  }\n\n  /**\n   * Destroy instance.\n   */\n  destroy() {\n    this.hot = null;\n    this.metaManager = null;\n    this.dataSource = null;\n    this.duckSchema = null;\n    this.colToPropCache.length = 0;\n    this.propToColCache.clear();\n    this.propToColCache = undefined;\n  }\n}\nexport default DataMap;", "import \"core-js/modules/es.error.cause.js\";\nimport { hasOwnProperty, isObject, objectEach, inherit, extend } from \"../../helpers/object.mjs\";\nimport { getCellType } from \"../../cellTypes/registry.mjs\";\n/**\n * Checks if the given property can be overwritten.\n *\n * @param {string} propertyName The property name to check.\n * @param {object} metaObject The current object meta settings.\n * @returns {boolean}\n */\nfunction canBeOverwritten(propertyName, metaObject) {\n  var _metaObject$_automati;\n  if (propertyName === 'CELL_TYPE') {\n    return false;\n  }\n  return ((_metaObject$_automati = metaObject._automaticallyAssignedMetaProps) === null || _metaObject$_automati === void 0 ? void 0 : _metaObject$_automati.has(propertyName)) || !hasOwnProperty(metaObject, propertyName);\n}\n\n/**\n * Expands \"type\" property of the meta object to single values. For example `type: 'numeric'` sets\n * \"renderer\", \"editor\", \"validator\" properties to specific functions designed for numeric values.\n * If \"type\" is passed as an object that object will be returned, excluding properties that\n * already exist in the \"metaObject\".\n *\n * The function utilizes `_automaticallyAssignedMetaProps` meta property that allows tracking what\n * properties are changed by the \"type\" expanding feature. That properties can be always overwritten by\n * the user.\n *\n * @param {object} metaObject The meta object.\n * @param {object} settings The settings object with the \"type\" setting.\n * @param {object} settingsToCompareWith The object to compare which properties need to be updated.\n */\nexport function extendByMetaType(metaObject, settings) {\n  let settingsToCompareWith = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : metaObject;\n  const validType = typeof settings.type === 'string' ? getCellType(settings.type) : settings.type;\n  if (metaObject._automaticallyAssignedMetaProps) {\n    objectEach(settings, (value, key) => void metaObject._automaticallyAssignedMetaProps.delete(key));\n  }\n  if (!isObject(validType)) {\n    return;\n  }\n  if (settingsToCompareWith === metaObject && !metaObject._automaticallyAssignedMetaProps) {\n    metaObject._automaticallyAssignedMetaProps = new Set();\n  }\n  const expandedType = {};\n  objectEach(validType, (value, property) => {\n    if (canBeOverwritten(property, settingsToCompareWith)) {\n      var _metaObject$_automati2;\n      expandedType[property] = value;\n      (_metaObject$_automati2 = metaObject._automaticallyAssignedMetaProps) === null || _metaObject$_automati2 === void 0 || _metaObject$_automati2.add(property);\n    }\n  });\n  extend(metaObject, expandedType);\n}\n\n/**\n * Creates new class which extends properties from TableMeta layer class.\n *\n * @param {TableMeta} TableMeta The TableMeta which the new ColumnMeta is created from.\n * @param {string[]} [conflictList] List of the properties which are conflicted with the column meta layer.\n *                                  Conflicted properties are overwritten by `undefined` value, to separate them\n *                                  from the TableMeta layer.\n * @returns {ColumnMeta} Returns constructor ready to initialize with `new` operator.\n */\nexport function columnFactory(TableMeta) {\n  let conflictList = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  // Do not use ES6 \"class extends\" syntax here. It seems that the babel produces code\n  // which drastically decreases the performance of the ColumnMeta class creation.\n\n  /**\n   * Base \"class\" for column meta.\n   */\n  function ColumnMeta() {}\n  inherit(ColumnMeta, TableMeta);\n\n  // Clear conflict settings\n  for (let i = 0; i < conflictList.length; i++) {\n    ColumnMeta.prototype[conflictList[i]] = undefined;\n  }\n  return ColumnMeta;\n}\n\n/**\n * Helper which checks if the provided argument is an unsigned number.\n *\n * @param {*} value Value to check.\n * @returns {boolean}\n */\nexport function isUnsignedNumber(value) {\n  return Number.isInteger(value) && value >= 0;\n}\n\n/**\n * Function which makes assertion by custom condition. Function throws an error when assertion doesn't meet the spec.\n *\n * @param {Function} condition Function with custom logic. The condition has to return boolean values.\n * @param {string} errorMessage String which describes assertion error.\n */\nexport function assert(condition, errorMessage) {\n  if (!condition()) {\n    throw new Error(`Assertion failed: ${errorMessage}`);\n  }\n}\n\n/**\n * Check if given variable is null or undefined.\n *\n * @param {*} variable Variable to check.\n * @returns {boolean}\n */\nexport function isNullish(variable) {\n  return variable === null || variable === undefined;\n}", "import { isEmpty } from \"../../helpers/mixed.mjs\";\nimport { isObjectEqual } from \"../../helpers/object.mjs\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * @alias Options\n * @class Options\n * @description\n *\n * [Configuration options](@/guides/getting-started/configuration-options.md) let you heavily customize your Handsontable instance. For example, you can:\n *\n * - Enable and disable built-in features\n * - Enable and configure additional [plugins](@/api/plugins.md)\n * - Personalize Handsontable's look\n * - Adjust Handsontable's behavior\n * - Implement your own custom features\n *\n * ::: only-for javascript\n *\n * To apply [configuration options](@/guides/getting-started/configuration-options.md), pass them as\n * a second argument of the [Handsontable constructor](@/guides/getting-started/installation.md#initialize-handsontable),\n * using the [object literal notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer):\n *\n * Read more on the [Configuration options](@/guides/getting-started/configuration-options.md) page.\n *\n * ```js\n * const container = document.getElementById('example');\n *\n * const hot = new Handsontable(container, {\n *   // configuration options, in the object literal notation\n *   licenseKey: 'non-commercial-and-evaluation',\n *   data: [\n *     ['A1', 'B1', 'C1', 'D1', 'E1'],\n *     ['A2', 'B2', 'C2', 'D2', 'E2'],\n *     ['A3', 'B3', 'C3', 'D3', 'E3'],\n *     ['A4', 'B4', 'C4', 'D4', 'E4'],\n *     ['A5', 'B5', 'C5', 'D5', 'E5'],\n *   ],\n *   width: 400,\n *   height: 300,\n *   colHeaders: true,\n *   rowHeaders: true,\n *   customBorders: true,\n *   dropdownMenu: true,\n *   multiColumnSorting: true,\n *   filters: true,\n *   manualRowMove: true,\n * });\n * ```\n * :::\n *\n * ::: only-for react\n *\n * To apply configuration options, pass them as individual props\n * of the [`HotTable`](@/guides/getting-started/installation.md#_4-use-the-hottable-component)\n * or [`HotColumn`](@/guides/columns/react-hot-column.md) components.\n *\n * Read more on the [Configuration options](@/guides/getting-started/configuration-options.md) page.\n *\n * ```jsx\n * <HotTable\n *   // configuration options, in the object literal notation\n *   licenseKey='non-commercial-and-evaluation'\n *   data={[\n *     ['A1', 'B1', 'C1', 'D1', 'E1'],\n *     ['A2', 'B2', 'C2', 'D2', 'E2'],\n *     ['A3', 'B3', 'C3', 'D3', 'E3'],\n *     ['A4', 'B4', 'C4', 'D4', 'E4'],\n *     ['A5', 'B5', 'C5', 'D5', 'E5'],\n *   ]}\n *   width={400}\n *   height={300}\n *   colHeaders={true}\n *   rowHeaders={true}\n *   customBorders={true}\n *   dropdownMenu={true}\n *   multiColumnSorting={true}\n *   filters={true}\n *   manualRowMove={true}\n * />\n * ```\n * :::\n *\n * Depending on your needs, you can apply [configuration options](@/api/options.md) to different elements of your grid:\n * - [The entire grid](@/guides/getting-started/configuration-options.md#set-grid-options)\n * - [Individual columns](@/guides/getting-started/configuration-options.md#set-column-options)\n * - [Individual rows](@/guides/getting-started/configuration-options.md#set-row-options)\n * - [Individual cells](@/guides/getting-started/configuration-options.md#set-cell-options)\n * - [Individual grid elements, based on any logic you implement](@/guides/getting-started/configuration-options.md#implementing-custom-logic)\n *\n * Read more:\n * - [Configuration options](@/guides/getting-started/configuration-options.md)\n */\nexport default (() => {\n  return {\n    /* eslint-disable jsdoc/require-description-complete-sentence */\n\n    /**\n     * Information on which of the meta properties were added automatically.\n     * For example: setting the `renderer` property directly won't extend the `_automaticallyAssignedMetaProps`\n     * entry, but setting a `type` will modify it to `Set(3) {'renderer', 'editor', 'validator', ...}`.\n     *\n     * @private\n     * @type {Set}\n     * @default undefined\n     */\n    _automaticallyAssignedMetaProps: undefined,\n    /**\n     * The `activeHeaderClassName` option lets you add a CSS class name\n     * to every currently-active, currently-selected header (when a whole column or row is selected).\n     *\n     * Read more:\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @since 0.38.2\n     * @default 'ht__active_highlight'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add an `ht__active_highlight` CSS class name\n     * // to every currently-active, currently-selected header\n     * activeHeaderClassName: 'ht__active_highlight',\n     * ```\n     */\n    activeHeaderClassName: 'ht__active_highlight',\n    /**\n     * The `allowEmpty` option determines whether Handsontable accepts the following values:\n     * - `null`\n     * - `undefined`\n     * - `''`\n     *\n     * You can set the `allowEmpty` option to one of the following:\n     *\n     * | Setting          | Description                                                                                                                          |\n     * | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------ |\n     * | `true` (default) | - Accept `null`, `undefined` and `''` values<br>- Mark cells that contain `null`, `undefined` or `''` values as `valid`              |\n     * | `false`          | - Don't accept `null`, `undefined` and `''` values<br>- Mark cells that contain `null`, `undefined` or `''` values with as `invalid` |\n     *\n     * ::: tip\n     * To use the [`allowEmpty`](#allowempty) option, you need to set the [`validator`](#validator) option (or the [`type`](#type) option).\n     * :::\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // allow empty values in each cell of the entire grid\n     * allowEmpty: true,\n     *\n     * // or\n     * columns: [\n     *   {\n     *     type: 'date',\n     *     dateFormat: 'DD/MM/YYYY',\n     *     // allow empty values in each cell of the 'date' column\n     *     allowEmpty: true\n     *   }\n     * ],\n     * ```\n     */\n    allowEmpty: true,\n    /**\n     * The `allowHtml` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)\n     * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) cells' [`source`](#source) data\n     * is treated as HTML.\n     *\n     * You can set the `allowHtml` option to one of the following:\n     *\n     * | Setting           | Description                                         |\n     * | ----------------- | --------------------------------------------------- |\n     * | `false` (default) | The [`source`](#source) data is not treated as HTML |\n     * | `true`            | The [`source`](#source) data is treated as HTML     |\n     *\n     * __Warning:__ Setting the `allowHtml` option to `true` can cause serious XSS vulnerabilities.\n     *\n     * Read more:\n     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [Dropdown cell type](@/guides/cell-types/dropdown-cell-type.md)\n     * - [`source`](#source)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *   // set the `type` of each cell in this column to `autocomplete`\n     *   type: 'autocomplete',\n     *   // set options available in every `autocomplete` cell of this column\n     *   source: ['<strong>foo</strong>', '<strong>bar</strong>']\n     *   // use HTML in the `source` list\n     *   allowHtml: true,\n     *   },\n     * ],\n     * ```\n     */\n    allowHtml: false,\n    /**\n     * If set to `true`, the `allowInsertColumn` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):\n     * - **Insert column left**\n     * - **Insert column right**\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // hide the 'Insert column left' and 'Insert column right' menu items from the context menu\n     * allowInsertColumn: false,\n     * ```\n     */\n    allowInsertColumn: true,\n    /**\n     * If set to `true`, the `allowInsertRow` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):\n     * - **Insert row above**\n     * - **Insert row below**\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // hide the 'Insert row above' and 'Insert row below' menu items from the context menu\n     * allowInsertRow: false,\n     * ```\n     */\n    allowInsertRow: true,\n    /**\n     * The `allowInvalid` option determines whether Handsontable accepts values\n     * that were marked as `invalid` by the [cell validator](@/guides/cell-functions/cell-validator.md).\n     *\n     * You can set the `allowInvalid` option to one of the following:\n     *\n     * | Setting          | Description                                                                                                                                                                        |\n     * | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true` (default) | - Accept `invalid` values<br>- Allow the user to close the [cell editor](@/guides/cell-functions/cell-editor.md) with `invalid` values<br>- Save `invalid` values into the data source                   |\n     * | `false`          | - Don't accept `invalid` values<br>- Don't allow the user to close the [cell editor](@/guides/cell-functions/cell-editor.md) with `invalid` values<br>- Don't save `invalid` values into the data source |\n     *\n     * Setting the `allowInvalid` option to `false` can be useful when used with the [Autocomplete strict mode](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-strict-mode).\n     *\n     * Read more:\n     * - [Cell validator](@/guides/cell-functions/cell-validator.md)\n     * - [Cell editor](@/guides/cell-functions/cell-editor.md)\n     * - [Autocomplete strict mode](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-strict-mode)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // don't accept `invalid` values\n     * // don't allow the user to close the cell editor\n     * // don't save `invalid` values into the data source\n     * allowInvalid: false,\n     * ```\n     */\n    allowInvalid: true,\n    /**\n     * If set to `true`, the `allowRemoveColumn` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):\n     * - **Remove column**\n     *\n     * Read more:\n     * - [Context menu](@/guides/accessories-and-menus/context-menu.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // hide the 'Remove column' menu item from the context menu\n     * allowRemoveColumn: false,\n     * ```\n     */\n    allowRemoveColumn: true,\n    /**\n     * If set to `true`, the `allowRemoveRow` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):\n     * - **Remove row**\n     *\n     * Read more:\n     * - [Context menu](@/guides/accessories-and-menus/context-menu.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // hide the 'Remove row' menu item from the context menu\n     * allowRemoveRow: false,\n     * ```\n     */\n    allowRemoveRow: true,\n    /**\n     * If set to `true`, the accessibility-related ARIA tags will be added to the table. If set to `false`, they\n     * will be omitted.\n     * Defaults to `true`.\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     * @since 14.0.0\n     */\n    ariaTags: true,\n    /**\n     * The `autoColumnSize` option configures the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin.\n     *\n     * You can set the `autoColumnSize` option to one of the following:\n     *\n     * | Setting   | Description                                                                                  |\n     * | --------- | -------------------------------------------------------------------------------------------- |\n     * | `false`   | Disable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin                               |\n     * | `true`    | Enable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin with the default configuration |\n     * | An object | Enable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin and modify the plugin options  |\n     *\n     * If you set the `autoColumnSize` option to an object, you can set the following [`AutoColumnSize`](@/api/autoColumnSize.md) plugin options:\n     *\n     * | Property                | Possible values                 | Description                                                                                                    |\n     * | ----------------------- | ------------------------------- | -------------------------------------------------------------------------------------------------------------- |\n     * | `syncLimit`             | A number \\| A percentage string | The number/percentage of columns to keep in sync<br>(default: `50`)                                            |\n     * | `useHeaders`            | `true` \\| `false`               | When calculating column widths:<br>`true`: use column headers<br>`false`: don't use column headers          |\n     * | `samplingRatio`         | A number                        | The number of samples of the same length to be used in column width calculations                               |\n     * | `allowSampleDuplicates` | `true` \\| `false`               | When calculating column widths:<br>`true`: Allow duplicate samples<br>`false`: Don't allow duplicate samples |\n     *\n     * By default, the `autoColumnSize` option is set to `undefined`,\n     * but the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin acts as enabled.\n     * To disable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin completely,\n     * set the `autoColumnSize` option to `false`.\n     *\n     * Using the [`colWidths`](#colWidths) option forcibly disables the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin.\n     *\n     * Read more:\n     * - [Plugins: `AutoColumnSize`](@/api/autoColumnSize.md)\n     *\n     * @memberof Options#\n     * @type {object|boolean}\n     * @default undefined\n     * @category AutoColumnSize\n     *\n     * @example\n     * ```js\n     * autoColumnSize: {\n     *   // keep 40% of columns in sync (the rest of columns: async)\n     *   syncLimit: '40%',\n     *   // when calculating column widths, use column headers\n     *   useHeaders: true,\n     *   // when calculating column widths, use 10 samples of the same length\n     *   samplingRatio: 10,\n     *   // when calculating column widths, allow duplicate samples\n     *   allowSampleDuplicates: true\n     * },\n     * ```\n     */\n    autoColumnSize: undefined,\n    /**\n     * The `autoRowSize` option configures the [`AutoRowSize`](@/api/autoRowSize.md) plugin.\n     *\n     * You can set the `autoRowSize` option to one of the following:\n     *\n     * | Setting   | Description                                                                            |\n     * | --------- | -------------------------------------------------------------------------------------- |\n     * | `false`   | Disable the [`AutoRowSize`](@/api/autoRowSize.md) plugin                               |\n     * | `true`    | Enable the [`AutoRowSize`](@/api/autoRowSize.md) plugin with the default configuration |\n     * | An object | Enable the [`AutoRowSize`](@/api/autoRowSize.md) plugin and modify the plugin options  |\n     *\n     * To give Handsontable's [scrollbar](https://handsontable.com/docs/8.0.0/demo-scrolling.html)\n     * a proper size, set the `autoRowSize` option to `true`.\n     *\n     * If you set the `autoRowSize` option to an object, you can set the following [`AutoRowSize`](@/api/autoRowSize.md) plugin options:\n     *\n     * | Property    | Possible values                 | Description                                                       |\n     * | ----------- | ------------------------------- | ----------------------------------------------------------------- |\n     * | `syncLimit` | A number \\| A percentage string | The number/percentage of rows to keep in sync<br>(default: `500`) |\n     *\n     * Using the [`rowHeights`](#rowHeights) option forcibly disables the [`AutoRowSize`](@/api/autoRowSize.md) plugin.\n     *\n     * Read more:\n     * - [Plugins: `AutoRowSize`](@/api/autoRowSize.md)\n     *\n     * @memberof Options#\n     * @type {object|boolean}\n     * @default undefined\n     * @category AutoRowSize\n     *\n     * @example\n     * ```js\n     * autoRowSize: {\n     *   // keep 40% of rows in sync (the rest of rows: async)\n     *   syncLimit: '40%'\n     * },\n     * ```\n     */\n    autoRowSize: undefined,\n    /**\n     * With [`autoWrapCol`](#autowrapcol) enabled:\n     * - When you select a bottom-most cell, pressing <kbd>**↓**</kbd> takes you to the top-most cell of the next column.\n     * - When you select a top-most cell, pressing <kbd>**↑**</kbd> takes you to the bottom-most cell of the previous column.\n     *\n     * You can set the [`autoWrapCol`](#autowrapcol) option to one of the following:\n     *\n     * | Setting           | Description                                                                                                                                                                                                                                  |\n     * | ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true`            | When you select a bottom-most cell, pressing <kbd>**↓**</kbd> takes you to the top-most cell of the next column.<br><br>When you select a top-most cell, pressing <kbd>**↑**</kbd> takes you to the bottom-most cell of the previous column. |\n     * | `false` (default) | When you select a bottom-most cell, pressing <kbd>**↓**</kbd> doesn't do anything.<br><br>When you select a top-most cell, pressing <kbd>**↑**</kbd> doesn't do anything.                                                                    |\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // when you select a bottom-most cell, pressing ⬇ doesn't do anything\n     * // when you select a top-most cell, pressing ⬆ doesn't do anything\n     * autoWrapCol: false, // default setting\n     *\n     * // when you select a bottom-most cell, pressing ⬇ takes you to the top-most cell of the next column\n     * // when you select a top-most cell, pressing ⬆ takes you to the bottom-most cell of the previous column\n     * autoWrapCol: true,\n     * ```\n     */\n    autoWrapCol: false,\n    /**\n     * With [`autoWrapRow`](#autoWrapRow) enabled:\n     * - When you select the first cell of a row, pressing <kbd>**←**</kbd>* takes you to the last cell of the row above.\n     * - When you select the last cell of a row, pressing <kbd>**→**</kbd>* takes you to the first cell of the row below.\n     *\n     * You can set the [`autoWrapRow`](#autoWrapRow) option to one of the following:\n     *\n     * | Setting           | Description                                                                                                                                                                                                                              |\n     * | ----------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true`            | When you select the first cell of a row, pressing <kbd>**←**</kbd>* takes you to the last cell of the row above.<br><br>When you select the last cell of a row, pressing <kbd>**→**</kbd>* takes you to the first cell of the row below. |\n     * | `false` (default) | When you select the first cell of a row, pressing <kbd>**←**</kbd>* doesn't do anything.<br><br>When you select the last cell of a row, pressing <kbd>**→**</kbd>* doesn't do anything.                                                  |\n     *\n     * \\* The exact key depends on your [`layoutDirection`](#layoutdirection) configuration.\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // when you select the first cell of a row, pressing ⬅ doesn't do anything\n     * // when you select the last cell of a row, pressing ➡️ doesn't do anything\n     * autoWrapRow: false, // default setting\n     *\n     * // when you select the first cell of a row, pressing ⬅ takes you to the last cell of the row above\n     * // when you select the last cell of a row, pressing ➡️ takes you to the first cell of the row below\n     * autoWrapRow: true,\n     * ```\n     */\n    autoWrapRow: false,\n    /**\n     * @description\n     * The `bindRowsWithHeaders` option configures the [`BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md) plugin.\n     *\n     * You can set the `bindRowsWithHeaders` option to one of the following:\n     *\n     * | Setting | Description                                                                  |\n     * | ------- | ---------------------------------------------------------------------------- |\n     * | `false` | Disable the the [`BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md) plugin |\n     * | `true`  | Enable the the [`BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md) plugin  |\n     *\n     * Read more:\n     * - [Plugins: `BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md)\n     *\n     * @memberof Options#\n     * @type {boolean|string}\n     * @default undefined\n     * @category BindRowsWithHeaders\n     *\n     * @example\n     * ```js\n     * // enable the `BindRowsWithHeaders` plugin\n     * bindRowsWithHeaders: true\n     * ```\n     */\n    bindRowsWithHeaders: undefined,\n    /**\n     * The `cell` option lets you apply [configuration options](@/guides/getting-started/configuration-options.md) to individual cells.\n     *\n     * The `cell` option overwrites the [top-level grid options](@/guides/getting-started/configuration-options.md#set-grid-options),\n     * and the [`columns`](#columns) options.\n     *\n     * Read more:\n     * - [Configuration options: Setting cell options](@/guides/getting-started/configuration-options.md#set-cell-options)\n     * - [`columns`](#columns)\n     *\n     * @memberof Options#\n     * @type {Array[]}\n     * @default []\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the `cell` option to an array of objects\n     * cell: [\n     *   // make the cell with coordinates (0, 0) read-only\n     *   {\n     *     row: 0,\n     *     col: 0,\n     *     readOnly: true\n     *   }\n     * ],\n     * ```\n     */\n    cell: [],\n    /**\n     * @description\n     * The `cells` option lets you apply any other [configuration options](@/guides/getting-started/configuration-options.md) to\n     * individual grid elements (columns, rows, cells), based on any logic you implement.\n     *\n     * The `cells` option overwrites all other options (including options set by [`columns`](#columns) and [`cell`](#cell)).\n     * It takes the following parameters:\n     *\n     * | Parameter | Required | Type             | Description                                                                                                                                                                                                                                                                                                                             |\n     * | --------- | -------- | ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `row`     | Yes      | Number           | A physical row index                                                                                                                                                                                                                                                                                                                    |\n     * | `column`  | Yes      | Number           | A physical column index                                                                                                                                                                                                                                                                                                                 |\n     * | `prop`    | No       | String \\| Number | If [`data`](#data) is set to an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), `prop` is the same number as `column`.<br><br>If [`data`](#data) is set to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), `prop` is a property name for the column's data object. |\n     *\n     * Read more:\n     * - [Configuration options: Implementing custom logic](@/guides/getting-started/configuration-options.md#implement-custom-logic)\n     * - [Configuration options: Setting row options](@/guides/getting-started/configuration-options.md#set-row-options)\n     * - [`columns`](#columns)\n     * - [`cell`](#cell)\n     *\n     * @memberof Options#\n     * @type {Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the `cells` option to your custom function\n     * cells(row, column, prop) {\n     *   const cellProperties = { readOnly: false };\n     *   const visualRowIndex = this.instance.toVisualRow(row);\n     *   const visualColIndex = this.instance.toVisualColumn(column);\n     *\n     *   if (visualRowIndex === 0 && visualColIndex === 0) {\n     *     cellProperties.readOnly = true;\n     *   }\n     *\n     *   return cellProperties;\n     * },\n     * ```\n     */\n    cells: undefined,\n    /**\n     * The `checkedTemplate` option lets you configure what value\n     * a checked [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell has.\n     *\n     * You can set the `checkedTemplate` option to one of the following:\n     *\n     * | Setting          | Description                                                                                                                                                                              |\n     * | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true` (default) | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is checked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns `true`                  |\n     * | A string         | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is checked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns a string of your choice |\n     *\n     * Read more:\n     * - [Checkbox cell type: Checkbox template](@/guides/cell-types/checkbox-cell-type.md#checkbox-template)\n     * - [`getDataAtCell()`](@/api/core.md#getDataAtCell)\n     * - [`uncheckedTemplate`](#uncheckedTemplate)\n     *\n     * @memberof Options#\n     * @type {boolean|string|number}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // set the `type` of each cell in this column to `checkbox`\n     *     // when checked, the cell's value is `true`\n     *     // when unchecked, the cell's value is `false`\n     *     type: 'checkbox',\n     *   },\n     *   {\n     *     // set the `type` of each cell in this column to `checkbox`\n     *     type: 'checkbox',\n     *     // when checked, the cell's value is `'Yes'`\n     *     checkedTemplate: 'Yes',\n     *     // when unchecked, the cell's value is `'No'`\n     *     uncheckedTemplate: 'No'\n     *  }\n     * ],\n     * ```\n     */\n    checkedTemplate: undefined,\n    /**\n     * The `className` option lets you add CSS class names to every currently-selected element.\n     *\n     * You can set the `className` option to one of the following:\n     *\n     * | Setting             | Description                                                      |\n     * | ------------------- | ---------------------------------------------------------------- |\n     * | A string            | Add a single CSS class name to every currently-selected element  |\n     * | An array of strings | Add multiple CSS class names to every currently-selected element |\n     *\n     * ::: tip\n     * Don't change the `className` metadata of the [column summary](@/guides/columns/column-summary.md) row.\n     * To style the summary row, use the class name assigned automatically by the [`ColumnSummary`](@/api/columnSummary.md) plugin: `columnSummaryResult`.\n     * :::\n     *\n     * To apply different CSS class names on different levels, use Handsontable's [cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration).\n     *\n     * Read more:\n     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`TableClassName`](#TableClassName)\n     *\n     * @memberof Options#\n     * @type {string|string[]}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `your-class-name` CSS class name\n     * // to every currently-selected element\n     * className: 'your-class-name',\n     *\n     * // add `first-class-name` and `second-class-name` CSS class names\n     * // to every currently-selected element\n     * className: ['first-class-name', 'second-class-name'],\n     * ```\n     */\n    className: undefined,\n    /**\n     * The `colHeaders` option configures your grid's column headers.\n     *\n     * You can set the `colHeaders` option to one of the following:\n     *\n     * | Setting  | Description                                                          |\n     * | -------- | -------------------------------------------------------------------- |\n     * | `true`   | Enable the default column headers ('A', 'B', 'C', ...)               |\n     * | `false`  | Disable column headers                                               |\n     * | An array | Define your own column headers (e.g. `['One', 'Two', 'Three', ...]`) |\n     * | A function | Define your own column headers, using a function                     |\n     *\n     * Read more:\n     * - [Column header](@/guides/columns/column-header.md)\n     *\n     * @memberof Options#\n     * @type {boolean|string[]|Function}\n     * @default null\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // enable the default column headers\n     * colHeaders: true,\n     *\n     * // set your own column headers\n     * colHeaders: ['One', 'Two', 'Three'],\n     *\n     * // set your own column headers, using a function\n     * colHeaders: function(visualColumnIndex) {\n     *   return `${visualColumnIndex} + : AB`;\n     * },\n     * ```\n     */\n    colHeaders: null,\n    /**\n     * @description\n     * The `collapsibleColumns` option configures the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin.\n     *\n     * You can set the `collapsibleColumns` option to one of the following:\n     *\n     * | Setting              | Description                                                                                       |\n     * | -------------------- | ------------------------------------------------------------------------------------------------- |\n     * | `false`              | Disable the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin                            |\n     * | `true`               | Enable the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin                             |\n     * | An array of objects  | Enable the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin for selected column headers |\n     *\n     * Read more:\n     * - [Plugins: `CollapsibleColumns`](@/api/collapsibleColumns.md)\n     *\n     * @memberof Options#\n     * @type {boolean|object[]}\n     * @default undefined\n     * @category CollapsibleColumns\n     *\n     * @example\n     * ```js\n     * // enable column collapsing for all headers\n     * collapsibleColumns: true,\n     *\n     * // enable column collapsing for selected headers\n     * collapsibleColumns: [\n     *   {row: -4, col: 1, collapsible: true},\n     *   {row: -3, col: 5, collapsible: true}\n     * ],\n     * ```\n     */\n    collapsibleColumns: undefined,\n    /**\n     * @description\n     * The `columnHeaderHeight` option configures the height of column headers.\n     *\n     * You can set the `columnHeaderHeight` option to one of the following:\n     *\n     * | Setting  | Description                                         |\n     * | -------- | --------------------------------------------------- |\n     * | A number | Set the same height for every column header         |\n     * | An array | Set different heights for individual column headers |\n     *\n     * @memberof Options#\n     * @type {number|number[]}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the same height for every column header\n     * columnHeaderHeight: 25,\n     *\n     * // set different heights for individual column headers\n     * columnHeaderHeight: [25, 30, 55],\n     * ```\n     */\n    columnHeaderHeight: undefined,\n    /**\n     * @description\n     * The `columns` option lets you apply any other [configuration options](@/guides/getting-started/configuration-options.md) to individual columns (or ranges of columns).\n     *\n     * You can set the `columns` option to one of the following:\n     * - An array of objects (each object represents one column)\n     * - A function that returns an array of objects\n     *\n     * The `columns` option overwrites the [top-level grid options](@/guides/getting-started/configuration-options.md#set-grid-options).\n     *\n     * When you use `columns`, the [`startCols`](#startCols), [`minCols`](#minCols), and [`maxCols`](#maxCols) options are ignored.\n     *\n     * Read more:\n     * - [Configuration options: Setting column options](@/guides/getting-started/configuration-options.md#set-column-options)\n     * - [`startCols`](#startCols)\n     * - [`minCols`](#minCols)\n     * - [`maxCols`](#maxCols)\n     * - [`data`](#data)\n     *\n     * @memberof Options#\n     * @type {object[]|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the `columns` option to an array of objects\n     * // each object represents one column\n     * columns: [\n     *   {\n     *     // column options for the first (by physical index) column\n     *     type: 'numeric',\n     *     numericFormat: {\n     *       pattern: '0,0.00 $'\n     *     }\n     *   },\n     *   {\n     *     // column options for the second (by physical index) column\n     *     type: 'text',\n     *     readOnly: true\n     *   }\n     * ],\n     *\n     * // or set the `columns` option to a function, based on physical indexes\n     * columns(index) {\n     *   return {\n     *     type: index > 0 ? 'numeric' : 'text',\n     *     readOnly: index < 1\n     *   }\n     * }\n     * ```\n     */\n    columns: undefined,\n    /**\n     * @description\n     * The `columnSorting` option configures the [`ColumnSorting`](@/api/columnSorting.md) plugin.\n     *\n     * You can set the `columnSorting` option to one of the following:\n     *\n     * | Setting    | Description                                                                                                                            |\n     * | ---------- | -------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true`     | Enable the [`ColumnSorting`](@/api/columnSorting.md) plugin with the default configuration                                             |\n     * | `false`    | Disable the [`ColumnSorting`](@/api/columnSorting.md) plugin                                                                           |\n     * | An object  | - Enable the [`ColumnSorting`](@/api/columnSorting.md) plugin<br>- Modify the [`ColumnSorting`](@/api/columnSorting.md) plugin options |\n     *\n     * If you set the `columnSorting` option to an object,\n     * you can set the following [`ColumnSorting`](@/api/columnSorting.md) plugin options:\n     *\n     * | Option                   | Possible settings                                                                                                                                |\n     * | ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------ |\n     * | `indicator`              | `true`: Display the arrow icon in the column header, to indicate a sortable column<br>`false`: Don't display the arrow icon in the column header  |\n     * | `headerAction`           | `true`: Enable clicking on the column header to sort the column<br>`false`: Disable clicking on the column header to sort the column             |\n     * | `sortEmptyCells`         | `true`: Sort empty cells as well<br>`false`: Place empty cells at the end                                                                        |\n     * | `compareFunctionFactory` | A [custom compare function](@/guides/rows/rows-sorting.md#add-a-custom-comparator)                                                                |\n     *\n     * If you set the `columnSorting` option to an object,\n     * you can also sort individual columns at Handsontable's initialization.\n     * In the `columnSorting` object, add an object named `initialConfig`,\n     * with the following properties:\n     *\n     * | Option      | Possible settings   | Description                                                      |\n     * | ----------- | ------------------- | ---------------------------------------------------------------- |\n     * | `column`    | A number            | The index of the column that you want to sort at initialization  |\n     * | `sortOrder` | `'asc'` \\| `'desc'` | The sorting order:<br>`'asc'`: ascending<br>`'desc'`: descending |\n     *\n     * Read more:\n     * - [Rows sorting](@/guides/rows/rows-sorting.md)\n     * - [Rows sorting: Custom compare functions](@/guides/rows/rows-sorting.md#add-a-custom-comparator)\n     * - [`multiColumnSorting`](#multiColumnSorting)\n     *\n     * @memberof Options#\n     * @type {boolean|object}\n     * @default undefined\n     * @category ColumnSorting\n     *\n     * @example\n     * ```js\n     * // enable the `ColumnSorting` plugin\n     * columnSorting: true\n     *\n     * // enable the `ColumnSorting` plugin with custom configuration\n     * columnSorting: {\n     *   // sort empty cells as well\n     *   sortEmptyCells: true,\n     *   // display the arrow icon in the column header\n     *   indicator: true,\n     *   // disable clicking on the column header to sort the column\n     *   headerAction: false,\n     *   // add a custom compare function\n     *   compareFunctionFactory(sortOrder, columnMeta) {\n     *     return function(value, nextValue) {\n     *       // some value comparisons which will return -1, 0 or 1...\n     *     }\n     *   }\n     * }\n     *\n     * // enable the `ColumnSorting` plugin\n     * columnSorting: {\n     *   // at initialization, sort column 1 in ascending order\n     *   initialConfig: {\n     *     column: 1,\n     *     sortOrder: 'asc'\n     *   },\n     *   // at initialization, sort column 2 in descending order\n     *   initialConfig: {\n     *     column: 2,\n     *     sortOrder: 'desc'\n     *   }\n     * }\n     * ```\n     */\n    columnSorting: undefined,\n    /**\n     * @description\n     * The `columnSummary` option configures the [`ColumnSummary`](@/api/columnSummary.md) plugin.\n     *\n     * You can set the `columnSummary` option to an array of objects.\n     * Each object configures a single column summary, using the following properties:\n     *\n     * | Property                 | Possible values                                                         | Description                                                                                                                  |\n     * | ------------------------ | ----------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- |\n     * | `sourceColumn`           | A number                                                                | [Column to summarize](@/guides/columns/column-summary.md#step-2-select-cells-that-you-want-to-summarize)                     |\n     * | `ranges`                 | An array                                                                | [Ranges of rows to summarize](@/guides/columns/column-summary.md#step-2-select-cells-that-you-want-to-summarize)             |\n     * | `type`                   | `'sum'` \\| `'min'` \\| `'max'` \\| `'count'` \\| `'average'` \\| `'custom'` | [Summary function](@/guides/columns/column-summary.md#step-3-calculate-your-summary)                                         |\n     * | `destinationRow`         | A number                                                                | [Destination cell's row coordinate](@/guides/columns/column-summary.md#step-4-provide-the-destination-cell-s-coordinates)    |\n     * | `destinationColumn`      | A number                                                                | [Destination cell's column coordinate](@/guides/columns/column-summary.md#step-4-provide-the-destination-cell-s-coordinates) |\n     * | `forceNumeric`           | `true`  \\| `false`                                                      | [Treat non-numerics as numerics](@/guides/columns/column-summary.md#force-numeric-values)                                  |\n     * | `reversedRowCoords`      | `true`  \\| `false`                                                      | [Reverse row coordinates](@/guides/columns/column-summary.md#step-5-make-room-for-the-destination-cell)                      |\n     * | `suppressDataTypeErrors` | `true`  \\| `false`                                                      | [Suppress data type errors](@/guides/columns/column-summary.md#throw-data-type-errors)                                    |\n     * | `readOnly`               | `true`  \\| `false`                                                      | Make summary cell read-only                                                                                                  |\n     * | `roundFloat`             | `true`  \\| `false`                                                      | [Round summary result](@/guides/columns/column-summary.md#round-a-column-summary-result)                                  |\n     * | `customFunction`         | A function                                                              | [Custom summary function](@/guides/columns/column-summary.md#implement-a-custom-summary-function)                         |\n     *\n     * Read more:\n     * - [Column summary](@/guides/columns/column-summary.md)\n     * - [Plugins: `ColumnSummary`](@/api/columnSummary.md)\n     *\n     * @memberof Options#\n     * @type {object[]|Function}\n     * @default undefined\n     * @category ColumnSummary\n     *\n     * @example\n     * ```js\n     * columnSummary: [\n     *   {\n     *     sourceColumn: 0,\n     *     ranges: [\n     *       [0, 2], [4], [6, 8]\n     *     ],\n     *     type: 'custom',\n     *     destinationRow: 4,\n     *     destinationColumn: 1,\n     *     forceNumeric: true,\n     *     reversedRowCoords: true,\n     *     suppressDataTypeErrors: false,\n     *     readOnly: true,\n     *     roundFloat: false,\n     *     customFunction(endpoint) {\n     *        return 100;\n     *     }\n     *   }\n     * ],\n     * ```\n     */\n    columnSummary: undefined,\n    /**\n     * The `colWidths` option sets columns' widths, in pixels.\n     *\n     * The default column width is 50px. To change it, set the `colWidths` option to one of the following:\n     *\n     * | Setting     | Description                                                                                          | Example                                                           |\n     * | ----------- | ---------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------- |\n     * | A number    | Set the same width for every column                                                                  | `colWidths: 100`                                                  |\n     * | A string    | Set the same width for every column                                                                  | `colWidths: '100px'`                                              |\n     * | An array    | Set widths separately for each column                                                                | `colWidths: [100, 120, undefined]`                                |\n     * | A function  | Set column widths dynamically,<br>on each render                                                     | `colWidths(visualColumnIndex) { return visualColumnIndex * 10; }` |\n     * | `undefined` | Used by the [modifyColWidth](@/api/hooks.md#modifyColWidth) hook,<br>to detect column width changes. | `colWidths: undefined`                                            |\n     *\n     * Setting `colWidths` even for a single column disables the {@link AutoColumnSize} plugin\n     * for all columns. For this reason, if you use `colWidths`, we recommend you set a width for each one\n     * of your columns. Otherwise, every column with an undefined width defaults back to 50px,\n     * which may cut longer columns names.\n     *\n     * Read more:\n     * - [Column width](@/guides/columns/column-width.md)\n     * - [Hooks: `modifyColWidth`](@/api/hooks.md#modifyColWidth)\n     * - [`autoColumnSize`](#autoColumnSize)\n     *\n     * @memberof Options#\n     * @type {number|number[]|string|string[]|Array<undefined>|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set every column's width to 100px\n     * colWidths: 100,\n     *\n     * // set every column's width to 100px\n     * colWidths: '100px',\n     *\n     * // set the first (by visual index) column's width to 100\n     * // set the second (by visual index) column's width to 120\n     * // set the third (by visual index) column's width to `undefined`, so that it defaults to 50px\n     * // set any other column's width to the default 50px (note that longer cell values and column names can get cut)\n     * colWidths: [100, 120, undefined],\n     *\n     * // set each column's width individually, using a function\n     * colWidths(visualColumnIndex) {\n     *   return visualColumnIndex * 10;\n     * },\n     * ```\n     */\n    colWidths: undefined,\n    /**\n     * The `commentedCellClassName` option lets you add a CSS class name to cells\n     * that have comments.\n     *\n     * Read more:\n     * - [Comments](@/guides/cell-features/comments.md)\n     * - [`comments`](#comments)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'htCommentCell'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `has-comment` CSS class name\n     * // to each cell that has a comment\n     * commentedCellClassName: 'has-comment',\n     * ```\n     */\n    commentedCellClassName: 'htCommentCell',\n    /**\n     * @description\n     * The `comments` option configures the [`Comments`](@/api/comments.md) plugin.\n     *\n     * You can set the `comments` option to one of the following:\n     *\n     * | Setting   | Description                                                                                                                                                                           |\n     * | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true`    | - Enable the [`Comments`](@/api/comments.md) plugin<br>- Add comment menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md)                                 |\n     * | `false`   | Disable the [`Comments`](@/api/comments.md) plugin                                                                                                                                    |\n     * | An object | - Enable the [`Comments`](@/api/comments.md) plugin<br>- Add comment menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md)<br>- Configure comment settings |\n     *\n     * If you set the `comments` option to an object, you can configure the following comment options:\n     *\n     * | Option         | Possible settings           | Description                                         |\n     * | -------------- | --------------------------- | --------------------------------------------------- |\n     * | `displayDelay` | A number (default: `250`)   | Display comments after a delay (in milliseconds)    |\n     * | `readOnly`     | `true` \\| `false` (default) | `true`: Make comments read-only                     |\n     * | `style`        | An object                   | Set comment boxes' `width` and `height` (in pixels) |\n     *\n     * Read more:\n     * - [Comments](@/guides/cell-features/comments.md)\n     * - [Context menu](@/guides/accessories-and-menus/context-menu.md)\n     * - [`width`](#width)\n     * - [`height`](#height)\n     * - [`readOnly`](#readOnly)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     *\n     * @memberof Options#\n     * @type {boolean|object[]}\n     * @default false\n     * @category Comments\n     *\n     * @example\n     * ```js\n     * // enable the `Comments` plugin\n     * comments: true,\n     *\n     * // enable the `Comments` plugin\n     * // and configure its settings\n     * comments: {\n     *   // display all comments with a 1-second delay\n     *   displayDelay: 1000,\n     *   // make all comments read-only\n     *   readOnly: true,\n     *   // set the default size of all comment boxes\n     *   style: {\n     *     width: 300,\n     *     height: 100\n     *   }\n     * }\n     * ```\n     */\n    comments: false,\n    /**\n     * @description\n     * The `contextMenu` option configures the [`ContextMenu`](@/api/contextMenu.md) plugin.\n     *\n     * You can set the `contextMenu` option to one of the following:\n     *\n     * | Setting   | Description                                                                                                                                                                                             |\n     * | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `false`   | Disable the [`ContextMenu`](@/api/contextMenu.md) plugin                                                                                                                                                |\n     * | `true`    | - Enable the [`ContextMenu`](@/api/contextMenu.md) plugin<br>- Use the [default context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-default-options)                 |\n     * | An array  | - Enable the [`ContextMenu`](@/api/contextMenu.md) plugin<br>- Modify [individual context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-specific-options)              |\n     * | An object | - Enable the [`ContextMenu`](@/api/contextMenu.md) plugin<br>- Apply a [custom context menu configuration](@/guides/accessories-and-menus/context-menu.md#context-menu-with-a-fully-custom-configuration) |\n     *\n     * Read more:\n     * - [Context menu](@/guides/accessories-and-menus/context-menu.md)\n     * - [Context menu: Context menu with default options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-default-options)\n     * - [Context menu: Context menu with specific options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-specific-options)\n     * - [Context menu: Context menu with fully custom configuration options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-a-fully-custom-configuration)\n     * - [Plugins: `ContextMenu`](@/api/contextMenu.md)\n     *\n     * @memberof Options#\n     * @type {boolean|string[]|object}\n     * @default undefined\n     * @category ContextMenu\n     *\n     * @example\n     * ```js\n     * // enable the `ContextMenu` plugin\n     * // use the default context menu options\n     * contextMenu: true,\n     *\n     * // enable the `ContextMenu` plugin\n     * // and modify individual context menu options\n     * contextMenu: ['row_above', 'row_below', '---------', 'undo', 'redo'],\n     *\n     * // enable the `ContextMenu` plugin\n     * // and apply a custom context menu configuration\n     * contextMenu: {\n     *   items: {\n     *     'option1': {\n     *       name: 'Option 1'\n     *     },\n     *     'option2': {\n     *       name: 'Option 2',\n     *       submenu: {\n     *         items: [\n     *           {\n     *             key: 'option2:suboption1',\n     *             name: 'Suboption 1',\n     *             callback: function(key, options) {\n     *               ...\n     *             }\n     *           },\n     *           ...\n     *         ]\n     *       }\n     *     }\n     *   }\n     * },\n     * ```\n     */\n    contextMenu: undefined,\n    /**\n     * @description\n     * The `copyable` option determines whether a cell's value can be copied to the clipboard or not.\n     *\n     * You can set the `copyable` option to one of the following:\n     *\n     * | Setting                                                                                                        | Description                                                                                                            |\n     * | -------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------- |\n     * | `true` (default)                                                                                               | - On pressing <kbd>**Ctrl**</kbd>/<kbd>**Cmd**</kbd>+<kbd>**C**</kbd>, add the cell's value to the clipboard         |\n     * | `false`<br>(default for the [`password`](@/guides/cell-types/password-cell-type.md) [cell type](#type))        | - On pressing <kbd>**Ctrl**</kbd>/<kbd>**Cmd**</kbd>+<kbd>**C**</kbd>, add an empty string (`\"\"`) to the clipboard   |\n     *\n     * Read more:\n     * - [Clipboard](@/guides/cell-features/clipboard.md)\n     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)\n     * - [Password cell type](@/guides/cell-types/password-cell-type.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // enable copying for each cell of the entire grid\n     * copyable: true,\n     *\n     * // enable copying for individual columns\n     * columns: [\n     *   {\n     *     // enable copying for each cell of this column\n     *     copyable: true\n     *   },\n     *   {\n     *     // disable copying for each cell of this column\n     *     copyable: false\n     *   }\n     * ]\n     *\n     * // enable copying for specific cells\n     * cells: [\n     *   {\n     *     cell: 0,\n     *     row: 0,\n     *     // disable copying for cell (0, 0)\n     *     copyable: false,\n     *   }\n     * ],\n     * ```\n     */\n    copyable: true,\n    /**\n     * The `copyPaste` option configures the [`CopyPaste`](@/api/copyPaste.md) plugin.\n     *\n     * You can set the `copyPaste` option to one of the following:\n     *\n     * | Setting           | Description                                                                                                            |\n     * | ----------------- | ---------------------------------------------------------------------------------------------------------------------- |\n     * | `true` (default)  | Enable the [`CopyPaste`](@/api/copyPaste.md) plugin with the default configuration                                     |\n     * | `false`           | Disable the [`CopyPaste`](@/api/copyPaste.md) plugin                                                                   |\n     * | An object         | - Enable the [`CopyPaste`](@/api/copyPaste.md) plugin<br>- Modify the [`CopyPaste`](@/api/copyPaste.md) plugin options |\n     *\n     * ##### copyPaste: Additional options\n     *\n     * If you set the `copyPaste` option to an object, you can set the following `CopyPaste` plugin options:\n     *\n     * | Option                   | Possible settings                                  | Description                                                                                                                                                                                         |\n     * | ------------------------ | -------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `columnsLimit`           | A number (default: `Infinity`)                     | The maximum number of columns that can be copied                                                                                                                                                    |\n     * | `rowsLimit`              | A number (default: `Infinity`)                     | The maximum number of columns that can be copied                                                                                                                                                    |\n     * | `pasteMode`              | `'overwrite'` \\| `'shift_down'` \\| `'shift_right'` | When pasting:<br>`'overwrite'`: overwrite the currently-selected cells<br>`'shift_down'`: move the currently-selected cells down<br>`'shift_right'`: move the currently-selected cells to the right |\n     * | `copyColumnHeaders`      | Boolean (default: `false`)                         | `true`: add a context menu option for copying cells along with their nearest column headers                                                                                                         |\n     * | `copyColumnGroupHeaders` | Boolean (default: `false`)                         | `true`: add a context menu option for copying cells along with all their related columns headers                                                                                                    |\n     * | `copyColumnHeadersOnly`  | Boolean (default: `false`)                         | `true`: add a context menu option for copying column headers nearest to the selected cells (without copying cells)                                                                    |\n     * | `uiContainer`            | An HTML element                                    | The UI container for the secondary focusable element                                                                                                                                                |\n     *\n     * Read more:\n     * - [Plugins: `CopyPaste`](@/api/copyPaste.md)\n     * - [Guides: Clipboard](@/guides/cell-features/clipboard.md)\n     *\n     * @memberof Options#\n     * @type {object|boolean}\n     * @default true\n     * @category CopyPaste\n     *\n     * @example\n     * ```js\n     * // enable the plugin with the default configuration\n     * copyPaste: true // set by default\n     *\n     * // disable the plugin\n     * copyPaste: false,\n     *\n     * // enable the plugin with a custom configuration\n     * copyPaste: {\n     *   // set a maximum number of columns that can be copied\n     *   columnsLimit: 25,\n     *\n     *   // set a maximum number of rows that can be copied\n     *   rowsLimit: 50,\n     *\n     *   // set the paste behavior\n     *   pasteMode: 'shift_down',\n     *\n     *   // add the option to copy cells along with their nearest column headers\n     *   copyColumnHeaders: true,\n     *\n     *   // add the option to copy cells along with all their related columns headers\n     *   copyColumnGroupHeaders: true,\n     *\n     *   // add the option to copy just column headers (without copying cells)\n     *   copyColumnHeadersOnly: true,\n     *\n     *   // set a UI container\n     *   uiContainer: document.body,\n     * },\n     * ```\n     */\n    copyPaste: true,\n    /**\n     * The `correctFormat` option configures whether incorrectly-formatted times and dates are amended or not.\n     *\n     * When the user enters dates and times, Handsontable can automatically adjust their format\n     * to match the [`dateFormat`](#dateFormat) and [`timeFormat`](@/guides/cell-types/time-cell-type.md) settings.\n     *\n     * You can set the `correctFormat` option to one of the following:\n     *\n     * | Setting           | Description                                                                                                                                               |\n     * | ----------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `false` (default) | Don't correct the format of the entered date or time (treat the entered date or time as invalid)                                                          |\n     * | `true`            | Correct the format of the entered date or time to match the [`dateFormat`](#dateFormat) or [`timeFormat`](@/guides/cell-types/time-cell-type.md) settings |\n     *\n     * Read more:\n     * - [Date cell type](@/guides/cell-types/date-cell-type.md)\n     * - [Time cell type](@/guides/cell-types/time-cell-type.md)\n     * - [`dateFormat`](#dateFormat)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *   // set the `type` of each cell in this column to `date`\n     *   type: 'date',\n     *   // for every `date` cell of this column, set the date format to `YYYY-MM-DD`\n     *   dateFormat: 'YYYY-MM-DD',\n     *   // enforce the `YYYY-MM-DD` date format\n     *   correctFormat: true\n     *   },\n     *\n     *   {\n     *   // set the `type` of each cell in this column to `time`\n     *   type: 'time',\n     *   // for every `time` cell of this column, set the time format to `h:mm:ss a`\n     *   timeFormat: 'h:mm:ss a',\n     *   // enforce the `h:mm:ss a` time format\n     *   correctFormat: true\n     *   },\n     * ],\n     * ```\n     */\n    correctFormat: false,\n    /**\n     * The `currentColClassName` option lets you add a CSS class name\n     * to each cell of the currently-visible, currently-selected columns.\n     *\n     * Read more:\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `your-class-name` CSS class name\n     * // to each cell of the currently-visible, currently-selected columns\n     * currentColClassName: 'your-class-name',\n     * ```\n     */\n    currentColClassName: undefined,\n    /**\n     * The `currentHeaderClassName` option lets you add a CSS class name\n     * to every currently-visible, currently-selected header.\n     *\n     * Read more:\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'ht__highlight'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add an `ht__highlight` CSS class name\n     * // to every currently-visible, currently-selected header\n     * currentHeaderClassName: 'ht__highlight',\n     * ```\n     */\n    currentHeaderClassName: 'ht__highlight',\n    /**\n     * The `currentRowClassName` option lets you add a CSS class name\n     * to each cell of the currently-visible, currently-selected rows.\n     *\n     * Read more:\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `your-class-name` CSS class name\n     * // to each cell of the currently-visible, currently-selected rows\n     * currentRowClassName: 'your-class-name',\n     * ```\n     */\n    currentRowClassName: undefined,\n    /**\n     * @description\n     * The `customBorders` option configures the [`CustomBorders`](@/api/customBorders.md) plugin.\n     *\n     * To enable the [`CustomBorders`](@/api/customBorders.md) plugin\n     * (and add its menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md)),\n     * set the `customBorders` option to `true`.\n     *\n     * To enable the [`CustomBorders`](@/api/customBorders.md) plugin\n     * and add a predefined border around a particular cell,\n     * set the `customBorders` option to an array of objects.\n     * Each object represents a border configuration for one cell, and has the following properties:\n     *\n     * | Property | Sub-properties     | Types                              | Description                                                       |\n     * | -------- | ------------------ | ---------------------------------- | ----------------------------------------------------------------- |\n     * | `row`    | -                  | `row`: Number                      | The cell's row coordinate.                                        |\n     * | `col`    | -                  | `col`: Number                      | The cell's column coordinate.                                     |\n     * | `start`  | `width`<br>`color` | `width`: Number<br>`color`: String | If the [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default): `start` sets the width (`width`) and color (`color`) of the left-hand border.<br><br>If the [layout direction](@/guides/internationalization/layout-direction.md) is RTL: `start` sets the width (`width`) and color (`color`) of the right-hand border. |\n     * | `end`    | `width`<br>`color` | `width`: Number<br>`color`: String | If the [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default): `end` sets the width (`width`) and color (`color`) of the right-hand border.<br><br>If the [layout direction](@/guides/internationalization/layout-direction.md) is RTL: `end` sets the width (`width`) and color (`color`) of the left-hand border. |\n     * | `top`    | `width`<br>`color` | `width`: Number<br>`color`: String | Sets the width (`width`) and color (`color`) of the top border. |\n     * | `bottom` | `width`<br>`color` | `width`: Number<br>`color`: String | Sets the width (`width`) and color (`color`) of the bottom border. |\n     *\n     * To enable the [`CustomBorders`](@/api/customBorders.md) plugin\n     * and add a predefined border around a range of cells,\n     * set the `customBorders` option to an array of objects.\n     * Each object represents a border configuration for a single range of cells, and has the following properties:\n     *\n     * | Property | Sub-properties                               | Types                                                            | Description                                                                                  |\n     * | -------- | -------------------------------------------- | ---------------------------------------------------------------- | -------------------------------------------------------------------------------------------- |\n     * | `range`  | `from` {`row`, `col`}<br>`to` {`row`, `col`} | `from`: Object<br>`to`: Object<br>`row`: Number<br>`col`: Number | If the [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default):<br>- `from` selects the range's top-left corner.<br>- `to` selects the range's bottom-right corner.<br><br>If the [layout direction](@/guides/internationalization/layout-direction.md) is RTL: <br>- `from` selects the range's top-right corner.<br>- `to` selects the range's bottom-left corner. |\n     * | `start`  | `width`<br>`color` | `width`: Number<br>`color`: String | If the [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default): `start` sets the width (`width`) and color (`color`) of the left-hand border.<br><br>If the [layout direction](@/guides/internationalization/layout-direction.md) is RTL: `start` sets the width (`width`) and color (`color`) of the right-hand border. |\n     * | `end`    | `width`<br>`color` | `width`: Number<br>`color`: String | If the [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default): `end` sets the width (`width`) and color (`color`) of the right-hand border.<br><br>If the [layout direction](@/guides/internationalization/layout-direction.md) is RTL: `end` sets the width (`width`) and color (`color`) of the left-hand border. |\n     * | `top`    | `width`<br>`color`                           | `width`: Number<br>`color`: String                               | Sets the width (`width`) and color (`color`) of the top border. |\n     * | `bottom` | `width`<br>`color`                           | `width`: Number<br>`color`: String                               | Sets the width (`width`) and color (`color`) of the bottom border. |\n     *\n     * Read more:\n     * - [Formatting cells: Custom cell borders](@/guides/cell-features/formatting-cells.md#custom-cell-borders)\n     * - [Context menu](@/guides/accessories-and-menus/context-menu.md)\n     * - [Plugins: `CustomBorders`](@/api/customBorders.md)\n     * - [Layout direction](@/guides/internationalization/layout-direction.md)\n     * - [`layoutDirection`](#layoutDirection)\n     *\n     * @memberof Options#\n     * @type {boolean|object[]}\n     * @default false\n     * @category CustomBorders\n     *\n     * @example\n     * ```js\n     * // enable the `CustomBorders` plugin\n     * customBorders: true,\n     *\n     * // enable the `CustomBorders` plugin\n     * // and add a predefined border for a particular cell\n     * customBorders: [\n     *   // add an object with a border configuration for one cell\n     *   {\n     *     // set the cell's row coordinate\n     *     row: 2,\n     *     // set the cell's column coordinate\n     *     col: 2,\n     *     // set the left/right border's width and color\n     *     start: {\n     *       width: 2,\n     *       color: 'red'\n     *     },\n     *     // set the right/left border's width and color\n     *     end: {\n     *       width: 1,\n     *       color: 'green'\n     *     },\n     *     // set the top border's width and color\n     *     top: '',\n     *     // set the bottom border's width and color\n     *     bottom: ''\n     *   }\n     * ],\n     *\n     * // enable the `CustomBorders` plugin\n     * // and add a predefined border for a range of cells\n     * customBorders: [\n     *   // add an object with a border configuration for one range of cells\n     *   {\n     *     // select a range of cells\n     *     range: {\n     *       // set the range's top-left corner\n     *       from: {\n     *         row: 1,\n     *         col: 1\n     *       },\n     *       // set the range's bottom-right corner\n     *       to: {\n     *         row: 3,\n     *         col: 4\n     *       }\n     *     },\n     *     // set the left/right border's width and color\n     *     start: {\n     *       width: 2,\n     *       color: 'red'\n     *     },\n     *     // set the right/left border's width and color\n     *     end: {},\n     *     // set the top border's width and color\n     *     top: {},\n     *     // set the bottom border's width and color\n     *     bottom: {}\n     *   }\n     * ],\n     * ```\n     */\n    customBorders: false,\n    /**\n     * @description\n     * The `data` option sets the initial [data](@/guides/getting-started/binding-to-data.md) of your Handsontable instance.\n     *\n     * Handsontable's data is bound to your source data by reference (i.e. when you edit Handsontable's data, your source data alters as well).\n     *\n     * You can set the `data` option:\n     * - Either to an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays).\n     * - Or to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects).\n     *\n     * If you don't set the `data` option (or set it to `null`), Handsontable renders as an empty 5x5 grid by default.\n     *\n     * Read more:\n     * - [Binding to data](@/guides/getting-started/binding-to-data.md)\n     * - [`dataSchema`](#dataSchema)\n     * - [`startRows`](#startRows)\n     * - [`startCols`](#startCols)\n     *\n     * @memberof Options#\n     * @type {Array[]|object[]}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // as an array of arrays\n     * data: [\n     *   ['A', 'B', 'C'],\n     *   ['D', 'E', 'F'],\n     *   ['G', 'H', 'J']\n     * ]\n     *\n     * // as an array of objects\n     * data: [\n     *   {id: 1, name: 'Ted Right'},\n     *   {id: 2, name: 'Frank Honest'},\n     *   {id: 3, name: 'Joan Well'},\n     *   {id: 4, name: 'Gail Polite'},\n     *   {id: 5, name: 'Michael Fair'},\n     * ]\n     * ```\n     */\n    data: undefined,\n    /**\n     * @description\n     * When the [`data`](#data) option is set to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects)\n     * (or is empty), the `dataSchema` option defines the structure of new rows.\n     *\n     * Using the `dataSchema` option, you can start out with an empty grid.\n     *\n     * You can set the `dataSchema` option to one of the following:\n     * - An object\n     * - A function\n     *\n     * Read more:\n     * - [Binding to data: Array of objects with custom data schema](@/guides/getting-started/binding-to-data.md#array-of-objects-with-custom-data-schema)\n     * - [Binding to data: Function data source and schema](@/guides/getting-started/binding-to-data.md#function-data-source-and-schema)\n     * - [`data`](#data)\n     *\n     * @memberof Options#\n     * @type {object|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // with `dataSchema`, you can start with an empty grid\n     * data: null,\n     * dataSchema: {id: null, name: {first: null, last: null}, address: null},\n     * colHeaders: ['ID', 'First Name', 'Last Name', 'Address'],\n     * columns: [\n     *   {data: 'id'},\n     *   {data: 'name.first'},\n     *   {data: 'name.last'},\n     *   {data: 'address'}\n     * ],\n     * startRows: 5,\n     * minSpareRows: 1\n     * ```\n     */\n    dataSchema: undefined,\n    /**\n     * The `dateFormat` option configures the date format accepted by [`date`](@/guides/cell-types/date-cell-type.md) cells.\n     *\n     * You can set the `dateFormat` option to a string with a proper date format. The default value is: `'DD/MM/YYYY'`.\n     *\n     * To automatically correct dates whose format doesn't match the `dateFormat` setting, use the [`correctFormat`](#correctFormat) option.\n     *\n     * Read more:\n     * - [Date cell type](@/guides/cell-types/date-cell-type.md)\n     * - [`correctFormat`](#correctFormat)\n     * - [`defaultDate`](#defaultDate)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'DD/MM/YYYY'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *   // set the `type` of each cell in this column to `date`\n     *   type: 'date',\n     *   // for every `date` cell of this column, set the date format to `YYYY-MM-DD`\n     *   dateFormat: 'YYYY-MM-DD',\n     *   },\n     * ],\n     * ```\n     */\n    dateFormat: 'DD/MM/YYYY',\n    /**\n     * The `datePickerConfig` option configures the `date` [cell editor](@/guides/cell-functions/cell-editor.md)'s date picker, which uses an external dependency: [Pikaday](https://github.com/Pikaday/Pikaday/tree/1.8.2).\n     *\n     * You can set the `datePickerConfig` option to an object with any of the available [Pikaday options](https://github.com/Pikaday/Pikaday/tree/1.8.2#configuration),\n     * except for the following, which are always overwritten by the `date` [cell editor](@/guides/cell-functions/cell-editor.md):\n     * - `bound`\n     * - `container`\n     * - `field`\n     * - `trigger`\n     *\n     * If the `datePickerConfig` option is not defined, the `date` [cell editor](@/guides/cell-functions/cell-editor.md) overwrites the following [Pikaday options](https://github.com/Pikaday/Pikaday/tree/1.8.2#configuration) as well:\n     *\n     * | Pikaday option       | Handsontable's setting |\n     * | -------------------- | ---------------------- |\n     * | `format`             | `'DD/MM/YYYY'`         |\n     * | `reposition`         | `false`                |\n     *\n     * Read more:\n     * - [`editor`](#editor)\n     * - [`dateFormat`](#dateFormat)\n     * - [Cell editor](@/guides/cell-functions/cell-editor.md)\n     * - [All Pikaday options &#8594;](https://github.com/Pikaday/Pikaday/tree/1.8.2#configuration)\n     *\n     * @memberof Options#\n     * @type {object}\n     * @default undefined\n     * @category Core\n     */\n    datePickerConfig: undefined,\n    /**\n     * The `defaultDate` option configures the date displayed\n     * in empty [`date`](@/guides/cell-types/date-cell-type.md) cells.\n     *\n     * You can set the `defaultDate` option to a string.\n     *\n     * Read more:\n     * - [Date cell type](@/guides/cell-types/date-cell-type.md)\n     * - [`dateFormat`](#dateFormat)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // set the `type` of each cell in this column to `date`\n     *     type: 'date',\n     *     // in every empty `date` cell of this column, display `2015-02-02`\n     *     defaultDate: '2015-02-02'\n     *   }\n     * ],\n     * ```\n     */\n    defaultDate: undefined,\n    /**\n     * @description\n     * The `disableVisualSelection` option configures how\n     * [selection](@/guides/cell-features/selection.md) is shown.\n     *\n     * You can set the `disableVisualSelection` option to one of the following:\n     *\n     * | Setting           | Description                                                                                         |\n     * | ----------------- | --------------------------------------------------------------------------------------------------- |\n     * | `false` (default) | - Show single-cell selection<br>- Show range selection<br>- Show header selection                   |\n     * | `true`            | - Don't show single-cell selection<br>- Don't show range selection<br>- Don't show header selection |\n     * | `'current'`       | - Don't show single-cell selection<br>- Show range selection<br>- Show header selection             |\n     * | `'area'`          | - Show single-cell selection<br>- Don't show range selection<br>- Show header selection             |\n     * | `'header'`        | - Show single-cell selection<br>- Show range selection<br>- Don't show header selection             |\n     * | An array          | A combination of `'current'`, `'area'`, and/or `'header'`                                           |\n     *\n     * Read more:\n     * - [Selection](@/guides/cell-features/selection.md)\n     *\n     * @memberof Options#\n     * @type {boolean|string|string[]}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // don't show single-cell selection\n     * // don't show range selection\n     * // don't show header selection\n     * disableVisualSelection: true,\n     *\n     * // don't show single-cell selection\n     * // show range selection\n     * // show header selection\n     * disableVisualSelection: 'current',\n     *\n     * // don't show single-cell selection\n     * // don't show range selection\n     * // show header selection\n     * disableVisualSelection: ['current', 'area'],\n     * ```\n     */\n    disableVisualSelection: false,\n    /**\n     * @description\n     * The `dragToScroll` option configures the [`DragToScroll`](@/api/dragToScroll.md) plugin.\n     *\n     * You can set the `dragToScroll` option to one of the following:\n     *\n     * | Setting          | Description                                                                 |\n     * | ---------------- | --------------------------------------------------------------------------- |\n     * | `true` (default) | When selection reaches the edge of the grid's viewport, scroll the viewport |\n     * | `false`          | Don't scroll the viewport                                                   |\n     *\n     * Read more:\n     * - [Plugins: `DragToScroll`](@/api/dragToScroll.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category DragToScroll\n     *\n     * @example\n     * ```js\n     * // when selection reaches the edge of the grid's viewport, scroll the viewport\n     * dragToScroll: true,\n     * ```\n     */\n    dragToScroll: true,\n    /**\n     * The `dropdownMenu` option configures the [`DropdownMenu`](@/api/dropdownMenu.md) plugin.\n     *\n     * You can set the `dropdownMenu` option to one of the following:\n     *\n     * | Setting   | Description                                                                                                                                                                                  |\n     * | --------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `false`   | Disable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin                                                                                                                                   |\n     * | `true`    | - Enable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin<br>- Use the [default context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-default-options)    |\n     * | An array  | - Enable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin<br>- Modify [individual context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-specific-options) |\n     * | An object | - Enable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin<br>- Apply a custom dropdown menu configuration                                                                                  |\n     *\n     * Read more:\n     * - [Context menu](@/guides/accessories-and-menus/context-menu.md)\n     * - [Plugins: `DropdownMenu`](@/api/dropdownMenu.md)\n     *\n     * @memberof Options#\n     * @type {boolean|object|string[]}\n     * @default undefined\n     * @category DropdownMenu\n     *\n     * @example\n     * ```js\n     * // enable the `DropdownMenu` plugin\n     * // use the default context menu options\n     * dropdownMenu: true,\n     *\n     * // enable the `DropdownMenu` plugin\n     * // and modify individual context menu options\n     * dropdownMenu: ['row_above', 'row_below', '---------', 'undo', 'redo'],\n     *\n     * // enable the `DropdownMenu` plugin\n     * // and apply a custom dropdown menu configuration\n     * dropdownMenu: {\n     *   items: {\n     *     'option1': {\n     *       name: 'Option 1'\n     *     },\n     *     'option2': {\n     *       name: 'Option 2',\n     *       submenu: {\n     *         items: [\n     *           {\n     *             key: 'option2:suboption1',\n     *             name: 'Suboption 1',\n     *             callback(key, options) {\n     *               ...\n     *             }\n     *           },\n     *           ...\n     *         ]\n     *       }\n     *     }\n     *   }\n     * },\n     * ```\n     */\n    dropdownMenu: undefined,\n    /**\n     * The `editor` option sets a [cell editor](@/guides/cell-functions/cell-editor.md) for a cell.\n     *\n     * You can set the `editor` option to one of the following [cell editor aliases](@/guides/cell-functions/cell-editor.md):\n     *\n     * | Alias               | Cell editor function                                                       |\n     * | ------------------- | -------------------------------------------------------------------------- |\n     * | A custom alias      | Your [custom cell editor](@/guides/cell-functions/cell-editor.md) function |\n     * | `'autocomplete'`    | `AutocompleteEditor`                                                       |\n     * | `'base'`            | `BaseEditor`                                                               |\n     * | `'checkbox'`        | `CheckboxEditor`                                                           |\n     * | `'date'`            | `DateEditor`                                                               |\n     * | `'dropdown'`        | `DropdownEditor`                                                           |\n     * | `'handsontable'`    | `HandsontableEditor`                                                       |\n     * | `'numeric'`         | `NumericEditor`                                                            |\n     * | `'password'`        | `PasswordEditor`                                                           |\n     * | `'select'`          | `SelectEditor`                                                             |\n     * | `'text'`            | `TextEditor`                                                               |\n     * | `'time'`            | `TimeEditor`                                                               |\n     *\n     * To disable editing cells through cell editors,\n     * set the `editor` option to `false`.\n     * You'll still be able to change cells' content through Handsontable's API\n     * or through plugins (e.g. [`CopyPaste`](@/api/copyPaste.md)), though.\n     *\n     * To set the [`editor`](#editor), [`renderer`](#renderer), and [`validator`](#validator)\n     * options all at once, use the [`type`](#type) option.\n     *\n     * Read more:\n     * - [Cell editor](@/guides/cell-functions/cell-editor.md)\n     * - [Cell type](@/guides/cell-types/cell-type.md)\n     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)\n     * - [`type`](#type)\n     *\n     * @memberof Options#\n     * @type {string|Function|boolean}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // use the `numeric` editor for each cell of the entire grid\n     * editor: 'numeric',\n     *\n     * // apply the `editor` option to individual columns\n     * columns: [\n     *   {\n     *     // use the `autocomplete` editor for each cell of this column\n     *     editor: 'autocomplete'\n     *   },\n     *   {\n     *     // disable editing cells through cell editors for each cell of this column\n     *     editor: false\n     *   }\n     * ]\n     * ```\n     */\n    editor: undefined,\n    /**\n     * The `enterBeginsEditing` option configures the action of the <kbd>**Enter**</kbd> key.\n     *\n     * You can set the `enterBeginsEditing` option to one of the following:\n     *\n     * | Setting          | Description                                                                                                                                                                                               |\n     * | ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true` (default) | - On pressing <kbd>**Enter**</kbd> once, enter the editing mode of the active cell<br>- On pressing <kbd>**Enter**</kbd> twice, move to another cell,<br>as configured by the [`enterMoves`](#enterMoves) setting |\n     * | `false`          | - On pressing <kbd>**Enter**</kbd> once, move to another cell,<br>as configured by the [`enterMoves`](#enterMoves) setting                                                                                    |\n     *\n     * Read more:\n     * - [`enterMoves`](#enterMoves)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // press Enter once to start editing\n     * // press Enter twice to move to another cell\n     * enterBeginsEditing: true,\n     *\n     * // press Enter once to move to another cell\n     * enterBeginsEditing: false,\n     * ```\n     */\n    enterBeginsEditing: true,\n    /**\n     * The `enterMoves` option configures the action of the <kbd>**Enter**</kbd> key.\n     *\n     * If the [`enterBeginsEditing`](#enterBeginsEditing) option is set to `true`,\n     * the `enterMoves` setting applies to the **second** pressing of the <kbd>**Enter**</kbd> key.\n     *\n     * If the [`enterBeginsEditing`](#enterBeginsEditing) option is set to `false`,\n     * the `enterMoves` setting applies to the **first** pressing of the <kbd>**Enter**</kbd> key.\n     *\n     * You can set the `enterMoves` option to an object with the following properties\n     * (or to a function that returns such an object):\n     *\n     * | Property | Type   | Description                                                                                                                                              |\n     * | -------- | ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `col`    | Number | - On pressing <kbd>**Enter**</kbd>, move selection `col` columns right<br>- On pressing <kbd>**Shift**</kbd>+<kbd>**Enter**</kbd>, move selection `col` columns left |\n     * | `row`    | Number | - On pressing <kbd>**Enter**</kbd>, move selection `row` rows down<br>- On pressing <kbd>**Shift**</kbd>+<kbd>**Enter**</kbd>, move selection `row` rows up          |\n     *\n     * Read more:\n     * - [`enterBeginsEditing`](#enterBeginsEditing)\n     *\n     * @memberof Options#\n     * @type {object|Function}\n     * @default {col: 0, row: 1}\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // on pressing Enter, move selection 1 column right and 1 row down\n     * // on pressing Shift+Enter, move selection 1 column left and 1 row up\n     * enterMoves: {col: 1, row: 1},\n     *\n     * // the same setting, as a function\n     * // `event` is a DOM Event object received on pressing Enter\n     * // you can use it to check whether the user pressed Enter or Shift+Enter\n     * enterMoves(event) {\n     *   return {col: 1, row: 1};\n     * },\n     * ```\n     */\n    enterMoves: {\n      col: 0,\n      row: 1\n    },\n    /**\n     * The `fillHandle` option configures the [Autofill](@/api/autofill.md) plugin.\n     *\n     * You can set the `fillHandle` option to one the following:\n     *\n     * | Setting        | Description                                                                |\n     * | -------------- | -------------------------------------------------------------------------- |\n     * | `true`         | - Enable autofill in all directions<br>- Add the fill handle               |\n     * | `false`        | Disable autofill                                                           |\n     * | `'vertical'`   | - Enable vertical autofill<br>- Add the fill handle                        |\n     * | `'horizontal'` | - Enable horizontal autofill<br>- Add the fill handle                      |\n     * | An object      | - Enable autofill<br>- Add the fill handle<br>- Configure autofill options |\n     *\n     * If you set the `fillHandle` option to an object, you can configure the following autofill options:\n     *\n     * | Option          | Possible settings              | Description                                                                                               |\n     * | --------------- | ------------------------------ | --------------------------------------------------------------------------------------------------------- |\n     * | `autoInsertRow` | `true` (default) \\| `false`    | `true`: When you reach the grid's bottom, add new rows<br>`false`: When you reach the grid's bottom, stop |\n     * | `direction`     | `'vertical'` \\| `'horizontal'` | `'vertical'`: Enable vertical autofill<br>`'horizontal'`: Enable horizontal autofill                      |\n     *\n     * Read more:\n     * - [AutoFill values](@/guides/cell-features/autofill-values.md)\n     *\n     * @memberof Options#\n     * @type {boolean|string|object}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // enable autofill in all directions\n     * // with `autoInsertRow` enabled\n     * fillHandle: true,\n     *\n     * // enable vertical autofill\n     * // with `autoInsertRow` enabled\n     * fillHandle: 'vertical',\n     *\n     * // enable horizontal autofill\n     * // with `autoInsertRow` enabled\n     * fillHandle: 'horizontal',\n     *\n     * // enable autofill in all directions\n     * // with `autoInsertRow` disabled\n     * fillHandle: {\n     *   autoInsertRow: false,\n     * },\n     *\n     * // enable vertical autofill\n     * // with `autoInsertRow` disabled\n     * fillHandle: {\n     *   autoInsertRow: false,\n     *   direction: 'vertical'\n     * },\n     * ```\n     */\n    fillHandle: {\n      autoInsertRow: false\n    },\n    /**\n     * The `filter` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells'\n     * lists are updated by the end user's input.\n     *\n     * You can set the `filter` option to one of the following:\n     *\n     * | Setting          | Description                                                                                                           |\n     * | ---------------- | --------------------------------------------------------------------------------------------------------------------- |\n     * | `true` (default) | When the end user types into the input area, only options matching the input are displayed                            |\n     * | `false`          | When the end user types into the input area, all options are displayed<br>(options matching the input are put in bold |\n     *\n     * Read more:\n     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [`source`](#source)\n     * - [`filteringCaseSensitive`](#filteringCaseSensitive)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [{\n     *   // set the `type` of each cell in this column to `autocomplete`\n     *   type: 'autocomplete',\n     *   // set options available in every `autocomplete` cell of this column\n     *   source: ['A', 'B', 'C'],\n     *   // when the end user types in `A`, display only the A option\n     *   // when the end user types in `B`, display only the B option\n     *   // when the end user types in `C`, display only the C option\n     *   filter: true\n     * }],\n     * ```\n     */\n    filter: true,\n    /**\n     * The `filteringCaseSensitive` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells'\n     * input is case-sensitive.\n     *\n     * You can set the `filteringCaseSensitive` option to one of the following:\n     *\n     * | Setting           | Description                                                                                        |\n     * | ----------------- | -------------------------------------------------------------------------------------------------- |\n     * | `false` (default) | [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells' input is not case-sensitive |\n     * | `true`            | [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells' input is case-sensitive     |\n     *\n     * Read more:\n     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [`source`](#source)\n     * - [`filter`](#filter)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     type: 'autocomplete',\n     *     source: [ ... ],\n     *     // match case while searching autocomplete options\n     *     filteringCaseSensitive: true\n     *   }\n     * ],\n     * ```\n     */\n    filteringCaseSensitive: false,\n    /**\n     * The `filters` option configures the [`Filters`](@/api/filters.md) plugin.\n     *\n     * You can set the `filters` option to one of the following:\n     *\n     * | Setting | Description                                      |\n     * | ------- | ------------------------------------------------ |\n     * | `false` | Disable the [`Filters`](@/api/filters.md) plugin |\n     * | `true`  | Enable the [`Filters`](@/api/filters.md) plugin  |\n     *\n     * Read more:\n     * - [Column filter](@/guides/columns/column-filter.md)\n     * - [Plugins: `Filters`](@/api/filters.md)\n     * - [`dropdownMenu`](#dropdownMenu)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default undefined\n     * @category Filters\n     *\n     * @example\n     * ```js\n     * // enable the `Filters` plugin\n     * filters: true,\n     * ```\n     */\n    filters: undefined,\n    /**\n     * `fixedColumnsLeft` is a legacy option.\n     *\n     * If your grid's [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default), `fixedColumnsLeft` acts like the [`fixedColumnsStart`](#fixedColumnsStart) option.\n     *\n     * If your grid's [layout direction](@/guides/internationalization/layout-direction.md) is RTL, using `fixedColumnsLeft` throws an error.\n     *\n     * Use [`fixedColumnsStart`](#fixedColumnsStart), which works in any layout direction.\n     *\n     * Read more:\n     * - [`fixedColumnsStart`](#fixedcolumnsstart)\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // freeze the first 3 columns from the left\n     * fixedColumnsLeft: 3,\n     * ```\n     */\n    fixedColumnsLeft: 0,\n    /**\n     * If your grid's [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default), the `fixedColumnsStart` option sets the number of [frozen columns](@/guides/columns/column-freezing.md) at the left-hand edge of the grid.\n     *\n     * If your grid's [layout direction](@/guides/internationalization/layout-direction.md) is RTL, the `fixedColumnsStart` option sets the number of [frozen columns](@/guides/columns/column-freezing.md) at the right-hand edge of the grid.\n     *\n     * Read more:\n     * - [Column freezing](@/guides/columns/column-freezing.md)\n     * - [Layout direction](@/guides/internationalization/layout-direction.md)\n     * - [`fixedColumnsLeft`](#fixedcolumnsleft)\n     * - [`layoutDirection`](#layoutDirection)\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // when `layoutDirection` is set to `inherit` (default)\n     * // freeze the first 3 columns from the left or from the right\n     * // depending on your HTML document's `dir` attribute\n     * layoutDirection: 'inherit',\n     * fixedColumnsStart: 3,\n     *\n     * // when `layoutDirection` is set to `rtl`\n     * // freeze the first 3 columns from the right\n     * // regardless of your HTML document's `dir` attribute\n     * layoutDirection: 'rtl',\n     * fixedColumnsStart: 3,\n     *\n     * // when `layoutDirection` is set to `ltr`\n     * // freeze the first 3 columns from the left\n     * // regardless of your HTML document's `dir` attribute\n     * layoutDirection: 'ltr',\n     * fixedColumnsStart: 3,\n     * ```\n     */\n    fixedColumnsStart: 0,\n    /**\n     * The `fixedRowsBottom` option sets the number of [frozen rows](@/guides/rows/row-freezing.md)\n     * at the bottom of the grid.\n     *\n     * Read more:\n     * - [Row freezing](@/guides/rows/row-freezing.md)\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // freeze the bottom 3 rows\n     * fixedRowsBottom: 3,\n     * ```\n     */\n    fixedRowsBottom: 0,\n    /**\n     * The `fixedRowsTop` option sets the number of [frozen rows](@/guides/rows/row-freezing.md) at the top of the grid.\n     *\n     * Read more:\n     * - [Row freezing](@/guides/rows/row-freezing.md)\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // freeze the top 3 rows\n     * fixedRowsTop: 3,\n     * ```\n     */\n    fixedRowsTop: 0,\n    /**\n     * The `formulas` option configures the [`Formulas`](@/api/formulas.md) plugin.\n     *\n     * The [`Formulas`](@/api/formulas.md) plugin uses the [HyperFormula](https://handsontable.github.io/hyperformula/) calculation engine.\n     * To install [HyperFormula](https://handsontable.github.io/hyperformula/), read the following:\n     * - [Formula calculation: Initialization methods](@/guides/formulas/formula-calculation.md#initialization-methods)\n     *\n     * You can set the `formulas` option to an object with the following properties:\n     *\n     * | Property    | Possible values                                                                                                                                                                                                        |\n     * | ----------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `engine`    | `HyperFormula` \\|<br>A [HyperFormula](https://handsontable.github.io/hyperformula/) instance \\|<br>A [HyperFormula configuration](https://handsontable.github.io/hyperformula/api/interfaces/configparams.html) object |\n     * | `sheetId`   | A number                                                                                                                                                                                                               |\n     * | `sheetName` | A string                                                                                                                                                                                                               |\n     *\n     * Read more:\n     * - [Plugins: `Formulas`](@/api/formulas.md)\n     * - [Formula calculation](@/guides/formulas/formula-calculation.md)\n     * - [HyperFormula documentation: Client-side installation](https://handsontable.github.io/hyperformula/guide/client-side-installation)\n     * - [HyperFormula documentation: Configuration options](https://handsontable.github.io/hyperformula/api/interfaces/configparams.html)\n     *\n     * @memberof Options#\n     * @type {object}\n     * @default undefined\n     * @category Formulas\n     *\n     * @example\n     * ```js\n     * // either add the `HyperFormula` class\n     * formulas: {\n     *   // set `engine` to `HyperFormula`\n     *   engine: HyperFormula,\n     *   sheetId: 1,\n     *   sheetName: 'Sheet 1'\n     * }\n     *\n     * // or, add a HyperFormula instance\n     * // initialized with the `'internal-use-in-handsontable'` license key\n     * const hyperformulaInstance = HyperFormula.buildEmpty({\n     *   licenseKey: 'internal-use-in-handsontable',\n     * });\n     *\n     * formulas: {\n     *   // set `engine` to a HyperFormula instance\n     *   engine: hyperFormulaInstance,\n     *   sheetId: 1,\n     *   sheetName: 'Sheet 1'\n     * }\n     *\n     * // or, add a HyperFormula configuration object\n     * formulas: {\n     *   // set `engine` to a HyperFormula configuration object\n     *   engine: {\n     *     hyperformula: HyperFormula // or `engine: hyperFormulaInstance`\n     *     leapYear1900: false,       // this option comes from HyperFormula\n     *     // add more HyperFormula configuration options\n     *   },\n     *   sheetId: 1,\n     *   sheetName: 'Sheet 1'\n     * }\n     *\n     * // use the same HyperFormula instance in multiple Handsontable instances\n     *\n     * // a Handsontable instance `hot1`\n     * formulas: {\n     *   engine: HyperFormula,\n     *   sheetId: 1,\n     *   sheetName: 'Sheet 1'\n     * }\n     *\n     * // a Handsontable instance `hot2`\n     * formulas: {\n     *   engine: hot1.getPlugin('formulas').engine,\n     *   sheetId: 1,\n     *   sheetName: 'Sheet 1'\n     * }\n     * ```\n     */\n    formulas: undefined,\n    /**\n     * The `fragmentSelection` option configures text selection settings.\n     *\n     * You can set the `fragmentSelection` option to one of the following:\n     *\n     * | Setting           | Decription                                        |\n     * | ----------------- | ------------------------------------------------- |\n     * | `false` (default) | Disable text selection                            |\n     * | `true`            | Enable text selection in multiple cells at a time |\n     * | `'cell'`          | Enable text selection in one cell at a time       |\n     *\n     * @memberof Options#\n     * @type {boolean|string}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // enable text selection in multiple cells at a time\n     * fragmentSelection: true,\n     *\n     * // enable text selection in one cell a time\n     * fragmentSelection: 'cell',\n     * ```\n     */\n    fragmentSelection: false,\n    /**\n     * The `height` option configures the height of your grid.\n     *\n     * You can set `height` option to one of the following:\n     *\n     * | Setting                                                                    | Example                    |\n     * | -------------------------------------------------------------------------- | -------------------------- |\n     * | A number of pixels                                                         | `height: 500`              |\n     * | A string with a [CSS unit](https://www.w3schools.com/cssref/css_units.asp) | `height: '75vw'`           |\n     * | A function that returns a valid number or string                           | `height() { return 500; }` |\n     *\n     * Read more:\n     * - [Grid size](@/guides/getting-started/grid-size.md)\n     *\n     * @memberof Options#\n     * @type {number|string|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the grid's height to 500px\n     * height: 500,\n     *\n     * // set the grid's height to 75vh\n     * height: '75vh',\n     *\n     * // set the grid's height to 500px, using a function\n     * height() {\n     *   return 500;\n     * },\n     * ```\n     */\n    height: undefined,\n    /**\n     * The `hiddenColumns` option configures the [`HiddenColumns`](@/api/hiddenColumns.md) plugin.\n     *\n     * You can set the `hiddenColumns` option to one of the following:\n     *\n     * | Setting   | Description                                                                                  |\n     * | --------- | -------------------------------------------------------------------------------------------- |\n     * | `false`   | Disable the [`HiddenColumns`](@/api/hiddenColumns.md) plugin                                 |\n     * | `true`    | Enable the [`HiddenColumns`](@/api/hiddenColumns.md) plugin with the default plugin options  |\n     * | An object | - Enable the [`HiddenColumns`](@/api/hiddenColumns.md) plugin<br>- Modify the plugin options |\n     *\n     * If you set the `hiddenColumns` to an object, you can set the following [`HiddenColumns`](@/api/hiddenColumns.md) plugin options:\n     *\n     * | Property           | Possible values     | Description                                                                                                                                             |\n     * | ------------------ | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `columns`          | An array of indexes | An array of indexes of columns that are hidden at initialization                                                                                        |\n     * | `copyPasteEnabled` | `true` \\| `false`   | `true`: when copying or pasting data, take hidden columns into account<br>`false`: when copying or pasting data, don't take hidden columns into account |\n     * | `indicators`       | `true` \\| `false`   | `true`: display UI markers to indicate the presence of hidden columns<br>`false`: display UI markers                                                    |\n     *\n     * Read more:\n     * - [Plugins: `HiddenColumns`](@/api/hiddenColumns.md)\n     * - [Column hiding](@/guides/columns/column-hiding.md)\n     *\n     * @memberof Options#\n     * @type {boolean|object}\n     * @default undefined\n     * @category HiddenColumns\n     *\n     * @example\n     * ```js\n     * // enable the `HiddenColumns` plugin\n     * hiddenColumns: true,\n     *\n     * // enable `HiddenColumns` plugin, and modify the plugin options\n     * hiddenColumns: {\n     *   // set columns that are hidden by default\n     *   columns: [5, 10, 15],\n     *   // when copying or pasting data, take hidden columns into account\n     *   copyPasteEnabled: true,\n     *   // show where hidden columns are\n     *   indicators: true\n     * }\n     * ```\n     */\n    hiddenColumns: undefined,\n    /**\n     * The `hiddenRows` option configures the [`HiddenRows`](@/api/hiddenRows.md) plugin.\n     *\n     * You can set the `hiddenRows` option to one of the following:\n     *\n     * | Setting   | Description                                                                            |\n     * | --------- | -------------------------------------------------------------------------------------- |\n     * | `false`   | Disable the [`HiddenRows`](@/api/hiddenRows.md) plugin                                 |\n     * | `true`    | Enable the [`HiddenRows`](@/api/hiddenRows.md) plugin with the default plugin options  |\n     * | An object | - Enable the [`HiddenRows`](@/api/hiddenRows.md) plugin<br>- Modify the plugin options |\n     *\n     * If you set the `hiddenRows` to an object, you can set the following [`HiddenRows`](@/api/hiddenRows.md) plugin options:\n     *\n     * | Property           | Possible values     | Description                                                                                                                                       |\n     * | ------------------ | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `rows   `          | An array of indexes | An array of indexes of rows that are hidden at initialization                                                                                     |\n     * | `copyPasteEnabled` | `true` \\| `false`   | `true`: when copying or pasting data, take hidden rows into account<br>`false`: when copying or pasting data, don't take hidden rows into account |\n     * | `indicators`       | `true` \\| `false`   | `true`: display UI markers to indicate the presence of hidden rows<br>`false`: display UI markers                                                 |\n     *\n     * Read more:\n     * - [Plugins: `HiddenRows`](@/api/hiddenRows.md)\n     * - [Row hiding](@/guides/rows/row-hiding.md)\n     *\n     * @memberof Options#\n     * @type {boolean|object}\n     * @default undefined\n     * @category HiddenRows\n     *\n     * @example\n     * ```js\n     * // enable the `HiddenRows` plugin\n     * hiddenRows: true,\n     *\n     * // enable `HiddenRows` plugin, and modify the plugin options\n     * hiddenRows: {\n     *   // set rows that are hidden by default\n     *   rows: [5, 10, 15],\n     *   // when copying or pasting data, take hidden rows into account\n     *   copyPasteEnabled: true,\n     *   // show where hidden rows are\n     *   indicators: true\n     * }\n     * ```\n     */\n    hiddenRows: undefined,\n    /**\n     * The `invalidCellClassName` option lets you add a CSS class name to cells\n     * that were marked as `invalid` by the [cell validator](@/guides/cell-functions/cell-validator.md).\n     *\n     * Read more:\n     * - [Cell validator](@/guides/cell-functions/cell-validator.md)\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'htInvalid'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `highlight-error` CSS class name\n     * // to every `invalid` cell`\n     * invalidCellClassName: 'highlight-error',\n     * ```\n     */\n    invalidCellClassName: 'htInvalid',\n    /**\n     * The `imeFastEdit` option allows using the \"fast edit\" feature for the IME users. It's disabled by default\n     * because of its incompatibility with some of the accessibility features.\n     *\n     * Enabling this option can make a negative impact on how some screen readers handle reading the table cells.\n     *\n     * @since 14.0.0\n     * @memberof Options#\n     * @type {boolean}\n     * @category Core\n     */\n    imeFastEdit: false,\n    /**\n     * The `isEmptyCol` option lets you define your own custom method\n     * for checking if a column at a given visual index is empty.\n     *\n     * The `isEmptyCol` setting overwrites the built-in [`isEmptyCol`](@/api/core.md#isEmptyCol) method.\n     *\n     * @memberof Options#\n     * @type {Function}\n     * @param {number} col Visual column index.\n     * @returns {boolean}\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // overwrite the built-in `isEmptyCol` method\n     * isEmptyCol(visualColumnIndex) {\n     *    // your custom method\n     *    ...\n     * },\n     * ```\n     */\n    isEmptyCol(col) {\n      let row;\n      let rowLen;\n      let value;\n      for (row = 0, rowLen = this.countRows(); row < rowLen; row++) {\n        value = this.getDataAtCell(row, col);\n        if (isEmpty(value) === false) {\n          return false;\n        }\n      }\n      return true;\n    },\n    /**\n     * The `isEmptyRow` option lets you define your own custom method\n     * for checking if a row at a given visual index is empty.\n     *\n     * The `isEmptyRow` setting overwrites the built-in [`isEmptyRow`](@/api/core.md#isEmptyRow) method.\n     *\n     * @memberof Options#\n     * @type {Function}\n     * @param {number} row Visual row index.\n     * @returns {boolean}\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // overwrite the built-in `isEmptyRow` method\n     * isEmptyRow(visualRowIndex) {\n     *    // your custom method\n     *    ...\n     * },\n     * ```\n     */\n    isEmptyRow(row) {\n      let col;\n      let colLen;\n      let value;\n      let meta;\n      for (col = 0, colLen = this.countCols(); col < colLen; col++) {\n        value = this.getDataAtCell(row, col);\n        if (isEmpty(value) === false) {\n          if (typeof value === 'object') {\n            meta = this.getCellMeta(row, col);\n            return isObjectEqual(this.getSchema()[meta.prop], value);\n          }\n          return false;\n        }\n      }\n      return true;\n    },\n    /**\n     * @description\n     * The `label` option configures [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cells` labels.\n     *\n     * You can set the `label` option to an object with the following properties:\n     *\n     * | Property    | Possible values                   | Description                                                                                                                                                                                                             |\n     * | ----------- | --------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `position`  | `'after'` (default) \\| `'before'` | `'after'`: place the label to the right of the checkbox<br>`'before'`: place the label to the left of the checkbox                                                                                                      |\n     * | `value`     | A string \\| A function            | The label's text                                                                                                                                                                                                        |\n     * | `separated` | `false` (default) \\| `true`       | `false`: don't separate the label from the checkbox<br>`true`: separate the label from the checkbox                                                                                                                     |\n     * | `property`  | A string                          | - A [`data`](#data) object property name that's used as the label's text <br>- Works only when the [`data`](#data) option is set to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects) |\n     *\n     * Read more:\n     * - [Checkbox cell type: Checkbox labels](@/guides/cell-types/checkbox-cell-type.md#checkbox-labels)\n     *\n     * @memberof Options#\n     * @type {object}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [{\n     *   type: 'checkbox',\n     *   // add 'My label:' after the checkbox\n     *   label: { position: 'after', value: 'My label: ', separated: true }\n     * }],\n     * ```\n     */\n    label: undefined,\n    /**\n     * The `language` option configures Handsontable's [language](@/guides/internationalization/language.md) settings.\n     *\n     * You can set the `language` option to one of the following:\n     *\n     * | Setting             | Description                 |\n     * | ------------------- | --------------------------- |\n     * | `'en-US'` (default) | English - United States     |\n     * | `'ar-AR'`           | Arabic - Global.<br><br>To properly render this language, set the [layout direction](@/guides/internationalization/layout-direction.md) to RTL. |\n     * | `'cs-CZ'`           | Czech - Czech Republic      |\n     * | `'de-CH'`           | German - Switzerland        |\n     * | `'de-DE'`           | German - Germany            |\n     * | `'es-MX'`           | Spanish - Mexico            |\n     * | `'fr-FR'`           | French - France             |\n     * | `'it-IT'`           | Italian - Italy             |\n     * | `'ja-JP'`           | Japanese - Japan            |\n     * | `'ko-KR'`           | Korean - Korea              |\n     * | `'lv-LV'`           | Latvian - Latvia            |\n     * | `'nb-NO'`           | Norwegian (Bokmål) - Norway |\n     * | `'nl-NL'`           | Dutch - Netherlands         |\n     * | `'pl-PL'`           | Polish - Poland             |\n     * | `'pt-BR'`           | Portuguese - Brazil         |\n     * | `'ru-RU'`           | Russian - Russia            |\n     * | `'sr-SP'`           | Serbian (Latin) - Serbia    |\n     * | `'zh-CN'`           | Chinese - China             |\n     * | `'zh-TW'`           | Chinese - Taiwan            |\n     *\n     * Read more:\n     * - [Language](@/guides/internationalization/language.md)\n     * - [`locale`](#locale)\n     * - [`layoutDirection`](#layoutdirection)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'en-US'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set Handsontable's language to Polish\n     * language: 'pl-PL',\n     * ```\n     */\n    language: 'en-US',\n    /**\n     * The `layoutDirection` option configures whether Handsontable renders from the left to the right, or from the right to the left.\n     *\n     * You can set the layout direction only at Handsontable's [initialization](@/guides/getting-started/installation.md#initialize-handsontable). Any change of the `layoutDirection` option after the initialization (e.g. using the [`updateSettings()`](@/api/core.md#updatesettings) method) is ignored.\n     *\n     * You can set the `layoutDirection` option only [for the entire grid](@/guides/getting-started/configuration-options.md#set-grid-options).\n     * You can't set it for individual columns, rows, or cells.\n     *\n     * You can set the `layoutDirection` option to one of the following strings:\n     *\n     * | Setting             | Description                                                                                                                                                                                  |\n     * | ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `inherit` (default) | Set Handsontable's layout direction automatically,<br>based on the value of your HTML document's [`dir`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir) attribute  |\n     * | `rtl`               | Render Handsontable from the right to the left,<br>even when your HTML document's [`dir`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir) attribute is set to `ltr` |\n     * | `ltr`               | Render Handsontable from the left to the right,<br>even when your HTML document's [`dir`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir) attribute is set to `rtl` |\n     *\n     * Read more:\n     * - [Layout direction](@/guides/internationalization/layout-direction.md)\n     * - [Language](@/guides/internationalization/language.md)\n     * - [`language`](#language)\n     * - [`locale`](#locale)\n     * - [`fixedColumnsStart`](#fixedcolumnsstart)\n     * - [`customBorders`](#customBorders)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'inherit'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // inherit Handsontable's layout direction\n     * // from the value of your HTML document's `dir` attribute\n     * layoutDirection: 'inherit',\n     *\n     * // render Handsontable from the right to the left\n     * // regardless of your HTML document's `dir`\n     * layoutDirection: 'rtl',\n     *\n     * // render Handsontable from the left to the right\n     * // regardless of your HTML document's `dir`\n     * layoutDirection: 'ltr',\n     * ```\n     */\n    layoutDirection: 'inherit',\n    /**\n     * The `licenseKey` option sets your Handsontable license key.\n     *\n     * You can set the `licenseKey` option to one of the following:\n     *\n     * | Setting                                                                                                 | Description                                                                                       |\n     * | ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- |\n     * | A string with your [commercial license key](@/guides/getting-started/license-key.md#commercial-license) | For [commercial use](@/guides/technical-specification/software-license.md#commercial-use)         |\n     * | `'non-commercial-and-evaluation'`                                                                       | For [non-commercial use](@/guides/technical-specification/software-license.md#non-commercial-use) |\n     *\n     * Read more:\n     * - [License key](@/guides/getting-started/license-key.md)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // for commercial use\n     * licenseKey: 'xxxxx-xxxxx-xxxxx-xxxxx-xxxxx', // your commercial license key\n     *\n     * // for non-commercial use\n     * licenseKey: 'non-commercial-and-evaluation',\n     * ```\n     */\n    licenseKey: undefined,\n    /**\n     * The `locale` option configures Handsontable's [locale](@/guides/internationalization/locale.md) settings.\n     *\n     * You can set the `locale` option to any valid and canonicalized Unicode BCP 47 locale tag,\n     * both for the [entire grid](@/guides/internationalization/locale.md#set-the-grid-s-locale),\n     * and for [individual columns](@/guides/internationalization/locale.md#set-a-column-s-locale).\n     *\n     * Read more:\n     * - [Locale](@/guides/internationalization/locale.md)\n     * - [`language`](#language)\n     * - [`layoutDirection`](#layoutdirection)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'en-US'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the entire grid's locale to Polish\n     * locale: 'pl-PL',\n     *\n     * // set individual columns' locales\n     * columns: [\n     *   {\n     *     // set the first column's locale to Polish\n     *     locale: 'pl-PL',\n     *   },\n     *   {\n     *     // set the second column's locale to German\n     *     locale: 'de-DE',\n     *   },\n     * ],\n     * ```\n     */\n    locale: 'en-US',\n    /**\n     * The `manualColumnFreeze` option configures the [`ManualColumnFreeze`](@/api/manualColumnFreeze.md) plugin.\n     *\n     * You can set the `manualColumnFreeze` option to one of the following:\n     *\n     * | Setting  | Description                                                            |\n     * | -------- | ---------------------------------------------------------------------- |\n     * | `true`   | Enable the [`ManualColumnFreeze`](@/api/manualColumnFreeze.md) plugin  |\n     * | `false`  | Disable the [`ManualColumnFreeze`](@/api/manualColumnFreeze.md) plugin |\n     *\n     * Read more:\n     * - [Column freezing](@/guides/columns/column-freezing.md#user-triggered-freeze)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default undefined\n     * @category ManualColumnFreeze\n     *\n     * @example\n     * ```js\n     * // enable the `ManualColumnFreeze` plugin\n     * manualColumnFreeze: true,\n     * ```\n     */\n    manualColumnFreeze: undefined,\n    /**\n     * The `manualColumnMove` option configures the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin.\n     *\n     * You can set the `manualColumnMove` option to one of the following:\n     *\n     * | Setting  | Description                                                                                                        |\n     * | -------- | ------------------------------------------------------------------------------------------------------------------ |\n     * | `true`   | Enable the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin                                                  |\n     * | `false`  | Disable the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin                                                 |\n     * | An array | - Enable the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin<br>- Move individual columns at initialization |\n     *\n     * Read more:\n     * - [Column moving](@/guides/columns/column-moving.md)\n     *\n     * @memberof Options#\n     * @type {boolean|number[]}\n     * @default undefined\n     * @category ManualColumnMove\n     *\n     * @example\n     * ```js\n     * // enable the `ManualColumnMove` plugin\n     * manualColumnMove: true,\n     *\n     * // enable the `ManualColumnMove` plugin\n     * // at initialization, move column 0 to 1\n     * // at initialization, move column 1 to 4\n     * // at initialization, move column 2 to 6\n     * manualColumnMove: [1, 4, 6],\n     * ```\n     */\n    manualColumnMove: undefined,\n    /**\n     * @description\n     * The `manualColumnResize` option configures the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin.\n     *\n     * You can set the `manualColumnResize` option to one of the following:\n     *\n     * | Setting  | Description                                                                                                           |\n     * | -------- | --------------------------------------------------------------------------------------------------------------------- |\n     * | `true`   | Enable the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin                                                 |\n     * | `false`  | Disable the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin                                                |\n     * | An array | - Enable the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin<br>- Set initial widths of individual columns |\n     *\n     * Read more:\n     * - [Column width: Column stretching](@/guides/columns/column-width.md#column-stretching)\n     *\n     * @memberof Options#\n     * @type {boolean|number[]}\n     * @default undefined\n     * @category ManualColumnResize\n     *\n     * @example\n     * ```js\n     * // enable the `manualColumnResize` plugin\n     * manualColumnResize: true,\n     *\n     * // enable the `manualColumnResize` plugin\n     * // set the initial width of column 0 to 40 pixels\n     * // set the initial width of column 1 to 50 pixels\n     * // set the initial width of column 2 to 60 pixels\n     * manualColumnResize: [40, 50, 60],\n     * ```\n     */\n    manualColumnResize: undefined,\n    /**\n     * @description\n     * The `manualRowMove` option configures the [`ManualRowMove`](@/api/manualRowMove.md) plugin.\n     *\n     * You can set the `manualRowMove` option to one of the following:\n     *\n     * | Setting  | Description                                                                                               |\n     * | -------- | --------------------------------------------------------------------------------------------------------- |\n     * | `true`   | Enable the [`ManualRowMove`](@/api/manualRowMove.md) plugin                                               |\n     * | `false`  | Disable the [`ManualRowMove`](@/api/manualRowMove.md) plugin                                              |\n     * | An array | - Enable the [`ManualRowMove`](@/api/manualRowMove.md) plugin<br>- Move individual rows at initialization |\n     *\n     * Read more:\n     * - [Row moving](@/guides/rows/row-moving.md)\n     *\n     * @memberof Options#\n     * @type {boolean|number[]}\n     * @default undefined\n     * @category ManualRowMove\n     *\n     * @example\n     * ```js\n     * // enable the `ManualRowMove` plugin\n     * manualRowMove: true,\n     *\n     * // enable the `ManualRowMove` plugin\n     * // at initialization, move row 0 to 1\n     * // at initialization, move row 1 to 4\n     * // at initialization, move row 2 to 6\n     * manualColumnMove: [1, 4, 6],\n     * ```\n     */\n    manualRowMove: undefined,\n    /**\n     * @description\n     * The `manualRowResize` option configures the [`ManualRowResize`](@/api/manualRowResize.md) plugin.\n     *\n     * You can set the `manualRowResize` option to one of the following:\n     *\n     * | Setting  | Description                                                                                                   |\n     * | -------- | ------------------------------------------------------------------------------------------------------------- |\n     * | `true`   | Enable the [`ManualRowResize`](@/api/manualRowResize.md) plugin                                               |\n     * | `false`  | Disable the [`ManualRowResize`](@/api/manualRowResize.md) plugin                                              |\n     * | An array | - Enable the [`ManualRowResize`](@/api/manualRowResize.md) plugin<br>- Set initial heights of individual rows |\n     *\n     * Read more:\n     * - [Row height: Adjust the row height manually](@/guides/rows/row-height.md#adjust-the-row-height-manually)\n     *\n     * @memberof Options#\n     * @type {boolean|number[]}\n     * @default undefined\n     * @category ManualRowResize\n     *\n     * @example\n     * ```js\n     * // enable the `ManualRowResize` plugin\n     * manualRowResize: true,\n     *\n     * // enable the `ManualRowResize` plugin\n     * // set the initial height of row 0 to 40 pixels\n     * // set the initial height of row 1 to 50 pixels\n     * // set the initial height of row 2 to 60 pixels\n     * manualRowResize: [40, 50, 60],\n     * ```\n     */\n    manualRowResize: undefined,\n    /**\n     * The `maxCols` option sets a maximum number of columns.\n     *\n     * The `maxCols` option is used:\n     * - At initialization: if the `maxCols` value is lower than the initial number of columns,\n     * Handsontable trims columns from the right.\n     * - At runtime: for example, when inserting columns.\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default Infinity\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the maximum number of columns to 300\n     * maxCols: 300,\n     * ```\n     */\n    maxCols: Infinity,\n    /**\n     * The `maxRows` option sets a maximum number of rows.\n     *\n     * The `maxRows` option is used:\n     * - At initialization: if the `maxRows` value is lower than the initial number of rows,\n     * Handsontable trims rows from the bottom.\n     * - At runtime: for example, when inserting rows.\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default Infinity\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the maximum number of rows to 300\n     * maxRows: 300,\n     * ```\n     */\n    maxRows: Infinity,\n    /**\n     * @description\n     * The `mergeCells` option configures the [`MergeCells`](@/api/mergeCells.md) plugin.\n     *\n     * You can set the `mergeCells` option to one of the following:\n     *\n     * | Setting             | Description                                                                                         |\n     * | ------------------- | --------------------------------------------------------------------------------------------------- |\n     * | `true`              | Enable the [`MergeCells`](@/api/mergeCells.md) plugin                                               |\n     * | `false`             | Disable the [`MergeCells`](@/api/mergeCells.md) plugin                                              |\n     * | An array of objects | - Enable the [`MergeCells`](@/api/mergeCells.md) plugin<br>- Merge specific cells at initialization |\n     *\n     * To merge specific cells at Handsontable's initialization,\n     * set the `mergeCells` option to an array of objects, with the following properties:\n     *\n     * | Property  | Description                                                |\n     * | --------- | ---------------------------------------------------------- |\n     * | `row`     | The row index of the merged section's beginning            |\n     * | `col`     | The column index of the merged section's beginning         |\n     * | `rowspan` | The width (as a number of rows) of the merged section      |\n     * | `colspan` | The height (as a number of columns ) of the merged section |\n     *\n     * Read more:\n     * - [Merge cells](@/guides/cell-features/merge-cells.md)\n     *\n     * @memberof Options#\n     * @type {boolean|object[]}\n     * @default false\n     * @category MergeCells\n     *\n     * @example\n     * ```js\n     * // enable the `MergeCells` plugin\n     * mergeCells: true,\n     *\n     * // enable the `MergeCells` plugin\n     * // and merge specific cells at initialization\n     * mergeCells: [\n     *   // merge cells from cell (1,1) to cell (3,3)\n     *   {row: 1, col: 1, rowspan: 3, colspan: 3},\n     *   // merge cells from cell (3,4) to cell (2,2)\n     *   {row: 3, col: 4, rowspan: 2, colspan: 2},\n     *   // merge cells from cell (5,6) to cell (3,3)\n     *   {row: 5, col: 6, rowspan: 3, colspan: 3}\n     * ],\n     * ```\n     */\n    mergeCells: false,\n    /**\n     * The `minCols` option sets a minimum number of columns.\n     *\n     * The `minCols` option is used:\n     * - At initialization: if the `minCols` value is higher than the initial number of columns,\n     * Handsontable adds empty columns to the right.\n     * - At runtime: for example, when removing columns.\n     *\n     * The `minCols` option works only when your [`data`](#data) is an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays).\n     * When your [`data`](#data) is an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects),\n     * you can only have as many columns as defined in:\n     * - The first data row\n     * - The [`dataSchema`](#dataSchema) option\n     * - The [`columns`](#columns) option\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the minimum number of columns to 10\n     * minCols: 10,\n     * ```\n     */\n    minCols: 0,\n    /**\n     * The `minRows` option sets a minimum number of rows.\n     *\n     * The `minRows` option is used:\n     * - At initialization: if the `minRows` value is higher than the initial number of rows,\n     * Handsontable adds empty rows at the bottom.\n     * - At runtime: for example, when removing rows.\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the minimum number of rows to 10\n     * minRows: 10,\n     * ```\n     */\n    minRows: 0,\n    /**\n     * The `minSpareCols` option sets a minimum number of empty columns\n     * at the grid's right-hand end.\n     *\n     * If there already are other empty columns at the grid's right-hand end,\n     * they are counted into the `minSpareCols` value.\n     *\n     * The total number of columns can't exceed the [`maxCols`](#maxCols) value.\n     *\n     * The `minSpareCols` option works only when your [`data`](#data) is an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays).\n     * When your [`data`](#data) is an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects),\n     * you can only have as many columns as defined in:\n     * - The first data row\n     * - The [`dataSchema`](#dataSchema) option\n     * - The [`columns`](#columns) option\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // at Handsontable's initialization, add at least 3 empty columns on the right\n     * minSpareCols: 3,\n     * ```\n     */\n    minSpareCols: 0,\n    /**\n     * The `minSpareRows` option sets a minimum number of empty rows\n     * at the bottom of the grid.\n     *\n     * If there already are other empty rows at the bottom,\n     * they are counted into the `minSpareRows` value.\n     *\n     * The total number of rows can't exceed the [`maxRows`](#maxRows) value.\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // at Handsontable's initialization, add at least 3 empty rows at the bottom\n     * minSpareRows: 3,\n     * ```\n     */\n    minSpareRows: 0,\n    /**\n     * @description\n     * The `multiColumnSorting` option configures the [`MultiColumnSorting`](@/api/columnSorting.md) plugin.\n     *\n     * You can set the `multiColumnSorting` option to one of the following:\n     *\n     * | Setting    | Description                                                                                                                                                |\n     * | ---------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true`     | Enable the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin with the default configuration                                                       |\n     * | `false`    | Disable the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin                                                                                     |\n     * | An object  | - Enable the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin<br>- Modify the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin options |\n     *\n     * If you set the `multiColumnSorting` option to an object,\n     * you can set the following [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin options:\n     *\n     * | Option                   | Possible settings                                                                                                                                |\n     * | ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------ |\n     * | `indicator`              | `true`: Display the arrow icon in the column header, to indicate a sortable column<br>`false`: Don't display the arrow icon in the column header |\n     * | `headerAction`           | `true`: Enable clicking on the column header to sort the column<br>`false`: Disable clicking on the column header to sort the column             |\n     * | `sortEmptyCells`         | `true`: Sort empty cells as well<br>`false`: Place empty cells at the end                                                                        |\n     * | `compareFunctionFactory` | A [custom compare function](@/guides/rows/rows-sorting.md#add-a-custom-comparator)                                                               |\n     *\n     * If you set the `multiColumnSorting` option to an object,\n     * you can also sort individual columns at Handsontable's initialization.\n     * In the `multiColumnSorting` object, add an object named `initialConfig`,\n     * with the following properties:\n     *\n     * | Option      | Possible settings   | Description                                                      |\n     * | ----------- | ------------------- | ---------------------------------------------------------------- |\n     * | `column`    | A number            | The index of the column that you want to sort at initialization  |\n     * | `sortOrder` | `'asc'` \\| `'desc'` | The sorting order:<br>`'asc'`: ascending<br>`'desc'`: descending |\n     *\n     * Read more:\n     * - [Rows sorting](@/guides/rows/rows-sorting.md)\n     * - [`columnSorting`](#columnSorting)\n     *\n     * @memberof Options#\n     * @type {boolean|object}\n     * @default undefined\n     * @category MultiColumnSorting\n     *\n     * @example\n     * ```js\n     * // enable the `MultiColumnSorting` plugin\n     * multiColumnSorting: true\n     *\n     * // enable the `MultiColumnSorting` plugin with custom configuration\n     * multiColumnSorting: {\n     *   // sort empty cells as well\n     *   sortEmptyCells: true,\n     *   // display the arrow icon in the column header\n     *   indicator: true,\n     *   // disable clicking on the column header to sort the column\n     *   headerAction: false,\n     *   // add a custom compare function\n     *   compareFunctionFactory(sortOrder, columnMeta) {\n     *     return function(value, nextValue) {\n     *       // some value comparisons which will return -1, 0 or 1...\n     *     }\n     *   }\n     * }\n     *\n     * // enable the `MultiColumnSorting` plugin\n     * multiColumnSorting: {\n     *   // at initialization, sort column 1 in ascending order\n     *   initialConfig: {\n     *     column: 1,\n     *     sortOrder: 'asc'\n     *   },\n     *   // at initialization, sort column 2 in descending order\n     *   initialConfig: {\n     *     column: 2,\n     *     sortOrder: 'desc'\n     *   }\n     * }\n     * ```\n     */\n    multiColumnSorting: undefined,\n    /**\n     * When set to `true`, the `navigableHeaders` option lets you navigate [row headers](@/guides/rows/row-header.md) and [column headers](@/guides/columns/column-header.md), using the arrow keys or the <kbd>**Tab**</kbd> key (if the [`tabNavigation`](#tabNavigation) option is set to `true`).\n     *\n     * @since 14.0.0\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // you can navigate row and column headers with the keyboard\n     * navigableHeaders: true,\n     *\n     * // default behavior: you can't navigate row and column headers with the keyboard\n     * navigableHeaders: false,\n     * ```\n     */\n    navigableHeaders: false,\n    /**\n     * When set to `false`, the `tabNavigation` option changes the behavior of the\n     * <kbd>Tab</kbd> and <kbd>Shift</kbd>+<kbd>Tab</kbd> keyboard shortcuts. The Handsontable\n     * no more captures that shortcuts to make the grid navigation available (`tabNavigation: true`)\n     * but returns control to the browser so the native page navigation is possible.\n     *\n     * @since 14.0.0\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // you can't navigate row and column headers using <kbd>Tab</kbd> or <kbd>Shift</kbd>+<kbd>Tab</kbd> keyboard shortcuts\n     * tabNavigation: false,\n     *\n     * // default behavior: you can navigate row and column headers using <kbd>Tab</kbd> or <kbd>Shift</kbd>+<kbd>Tab</kbd> keyboard shortcuts\n     * tabNavigation: true,\n     * ```\n     */\n    tabNavigation: true,\n    /**\n     * @description\n     * The `nestedHeaders` option configures the [`NestedHeaders`](@/api/nestedHeaders.md) plugin.\n     *\n     * You can set the `nestedHeaders` option to one of the following:\n     *\n     * | Setting           | Description                                                                                                                           |\n     * | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `false` (default) | Disable the [`NestedHeaders`](@/api/nestedHeaders.md) plugin                                                                          |\n     * | `true`            | - Enable the [`NestedHeaders`](@/api/nestedHeaders.md) plugin<br>- Don't configure any nested headers                                 |\n     * | Array of arrays   | - Enable the [`NestedHeaders`](@/api/nestedHeaders.md) plugin<br>- Configure headers that are nested on Handsontable's initialization |\n     *\n     * If you set the `nestedHeaders` option to an array of arrays, each array configures one set of nested headers.\n     *\n     * Each array element configures one header, and can be one of the following:\n     *\n     * | Array element | Description                                                                                  |\n     * | ------------- | -------------------------------------------------------------------------------------------- |\n     * | A string      | The header's label                                                                           |\n     * | An object     | Properties:<br>`label` (string): the header's label<br>`colspan` (integer): the column width |\n     *\n     * Read more:\n     * - [Plugins: `NestedHeaders`](@/api/nestedHeaders.md)\n     * - [Column groups: Nested headers](@/guides/columns/column-groups.md#nested-headers)\n     *\n     * @memberof Options#\n     * @type {boolean|Array[]}\n     * @default undefined\n     * @category NestedHeaders\n     *\n     * @example\n     * ```js\n     * nestedHeaders: [\n     *   ['A', {label: 'B', colspan: 8}, 'C'],\n     *   ['D', {label: 'E', colspan: 4}, {label: 'F', colspan: 4}, 'G'],\n     *   ['H', 'I', 'J', 'K', 'L', 'M', 'N', 'R', 'S', 'T']\n     * ],\n     * ```\n     */\n    nestedHeaders: undefined,\n    /**\n     * @description\n     * The `nestedRows` option configures the [`NestedRows`](@/api/nestedRows.md) plugin.\n     *\n     * You can set the `nestedRows` option to one of the following:\n     *\n     * | Setting           | Description                                            |\n     * | ----------------- | ------------------------------------------------------ |\n     * | `false` (default) | Disable the [`NestedRows`](@/api/nestedRows.md) plugin |\n     * | `true`            | Enable the [`NestedRows`](@/api/nestedRows.md) plugin  |\n     *\n     * Read more:\n     * - [Plugins: `NestedRows`](@/api/nestedRows.md)\n     *\n     * @example\n     * ```js\n     * // enable the `NestedRows` plugin\n     * nestedRows: true,\n     * ```\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category NestedRows\n     */\n    nestedRows: undefined,\n    /**\n     * The `noWordWrapClassName` option lets you add a CSS class name\n     * to each cell that has the [`wordWrap`](#wordWrap) option set to `false`.\n     *\n     * Read more:\n     * - [`wordWrap`](#wordWrap)\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'htNoWrap'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add an `is-noWrapCell` CSS class name\n     * // to each cell that doesn't wrap content\n     * noWordWrapClassName: 'is-noWrapCell',\n     * ```\n     */\n    noWordWrapClassName: 'htNoWrap',\n    /**\n     * The `numericFormat` option configures the number format and the currency format\n     * of [`numeric`](@/guides/cell-types/numeric-cell-type.md) cells` displayed output\n     * in the numeric cell renderer.\n     *\n     * You can set the `numericFormat` option to an object with the following properties:\n     *\n     * | Property    | Possible values                                                               | Description     |\n     * | ----------- | ----------------------------------------------------------------------------- | --------------- |\n     * | `pattern`   | All [`numbro.js` number formats](https://numbrojs.com/format.html#numbers)    | Number format   |\n     * | `culture`   | All [`numbro.js` currency formats](https://numbrojs.com/format.html#currency) | Currency format |\n     *\n     * The `numericFormat` option as no effect on the numeric cell editor.\n     *\n     * In the source data, numeric data is stored as JavaScript numbers.\n     *\n     * Read more:\n     * - [Numeric cell type](@/guides/cell-types/numeric-cell-type.md)\n     * - [Third-party licenses](@/guides/technical-specification/third-party-licenses.md)\n     *\n     * @memberof Options#\n     * @since 0.35.0\n     * @type {object}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // set the `type` of each cell in this column to `numeric`\n     *     type: 'numeric',\n     *     // set the `numericFormat` option for every `numeric` cell of this column\n     *     numericFormat: {\n     *       // set the number format\n     *       pattern: '0,00',\n     *       // set the currency format\n     *       culture: 'en-US'\n     *     }\n     *   }\n     * ],\n     * ```\n     */\n    numericFormat: undefined,\n    /**\n     * If the `observeDOMVisibility` option is set to `true`,\n     * Handsontable rerenders every time it detects that the grid was made visible in the DOM.\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // don't rerender the grid on visibility changes\n     * observeDOMVisibility: false,\n     * ```\n     */\n    observeDOMVisibility: true,\n    /**\n     * The `outsideClickDeselects` option determines what happens to the current [selection](@/guides/cell-features/selection.md)\n     * when you click outside of the grid.\n     *\n     * You can set the `outsideClickDeselects` option to one of the following:\n     *\n     * | Setting          | Description                                                                                              |\n     * | ---------------- | -------------------------------------------------------------------------------------------------------- |\n     * | `true` (default) | On a mouse click outside of the grid, clear the current [selection](@/guides/cell-features/selection.md) |\n     * | `false`          | On a mouse click outside of the grid, keep the current [selection](@/guides/cell-features/selection.md)  |\n     * | A function       | A function that takes the click event target and returns a boolean                                       |\n     *\n     * @memberof Options#\n     * @type {boolean|Function}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // on a mouse click outside of the grid, clear the current selection\n     * outsideClickDeselects: true,\n     *\n     * // on a mouse click outside of the grid, keep the current selection\n     * outsideClickDeselects: false,\n     *\n     * // take the click event target and return `false`\n     * outsideClickDeselects(event) {\n     *   return false;\n     * }\n     *\n     * // take the click event target and return `true`\n     * outsideClickDeselects(event) {\n     *   return false;\n     * }\n     * ```\n     */\n    outsideClickDeselects: true,\n    /**\n     * @description\n     * The `persistentState` option configures the [`PersistentState`](@/api/persistentState.md) plugin.\n     *\n     * You can set the `persistentState` to one of the following:\n     *\n     * | Setting           | Description                                                      |\n     * | ----------------- | ---------------------------------------------------------------- |\n     * | `false` (default) | Disable the [`PersistentState`](@/api/persistentState.md) plugin |\n     * | `true`            | Enable the [`PersistentState`](@/api/persistentState.md) plugin  |\n     *\n     * Read more:\n     * - [Saving data: Saving data locally](@/guides/getting-started/saving-data.md#save-data-locally)\n     * - [Plugins: `PersistentState`](@/api/persistentState.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category PersistentState\n     *\n     * @example\n     * ```js\n     * // enable the `PersistentState` plugin\n     * persistentState: true,\n     * ```\n     */\n    persistentState: undefined,\n    /**\n     * The `placeholder` option lets you display placeholder text in every empty cell.\n     *\n     * You can set the `placeholder` option to one of the following:\n     *\n     * | Setting            | Example        | Description                                                           |\n     * | ------------------ | -------------- | --------------------------------------------------------------------- |\n     * | A non-empty string | `'Empty cell'` | Display `Empty cell` text in empty cells                              |\n     * | A non-string value | `000`          | Display `000` text in empty cells (non-string values get stringified) |\n     *\n     * Read more:\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // display 'Empty cell' text\n     * // in every empty cell of the entire grid\n     * placeholder: 'Empty cell',\n     *\n     * // or\n     * columns: [\n     *   {\n     *     data: 'date',\n     *     dateFormat: 'DD/MM/YYYY',\n     *     // display 'Empty date cell' text\n     *     // in every empty cell of the `date` column\n     *     placeholder: 'Empty date cell'\n     *   }\n     * ],\n     * ```\n     */\n    placeholder: undefined,\n    /**\n     * The `placeholderCellClassName` option lets you add a CSS class name to cells\n     * that contain [`placeholder`](#placeholder) text.\n     *\n     * Read more:\n     * - [Cell validator](@/guides/cell-functions/cell-validator.md)\n     * - [`placeholder`](#placeholder)\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'htPlaceholder'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `has-placeholder` CSS class name\n     * // to each cell that contains `placeholder` text\n     * placeholderCellClassName: 'has-placeholder',\n     * ```\n     */\n    placeholderCellClassName: 'htPlaceholder',\n    /**\n     * The `preventOverflow` option configures preventing Handsontable\n     * from overflowing outside of its parent element.\n     *\n     * You can set the `preventOverflow` option to one of the following:\n     *\n     * | Setting           | Description                      |\n     * | ----------------- | -------------------------------- |\n     * | `false` (default) | Don't prevent overflowing        |\n     * | `'horizontal'`      | Prevent horizontal overflowing |\n     * | `'vertical'`        | Prevent vertical overflowing   |\n     *\n     * @memberof Options#\n     * @type {string|boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // prevent horizontal overflowing\n     * preventOverflow: 'horizontal',\n     * ```\n     */\n    preventOverflow: false,\n    /**\n     * The `preventWheel` option configures preventing the `wheel` event's default action\n     * on overlays.\n     *\n     * You can set the `preventWheel` option to one of the following:\n     *\n     * | Setting           | Description                                      |\n     * | ----------------- | ------------------------------------------------ |\n     * | `false` (default) | Don't prevent the `wheel` event's default action |\n     * | `true`            | Prevent the `wheel` event's default action       |\n     *\n     * @memberof Options#\n     * @private\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // don't prevent the `wheel` event's default action\n     * preventWheel: false,\n     * ```\n     */\n    preventWheel: false,\n    /**\n     * @description\n     * The `readOnly` option determines whether a cell, column or comment is editable or not.\n     *\n     * You can set the `readOnly` option to one of the following:\n     *\n     * | Setting           | Decription                                                                                                                |\n     * | ----------------- | ------------------------------------------------------------------------------------------------------------------------- |\n     * | `false` (default) | Set as editable                                                                                                           |\n     * | `true`            | - Set as read-only<br>- Add the [`readOnlyCellClassName`](#readOnlyCellClassName) CSS class name (by default: `htDimmed`) |\n     *\n     * `readOnly` cells can't be changed by the [`populateFromArray()`](@/api/core.md#populatefromarray) method.\n     *\n     * Read more:\n     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set as read-only\n     * readOnly: true,\n     * ```\n     */\n    readOnly: false,\n    /**\n     * The `readOnlyCellClassName` option lets you add a CSS class name to [read-only](#readOnly) cells.\n     *\n     * Read more:\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`TableClassName`](#TableClassName)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'htDimmed'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `is-readOnly` CSS class name\n     * // to every read-only cell\n     * readOnlyCellClassName: 'is-readOnly',\n     * ```\n     */\n    readOnlyCellClassName: 'htDimmed',\n    /**\n     * The `renderAllRows` option configures Handsontable's [row virtualization](@/guides/rows/row-virtualization.md).\n     *\n     * You can set the `renderAllRows` option to one of the following:\n     *\n     * | Setting           | Description                                                                                        |\n     * | ----------------- | -------------------------------------------------------------------------------------------------- |\n     * | `false` (default) | Enable [row virtualization](@/guides/rows/row-virtualization.md)                                   |\n     * | `true`            | Disable [row virtualization](@/guides/rows/row-virtualization.md)<br>(render all rows of the grid) |\n     *\n     * Read more:\n     * - [Row virtualization](@/guides/rows/row-virtualization.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // disable row virtualization\n     * renderAllRows: true,\n     * ```\n     */\n    renderAllRows: undefined,\n    /**\n     * @description\n     * The `renderer` option sets a [cell renderer](@/guides/cell-functions/cell-renderer.md) for a cell.\n     *\n     * You can set the `renderer` option to one of the following:\n     * - A custom renderer function\n     * - One of the following [cell renderer aliases](@/guides/cell-functions/cell-renderer.md):\n     *\n     * | Alias               | Cell renderer function                                                         |\n     * | ------------------- | ------------------------------------------------------------------------------ |\n     * | A custom alias      | Your [custom cell renderer](@/guides/cell-functions/cell-renderer.md) function |\n     * | `'autocomplete'`    | `AutocompleteRenderer`                                                         |\n     * | `'base'`            | `BaseRenderer`                                                                 |\n     * | `'checkbox'`        | `CheckboxRenderer`                                                             |\n     * | `'date'`            | `DateRenderer`                                                                 |\n     * | `'dropdown'`        | `DropdownRenderer`                                                             |\n     * | `'html'`            | `HtmlRenderer`                                                                 |\n     * | `'numeric'`         | `NumericRenderer`                                                              |\n     * | `'password'`        | `PasswordRenderer`                                                             |\n     * | `'text'`            | `TextRenderer`                                                                 |\n     * | `'time'`            | `TimeRenderer`                                                                 |\n     *\n     * To set the [`renderer`](#renderer), [`editor`](#editor), and [`validator`](#validator)\n     * options all at once, use the [`type`](#type) option.\n     *\n     * Read more:\n     * - [Cell renderer](@/guides/cell-functions/cell-renderer.md)\n     * - [Cell type](@/guides/cell-types/cell-type.md)\n     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)\n     * - [`type`](#type)\n     *\n     * @memberof Options#\n     * @type {string|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // use the `numeric` renderer for each cell of the entire grid\n     * renderer: `'numeric'`,\n     *\n     * // add a custom renderer function\n     * renderer(hotInstance, td, row, column, prop, value, cellProperties) {\n     *   // your custom renderer's logic\n     *   ...\n     * }\n     *\n     * // apply the `renderer` option to individual columns\n     * columns: [\n     *   {\n     *     // use the `autocomplete` renderer for each cell of this column\n     *     renderer: 'autocomplete'\n     *   },\n     *   {\n     *     // use the `myCustomRenderer` renderer for each cell of this column\n     *     renderer: 'myCustomRenderer'\n     *   }\n     * ]\n     * ```\n     */\n    renderer: undefined,\n    /**\n     * The `rowHeaders` option configures your grid's row headers.\n     *\n     * You can set the `rowHeaders` option to one of the following:\n     *\n     * | Setting    | Description                                                       |\n     * | ---------- | ----------------------------------------------------------------- |\n     * | `true`     | Enable the default row headers ('1', '2', '3', ...)               |\n     * | `false`    | Disable row headers                                               |\n     * | An array   | Define your own row headers (e.g. `['One', 'Two', 'Three', ...]`) |\n     * | A function | Define your own row headers, using a function                     |\n     *\n     * Read more:\n     * - [Row header](@/guides/rows/row-header.md)\n     *\n     * @memberof Options#\n     * @type {boolean|string[]|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // enable the default row headers\n     * rowHeaders: true,\n     *\n     * // set your own row headers\n     * rowHeaders: ['One', 'Two', 'Three'],\n     *\n     * // set your own row headers, using a function\n     * rowHeaders: function(visualRowIndex) {\n     *   return `${visualRowIndex}: AB`;\n     * },\n     * ```\n     */\n    rowHeaders: undefined,\n    /**\n     * @description\n     * The `rowHeaderWidth` option configures the width of row headers.\n     *\n     * You can set the `rowHeaderWidth` option to one of the following:\n     *\n     * | Setting  | Description                                     |\n     * | -------- | ----------------------------------------------- |\n     * | A number | Set the same width for every row header         |\n     * | An array | Set different widths for individual row headers |\n     *\n     * @memberof Options#\n     * @type {number|number[]}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the same width for every row header\n     * rowHeaderWidth: 25,\n     *\n     * // set different widths for individual row headers\n     * rowHeaderWidth: [25, 30, 55],\n     * ```\n     */\n    rowHeaderWidth: undefined,\n    /**\n     * The `rowHeights` option sets rows' heights, in pixels.\n     *\n     * In the rendering process, the default row height is 23 px (22 px + 1 px of the row's bottom border).\n     * You can change it to equal or greater than 23px, by setting the `rowHeights` option to one of the following:\n     *\n     * | Setting     | Description                                                                                         | Example                                                      |\n     * | ----------- | --------------------------------------------------------------------------------------------------- | ------------------------------------------------------------ |\n     * | A number    | Set the same height for every row                                                                   | `rowHeights: 100`                                            |\n     * | A string    | Set the same height for every row                                                                   | `rowHeights: '100px'`                                        |\n     * | An array    | Set heights separately for each row                                                                 | `rowHeights: [100, 120, undefined]`                          |\n     * | A function  | Set row heights dynamically,<br>on each render                                                      | `rowHeights(visualRowIndex) { return visualRowIndex * 10; }` |\n     * | `undefined` | Used by the [modifyRowHeight](@/api/hooks.md#modifyRowHeight) hook,<br>to detect row height changes | `rowHeights: undefined`                                      |\n     *\n     * The `rowHeights` option also sets the minimum row height that can be set\n     * via the {@link ManualRowResize} and {@link AutoRowSize} plugins (if they are enabled).\n     *\n     * Read more:\n     * - [Row height](@/guides/rows/row-height.md)\n     *\n     * @memberof Options#\n     * @type {number|number[]|string|string[]|Array<undefined>|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set every row's height to 100px\n     * rowHeights: 100,\n     *\n     * // set every row's height to 100px\n     * rowHeights: '100px',\n     *\n     * // set the first (by visual index) row's height to 100\n     * // set the second (by visual index) row's height to 120\n     * // set the third (by visual index) row's height to `undefined`\n     * // set any other row's height to the default 23px\n     * rowHeights: [100, 120, undefined],\n     *\n     * // set each row's height individually, using a function\n     * rowHeights(visualRowIndex) {\n     *   return visualRowIndex * 10;\n     * },\n     * ```\n     */\n    rowHeights: undefined,\n    /**\n     * @description\n     * The `search` option configures the [`Search`](@/api/search.md) plugin.\n     *\n     * You can set the `search` option to one of the following:\n     *\n     * | Setting           | Description                                                                          |\n     * | ----------------- | ------------------------------------------------------------------------------------ |\n     * | `false` (default) | Disable the [`Search`](@/api/search.md) plugin                                       |\n     * | `true`            | Enable the [`Search`](@/api/search.md) plugin with the default configuration         |\n     * | An object         | - Enable the [`Search`](@/api/search.md) plugin<br>- Apply your custom configuration |\n     *\n     * If you set the `search` option to an object, you can configure the following search options:\n     *\n     * | Option              | Possible settings | Description                                                                                          |\n     * | ------------------- | ----------------- | ---------------------------------------------------------------------------------------------------- |\n     * | `searchResultClass` | A string          | Add a custom CSS class name to search results                                                        |\n     * | `queryMethod`       | A function        | Add a [custom query method](@/guides/navigation/searching-values.md#custom-query-method)  |\n     * | `callback`          | A function        | Add a [custom callback function](@/guides/navigation/searching-values.md#custom-callback) |\n     *\n     * Read more:\n     * - [Searching values](@/guides/navigation/searching-values.md)\n     * - [Searching values: Custom query method](@/guides/navigation/searching-values.md#custom-query-method)\n     * - [Searching values: Custom callback](@/guides/navigation/searching-values.md#custom-callback)\n     *\n     * @memberof Options#\n     * @type {boolean|object}\n     * @default false\n     * @category Search\n     *\n     * @example\n     * ```js\n     * // enable the `Search` plugin with the default configuration\n     * search: true,\n     *\n     * // enable the `Search` plugin with a custom configuration\n     * search: {\n     *   // add a `customClass` CSS class name to search results\n     *   searchResultClass: 'customClass',\n     *   // add a custom query method\n     *   queryMethod(queryStr, value) {\n     *     ...\n     *   },\n     *   // add a custom callback function\n     *   callback(instance, row, column, value, result) {\n     *     ...\n     *   }\n     * }\n     * ```\n     */\n    search: false,\n    /**\n     * @description\n     * The `selectionMode` option configures how [selection](@/guides/cell-features/selection.md) works.\n     *\n     * You can set the `selectionMode` option to one of the following:\n     *\n     * | Setting      | Description                                                  |\n     * | ------------ | ------------------------------------------------------------ |\n     * | `'single'`   | Allow the user to select only one cell at a time.            |\n     * | `'range'`    | Allow the user to select one range of cells at a time.       |\n     * | `'multiple'` | Allow the user to select multiple ranges of cells at a time. |\n     *\n     * Read more:\n     * - [Selection: Selecting ranges](@/guides/cell-features/selection.md#select-ranges)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'multiple'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // you can only select one cell at at a time\n     * selectionMode: 'single',\n     *\n     * // you can select one range of cells at a time\n     * selectionMode: 'range',\n     *\n     * // you can select multiple ranges of cells at a time\n     * selectionMode: 'multiple',\n     * ```\n     */\n    selectionMode: 'multiple',\n    /**\n     * The `selectOptions` option configures options that the end user can choose from in [`select`](@/guides/cell-types/select-cell-type.md) cells.\n     *\n     * You can set the `selectOptions` option to one of the following:\n     *\n     * | Setting                         | Description                                                                   |\n     * | ------------------------------- | ----------------------------------------------------------------------------- |\n     * | An array of strings             | Each string is one option's value and label                                   |\n     * | An object with key-string pairs | - Each key is one option's value<br>- The key's string is that option's label |\n     * | A function                      | A function that returns an object with key-string pairs                       |\n     *\n     * Read more:\n     * - [Select cell type](@/guides/cell-types/select-cell-type.md)\n     *\n     * @memberof Options#\n     * @type {string[]|object|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // set the `type` of each cell in this column to `select`\n     *     type: 'select',\n     *     // set the first option's value and label to `A`\n     *     // set the second option's value and label to `B`\n     *     // set the third option's value and label to `C`\n     *     selectOptions: ['A', 'B', 'C'],\n     *   },\n     *   {\n     *     // set the `type` of each cell in this column to `select`\n     *     type: 'select',\n     *     selectOptions: {\n     *       // set the first option's value to `value1` and label to `Label 1`\n     *       value1: 'Label 1',\n     *       // set the second option's value to `value2` and label to `Label 2`\n     *       value2: 'Label 2',\n     *       // set the third option's value to `value3` and label to `Label 3`\n     *       value3: 'Label 3',\n     *     },\n     *   },\n     *   {\n     *     // set the `type` of each cell in this column to `select`\n     *     type: 'select',\n     *     // set `selectOption` to a function that returns available options as an object\n     *     selectOptions(visualRow, visualColumn, prop) {\n     *       return {\n     *         value1: 'Label 1',\n     *         value2: 'Label 2',\n     *         value3: 'Label 3',\n     *       };\n     *   },\n     * ],\n     * ```\n     */\n    selectOptions: undefined,\n    /**\n     * @description\n     * The `skipColumnOnPaste` option determines whether you can paste data into a given column.\n     *\n     * You can only apply the `skipColumnOnPaste` option to an entire column, using the [`columns`](#columns) option.\n     *\n     * You can set the `skipColumnOnPaste` option to one of the following:\n     *\n     * | Setting           | Description                                                                                           |\n     * | ----------------- | ----------------------------------------------------------------------------------------------------- |\n     * | `false` (default) | Enable pasting data into this column                                                                  |\n     * | `true`            | - Disable pasting data into this column<br>- On pasting, paste data into the next column to the right |\n     *\n     * Read more:\n     * - [Configuration options: Setting column options](@/guides/getting-started/configuration-options.md#set-column-options)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // disable pasting data into this column\n     *     skipColumnOnPaste: true\n     *   }\n     * ],\n     * ```\n     */\n    skipColumnOnPaste: false,\n    /**\n     * @description\n     *\n     * The `skipRowOnPaste` option determines whether you can paste data into a given row.\n     *\n     * You can only apply the `skipRowOnPaste` option to an entire row, using the [`cells`](#cells) option.\n     *\n     * You can set the `skipRowOnPaste` option to one of the following:\n     *\n     * | Setting           | Description                                                                         |\n     * | ----------------- | ----------------------------------------------------------------------------------- |\n     * | `false` (default) | Enable pasting data into this row                                                   |\n     * | `true`            | - Disable pasting data into this row<br>- On pasting, paste data into the row below |\n     *\n     * Read more:\n     * - [Configuration options: Setting row options](@/guides/getting-started/configuration-options.md#set-row-options)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * cells(row, column) {\n     *  const cellProperties = {};\n     *\n     *  // disable pasting data into row 1\n     *  if (row === 1) {\n     *    cellProperties.skipRowOnPaste = true;\n     *  }\n     *\n     *  return cellProperties;\n     * }\n     * ```\n     */\n    skipRowOnPaste: false,\n    /**\n     * The `sortByRelevance` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells'\n     * lists are sorted in the same order as provided in the [`source`](#source) option.\n     *\n     * You can set the `sortByRelevance` option to one of the following:\n     *\n     * | Setting          | Description                                                                  |\n     * | ---------------- | ---------------------------------------------------------------------------- |\n     * | `true` (default) | Sort options in the same order as provided in the [`source`](#source) option |\n     * | `false`          | Sort options alphabetically                                                  |\n     *\n     * Read more:\n     * - [`source`](#source)\n     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [{\n     *   // set the `type` of each cell in this column to `autocomplete`\n     *   type: 'autocomplete',\n     *   // set options available in every `autocomplete` cell of this column\n     *   source: ['D', 'C', 'B', 'A'],\n     *   // sort the `autocomplete` option in this order: D, C, B, A\n     *   sortByRelevance: true\n     * }],\n     * ```\n     */\n    sortByRelevance: true,\n    /**\n     * The `source` option sets options available in [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)\n     * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) cells.\n     *\n     * You can set the `source` option to one of the following:\n     *\n     * - An array\n     * - A function\n     *\n     * Read more:\n     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [Dropdown cell type](@/guides/cell-types/dropdown-cell-type.md)\n     * - [`strict`](#strict)\n     * - [`allowHtml`](#allowHtml)\n     * - [`filter`](#filter)\n     * - [`sortByRelevance`](#sortByRelevance)\n     *\n     * @memberof Options#\n     * @type {Array|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set `source` to an array\n     * columns: [{\n     *   // set the `type` of each cell in this column to `autocomplete`\n     *   type: 'autocomplete',\n     *   // set options available in every `autocomplete` cell of this column\n     *   source: ['A', 'B', 'C', 'D']\n     * }],\n     *\n     * // set `source` to a function\n     * columns: [{\n     *   // set the `type` of each cell in this column to `autocomplete`\n     *   type: 'autocomplete',\n     *   // for every `autocomplete` cell in this column, fetch data from an external source\n     *   source(query, callback) {\n     *     fetch('https://example.com/query?q=' + query, function(response) {\n     *       callback(response.items);\n     *     })\n     *   }\n     * }],\n     * ```\n     */\n    source: undefined,\n    /**\n     * @description\n     * If the [`data`](#data) option is not set, the `startCols` option sets the initial number of empty columns.\n     *\n     * The `startCols` option works only in Handsontable's constructor.\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 5\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // start with 15 empty columns\n     * startCols: 15,\n     * ```\n     */\n    startCols: 5,\n    /**\n     * @description\n     * If the [`data`](#data) option is not set, the `startRows` option sets the initial number of empty rows.\n     *\n     * The `startRows` option works only in Handsontable's constructor.\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 5\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // start with 15 empty rows\n     * startRows: 15,\n     * ```\n     */\n    startRows: 5,\n    /**\n     * @description\n     * The `stretchH` option determines what happens when the declared grid width\n     * is different from the calculated sum of all column widths.\n     *\n     * You can set the `stretchH` option to one of the following:\n     *\n     * | Setting            | Description                                                       |\n     * | ------------------ | ----------------------------------------------------------------- |\n     * | `'none'` (default) | Don't fit the grid to the container (disable column stretching)   |\n     * | `'last'`           | Fit the grid to the container, by stretching only the last column |\n     * | `'all'`            | Fit the grid to the container, by stretching all columns evenly   |\n     *\n     * Read more:\n     * - [Column width: Column stretching](@/guides/columns/column-width.md#column-stretching)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'none'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // fit the grid to the container\n     * // by stretching all columns evenly\n     * stretchH: 'all',\n     * ```\n     */\n    stretchH: 'none',\n    /**\n     * The `strict` option configures the behavior of [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells.\n     *\n     * You can set the `strict` option to one of the following:\n     *\n     * | Setting | Mode                                                                                          | Description                                                                                |\n     * | ------- | --------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------ |\n     * | `true`  | [Strict mode](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-strict-mode)         | The end user:<br>- Can only choose one of suggested values<br>- Can't enter a custom value |\n     * | `false` | [Flexible mode](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-flexible-mode)     | The end user:<br>- Can choose one of suggested values<br>- Can enter a custom value        |\n     *\n     * Read more:\n     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [`source`](#source)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *   // set the `type` of each cell in this column to `autocomplete`\n     *   type: 'autocomplete',\n     *   // set options available in every `autocomplete` cell of this column\n     *   source: ['A', 'B', 'C'],\n     *   // values entered must match `A`, `B`, or `C`\n     *   strict: true\n     *   },\n     * ],\n     * ```\n     */\n    strict: undefined,\n    /**\n     * The `tableClassName` option lets you add CSS class names\n     * to every Handsontable instance inside the `container` element.\n     *\n     * You can set the `tableClassName` option to one of the following:\n     *\n     * | Setting             | Description                                                                                |\n     * | ------------------- | ------------------------------------------------------------------------------------------ |\n     * | A string            | Add a single CSS class name to every Handsontable instance inside the `container` element  |\n     * | An array of strings | Add multiple CSS class names to every Handsontable instance inside the `container` element |\n     *\n     * Read more:\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string|string[]}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `your-class-name` CSS class name\n     * // to every Handsontable instance inside the `container` element\n     * tableClassName: 'your-class-name',\n     *\n     * // add `first-class-name` and `second-class-name` CSS class names\n     * // to every Handsontable instance inside the `container` element\n     * tableClassName: ['first-class-name', 'second-class-name'],\n     * ```\n     */\n    tableClassName: undefined,\n    /**\n     * The `tabMoves` option configures the action of the <kbd>**Tab**</kbd> key.\n     *\n     * You can set the `tabMoves` option to an object with the following properties\n     * (or to a function that returns such an object):\n     *\n     * | Property | Type   | Description                                                                                                                                              |\n     * | -------- | ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `row`    | Number | - On pressing <kbd>**Tab**</kbd>, move selection `row` rows down<br>- On pressing <kbd>**Shift**</kbd>+<kbd>**Tab**</kbd>, move selection `row` rows up              |\n     * | `col`    | Number | - On pressing <kbd>**Tab**</kbd>, move selection `col` columns right<br>- On pressing <kbd>**Shift**</kbd>+<kbd>**Tab**</kbd>, move selection `col` columns left     |\n     *\n     * @memberof Options#\n     * @type {object|Function}\n     * @default {row: 0, col: 1}\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // on pressing Tab, move selection 2 rows down and 2 columns right\n     * // on pressing Shift+Tab, move selection 2 rows up and 2 columns left\n     * tabMoves: {row: 2, col: 2},\n     *\n     * // the same setting, as a function\n     * // `event` is a DOM Event object received on pressing Tab\n     * // you can use it to check whether the user pressed Tab or Shift+Tab\n     * tabMoves(event) {\n     *   return {row: 2, col: 2};\n     * },\n     * ```\n     */\n    tabMoves: {\n      row: 0,\n      col: 1\n    },\n    /**\n     * @description\n     * The `title` option configures [column header](@/guides/columns/column-header.md) names.\n     *\n     * You can set the `title` option to a string.\n     *\n     * Read more:\n     * - [Column header](@/guides/columns/column-header.md)\n     * - [`columns`](#columns)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // set the first column header name to `First name`\n     *     title: 'First name',\n     *     type: 'text',\n     *   },\n     *   {\n     *     // set the second column header name to `Last name`\n     *     title: 'Last name',\n     *     type: 'text',\n     *   }\n     * ],\n     * ```\n     */\n    title: undefined,\n    /**\n     * The `trimDropdown` option configures the width of the [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)\n     * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) lists.\n     *\n     * You can set the `trimDropdown` option to one of the following:\n     *\n     * | Setting          | Description                                                                     |\n     * | ---------------- | ------------------------------------------------------------------------------- |\n     * | `true` (default) | Make the dropdown/autocomplete list's width the same as the edited cell's width |\n     * | `false`          | Scale the dropdown/autocomplete list's width to the list's content              |\n     *\n     * Read more:\n     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [Dropdown cell type](@/guides/cell-types/dropdown-cell-type.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     type: 'autocomplete',\n     *     // for each cell of this column\n     *     // make the `autocomplete` list's width the same as the edited cell's width\n     *     trimDropdown: true,\n     *   },\n     *   {\n     *     type: 'dropdown',\n     *     // for each cell of this column\n     *     // scale the `dropdown` list's width to the list's content\n     *     trimDropdown: false,\n     *   }\n     * ],\n     * ```\n     */\n    trimDropdown: true,\n    /**\n     * @description\n     * The `trimRows` option configures the [`TrimRows`](@/api/trimRows.md) plugin.\n     *\n     * You can set the `trimRows` option to one of the following:\n     *\n     * | Setting                          | Description                                                                                   |\n     * | -------------------------------- | --------------------------------------------------------------------------------------------- |\n     * | `false`                          | Disable the [`TrimRows`](@/api/trimRows.md) plugin                                            |\n     * | `true`                           | Enable the [`TrimRows`](@/api/trimRows.md) plugin                                             |\n     * | An array of physical row indexes | - Enable the [`TrimRows`](@/api/trimRows.md) plugin<br>- Trim selected rows at initialization |\n     *\n     * Read more:\n     * - [Plugins: `TrimRows`](@/api/trimRows.md)\n     * - [Row trimming](@/guides/rows/row-trimming.md)\n     *\n     * @memberof Options#\n     * @type {boolean|number[]}\n     * @default undefined\n     * @category TrimRows\n     *\n     * @example\n     * ```js\n     * // enable the `TrimRows` plugin\n     * trimRows: true,\n     *\n     * // enable the `TrimRows` plugin\n     * // at Handsontable's initialization, trim rows 5, 10, and 15\n     * trimRows: [5, 10, 15],\n     * ```\n     */\n    trimRows: undefined,\n    /**\n     * The `trimWhitespace` option configures automatic whitespace removal. This option\n     * affects the cell renderer and the cell editor.\n     *\n     * You can set the `trimWhitespace` option to one of the following:\n     *\n     * | Setting          | Description                                                     |\n     * | ---------------- | --------------------------------------------------------------- |\n     * | `true` (default) | Remove whitespace at the beginning and at the end of each cell |\n     * | `false`          | Don't remove whitespace                                         |\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // don't remove whitespace\n     *     // from any cell of this column\n     *     trimWhitespace: false\n     *   }\n     * ]\n     * ```\n     */\n    trimWhitespace: true,\n    /**\n     * @description\n     * The `type` option lets you set the [`renderer`](#renderer), [`editor`](#editor), and [`validator`](#validator)\n     * options all at once, by selecting a [cell type](@/guides/cell-types/cell-type.md).\n     *\n     * You can set the `type` option to one of the following:\n     *\n     * | Cell type                                                         | Renderer, editor & validator                                                                                                                                                                                                                       |\n     * | ----------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | A [custom cell type](@/guides/cell-types/cell-type.md)            | Renderer: your [custom cell renderer](@/guides/cell-functions/cell-renderer.md)<br>Editor: your [custom cell editor](@/guides/cell-functions/cell-editor.md)<br>Validator: your [custom cell validator](@/guides/cell-functions/cell-validator.md) |\n     * | [`'autocomplete'`](@/guides/cell-types/autocomplete-cell-type.md) | Renderer: `AutocompleteRenderer`<br>Editor: `AutocompleteEditor`<br>Validator: `AutocompleteValidator`                                                                         |\n     * | [`'checkbox'`](@/guides/cell-types/checkbox-cell-type.md)         | Renderer: `CheckboxRenderer`<br>Editor: `CheckboxEditor`<br>Validator: -                                                                                                                               |\n     * | [`'date'`](@/guides/cell-types/date-cell-type.md)                 | Renderer: `DateRenderer`<br>Editor: `DateEditor`<br>Validator: `DateValidator`                                                                                                 |\n     * | [`'dropdown'`](@/guides/cell-types/dropdown-cell-type.md)         | Renderer: `DropdownRenderer`<br>Editor: `DropdownEditor`<br>Validator: `DropdownValidator`                                                                                     |\n     * | [`'handsontable'`](@/guides/cell-types/handsontable-cell-type.md) | Renderer: `AutocompleteRenderer`<br>Editor: `HandsontableEditor`<br>Validator: -                                                                                                                       |\n     * | [`'numeric'`](@/guides/cell-types/numeric-cell-type.md)           | Renderer: `NumericRenderer`<br>Editor: `NumericEditor`<br>Validator: `NumericValidator`                                                                                        |\n     * | [`'password'`](@/guides/cell-types/password-cell-type.md)         | Renderer: `PasswordRenderer`<br>Editor: `PasswordEditor`<br>Validator: -                                                                                                                               |\n     * | `'text'`                                                          | Renderer: `TextRenderer`<br>Editor: `TextEditor`<br>Validator: -                                                                                                                                       |\n     * | [`'time`'](@/guides/cell-types/time-cell-type.md)                 | Renderer: `TimeRenderer`<br>Editor: `TimeEditor`<br>Validator: `TimeValidator`                                                                                                 |\n     *\n     * Read more:\n     * - [Cell type](@/guides/cell-types/cell-type.md)\n     * - [Cell renderer](@/guides/cell-functions/cell-renderer.md)\n     * - [Cell editor](@/guides/cell-functions/cell-editor.md)\n     * - [Cell validator](@/guides/cell-functions/cell-validator.md)\n     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)\n     * - [`renderer`](#renderer)\n     * - [`editor`](#editor)\n     * - [`validator`](#validator)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'text'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the `numeric` cell type for each cell of the entire grid\n     * type: `'numeric'`,\n     *\n     * // apply the `type` option to individual columns\n     * columns: [\n     *   {\n     *     // set the `autocomplete` cell type for each cell of this column\n     *     type: 'autocomplete'\n     *   },\n     *   {\n     *     // set the `myCustomCellType` cell type for each cell of this column\n     *     type: 'myCustomCellType'\n     *   }\n     * ]\n     * ```\n     */\n    type: 'text',\n    /**\n     * The `uncheckedTemplate` option lets you configure what value\n     * an unchecked [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell has.\n     *\n     * You can set the `uncheckedTemplate` option to one of the following:\n     *\n     * | Setting           | Description                                                                                                                                                                                |\n     * | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n     * | `false` (default) | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is unchecked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns `false`                 |\n     * | A string          | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is unchecked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns a string of your choice |\n     *\n     * Read more:\n     * - [Checkbox cell type: Checkbox template](@/guides/cell-types/checkbox-cell-type.md#checkbox-template)\n     * - [`getDataAtCell()`](@/api/core.md#getDataAtCell)\n     * - [`checkedTemplate`](#checkedTemplate)\n     *\n     * @memberof Options#\n     * @type {boolean|string|number}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // set the `type` of each cell in this column to `checkbox`\n     *     // when unchecked, the cell's value is `false`\n     *     // when checked, the cell's value is `true`\n     *     type: 'checkbox',\n     *   },\n     *   {\n     *     // set the `type` of each cell in this column to `checkbox`\n     *     // when unchecked, the cell's value is `'No'`\n     *     // when checked, the cell's value is `'Yes'`\n     *     type: 'checkbox',\n     *     uncheckedTemplate: 'No'\n     *     checkedTemplate: 'Yes',\n     *  }\n     * ],\n     * ```\n     */\n    uncheckedTemplate: undefined,\n    /**\n     * The `undo` option configures the [`UndoRedo`](@/api/undoRedo.md) plugin.\n     *\n     * You can set the `undo` option to one of the following:\n     *\n     * | Setting | Description                                        |\n     * | ------- | -------------------------------------------------- |\n     * | `true`  | Enable the [`UndoRedo`](@/api/undoRedo.md) plugin  |\n     * | `false` | Disable the [`UndoRedo`](@/api/undoRedo.md) plugin |\n     *\n     * By default, the `undo` option is set to `undefined`,\n     * but the [`UndoRedo`](@/api/undoRedo.md) plugin acts as enabled.\n     * To disable the [`UndoRedo`](@/api/undoRedo.md) plugin completely,\n     * set the `undo` option to `false`.\n     *\n     * Read more:\n     * - [Undo and redo](@/guides/accessories-and-menus/undo-redo.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default undefined\n     * @category UndoRedo\n     *\n     * @example\n     * ```js\n     * // enable the `UndoRedo` plugin\n     * undo: true,\n     * ```\n     */\n    undo: undefined,\n    /**\n     * @description\n     * The `validator` option sets a [cell validator](@/guides/cell-functions/cell-validator.md) for a cell.\n     *\n     * You can set the `validator` option to one of the following:\n     *\n     * | Setting              | Description                                                                      |\n     * | -------------------- | -------------------------------------------------------------------------------- |\n     * | A string             | A [cell validator alias](@/guides/cell-functions/cell-validator.md)              |\n     * | A function           | Your [custom cell validator function](@/guides/cell-functions/cell-validator.md) |\n     * | A regular expression | A regular expression used for cell validation                                    |\n     *\n     * By setting the `validator` option to a string,\n     * you can use one of the following [cell validator aliases](@/guides/cell-functions/cell-validator.md):\n     *\n     * | Alias               | Cell validator function                                                 |\n     * | ------------------- | ----------------------------------------------------------------------- |\n     * | A custom alias      | Your [custom cell validator](@/guides/cell-functions/cell-validator.md) |\n     * | `'autocomplete'`    | `AutocompleteValidator`                                                 |\n     * | `'date'`            | `DateValidator`                                                         |\n     * | `'dropdown'`        | `DropdownValidator`                                                     |\n     * | `'numeric'`         | `NumericValidator`                                                      |\n     * | `'time'`            | `TimeValidator`                                                         |\n     *\n     * To set the [`editor`](#editor), [`renderer`](#renderer), and [`validator`](#validator)\n     * options all at once, use the [`type`](#type) option.\n     *\n     * Read more:\n     * - [Cell validator](@/guides/cell-functions/cell-validator.md)\n     * - [Cell type](@/guides/cell-types/cell-type.md)\n     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)\n     * - [`type`](#type)\n     *\n     * @memberof Options#\n     * @type {Function|RegExp|string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *    {\n     *      // use a built-in `numeric` cell validator\n     *      validator: 'numeric'\n     *    },\n     *    {\n     *      // validate against a regular expression\n     *      validator: /^[0-9]$/\n     *    },\n     *    {\n     *      // add a custom cell validator function\n     *      validator(value, callback) {\n     *          ...\n     *      }\n     *    },\n     * ],\n     * ```\n     */\n    validator: undefined,\n    /**\n     * @description\n     * The `viewportColumnRenderingOffset` option configures the number of columns\n     * to be rendered outside of the grid's viewport.\n     *\n     * You can set the `viewportColumnRenderingOffset` option to one of the following:\n     *\n     * | Setting            | Description                                             |\n     * | ------------------ | ------------------------------------------------------- |\n     * | `auto` (default)   | Use the offset calculated automatically by Handsontable |\n     * | A number           | Set the offset manually                                 |\n     *\n     * Read more:\n     * - [Performance: Define the number of pre-rendered rows and columns](@/guides/optimization/performance.md#define-the-number-of-pre-rendered-rows-and-columns)\n     *\n     * @memberof Options#\n     * @type {number|string}\n     * @default 'auto'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // render 70 columns outside of the grid's viewport\n     * viewportColumnRenderingOffset: 70,\n     * ```\n     */\n    viewportColumnRenderingOffset: 'auto',\n    /**\n     * @description\n     * The `viewportRowRenderingOffset` option configures the number of rows\n     * to be rendered outside of the grid's viewport.\n     *\n     * You can set the `viewportRowRenderingOffset` option to one of the following:\n     *\n     * | Setting            | Description                                             |\n     * | ------------------ | ------------------------------------------------------- |\n     * | `auto` (default)   | Use the offset calculated automatically by Handsontable |\n     * | A number           | Set the offset manually                                 |\n     *\n     * Read more:\n     * - [Performance: Define the number of pre-rendered rows and columns](@/guides/optimization/performance.md#define-the-number-of-pre-rendered-rows-and-columns)\n     * - [Column virtualization](@/guides/columns/column-virtualization.md)\n     *\n     * @memberof Options#\n     * @type {number|string}\n     * @default 'auto'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // render 70 rows outside of the grid's viewport\n     * viewportRowRenderingOffset: 70,\n     * ```\n     */\n    viewportRowRenderingOffset: 'auto',\n    /**\n     * The `visibleRows` option sets the height of the [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)\n     * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) lists.\n     *\n     * When the number of list options exceeds the `visibleRows` number, a scrollbar appears.\n     *\n     * Read more:\n     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [Dropdown cell type](@/guides/cell-types/dropdown-cell-type.md)\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 10\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     type: 'autocomplete',\n     *     // set the `autocomplete` list's height to 15 options\n     *     // for each cell of this column\n     *     visibleRows: 15,\n     *   },\n     *   {\n     *     type: 'dropdown',\n     *     // set the `dropdown` list's height to 5 options\n     *     // for each cell of this column\n     *     visibleRows: 5,\n     *   }\n     * ],\n     * ```\n     */\n    visibleRows: 10,\n    /**\n     * The `width` option configures the width of your grid.\n     *\n     * You can set the `width` option to one of the following:\n     *\n     * | Setting                                                                    | Example                   |\n     * | -------------------------------------------------------------------------- | ------------------------- |\n     * | A number of pixels                                                         | `width: 500`              |\n     * | A string with a [CSS unit](https://www.w3schools.com/cssref/css_units.asp) | `width: '75vw'`           |\n     * | A function that returns a valid number or string                           | `width() { return 500; }` |\n     *\n     * Read more:\n     * - [Grid size](@/guides/getting-started/grid-size.md)\n     *\n     * @memberof Options#\n     * @type {number|string|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the grid's width to 500px\n     * width: 500,\n     *\n     * // set the grid's width to 75vw\n     * width: '75vw',\n     *\n     * // set the grid's width to 500px, using a function\n     * width() {\n     *   return 500;\n     * },\n     * ```\n     */\n    width: undefined,\n    /**\n     * The `wordWrap` option configures whether content that exceeds a column's width is wrapped or not.\n     *\n     * You can set the `wordWrap` option to one of the following:\n     *\n     * | Setting          | Description                                             |\n     * | ---------------- | ------------------------------------------------------- |\n     * | `true` (default) | If content exceeds the column's width, wrap the content |\n     * | `false`          | Don't wrap content                                      |\n     *\n     * To style cells that don't wrap content, use the [`noWordWrapClassName`](#noWordWrapClassName) option.\n     *\n     * Read more:\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set column width for every column of the entire grid\n     * colWidths: 100,\n     *\n     * columns: [\n     *   {\n     *     // don't wrap content in this column\n     *     wordWrap: false,\n     *   },\n     *   {\n     *     // if content exceeds this column's width, wrap the content\n     *     wordWrap: true,\n     *   }\n     * ],\n     * ```\n     */\n    wordWrap: true\n\n    /* eslint-enable jsdoc/require-description-complete-sentence */\n  };\n});", "import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { extend } from \"../../../helpers/object.mjs\";\nimport { extendByMetaType } from \"../utils.mjs\";\nimport metaSchemaFactory from \"../metaSchema.mjs\";\n/**\n * @typedef {Options} TableMeta\n */\n/**\n * @returns {TableMeta} Returns an empty object. The holder for global meta object.\n */\nfunction createTableMetaEmptyClass() {\n  return class TableMeta {};\n}\n\n/**\n * The global meta object is a root of all default settings, which are recognizable by Handsontable.\n * Other layers are inherited from this object. Adding, removing, or changing property in that\n * object has a direct reflection to all layers such as: TableMeta, ColumnMeta, or CellMeta layers.\n *\n * +-------------+.\n * │ GlobalMeta  │\n * │ (prototype) │\n * +-------------+\\\n *       │         \\\n *       │          \\\n *      \\│/         _\\|\n * +-------------+    +-------------+.\n * │ TableMeta   │    │ ColumnMeta  │\n * │ (instance)  │    │ (prototype) │\n * +-------------+    +-------------+.\n *                         │\n *                         │\n *                        \\│/\n *                    +-------------+.\n *                    │  CellMeta   │\n *                    │ (instance)  │\n *                    +-------------+.\n */\nexport default class GlobalMeta {\n  constructor(hot) {\n    /**\n     * An alias for the constructor. Necessary for inheritance for creating new layers.\n     *\n     * @type {TableMeta}\n     */\n    _defineProperty(this, \"metaCtor\", createTableMetaEmptyClass());\n    /**\n     * Main object (prototype of the internal TableMeta class), holder for all default settings.\n     *\n     * @type {object}\n     */\n    _defineProperty(this, \"meta\", void 0);\n    this.meta = this.metaCtor.prototype;\n    extend(this.meta, metaSchemaFactory());\n    this.meta.instance = hot;\n  }\n\n  /**\n   * Gets constructor of the global meta object. Necessary for inheritance for creating the next meta layers.\n   *\n   * @returns {Function}\n   */\n  getMetaConstructor() {\n    return this.metaCtor;\n  }\n\n  /**\n   * Gets settings object for this layer.\n   *\n   * @returns {object}\n   */\n  getMeta() {\n    return this.meta;\n  }\n\n  /**\n   * Updates global settings object by merging settings with the current state.\n   *\n   * @param {object} settings An object to merge with.\n   */\n  updateMeta(settings) {\n    var _settings$type;\n    extend(this.meta, settings);\n    extendByMetaType(this.meta, {\n      ...settings,\n      type: (_settings$type = settings.type) !== null && _settings$type !== void 0 ? _settings$type : this.meta.type\n    }, settings);\n  }\n}", "import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { extend } from \"../../../helpers/object.mjs\";\nimport { extendByMetaType } from \"../utils.mjs\";\n/**\n * The table meta object is a layer that keeps all settings of the Handsontable that was passed in\n * the constructor. That layer contains all default settings inherited from the GlobalMeta layer\n * merged with settings passed by the developer. Adding, removing, or changing property in that\n * object has no direct reflection on any other layers.\n *\n * +-------------+.\n * │ GlobalMeta  │\n * │ (prototype) │\n * +-------------+\\\n *       │         \\\n *       │          \\\n *      \\│/         _\\|\n * +-------------+    +-------------+.\n * │ TableMeta   │    │ ColumnMeta  │\n * │ (instance)  │    │ (prototype) │\n * +-------------+    +-------------+.\n *                         │\n *                         │\n *                        \\│/\n *                    +-------------+.\n *                    │  CellMeta   │\n *                    │ (instance)  │\n *                    +-------------+.\n */\nexport default class TableMeta {\n  constructor(globalMeta) {\n    /**\n     * Main object (instance of the internal TableMeta class from GlobalMeta), holder for all settings defined in the table scope.\n     *\n     * @type {TableMeta}\n     */\n    _defineProperty(this, \"meta\", void 0);\n    const MetaCtor = globalMeta.getMetaConstructor();\n    this.meta = new MetaCtor();\n  }\n\n  /**\n   * Gets settings object for this layer.\n   *\n   * @returns {TableMeta}\n   */\n  getMeta() {\n    return this.meta;\n  }\n\n  /**\n   * Updates table settings object by merging settings with the current state.\n   *\n   * @param {object} settings An object to merge with.\n   */\n  updateMeta(settings) {\n    extend(this.meta, settings);\n    extendByMetaType(this.meta, settings, settings);\n  }\n}", "import \"core-js/modules/es.error.cause.js\";\nlet _Symbol$iterator;\nimport \"core-js/modules/es.array.push.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { arrayFilter } from \"../../helpers/array.mjs\";\nimport { assert, isUnsignedNumber, isNullish } from \"./utils.mjs\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * @class LazyFactoryMap\n *\n * The LazyFactoryMap object holds key-value pairs in the structure similar to the\n * regular Map. Once created, items can be moved around a grid depending on the operations\n * performed on that grid - adding or removing rows. The collection requires \"key\"\n * to be a zero-based index.\n *\n * It's essential to notice that the \"key\" index under which the item was created\n * is volatile. After altering the grid, the \"key\" index can change.\n *\n * Having created N items with corresponding example data where the data has 10\n * holes (`undefined` values) within (that's why internal storage index counts from 10).\n * +------+------+------+------+------+.\n * | 0/10 | 1/11 | 2/12 | 3/13 | 4/14 |  Keys (volatile zero-based index / internal storage index)\n * +------+------+------+------+------+.\n *    │      │      │      │      │\n * +------+------+------+------+------+.\n * | AAA  | BBB  | CCC  | DDD  | EEE  |  Data\n * +------+------+------+------+------+.\n *\n * Map.obtain(0) // returns \"AAA\"\n * map.obtain(2) // returns \"CCC\".\n *\n * After inserting 2 new rows, keys that hold the data positioned after the place\n * where the new rows are added are upshifted by 2.\n *               │\n *               │ Insert 2 rows\n *              \\│/\n * +------+------+------+------+------+.\n * | 0/10 | 1/11 | 2/12 | 3/13 | 4/14 |  Keys before\n * +------+------+------+------+------+.\n *\n *                / 2 new rows \\\n * +------+------+------+------+------+------+------+.\n * | 0/10 | 1/11 | 2/15 | 3/16 | 4/12 | 5/13 | 6/14 |  Keys after\n * +------+------+------+------+------+------+------+.\n *    │       │      │      │      │      │     │\n *    │       │      └──────┼──────┼──────┼┐    │\n *    │       │             └──────┼──────┼┼────┼┐\n *    │       │      ┌─────────────┘      ││    ││\n *    │       │      │      ┌─────────────┘│    ││\n *    │       │      │      │      ┌───────┼────┘│\n *    │       │      │      │      │       │     │\n * +------+------+------+------+------+------+------+.\n * | AAA  | BBB  | CCC  | DDD  | EEE  | FFF  | GGG  |  Data\n * +------+------+------+------+------+------+------+\n *\n * Now at index 2 and 3 we have access to new items.\n *\n * map.obtain(2) // returns new value \"FFF\" for newly created row.\n * map.obtain(4) // index shifted by 2 has access to the old \"CCC\" value, as before inserting.\n *\n * after removing 4 rows, keys that hold the data positioned after the place where the\n * rows are removed are downshifted by 4.\n *        │\n *        │ Remove 4 rows\n *        ├───────────────────────────┐\n *       \\│/                          │\n * +------+------+------+------+------+------+------+\n * | 0/10 | 1/11 | 2/15 | 3/16 | 4/12 | 5/13 | 6/14 |  Keys after\n * +------+------+------+------+------+------+------+\n *    │       │      │      │      │      │     │\n *    │       │      └──────┼──────┼──────┼┐    │\n *    │       │             └──────┼──────┼┼────┼┐\n *    │       │      ┌─────────────┘      ││    ││\n *    │       │      │      ┌─────────────┘│    ││\n *    │       │      │      │      ┌───────┼────┘│\n *    │       │      │      │      │       │     │\n * +------+------+------+------+------+------+------+\n * | AAA  | BBB  | CCC  | DDD  | EEE  | FFF  | GGG  |  Data\n * +------+------+------+------+------+------+------+\n *\n * +------+------+------+\n * | 0/10 | 1/13 | 2/14 |  Keys after\n * +------+------+------+\n *    │       │      │\n *    │       │      └─────────────┐\n *    │       └────────────┐       │\n *    │                    │       │\n *    │                    │       │\n *    │                    │       │\n *    │                    │       │\n * +------+------+------+------+------+------+------+\n * | AAA  | BBB  | CCC  | DDD  | EEE  | FFF  | GGG  |  Data\n * +------+------+------+------+------+------+------+\n *           /│\\   /│\\                   /│\\   /│\\\n *            └──┬──┘                     └──┬──┘\n *           This data is marked as \"hole\" which\n *           means that can be replaced by new item\n *           when that will be created.\n *\n * map.obtain(2) // returns the value (\"EEE\") as it should. Access to the value is\n *               // changed (the key was downshifted). However, the internal index has not changed,\n *               // which means that the data does not need to be changed (spliced) too.\n *\n * After previous remove operation which creates some \"holes\" obtaining new\n * items replaces that \"holes\" as follows:\n *\n * // Obtains new item\n * map.obtain(90) // Returns \"NEW\" value\n *\n * +------+------+------+...+------+\n * | 0/10 | 1/13 | 2/14 |   | 90/0 |  Keys after\n * +------+------+------+...+------+\n *    │       │      │          │\n *    │       │      └──────────┼────────────┐\n *    │       └─────────────────┼─────┐      │\n *    └──────────┐              │     │      │\n *               │              │     │      │\n *    ┌──────────┼──────────────┘     │      │\n *    │          │                    │      │\n * +------+...+------+------+------+------+------+-----+\n * | NEW  |   | AAA  | BBB  | CCC  | DDD  | EEE  | FFF |  Data\n * +------+...+------+------+------+------+------+-----+\n *   /│\\\n *    │\n * The first \"hole\" (at index 0) item is permanently removed and replaced by a new item.\n * The hole index is taken from the hole collection which act as FIFO (First In First Out).\n */\n/* eslint-enable jsdoc/require-description-complete-sentence */\n_Symbol$iterator = Symbol.iterator;\nexport default class LazyFactoryMap {\n  constructor(valueFactory) {\n    /**\n     * The data factory function.\n     *\n     * @type {Function}\n     */\n    _defineProperty(this, \"valueFactory\", void 0);\n    /**\n     * An array which contains data.\n     *\n     * @type {Array}\n     */\n    _defineProperty(this, \"data\", []);\n    /**\n     * An array of indexes where the key of the array is mapped to the value which points to the\n     * specific position of the data array.\n     *\n     * @type {number[]}\n     */\n    _defineProperty(this, \"index\", []);\n    /**\n     * The collection of indexes that points to the data items which can be replaced by obtaining new\n     * ones. The \"holes\" are an intended effect of deleting entries.\n     *\n     * The idea of \"holes\" generally allows us to not modify the \"data\" structure while removing\n     * items from the collection.\n     *\n     * @type {Set<number>}\n     */\n    _defineProperty(this, \"holes\", new Set());\n    this.valueFactory = valueFactory;\n  }\n\n  /**\n   * Gets or if data not exist creates and returns new data.\n   *\n   * @param {number} key The item key as zero-based index.\n   * @returns {*}\n   */\n  obtain(key) {\n    assert(() => isUnsignedNumber(key), 'Expecting an unsigned number.');\n    const dataIndex = this._getStorageIndexByKey(key);\n    let result;\n    if (dataIndex >= 0) {\n      result = this.data[dataIndex];\n      if (result === undefined) {\n        result = this.valueFactory(key);\n        this.data[dataIndex] = result;\n      }\n    } else {\n      result = this.valueFactory(key);\n      if (this.holes.size > 0) {\n        const reuseIndex = this.holes.values().next().value; // Gets first item from the collection\n\n        this.holes.delete(reuseIndex);\n        this.data[reuseIndex] = result;\n        this.index[key] = reuseIndex;\n      } else {\n        this.data.push(result);\n        this.index[key] = this.data.length - 1;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Inserts an empty data to the map. This method creates an empty space for obtaining\n   * new data.\n   *\n   * @param {number} key The key as volatile zero-based index at which to begin inserting space for new data.\n   * @param {number} [amount=1] Ammount of data to insert.\n   */\n  insert(key) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    assert(() => isUnsignedNumber(key) || isNullish(key), 'Expecting an unsigned number or null/undefined argument.');\n    const newIndexes = [];\n    const dataLength = this.data.length;\n    for (let i = 0; i < amount; i++) {\n      newIndexes.push(dataLength + i);\n      this.data.push(undefined);\n    }\n    const insertionIndex = isNullish(key) ? this.index.length : key;\n    this.index = [...this.index.slice(0, insertionIndex), ...newIndexes, ...this.index.slice(insertionIndex)];\n  }\n\n  /**\n   * Removes (soft remove) data from \"index\" and according to the amount of data.\n   *\n   * @param {number} key The key as volatile zero-based index at which to begin removing the data.\n   * @param {number} [amount=1] Ammount data to remove.\n   */\n  remove(key) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    assert(() => isUnsignedNumber(key) || isNullish(key), 'Expecting an unsigned number or null/undefined argument.');\n    const removed = this.index.splice(isNullish(key) ? this.index.length - amount : key, amount);\n    for (let i = 0; i < removed.length; i++) {\n      const removedIndex = removed[i];\n      if (typeof removedIndex === 'number') {\n        this.holes.add(removedIndex);\n      }\n    }\n  }\n\n  /**\n   * Returns the size of the data which this map holds.\n   *\n   * @returns {number}\n   */\n  size() {\n    return this.data.length - this.holes.size;\n  }\n\n  /**\n   * Returns a new Iterator object that contains the values for each item in the LazyMap object.\n   *\n   * @returns {Iterator}\n   */\n  values() {\n    return arrayFilter(this.data, (_, index) => !this.holes.has(index))[Symbol.iterator]();\n  }\n\n  /**\n   * Returns a new Iterator object that contains an array of `[index, value]` for each item in the LazyMap object.\n   *\n   * @returns {Iterator}\n   */\n  entries() {\n    const validEntries = [];\n    for (let i = 0; i < this.data.length; i++) {\n      const keyIndex = this._getKeyByStorageIndex(i);\n      if (keyIndex !== -1) {\n        validEntries.push([keyIndex, this.data[i]]);\n      }\n    }\n    let dataIndex = 0;\n    return {\n      next: () => {\n        if (dataIndex < validEntries.length) {\n          const value = validEntries[dataIndex];\n          dataIndex += 1;\n          return {\n            value,\n            done: false\n          };\n        }\n        return {\n          done: true\n        };\n      }\n    };\n  }\n\n  /**\n   * Clears the map.\n   */\n  clear() {\n    this.data = [];\n    this.index = [];\n    this.holes.clear();\n  }\n\n  /**\n   * Gets storage index calculated from the key associated with the specified value.\n   *\n   * @param {number} key Volatile zero-based index.\n   * @returns {number} Returns index 0-N or -1 if no storage index found.\n   */\n  _getStorageIndexByKey(key) {\n    return this.index.length > key ? this.index[key] : -1;\n  }\n\n  /**\n   * Gets the key associated with the specified value calculated from storage index.\n   *\n   * @param {number} dataIndex Zero-based storage index.\n   * @returns {number} Returns index 0-N or -1 if no key found.\n   */\n  _getKeyByStorageIndex(dataIndex) {\n    return this.index.indexOf(dataIndex);\n  }\n\n  /**\n   * Makes this object iterable.\n   *\n   * @returns {Iterator}\n   */\n  [_Symbol$iterator]() {\n    return this.entries();\n  }\n}", "import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { extend } from \"../../../helpers/object.mjs\";\nimport { columnFactory, extendByMetaType } from \"../utils.mjs\";\nimport LazyFactoryMap from \"../lazyFactoryMap.mjs\";\n/**\n * List of props which have to be cleared in the column meta-layer. That props have a\n * different meaning when using in column meta.\n *\n * @type {string[]}\n */\nconst COLUMNS_PROPS_CONFLICTS = ['data', 'width'];\n\n/**\n * The column meta object is a root of all settings defined in the column property of the Handsontable\n * settings. Each column in the Handsontable is associated with a unique meta object which is managed by\n * this layer. Adding, removing, or changing property in that object has a direct reflection only for\n * the CellMeta layer. The reflection will be visible only if the property doesn't exist in the lower\n * layers (prototype lookup).\n *\n * +-------------+.\n * │ GlobalMeta  │\n * │ (prototype) │\n * +-------------+\\\n *       │         \\\n *       │          \\\n *      \\│/         _\\|\n * +-------------+    +-------------+.\n * │ TableMeta   │    │ ColumnMeta  │\n * │ (instance)  │    │ (prototype) │\n * +-------------+    +-------------+.\n *                         │\n *                         │\n *                        \\│/\n *                    +-------------+.\n *                    │  CellMeta   │\n *                    │ (instance)  │\n *                    +-------------+.\n */\nexport default class ColumnMeta {\n  constructor(globalMeta) {\n    /**\n     * Reference to the GlobalMeta layer. While creating new column meta objects, all new objects\n     * inherit properties from the GlobalMeta layer.\n     *\n     * @type {GlobalMeta}\n     */\n    _defineProperty(this, \"globalMeta\", void 0);\n    /**\n     * The LazyFactoryMap structure, holder for column meta objects where each column meta is\n     * stored under the physical column index.\n     *\n     * @type {LazyFactoryMap}\n     */\n    _defineProperty(this, \"metas\", new LazyFactoryMap(() => this._createMeta()));\n    this.globalMeta = globalMeta;\n    this.metas = new LazyFactoryMap(() => this._createMeta());\n  }\n\n  /**\n   * Updates column meta object by merging settings with the current state.\n   *\n   * @param {number} physicalColumn The physical column index which points what column meta object is updated.\n   * @param {object} settings An object to merge with.\n   */\n  updateMeta(physicalColumn, settings) {\n    const meta = this.getMeta(physicalColumn);\n    extend(meta, settings);\n    extendByMetaType(meta, settings);\n  }\n\n  /**\n   * Creates one or more columns at specific position.\n   *\n   * @param {number} physicalColumn The physical column index which points from what position the column is added.\n   * @param {number} amount An amount of columns to add.\n   */\n  createColumn(physicalColumn, amount) {\n    this.metas.insert(physicalColumn, amount);\n  }\n\n  /**\n   * Removes one or more columns from the collection.\n   *\n   * @param {number} physicalColumn The physical column index which points from what position the column is removed.\n   * @param {number} amount An amount columns to remove.\n   */\n  removeColumn(physicalColumn, amount) {\n    this.metas.remove(physicalColumn, amount);\n  }\n\n  /**\n   * Gets settings object for this layer.\n   *\n   * @param {number} physicalColumn The physical column index.\n   * @returns {object}\n   */\n  getMeta(physicalColumn) {\n    return this.metas.obtain(physicalColumn);\n  }\n\n  /**\n   * Gets constructor of the column meta object. Necessary for inheritance - creating the next meta layers.\n   *\n   * @param {number} physicalColumn The physical column index.\n   * @returns {Function}\n   */\n  getMetaConstructor(physicalColumn) {\n    return this.metas.obtain(physicalColumn).constructor;\n  }\n\n  /**\n   * Clears all saved column meta objects.\n   */\n  clearCache() {\n    this.metas.clear();\n  }\n\n  /**\n   * Creates and returns new column meta object with properties inherited from the global meta layer.\n   *\n   * @private\n   * @returns {object}\n   */\n  _createMeta() {\n    return columnFactory(this.globalMeta.getMetaConstructor(), COLUMNS_PROPS_CONFLICTS).prototype;\n  }\n}", "import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { extend } from \"../../../helpers/object.mjs\";\nimport { extendByMetaType, assert, isUnsignedNumber } from \"../utils.mjs\";\nimport LazyFactoryMap from \"../lazyFactoryMap.mjs\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * @class CellMeta\n *\n * The cell meta object is a root of all settings defined for the specific cell rendered by the\n * Handsontable. Each cell meta inherits settings from higher layers. When a property doesn't\n * exist in that layer, it is looked up through a prototype to the highest layer. Starting\n * from CellMeta -> ColumnMeta and ending to GlobalMeta, which stores default settings. Adding,\n * removing, or changing property in that object has no direct reflection on any other layers.\n *\n * +-------------+\n * │ GlobalMeta  │\n * │ (prototype) │\n * +-------------+\\\n *       │         \\\n *       │          \\\n *      \\│/         _\\|\n * +-------------+    +-------------+\n * │ TableMeta   │    │ ColumnMeta  │\n * │ (instance)  │    │ (prototype) │\n * +-------------+    +-------------+\n *                         │\n *                         │\n *                        \\│/\n *                    +-------------+\n *                    │  CellMeta   │\n *                    │ (instance)  │\n *                    +-------------+\n */\n/* eslint-enable jsdoc/require-description-complete-sentence */\nexport default class CellMeta {\n  constructor(columnMeta) {\n    /**\n     * Reference to the ColumnMeta layer. While creating new cell meta objects, all new objects\n     * inherit properties from the ColumnMeta layer.\n     *\n     * @type {ColumnMeta}\n     */\n    _defineProperty(this, \"columnMeta\", void 0);\n    /**\n     * Holder for cell meta objects, organized as a grid of LazyFactoryMap of LazyFactoryMaps.\n     * The access to the cell meta object is done through access to the row defined by the physical\n     * row index and then by accessing the second LazyFactory Map under the physical column index.\n     *\n     * @type {LazyFactoryMap<number, LazyFactoryMap<number, object>>}\n     */\n    _defineProperty(this, \"metas\", new LazyFactoryMap(() => this._createRow()));\n    this.columnMeta = columnMeta;\n  }\n\n  /**\n   * Updates cell meta object by merging settings with the current state.\n   *\n   * @param {number} physicalRow The physical row index which points what cell meta object is updated.\n   * @param {number} physicalColumn The physical column index which points what cell meta object is updated.\n   * @param {object} settings An object to merge with.\n   */\n  updateMeta(physicalRow, physicalColumn, settings) {\n    const meta = this.getMeta(physicalRow, physicalColumn);\n    extend(meta, settings);\n    extendByMetaType(meta, settings);\n  }\n\n  /**\n   * Creates one or more rows at specific position.\n   *\n   * @param {number} physicalRow The physical row index which points from what position the row is added.\n   * @param {number} amount An amount of rows to add.\n   */\n  createRow(physicalRow, amount) {\n    this.metas.insert(physicalRow, amount);\n  }\n\n  /**\n   * Creates one or more columns at specific position.\n   *\n   * @param {number} physicalColumn The physical column index which points from what position the column is added.\n   * @param {number} amount An amount of columns to add.\n   */\n  createColumn(physicalColumn, amount) {\n    for (let i = 0; i < this.metas.size(); i++) {\n      this.metas.obtain(i).insert(physicalColumn, amount);\n    }\n  }\n\n  /**\n   * Removes one or more rows from the collection.\n   *\n   * @param {number} physicalRow The physical row index which points from what position the row is removed.\n   * @param {number} amount An amount of rows to remove.\n   */\n  removeRow(physicalRow, amount) {\n    this.metas.remove(physicalRow, amount);\n  }\n\n  /**\n   * Removes one or more columns from the collection.\n   *\n   * @param {number} physicalColumn The physical column index which points from what position the column is removed.\n   * @param {number} amount An amount of columns to remove.\n   */\n  removeColumn(physicalColumn, amount) {\n    for (let i = 0; i < this.metas.size(); i++) {\n      this.metas.obtain(i).remove(physicalColumn, amount);\n    }\n  }\n\n  /**\n   * Gets settings object for this layer.\n   *\n   * @param {number} physicalRow The physical row index.\n   * @param {number} physicalColumn The physical column index.\n   * @param {string} [key] If the key exists its value will be returned, otherwise the whole cell meta object.\n   * @returns {object}\n   */\n  getMeta(physicalRow, physicalColumn, key) {\n    const cellMeta = this.metas.obtain(physicalRow).obtain(physicalColumn);\n    if (key === undefined) {\n      return cellMeta;\n    }\n    return cellMeta[key];\n  }\n\n  /**\n   * Sets settings object for this layer defined by \"key\" property.\n   *\n   * @param {number} physicalRow The physical row index.\n   * @param {number} physicalColumn The physical column index.\n   * @param {string} key The property name to set.\n   * @param {*} value Value to save.\n   */\n  setMeta(physicalRow, physicalColumn, key, value) {\n    var _cellMeta$_automatica;\n    const cellMeta = this.metas.obtain(physicalRow).obtain(physicalColumn);\n    (_cellMeta$_automatica = cellMeta._automaticallyAssignedMetaProps) === null || _cellMeta$_automatica === void 0 || _cellMeta$_automatica.delete(key);\n    cellMeta[key] = value;\n  }\n\n  /**\n   * Removes a property defined by the \"key\" argument from the cell meta object.\n   *\n   * @param {number} physicalRow The physical row index.\n   * @param {number} physicalColumn The physical column index.\n   * @param {string} key The property name to remove.\n   */\n  removeMeta(physicalRow, physicalColumn, key) {\n    const cellMeta = this.metas.obtain(physicalRow).obtain(physicalColumn);\n    delete cellMeta[key];\n  }\n\n  /**\n   * Returns all cell meta objects that were created during the Handsontable operation. As cell meta\n   * objects are created lazy, the length of the returned collection depends on how and when the\n   * table has asked for access to that meta objects.\n   *\n   * @returns {object[]}\n   */\n  getMetas() {\n    const metas = [];\n    const rows = Array.from(this.metas.values());\n    for (let row = 0; row < rows.length; row++) {\n      metas.push(...rows[row].values());\n    }\n    return metas;\n  }\n\n  /**\n   * Returns all cell meta objects that were created during the Handsontable operation but for\n   * specific row index.\n   *\n   * @param {number} physicalRow The physical row index.\n   * @returns {object[]}\n   */\n  getMetasAtRow(physicalRow) {\n    assert(() => isUnsignedNumber(physicalRow), 'Expecting an unsigned number.');\n    const rowsMeta = new Map(this.metas);\n    return rowsMeta.has(physicalRow) ? Array.from(rowsMeta.get(physicalRow).values()) : [];\n  }\n\n  /**\n   * Clears all saved cell meta objects.\n   */\n  clearCache() {\n    this.metas.clear();\n  }\n\n  /**\n   * Creates and returns new structure for cell meta objects stored in columnar axis.\n   *\n   * @private\n   * @returns {object}\n   */\n  _createRow() {\n    return new LazyFactoryMap(physicalColumn => this._createMeta(physicalColumn));\n  }\n\n  /**\n   * Creates and returns new cell meta object with properties inherited from the column meta layer.\n   *\n   * @private\n   * @param {number} physicalColumn The physical column index.\n   * @returns {object}\n   */\n  _createMeta(physicalColumn) {\n    const ColumnMeta = this.columnMeta.getMetaConstructor(physicalColumn);\n    return new ColumnMeta();\n  }\n}", "import \"core-js/modules/es.error.cause.js\";\nimport GlobalMeta from \"./metaLayers/globalMeta.mjs\";\nimport TableMeta from \"./metaLayers/tableMeta.mjs\";\nimport ColumnMeta from \"./metaLayers/columnMeta.mjs\";\nimport CellMeta from \"./metaLayers/cellMeta.mjs\";\nimport localHooks from \"../../mixins/localHooks.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\n/**\n * With the Meta Manager class, it can be possible to manage with meta objects for different layers in\n * one place. All coordinates used to fetch, updating, removing, or creating rows or columns have to\n * be passed as physical values.\n *\n * The diagram of the meta layers:\n * +-------------+.\n * │ GlobalMeta  │\n * │ (prototype) │\n * +-------------+\\\n *       │         \\\n *       │          \\\n *      \\│/         _\\|\n * +-------------+    +-------------+.\n * │ TableMeta   │    │ ColumnMeta  │\n * │ (instance)  │    │ (prototype) │\n * +-------------+    +-------------+.\n *                         │\n *                         │\n *                        \\│/\n *                    +-------------+.\n *                    │  CellMeta   │\n *                    │ (instance)  │\n *                    +-------------+.\n *\n * A more detailed description of the specific layers can be found in the \"metaLayers/\" modules description.\n */\nexport default class MetaManager {\n  constructor(hot) {\n    let customSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let metaMods = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    /**\n     * @type {Handsontable}\n     */\n    this.hot = hot;\n    /**\n     * @type {GlobalMeta}\n     */\n    this.globalMeta = new GlobalMeta(hot);\n    /**\n     * @type {TableMeta}\n     */\n    this.tableMeta = new TableMeta(this.globalMeta);\n    /**\n     * @type {ColumnMeta}\n     */\n    this.columnMeta = new ColumnMeta(this.globalMeta);\n    /**\n     * @type {CellMeta}\n     */\n    this.cellMeta = new CellMeta(this.columnMeta);\n    metaMods.forEach(ModifierClass => new ModifierClass(this));\n    this.globalMeta.updateMeta(customSettings);\n  }\n\n  /**\n   * Gets the global meta object that is a root of all default settings, which are recognizable by Handsontable.\n   * Other layers inherites all properties from this. Adding, removing, or changing property in that\n   * object has a direct reflection to all layers.\n   *\n   * @returns {object}\n   */\n  getGlobalMeta() {\n    return this.globalMeta.getMeta();\n  }\n\n  /**\n   * Updates global settings object by merging settings with the current state.\n   *\n   * @param {object} settings An object to merge with.\n   */\n  updateGlobalMeta(settings) {\n    this.globalMeta.updateMeta(settings);\n  }\n\n  /**\n   * Gets settings object that was passed in the Handsontable constructor. That layer contains all\n   * default settings inherited from the GlobalMeta layer merged with settings passed by the developer.\n   * Adding, removing, or changing property in that object has no direct reflection on any other layers.\n   *\n   * @returns {TableMeta}\n   */\n  getTableMeta() {\n    return this.tableMeta.getMeta();\n  }\n\n  /**\n   * Updates table settings object by merging settings with the current state.\n   *\n   * @param {object} settings An object to merge with.\n   */\n  updateTableMeta(settings) {\n    this.tableMeta.updateMeta(settings);\n  }\n\n  /**\n   * Gets column meta object that is a root of all settings defined in the column property of the Handsontable\n   * settings. Each column in the Handsontable is associated with a unique meta object which identified by\n   * the physical column index. Adding, removing, or changing property in that object has a direct reflection\n   * only for the CellMeta layer. The reflection will be visible only if the property doesn't exist in the lower\n   * layers (prototype lookup).\n   *\n   * @param {number} physicalColumn The physical column index.\n   * @returns {object}\n   */\n  getColumnMeta(physicalColumn) {\n    return this.columnMeta.getMeta(physicalColumn);\n  }\n\n  /**\n   * Updates column meta object by merging settings with the current state.\n   *\n   * @param {number} physicalColumn The physical column index which points what column meta object is updated.\n   * @param {object} settings An object to merge with.\n   */\n  updateColumnMeta(physicalColumn, settings) {\n    this.columnMeta.updateMeta(physicalColumn, settings);\n  }\n\n  /**\n   * Gets the cell meta object that is a root of all settings defined for the specific cell rendered by\n   * the Handsontable. Each cell meta inherits settings from higher layers. When a property doesn't\n   * exist in that layer, it is looked up through a prototype to the highest layer. Starting\n   * from CellMeta -> ColumnMeta and ending to GlobalMeta, which stores default settings. Adding,\n   * removing, or changing property in that object has no direct reflection on any other layers.\n   *\n   * @param {number} physicalRow The physical row index.\n   * @param {number} physicalColumn The physical column index.\n   * @param {object} options Additional options that are used to extend the cell meta object.\n   * @param {number} options.visualRow The visual row index of the currently requested cell meta object.\n   * @param {number} options.visualColumn The visual column index of the currently requested cell meta object.\n   * @returns {object}\n   */\n  getCellMeta(physicalRow, physicalColumn, _ref) {\n    let {\n      visualRow,\n      visualColumn\n    } = _ref;\n    const cellMeta = this.cellMeta.getMeta(physicalRow, physicalColumn);\n    cellMeta.visualRow = visualRow;\n    cellMeta.visualCol = visualColumn;\n    cellMeta.row = physicalRow;\n    cellMeta.col = physicalColumn;\n    this.runLocalHooks('afterGetCellMeta', cellMeta);\n    return cellMeta;\n  }\n\n  /**\n   * Gets a value (defined by the `key` property) from the cell meta object.\n   *\n   * @param {number} physicalRow The physical row index.\n   * @param {number} physicalColumn The physical column index.\n   * @param {string} key Defines the value that will be returned from the cell meta object.\n   * @returns {*}\n   */\n  getCellMetaKeyValue(physicalRow, physicalColumn, key) {\n    if (typeof key !== 'string') {\n      throw new Error('The passed cell meta object key is not a string');\n    }\n    return this.cellMeta.getMeta(physicalRow, physicalColumn, key);\n  }\n\n  /**\n   * Sets settings object for cell meta object defined by \"key\" property.\n   *\n   * @param {number} physicalRow The physical row index.\n   * @param {number} physicalColumn The physical column index.\n   * @param {string} key The property name to set.\n   * @param {*} value Value to save.\n   */\n  setCellMeta(physicalRow, physicalColumn, key, value) {\n    this.cellMeta.setMeta(physicalRow, physicalColumn, key, value);\n  }\n\n  /**\n   * Updates cell meta object by merging settings with the current state.\n   *\n   * @param {number} physicalRow The physical row index which points what cell meta object is updated.\n   * @param {number} physicalColumn The physical column index which points what cell meta object is updated.\n   * @param {object} settings An object to merge with.\n   */\n  updateCellMeta(physicalRow, physicalColumn, settings) {\n    this.cellMeta.updateMeta(physicalRow, physicalColumn, settings);\n  }\n\n  /**\n   * Removes a property defined by the \"key\" argument from the cell meta object.\n   *\n   * @param {number} physicalRow The physical row index.\n   * @param {number} physicalColumn The physical column index.\n   * @param {string} key The property name to remove.\n   */\n  removeCellMeta(physicalRow, physicalColumn, key) {\n    this.cellMeta.removeMeta(physicalRow, physicalColumn, key);\n  }\n\n  /**\n   * Returns all cell meta objects that were created during the Handsontable operation. As cell meta\n   * objects are created lazy, the length of the returned collection depends on how and when the\n   * table has asked for access to that meta objects.\n   *\n   * @returns {object[]}\n   */\n  getCellsMeta() {\n    return this.cellMeta.getMetas();\n  }\n\n  /**\n   * Returns all cell meta objects that were created during the Handsontable operation but for\n   * specyfic row index.\n   *\n   * @param {number} physicalRow The physical row index.\n   * @returns {object[]}\n   */\n  getCellsMetaAtRow(physicalRow) {\n    return this.cellMeta.getMetasAtRow(physicalRow);\n  }\n\n  /**\n   * Creates one or more rows at specific position.\n   *\n   * @param {number} physicalRow The physical row index which points from what position the row is added.\n   * @param {number} [amount=1] An amount of rows to add.\n   */\n  createRow(physicalRow) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    this.cellMeta.createRow(physicalRow, amount);\n  }\n\n  /**\n   * Removes one or more rows from the collection.\n   *\n   * @param {number} physicalRow The physical row index which points from what position the row is removed.\n   * @param {number} [amount=1] An amount rows to remove.\n   */\n  removeRow(physicalRow) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    this.cellMeta.removeRow(physicalRow, amount);\n  }\n\n  /**\n   * Creates one or more columns at specific position.\n   *\n   * @param {number} physicalColumn The physical column index which points from what position the column is added.\n   * @param {number} [amount=1] An amount of columns to add.\n   */\n  createColumn(physicalColumn) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    this.cellMeta.createColumn(physicalColumn, amount);\n    this.columnMeta.createColumn(physicalColumn, amount);\n  }\n\n  /**\n   * Removes one or more columns from the collection.\n   *\n   * @param {number} physicalColumn The physical column index which points from what position the column is removed.\n   * @param {number} [amount=1] An amount of columns to remove.\n   */\n  removeColumn(physicalColumn) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    this.cellMeta.removeColumn(physicalColumn, amount);\n    this.columnMeta.removeColumn(physicalColumn, amount);\n  }\n\n  /**\n   * Clears all saved cell meta objects. It keeps column meta, table meta, and global meta intact.\n   */\n  clearCellsCache() {\n    this.cellMeta.clearCache();\n  }\n\n  /**\n   * Clears all saved cell and columns meta objects.\n   */\n  clearCache() {\n    this.cellMeta.clearCache();\n    this.columnMeta.clearCache();\n  }\n}\nmixin(MetaManager, localHooks);", "import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport { toUpperCaseFirst } from \"../helpers/string.mjs\";\nimport { isFunction } from \"../helpers/function.mjs\";\nimport DataMap from \"./dataMap.mjs\";\nimport { deepClone } from \"../helpers/object.mjs\";\nimport { setAttribute } from \"../helpers/dom/element.mjs\";\nimport { A11Y_COLCOUNT, A11Y_ROWCOUNT } from \"../helpers/a11y.mjs\";\n/**\n * Loads new data to Handsontable.\n *\n * @private\n * @param {Array} data Array of arrays or array of objects containing data.\n * @param {Function} setDataMapFunction Function that updates the datamap instance.\n * @param {Function} callbackFunction Function that takes care of updating Handsontable to the new dataset. Called\n * right before the `after-` hooks.\n * @param {object} config The configuration object containing all the needed dependency references and information.\n * @param {Handsontable.Core} config.hotInstance The Handsontable instance.\n * @param {DataMap} config.dataMap The current `dataMap` instance.\n * @param {DataSource} config.dataSource The current `dataSource` instance.\n * @param {string} config.internalSource The immediate internal source of the `replaceData` call.\n * @param {string} config.source The source of the call.\n * @param {boolean} config.firstRun `true` if it's a first call in the Handsontable lifecycle, `false` otherwise.\n * @fires Hooks#beforeLoadData\n * @fires Hooks#beforeUpdateData\n * @fires Hooks#afterLoadData\n * @fires Hooks#afterUpdateData\n * @fires Hooks#afterChange\n */\nfunction replaceData(data, setDataMapFunction, callbackFunction, config) {\n  const {\n    hotInstance,\n    dataMap,\n    dataSource,\n    internalSource,\n    source,\n    metaManager,\n    firstRun\n  } = config;\n  const capitalizedInternalSource = toUpperCaseFirst(internalSource);\n  const tableMeta = hotInstance.getSettings();\n  if (Array.isArray(tableMeta.dataSchema)) {\n    hotInstance.dataType = 'array';\n  } else if (isFunction(tableMeta.dataSchema)) {\n    hotInstance.dataType = 'function';\n  } else {\n    hotInstance.dataType = 'object';\n  }\n  if (dataMap) {\n    dataMap.destroy();\n  }\n  data = hotInstance.runHooks(`before${capitalizedInternalSource}`, data, firstRun, source);\n  const newDataMap = new DataMap(hotInstance, data, metaManager);\n\n  // We need to apply the new dataMap immediately, because of some asynchronous logic in the\n  // `autoRowSize`/`autoColumnSize` plugins.\n  setDataMapFunction(newDataMap);\n  if (typeof data === 'object' && data !== null) {\n    if (!(data.push && data.splice)) {\n      // check if data is array. Must use duck-type check so Backbone Collections also pass it\n      // when data is not an array, attempt to make a single-row array of it\n      // eslint-disable-next-line no-param-reassign\n      data = [data];\n    }\n  } else if (data === null) {\n    const dataSchema = newDataMap.getSchema();\n\n    // eslint-disable-next-line no-param-reassign\n    data = [];\n    let row;\n    let r = 0;\n    let rlen = 0;\n    for (r = 0, rlen = tableMeta.startRows; r < rlen; r++) {\n      if ((hotInstance.dataType === 'object' || hotInstance.dataType === 'function') && tableMeta.dataSchema) {\n        row = deepClone(dataSchema);\n        data.push(row);\n      } else if (hotInstance.dataType === 'array') {\n        row = deepClone(dataSchema[0]);\n        data.push(row);\n      } else {\n        row = [];\n        for (let c = 0, clen = tableMeta.startCols; c < clen; c++) {\n          row.push(null);\n        }\n        data.push(row);\n      }\n    }\n  } else {\n    throw new Error(`${internalSource} only accepts array of objects or array of arrays (${typeof data} given)`);\n  }\n  if (Array.isArray(data[0])) {\n    hotInstance.dataType = 'array';\n  }\n  tableMeta.data = data;\n  newDataMap.dataSource = data;\n  dataSource.data = data;\n  dataSource.dataType = hotInstance.dataType;\n  dataSource.colToProp = newDataMap.colToProp.bind(newDataMap);\n  dataSource.propToCol = newDataMap.propToCol.bind(newDataMap);\n  dataSource.countCachedColumns = newDataMap.countCachedColumns.bind(newDataMap);\n\n  // Run the logic for reassuring that the table structure fits the new dataset.\n  callbackFunction(newDataMap);\n  hotInstance.runHooks(`after${capitalizedInternalSource}`, data, firstRun, source);\n\n  // TODO: rethink the way the `afterChange` hook is being run here in the core `init` method.\n  if (!firstRun) {\n    hotInstance.runHooks('afterChange', null, internalSource);\n    hotInstance.render();\n  }\n  if (hotInstance.getSettings().ariaTags) {\n    setAttribute(hotInstance.rootElement, [A11Y_ROWCOUNT(-1),\n    // If run after initialization, add the number of row headers.\n    A11Y_COLCOUNT(hotInstance.countCols() + (hotInstance.view ? hotInstance.countRowHeaders() : 0))]);\n  }\n}\nexport { replaceData };", "import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport Hooks from \"../../../pluginHooks.mjs\";\nimport { hasOwnProperty } from \"../../../helpers/object.mjs\";\nimport { isFunction } from \"../../../helpers/function.mjs\";\n/**\n * @class DynamicCellMetaMod\n *\n * The `DynamicCellMetaMod` modifier allows for extending cell meta objects\n * (returned by `getCellMeta()` from `MetaManager`)\n * by user-specific properties.\n *\n * The user-specific properties can be added and changed dynamically,\n * either by Handsontable's hooks (`beforeGetCellMeta` and`afterGetCellMeta`),\n * or by Handsontable's `cells` option.\n *\n * The `getCellMeta()` method is used widely throughout the source code.\n * To boost the method's execution time,\n * the logic is triggered only once per one Handsontable slow render cycle.\n */\nexport class DynamicCellMetaMod {\n  constructor(metaManager) {\n    /**\n     * @type {MetaManager}\n     */\n    _defineProperty(this, \"metaManager\", void 0);\n    /**\n     * @type {Map}\n     */\n    _defineProperty(this, \"metaSyncMemo\", new Map());\n    this.metaManager = metaManager;\n    metaManager.addLocalHook('afterGetCellMeta', cellMeta => this.extendCellMeta(cellMeta));\n    Hooks.getSingleton().add('beforeRender', forceFullRender => {\n      if (forceFullRender) {\n        this.metaSyncMemo.clear();\n      }\n    }, this.metaManager.hot);\n  }\n\n  /**\n   * Extends the cell meta object by user-specific properties.\n   *\n   * The cell meta object can be extended dynamically,\n   * either by Handsontable's hooks (`beforeGetCellMeta` and`afterGetCellMeta`),\n   * or by Handsontable's `cells` option.\n   *\n   * To boost performance, the extending process is triggered only once per one slow Handsontable render cycle.\n   *\n   * @param {object} cellMeta The cell meta object.\n   */\n  extendCellMeta(cellMeta) {\n    var _this$metaSyncMemo$ge;\n    const {\n      row: physicalRow,\n      col: physicalColumn\n    } = cellMeta;\n    if ((_this$metaSyncMemo$ge = this.metaSyncMemo.get(physicalRow)) !== null && _this$metaSyncMemo$ge !== void 0 && _this$metaSyncMemo$ge.has(physicalColumn)) {\n      return;\n    }\n    const {\n      visualRow,\n      visualCol\n    } = cellMeta;\n    const hot = this.metaManager.hot;\n    const prop = hot.colToProp(visualCol);\n    cellMeta.prop = prop;\n    hot.runHooks('beforeGetCellMeta', visualRow, visualCol, cellMeta);\n\n    // extend a `type` value, added or changed in the `beforeGetCellMeta` hook\n    const cellType = hasOwnProperty(cellMeta, 'type') ? cellMeta.type : null;\n    let cellSettings = isFunction(cellMeta.cells) ? cellMeta.cells(physicalRow, physicalColumn, prop) : null;\n    if (cellType) {\n      if (cellSettings) {\n        var _cellSettings$type;\n        cellSettings.type = (_cellSettings$type = cellSettings.type) !== null && _cellSettings$type !== void 0 ? _cellSettings$type : cellType;\n      } else {\n        cellSettings = {\n          type: cellType\n        };\n      }\n    }\n    if (cellSettings) {\n      this.metaManager.updateCellMeta(physicalRow, physicalColumn, cellSettings);\n    }\n    hot.runHooks('afterGetCellMeta', visualRow, visualCol, cellMeta);\n    if (!this.metaSyncMemo.has(physicalRow)) {\n      this.metaSyncMemo.set(physicalRow, new Set());\n    }\n    this.metaSyncMemo.get(physicalRow).add(physicalColumn);\n  }\n}", "import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/**\n * @class ExtendMetaPropertiesMod\n */\nexport class ExtendMetaPropertiesMod {\n  constructor(metaManager) {\n    /**\n     * @type {MetaManager}\n     */\n    _defineProperty(this, \"metaManager\", void 0);\n    /**\n     * @type {Set}\n     */\n    _defineProperty(this, \"usageTracker\", new Set());\n    /**\n     * @type {Map}\n     */\n    _defineProperty(this, \"propDescriptors\", new Map([['ariaTags', {\n      onChange(propName, value, isInitialChange) {\n        if (!isInitialChange) {\n          throw new Error(`The \\`${propName}\\` option can not be updated after the Handsontable instance was initialized.`);\n        }\n      }\n    }], ['fixedColumnsLeft', {\n      target: 'fixedColumnsStart',\n      onChange(propName) {\n        const isRtl = this.metaManager.hot.isRtl();\n        if (isRtl && propName === 'fixedColumnsLeft') {\n          throw new Error('The `fixedColumnsLeft` is not supported for RTL. Please use option `fixedColumnsStart`.');\n        }\n        if (this.usageTracker.has('fixedColumnsLeft') && this.usageTracker.has('fixedColumnsStart')) {\n          throw new Error('The `fixedColumnsLeft` and `fixedColumnsStart` should not be used together. ' + 'Please use only the option `fixedColumnsStart`.');\n        }\n      }\n    }], ['layoutDirection', {\n      onChange(propName, value, isInitialChange) {\n        if (!isInitialChange) {\n          throw new Error(`The \\`${propName}\\` option can not be updated after the Handsontable is initialized.`);\n        }\n      }\n    }]]));\n    this.metaManager = metaManager;\n    this.extendMetaProps();\n  }\n\n  /**\n   * Extends the meta options based on the object descriptors from the `propDescriptors` list.\n   */\n  extendMetaProps() {\n    this.propDescriptors.forEach((descriptor, alias) => {\n      const {\n        target,\n        onChange = () => {}\n      } = descriptor;\n      const hasTarget = typeof target === 'string';\n      const targetProp = hasTarget ? target : alias;\n      const origProp = `_${targetProp}`;\n      this.metaManager.globalMeta.meta[origProp] = this.metaManager.globalMeta.meta[targetProp];\n      this.installPropWatcher(alias, origProp, onChange);\n      if (hasTarget) {\n        this.installPropWatcher(target, origProp, onChange);\n      }\n    });\n  }\n\n  /**\n   * Installs the property watcher to the `propName` option and forwards getter and setter to\n   * the new one.\n   *\n   * @param {string} propName The property to watch.\n   * @param {string} origProp The property from/to the value is forwarded.\n   * @param {Function} onChange The callback.\n   */\n  installPropWatcher(propName, origProp, onChange) {\n    const self = this;\n    Object.defineProperty(this.metaManager.globalMeta.meta, propName, {\n      get() {\n        return this[origProp];\n      },\n      set(value) {\n        const isInitialChange = !self.usageTracker.has(propName);\n        self.usageTracker.add(propName);\n        onChange.call(self, propName, value, isInitialChange);\n        this[origProp] = value;\n      },\n      enumerable: true,\n      configurable: true\n    });\n  }\n}", "import { setAttribute } from \"../../helpers/dom/element.mjs\";\nimport { A11Y_PRESENTATION, A11Y_HIDDEN } from \"../../helpers/a11y.mjs\";\n/**\n * Installs a focus detector module. The module appends two input elements into the DOM side by side.\n * When the first input is focused, then it means that a user entered to the component using the TAB key\n * from the element above. When the second input is focused, a user enters to the component from\n * the element below the table. Each action, once detected, triggers the specific hook.\n *\n * @param {Handsontable} hot The Handsontable instance.\n * @param {{ onFocusFromTop: Function, onFocusFromBottom: Function }} hooks An object with defined callbacks to call.\n * @returns {{ activate: Function, deactivate: Function }}\n */\nexport function installFocusDetector(hot) {\n  let hooks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const rootElement = hot.rootElement;\n  const inputTrapTop = createInputElement(hot);\n  const inputTrapBottom = createInputElement(hot);\n  inputTrapTop.addEventListener('focus', () => hooks === null || hooks === void 0 ? void 0 : hooks.onFocusFromTop());\n  inputTrapBottom.addEventListener('focus', () => hooks === null || hooks === void 0 ? void 0 : hooks.onFocusFromBottom());\n  rootElement.firstChild.before(inputTrapTop);\n  rootElement.lastChild.after(inputTrapBottom);\n  return {\n    /**\n     * Activates the detector by resetting the tabIndex of the input elements.\n     */\n    activate() {\n      hot._registerTimeout(() => {\n        inputTrapTop.tabIndex = 0;\n        inputTrapBottom.tabIndex = 0;\n      }, 10);\n    },\n    /**\n     * Deactivates the detector by setting tabIndex to -1.\n     */\n    deactivate() {\n      hot._registerTimeout(() => {\n        inputTrapTop.tabIndex = -1;\n        inputTrapBottom.tabIndex = -1;\n      }, 10);\n    }\n  };\n}\n\n/**\n * Creates a new HTML input element.\n *\n * @param {Handsontable} hot The Handsontable instance.\n * @returns {HTMLInputElement}\n */\nfunction createInputElement(hot) {\n  const rootDocument = hot.rootDocument;\n  const input = rootDocument.createElement('input');\n  input.type = 'text';\n  input.classList.add('htFocusCatcher');\n  if (hot.getSettings().ariaTags) {\n    setAttribute(input, [A11Y_PRESENTATION(), A11Y_HIDDEN()]);\n  }\n  return input;\n}", "import { GRID_GROUP } from \"../../shortcutContexts/index.mjs\";\nimport { installFocusDetector } from \"./focusDetector.mjs\";\n/**\n * Installs a focus catcher module. The module observes when the table is focused and depending on\n * from the which side it was focused on it selects a specified cell or releases the TAB navigation\n * to the browser.\n *\n * @param {Core} hot The Handsontable instance.\n */\nexport function installFocusCatcher(hot) {\n  let recentlyAddedFocusCoords;\n  const {\n    activate,\n    deactivate\n  } = installFocusDetector(hot, {\n    onFocusFromTop() {\n      var _recentlyAddedFocusCo;\n      const mostTopStartCoords = (_recentlyAddedFocusCo = recentlyAddedFocusCoords) !== null && _recentlyAddedFocusCo !== void 0 ? _recentlyAddedFocusCo : getMostTopStartPosition(hot);\n      if (mostTopStartCoords) {\n        hot.runHooks('modifyFocusOnTabNavigation', 'from_above', mostTopStartCoords);\n        hot.selectCell(mostTopStartCoords.row, mostTopStartCoords.col);\n      }\n      hot.listen();\n    },\n    onFocusFromBottom() {\n      var _recentlyAddedFocusCo2;\n      const mostBottomEndCoords = (_recentlyAddedFocusCo2 = recentlyAddedFocusCoords) !== null && _recentlyAddedFocusCo2 !== void 0 ? _recentlyAddedFocusCo2 : getMostBottomEndPosition(hot);\n      if (mostBottomEndCoords) {\n        hot.runHooks('modifyFocusOnTabNavigation', 'from_below', mostBottomEndCoords);\n        hot.selectCell(mostBottomEndCoords.row, mostBottomEndCoords.col);\n      }\n      hot.listen();\n    }\n  });\n  const rowWrapState = {\n    wrapped: false,\n    flipped: false\n  };\n  let isSavingCoordsEnabled = true;\n  let isTabOrShiftTabPressed = false;\n  hot.addHook('afterListen', () => deactivate());\n  hot.addHook('afterUnlisten', () => activate());\n  hot.addHook('afterSelection', (row, column, row2, column2, preventScrolling) => {\n    if (isTabOrShiftTabPressed && rowWrapState.wrapped && rowWrapState.flipped) {\n      preventScrolling.value = true;\n    }\n    if (isSavingCoordsEnabled) {\n      var _hot$getSelectedRange;\n      recentlyAddedFocusCoords = (_hot$getSelectedRange = hot.getSelectedRangeLast()) === null || _hot$getSelectedRange === void 0 ? void 0 : _hot$getSelectedRange.highlight;\n    }\n  });\n  hot.addHook('beforeRowWrap', (interruptedByAutoInsertMode, newCoords, isFlipped) => {\n    rowWrapState.wrapped = true;\n    rowWrapState.flipped = isFlipped;\n  });\n\n  /**\n   * Unselects the cell and deactivates the table.\n   */\n  function deactivateTable() {\n    rowWrapState.wrapped = false;\n    rowWrapState.flipped = false;\n    hot.deselectCell();\n    hot.unlisten();\n  }\n  const shortcutOptions = {\n    keys: [['Tab'], ['Shift', 'Tab']],\n    preventDefault: false,\n    stopPropagation: false,\n    relativeToGroup: GRID_GROUP,\n    group: 'focusCatcher'\n  };\n  hot.getShortcutManager().getContext('grid').addShortcuts([{\n    ...shortcutOptions,\n    callback: () => {\n      isTabOrShiftTabPressed = true;\n      if (hot.getSelectedRangeLast() && !hot.getSettings().tabNavigation) {\n        isSavingCoordsEnabled = false;\n      }\n    },\n    position: 'before'\n  }, {\n    ...shortcutOptions,\n    callback: event => {\n      const {\n        tabNavigation,\n        autoWrapRow\n      } = hot.getSettings();\n      isTabOrShiftTabPressed = false;\n      isSavingCoordsEnabled = true;\n      if (!tabNavigation || !hot.selection.isSelected() || autoWrapRow && rowWrapState.wrapped && rowWrapState.flipped || !autoWrapRow && rowWrapState.wrapped) {\n        if (autoWrapRow && rowWrapState.wrapped && rowWrapState.flipped) {\n          recentlyAddedFocusCoords = event.shiftKey ? getMostTopStartPosition(hot) : getMostBottomEndPosition(hot);\n        }\n        deactivateTable();\n        return false;\n      }\n\n      // if the selection is still within the table's range then prevent default action\n      event.preventDefault();\n    },\n    position: 'after'\n  }]);\n}\n\n/**\n * Gets the coordinates of the most top-start cell or header (depends on the table settings and its size).\n *\n * @param {Core} hot The Handsontable instance.\n * @returns {CellCoords|null}\n */\nfunction getMostTopStartPosition(hot) {\n  const {\n    rowIndexMapper,\n    columnIndexMapper\n  } = hot;\n  const {\n    navigableHeaders\n  } = hot.getSettings();\n  let topRow = navigableHeaders && hot.countColHeaders() > 0 ? -hot.countColHeaders() : 0;\n  let startColumn = navigableHeaders && hot.countRowHeaders() > 0 ? -hot.countRowHeaders() : 0;\n  if (topRow === 0) {\n    topRow = rowIndexMapper.getVisualFromRenderableIndex(topRow);\n  }\n  if (startColumn === 0) {\n    startColumn = columnIndexMapper.getVisualFromRenderableIndex(startColumn);\n  }\n  if (topRow === null || startColumn === null) {\n    return null;\n  }\n  return hot._createCellCoords(topRow, startColumn);\n}\n\n/**\n * Gets the coordinates of the most bottom-end cell or header (depends on the table settings and its size).\n *\n * @param {Core} hot The Handsontable instance.\n * @returns {CellCoords|null}\n */\nfunction getMostBottomEndPosition(hot) {\n  var _rowIndexMapper$getVi, _columnIndexMapper$ge;\n  const {\n    rowIndexMapper,\n    columnIndexMapper\n  } = hot;\n  const {\n    navigableHeaders\n  } = hot.getSettings();\n  let bottomRow = rowIndexMapper.getRenderableIndexesLength() - 1;\n  let endColumn = columnIndexMapper.getRenderableIndexesLength() - 1;\n  if (bottomRow < 0) {\n    if (!navigableHeaders || hot.countColHeaders() === 0) {\n      return null;\n    }\n    bottomRow = -1;\n  }\n  if (endColumn < 0) {\n    if (!navigableHeaders || hot.countColHeaders() === 0) {\n      return null;\n    }\n    endColumn = -1;\n  }\n  return hot._createCellCoords((_rowIndexMapper$getVi = rowIndexMapper.getVisualFromRenderableIndex(bottomRow)) !== null && _rowIndexMapper$getVi !== void 0 ? _rowIndexMapper$getVi : bottomRow, (_columnIndexMapper$ge = columnIndexMapper.getVisualFromRenderableIndex(endColumn)) !== null && _columnIndexMapper$ge !== void 0 ? _columnIndexMapper$ge : endColumn);\n}", "// This file handles key-name discrepancies between browsers.\n// For the list of discrepancies, go to: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values.\nconst mappings = new Map([[' ', 'space'],\n// custom mapping\n['spacebar', 'space'], ['scroll', 'scrolllock'], ['del', 'delete'], ['esc', 'escape'], ['medianexttrack', 'mediatracknext'], ['mediaprevioustrack', 'mediatrackprevious'], ['volumeup', 'audiovolumeup'], ['volumedown', 'audiovolumedown'], ['volumemute', 'audiovolumemute'], ['multiply', '*'], ['add', '+'], ['divide', '/'], ['subtract', '-'], ['left', 'arrowleft'], ['right', 'arrowright'], ['up', 'arrowup'], ['down', 'arrowdown']]);\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * Get a single, normalized string from the list of the `KeyboardEvent.key` properties.\n *\n * @param {Array<string>} keys The list of the `KeyboardEvent.key` properties\n * @returns {string}\n */\nexport const normalizeKeys = keys => {\n  return keys.map(key => {\n    const lowercaseKey = key.toLowerCase();\n    if (mappings.has(lowercaseKey)) {\n      return mappings.get(lowercaseKey);\n    }\n    return lowercaseKey;\n  }).sort().join('+');\n};\n\n/**\n * Get the list of the `KeyboardEvent.key` properties from a single, normalized string.\n *\n * @param {string} normalizedKeys A single, normalized string that contains the list of the `KeyboardEvent.key` properties\n * @returns {Array<string>}\n */\nexport const getKeysList = normalizedKeys => {\n  return normalizedKeys.split('+');\n};\n\n/**\n * The regex tests if the event.code matches to the pattern and it's used to extract letters and digits from\n * the string.\n */\nconst codeToKeyRegExp = new RegExp('^(?:Key|Digit)([A-Z0-9])$');\nconst keyCodeNames = new Set(['Backquote', 'Minus', 'Equal', 'BracketLeft', 'BracketRight', 'Backslash', 'Semicolon', 'Quote', 'Comma', 'Period', 'Slash']);\n\n/**\n * Normalizes a keyboard event key value to a key before its modification. When the keyboard event\n * is triggered with Alt, Control or Shift keys the `key` property contains modified key e.g. for Alt+L\n * it will be `ł`. But that value is only valid for polish keyboard layout. To fix that limitations, for\n * letters and digits the value is taken from the `code` property which holds original value before\n * transformation.\n *\n * @param {Event} event The KeyboardEvent object.\n * @returns {string}\n */\nexport const normalizeEventKey = _ref => {\n  let {\n    key,\n    code\n  } = _ref;\n  let normalizedKey = key;\n  if (codeToKeyRegExp.test(code)) {\n    normalizedKey = code.replace(codeToKeyRegExp, '$1');\n  } else if (keyCodeNames.has(code)) {\n    normalizedKey = code;\n  }\n  return normalizedKey.toLowerCase();\n};", "import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { createUniqueMap } from \"../utils/dataStructures/uniqueMap.mjs\";\nimport { normalizeKeys, getKeysList } from \"./utils.mjs\";\nimport { isUndefined, isDefined } from \"../helpers/mixed.mjs\";\nimport { isFunction } from \"../helpers/function.mjs\";\nimport { objectEach, isObject } from \"../helpers/object.mjs\";\nimport { toSingleLine } from \"../helpers/templateLiteralTag.mjs\";\nconst __kindOf = Symbol('shortcut-context');\n\n/**\n * Checks if the provided object is a context object.\n *\n * @param {*} objectToCheck An object to check.\n * @returns {boolean}\n */\nexport function isContextObject(objectToCheck) {\n  return isObject(objectToCheck) && objectToCheck.__kindOf === __kindOf;\n}\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * The `ShortcutContext` API lets you store and manage [keyboard shortcuts](@/guides/navigation/keyboard-shortcuts.md) in a given [context](@/guides/navigation/keyboard-shortcuts.md#keyboard-shortcut-contexts).\n *\n * Each `ShortcutContext` object stores and manages its own set of keyboard shortcuts.\n *\n * @alias ShortcutContext\n * @class ShortcutContext\n * @param {string} name The name of the keyboard shortcut context\n * @returns {object}\n */\nexport const createContext = name => {\n  const SHORTCUTS = createUniqueMap({\n    errorIdExists: keys => `The \"${keys}\" shortcut is already registered in the \"${name}\" context.`\n  });\n\n  /**\n   * Add a keyboard shortcut to this context.\n   *\n   * @memberof ShortcutContext#\n   * @param {object} options The shortcut's options\n   * @param {Array<Array<string>>} options.keys Names of the shortcut's keys,\n   * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),\n   * in lowercase or uppercase, unified across browsers\n   * @param {Function} options.callback The shortcut's action\n   * @param {object} options.group A group of shortcuts to which the shortcut belongs\n   * @param {object} [options.runOnlyIf] A condition on which the shortcut's action runs\n   * @param {object} [options.stopPropagation=false] If set to `true`: stops the event's propagation\n   * @param {object} [options.captureCtrl=false] If set to `true`: captures the state of the Control/Meta modifier key\n   * @param {object} [options.preventDefault=true] If set to `true`: prevents the default behavior\n   * @param {object} [options.position='after'] The order in which the shortcut's action runs:\n   * `'before'` or `'after'` the `relativeToGroup` group of actions\n   * @param {object} [options.relativeToGroup] The name of a group of actions, used to determine an action's `position`\n   * @param {object} [options.forwardToContext] The context object where the event will be forwarded to.\n   */\n  const addShortcut = function () {\n    let {\n      keys,\n      callback,\n      group,\n      runOnlyIf = () => true,\n      captureCtrl = false,\n      preventDefault = true,\n      stopPropagation = false,\n      relativeToGroup,\n      position,\n      forwardToContext\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (isUndefined(group)) {\n      throw new Error('You need to define the shortcut\\'s group.');\n    }\n    if (isFunction(callback) === false) {\n      throw new Error('The shortcut\\'s callback needs to be a function.');\n    }\n    if (Array.isArray(keys) === false) {\n      throw new Error(toSingleLine`Pass the shortcut\\'s keys as an array of arrays,\\x20\n      using the KeyboardEvent.key properties:\\x20\n      https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values.`);\n    }\n    const newShortcut = {\n      callback,\n      group,\n      runOnlyIf,\n      captureCtrl,\n      preventDefault,\n      stopPropagation\n    };\n    if (isDefined(relativeToGroup)) {\n      [newShortcut.relativeToGroup, newShortcut.position] = [relativeToGroup, position];\n    }\n    if (isContextObject(forwardToContext)) {\n      newShortcut.forwardToContext = forwardToContext;\n    }\n    keys.forEach(keyCombination => {\n      const normalizedKeys = normalizeKeys(keyCombination);\n      const hasKeyCombination = SHORTCUTS.hasItem(normalizedKeys);\n      if (hasKeyCombination) {\n        const shortcuts = SHORTCUTS.getItem(normalizedKeys);\n        let insertionIndex = shortcuts.findIndex(shortcut => shortcut.group === relativeToGroup);\n        if (insertionIndex !== -1) {\n          if (position === 'before') {\n            insertionIndex -= 1;\n          } else {\n            insertionIndex += 1;\n          }\n        } else {\n          insertionIndex = shortcuts.length;\n        }\n        shortcuts.splice(insertionIndex, 0, newShortcut);\n      } else {\n        SHORTCUTS.addItem(normalizedKeys, [newShortcut]);\n      }\n    });\n  };\n\n  /**\n   * Add multiple keyboard shortcuts to this context.\n   *\n   * @memberof ShortcutContext#\n   * @param {Array<object>} shortcuts List of shortcuts to add to this shortcut context\n   * @param {object} [options] A shortcut's options\n   * @param {Function} [options.callback] A shortcut's action\n   * @param {object} [options.group] A group of shortcuts to which a shortcut belongs\n   * @param {object} [options.runOnlyIf] A condition on which a shortcut's action runs\n   * @param {object} [options.stopPropagation=false] If set to `true`: stops the event's propagation\n   * @param {object} [options.preventDefault=true] If set to `true`: prevents the default behavior\n   * @param {object} [options.position='after'] The order in which a shortcut's action runs:\n   * `'before'` or `'after'` a `relativeToGroup` group of actions\n   * @param {object} [options.relativeToGroup] The name of a group of actions, used to determine an action's `position`\n   * @param {object} [options.forwardToContext] The context object where the event will be forwarded to.\n   */\n  const addShortcuts = function (shortcuts) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    shortcuts.forEach(shortcut => {\n      objectEach(options, (value, key) => {\n        if (Object.prototype.hasOwnProperty.call(shortcut, key) === false) {\n          shortcut[key] = options[key];\n        }\n      });\n      addShortcut(shortcut);\n    });\n  };\n\n  /**\n   * Remove a shortcut from this context.\n   *\n   * @memberof ShortcutContext#\n   * @param {Array<string>} keys Names of the shortcut's keys,\n   * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),\n   * in lowercase or uppercase, unified across browsers\n   */\n  const removeShortcutsByKeys = keys => {\n    const normalizedKeys = normalizeKeys(keys);\n    SHORTCUTS.removeItem(normalizedKeys);\n  };\n\n  /**\n   * Remove a group of shortcuts from this context.\n   *\n   * @memberof ShortcutContext#\n   * @param {string} group The name of the group of shortcuts\n   */\n  const removeShortcutsByGroup = group => {\n    const shortcuts = SHORTCUTS.getItems();\n    shortcuts.forEach(_ref => {\n      let [normalizedKeys, shortcutOptions] = _ref;\n      const leftOptions = shortcutOptions.filter(option => option.group !== group);\n      if (leftOptions.length === 0) {\n        removeShortcutsByKeys(getKeysList(normalizedKeys));\n      } else {\n        shortcutOptions.length = 0;\n        shortcutOptions.push(...leftOptions);\n      }\n    });\n  };\n\n  /**\n   * Get a shortcut's details.\n   *\n   * @memberof ShortcutContext#\n   * @param {Array<string>} keys Names of the shortcut's keys,\n   * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),\n   * in lowercase or uppercase, unified across browsers\n   * @returns {Array}\n   */\n  const getShortcuts = keys => {\n    const normalizedKeys = normalizeKeys(keys);\n    const shortcuts = SHORTCUTS.getItem(normalizedKeys);\n    return isDefined(shortcuts) ? shortcuts.slice() : [];\n  };\n\n  /**\n   * Check if a shortcut exists in this context.\n   *\n   * @memberof ShortcutContext#\n   * @param {Array<string>} keys Names of the shortcut's keys,\n   * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),\n   * in lowercase or uppercase, unified across browsers\n   * @returns {boolean}\n   */\n  const hasShortcut = keys => {\n    const normalizedKeys = normalizeKeys(keys);\n    return SHORTCUTS.hasItem(normalizedKeys);\n  };\n  return {\n    __kindOf,\n    addShortcut,\n    addShortcuts,\n    getShortcuts,\n    hasShortcut,\n    removeShortcutsByKeys,\n    removeShortcutsByGroup\n  };\n};", "/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * Create a key observer.\n *\n * @returns {object}\n */\nexport function createKeysObserver() {\n  const PRESSED_KEYS = new Set();\n  return {\n    /**\n     * Press a key.\n     *\n     * @param {string} key Names of the shortcut's keys,\n     * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),\n     * in lowercase or uppercase, unified across browsers\n     */\n    press(key) {\n      PRESSED_KEYS.add(key);\n    },\n    /**\n     * Release a pressed key.\n     *\n     * @param {string} key Names of the shortcut's keys,\n     * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),\n     * in lowercase or uppercase, unified across browsers\n     */\n    release(key) {\n      PRESSED_KEYS.delete(key);\n    },\n    /**\n     * Release all pressed keys.\n     */\n    releaseAll() {\n      PRESSED_KEYS.clear();\n    },\n    /**\n     * Check if a key is pressed.\n     *\n     * @param {string} key Names of the shortcut's keys,\n     * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),\n     * in lowercase or uppercase, unified across browsers\n     * @returns {boolean}\n     */\n    isPressed(key) {\n      return PRESSED_KEYS.has(key);\n    }\n  };\n}", "import \"core-js/modules/es.array.push.js\";\nimport { createKeysObserver } from \"./keyObserver.mjs\";\nimport { normalizeEventKey } from \"./utils.mjs\";\nimport { isImmediatePropagationStopped } from \"../helpers/dom/event.mjs\";\nimport { getParentWindow } from \"../helpers/dom/element.mjs\";\nimport { isMacOS } from \"../helpers/browser.mjs\";\nconst MODIFIER_KEYS = ['meta', 'alt', 'shift', 'control'];\nconst modifierKeysObserver = createKeysObserver();\nlet instanceCounter = 0;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * A key recorder, used for tracking key events.\n *\n * @param {EventTarget} ownerWindow A starting `window` element\n * @param {Function} handleEvent A condition on which event is handled.\n * @param {Function} beforeKeyDown A hook fired before the `keydown` event is handled.\n * @param {Function} afterKeyDown A hook fired after the `keydown` event is handled\n * @param {Function} callback `KeyEvent`'s listener's callback function\n * @returns {object}\n */\nexport function useRecorder(ownerWindow, handleEvent, beforeKeyDown, afterKeyDown, callback) {\n  /**\n   * Check if a pressed key is tracked or not.\n   *\n   * @param {string} pressedKey A pressed key\n   * @returns {boolean}\n   */\n  const isModifierKey = pressedKey => {\n    return MODIFIER_KEYS.includes(pressedKey);\n  };\n\n  /**\n   * Get every pressed modifier key from the performed `KeyboardEvent`.\n   *\n   * @private\n   * @param {KeyboardEvent} event The event object.\n   * @param {boolean} [mergeMetaKeys=false] If `true,` the function will return the \"control\" and \"meta\"\n   *                                        modifiers keys as the \"control/meta\" name. This allows creating\n   *                                        keyboard shortcuts with modifier key that trigger the shortcut\n   *                                        actions depend on the OS keyboard layout (the Meta key for macOS\n   *                                        and Control for non macOS system).\n   * @returns {string[]}\n   */\n  const getPressedModifierKeys = function (event) {\n    let mergeMetaKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const pressedModifierKeys = [];\n    if (event.altKey) {\n      pressedModifierKeys.push('alt');\n    }\n    if (mergeMetaKeys && (event.ctrlKey || event.metaKey)) {\n      pressedModifierKeys.push('control/meta');\n    } else {\n      if (event.ctrlKey) {\n        pressedModifierKeys.push('control');\n      }\n      if (event.metaKey) {\n        pressedModifierKeys.push('meta');\n      }\n    }\n    if (event.shiftKey) {\n      pressedModifierKeys.push('shift');\n    }\n    return pressedModifierKeys;\n  };\n\n  /**\n   * `KeyboardEvent`'s callback function\n   *\n   * @private\n   * @param {KeyboardEvent} event The event object\n   */\n  const onkeydown = event => {\n    if (handleEvent(event) === false) {\n      return;\n    }\n    const result = beforeKeyDown(event);\n\n    // keyCode 229 aka 'uninitialized' doesn't take into account with editors. This key code is\n    // produced when unfinished character is entering using the IME editor. It is fired on macOS,\n    // Windows and linux (ubuntu) with installed ibus-pinyin package.\n    if (event.keyCode === 229 || result === false || isImmediatePropagationStopped(event)) {\n      return;\n    }\n    const pressedKey = normalizeEventKey(event);\n    let extraModifierKeys = [];\n    if (!isModifierKey(pressedKey)) {\n      extraModifierKeys = getPressedModifierKeys(event);\n    }\n    const pressedKeys = [pressedKey].concat(extraModifierKeys);\n    const isExecutionCancelled = callback(event, pressedKeys);\n    if (!isExecutionCancelled && (isMacOS() && extraModifierKeys.includes('meta') || !isMacOS() && extraModifierKeys.includes('control'))) {\n      // Trigger the callback for the virtual OS-dependent \"control/meta\" key\n      callback(event, [pressedKey].concat(getPressedModifierKeys(event, true)));\n    }\n    afterKeyDown(event);\n  };\n\n  /**\n   * `KeyboardEvent`'s callback function for observing the pressed state of the mod keys.\n   *\n   * @private\n   * @param {KeyboardEvent} event The event object\n   */\n  const onkeydownForModKeys = event => {\n    const pressedKey = normalizeEventKey(event);\n    if (isModifierKey(pressedKey)) {\n      modifierKeysObserver.press(pressedKey);\n    }\n  };\n\n  /**\n   * `KeyboardEvent`'s callback function for observing the pressed state of the mod keys.\n   *\n   * @private\n   * @param {KeyboardEvent} event The event object\n   */\n  const onkeyupForModKeys = event => {\n    const pressedKey = normalizeEventKey(event);\n    if (isModifierKey(pressedKey)) {\n      modifierKeysObserver.release(pressedKey);\n    }\n  };\n\n  /**\n   * `FocusEvent`'s callback function\n   *\n   * @private\n   */\n  const onblur = () => {\n    modifierKeysObserver.releaseAll();\n  };\n\n  /**\n   * Add event listeners to the starting window and its parents' windows.\n   */\n  const mount = () => {\n    let eventTarget = ownerWindow;\n    instanceCounter += 1;\n    while (eventTarget) {\n      if (instanceCounter === 1) {\n        eventTarget.document.documentElement.addEventListener('keydown', onkeydownForModKeys);\n        eventTarget.document.documentElement.addEventListener('keyup', onkeyupForModKeys);\n      }\n      eventTarget.document.documentElement.addEventListener('keydown', onkeydown);\n      eventTarget.document.documentElement.addEventListener('blur', onblur);\n      eventTarget = getParentWindow(eventTarget);\n    }\n  };\n\n  /**\n   * Remove event listeners from the starting window and its parents' windows.\n   */\n  const unmount = () => {\n    let eventTarget = ownerWindow;\n    instanceCounter -= 1;\n    while (eventTarget) {\n      if (instanceCounter === 0) {\n        eventTarget.document.documentElement.removeEventListener('keydown', onkeydownForModKeys);\n        eventTarget.document.documentElement.removeEventListener('keyup', onkeyupForModKeys);\n      }\n      eventTarget.document.documentElement.removeEventListener('keydown', onkeydown);\n      eventTarget.document.documentElement.removeEventListener('blur', onblur);\n      eventTarget = getParentWindow(eventTarget);\n    }\n  };\n  return {\n    mount,\n    unmount,\n    isPressed: key => modifierKeysObserver.isPressed(key),\n    releasePressedKeys: () => modifierKeysObserver.releaseAll()\n  };\n}", "import \"core-js/modules/es.error.cause.js\";\nimport { createUniqueMap } from \"../utils/dataStructures/uniqueMap.mjs\";\nimport { stopImmediatePropagation } from \"../helpers/dom/event.mjs\";\nimport { createContext, isContextObject } from \"./context.mjs\";\nimport { useRecorder } from \"./recorder.mjs\";\nimport { toSingleLine } from \"../helpers/templateLiteralTag.mjs\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * The `ShortcutManager` API lets you store and manage [keyboard shortcut contexts](@/guides/navigation/keyboard-shortcuts.md#keyboard-shortcut-contexts) ([`ShortcutContext`](@/api/shortcutContext.md)).\n *\n * Each `ShortcutManager` object:\n * - Stores and manages its own set of keyboard shortcut contexts.\n * - Listens to the [`KeyboardEvent`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent) events and runs actions for them.\n *\n * @alias ShortcutManager\n * @class ShortcutManager\n * @param {object} options The manager's options\n * @param {EventTarget} options.ownerWindow A starting `window` element\n * @param {Function} options.handleEvent A condition on which `event` is handled.\n * @param {Function} options.beforeKeyDown A hook fired before the `keydown` event is handled. You can use it to [block a keyboard shortcut's actions](@/guides/navigation/keyboard-shortcuts.md#block-a-keyboard-shortcut-s-actions).\n * @param {Function} options.afterKeyDown A hook fired after the `keydown` event is handled\n */\nexport const createShortcutManager = _ref => {\n  let {\n    ownerWindow,\n    handleEvent,\n    beforeKeyDown,\n    afterKeyDown\n  } = _ref;\n  /**\n   * A unique map that stores keyboard shortcut contexts.\n   *\n   * @type {UniqueMap}\n   */\n  const CONTEXTS = createUniqueMap({\n    errorIdExists: keys => `The \"${keys}\" context name is already registered.`\n  });\n  /**\n   * The name of the active [`ShortcutContext`](@/api/shortcutContext.md).\n   *\n   * @type {string}\n   */\n  let activeContextName = 'grid';\n\n  /**\n   * Create a new [`ShortcutContext`](@/api/shortcutContext.md) object.\n   *\n   * @memberof ShortcutManager#\n   * @param {string} contextName The name of the new shortcut context\n   * @returns {object}\n   */\n  const addContext = contextName => {\n    const context = createContext(contextName);\n    CONTEXTS.addItem(contextName, context);\n    return context;\n  };\n\n  /**\n   * Get the ID of the active [`ShortcutContext`](@/api/shortcutContext.md).\n   *\n   * @memberof ShortcutManager#\n   * @returns {string}\n   */\n  const getActiveContextName = () => {\n    return activeContextName;\n  };\n\n  /**\n   * Get a keyboard shortcut context by its name.\n   *\n   * @memberof ShortcutManager#\n   * @param {string} contextName The name of the shortcut context\n   * @returns {object|undefined} A [`ShortcutContext`](@/api/shortcutContext.md) object that stores registered shortcuts\n   */\n  const getContext = contextName => {\n    return CONTEXTS.getItem(contextName);\n  };\n\n  /**\n   * Start listening to keyboard shortcuts within a given [`ShortcutContext`](@/api/shortcutContext.md).\n   *\n   * @memberof ShortcutManager#\n   * @param {string} contextName The name of the shortcut context\n   */\n  const setActiveContextName = contextName => {\n    if (!CONTEXTS.hasItem(contextName)) {\n      throw new Error(toSingleLine`You've tried to activate the \"${contextName}\" shortcut context\\x20\n        that does not exist. Before activation, register the context using the \"addContext\" method.`);\n    }\n    activeContextName = contextName;\n  };\n\n  /**\n   * This variable relates to the `captureCtrl` shortcut option,\n   * which allows for capturing the state of the Control/Meta modifier key.\n   * Some of the default keyboard shortcuts related to cell selection need this feature for working properly.\n   *\n   * @type {boolean}\n   */\n  let isCtrlKeySilenced = false;\n\n  /**\n   * A callback function for listening events from the recorder.\n   *\n   * @param {KeyboardEvent} event The keyboard event.\n   * @param {string[]} keys Names of the shortcut's keys,\n   * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),\n   * in lowercase or uppercase, unified across browsers.\n   * @param {object | string} context The context object or name.\n   * @returns {boolean}\n   */\n  const recorderCallback = function (event, keys) {\n    let context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getActiveContextName();\n    const activeContext = isContextObject(context) ? context : getContext(context);\n    let isExecutionCancelled = false;\n    if (!activeContext.hasShortcut(keys)) {\n      return isExecutionCancelled;\n    }\n\n    // Processing just actions being in stack at the moment of shortcut pressing (without respecting additions/removals performed dynamically).\n    const shortcuts = activeContext.getShortcuts(keys);\n    for (let index = 0; index < shortcuts.length; index++) {\n      const {\n        callback,\n        runOnlyIf,\n        preventDefault,\n        stopPropagation,\n        captureCtrl,\n        forwardToContext\n      } = shortcuts[index];\n      if (runOnlyIf(event) === true) {\n        isCtrlKeySilenced = captureCtrl;\n        isExecutionCancelled = callback(event, keys) === false;\n        isCtrlKeySilenced = false;\n        if (preventDefault) {\n          event.preventDefault();\n        }\n        if (stopPropagation) {\n          stopImmediatePropagation(event);\n          event.stopPropagation();\n        }\n        if (isExecutionCancelled) {\n          break;\n        }\n        if (forwardToContext) {\n          recorderCallback(event, keys, forwardToContext);\n        }\n      }\n    }\n    return isExecutionCancelled;\n  };\n\n  /**\n   * Internal key recorder.\n   *\n   * @private\n   */\n  const keyRecorder = useRecorder(ownerWindow, handleEvent, beforeKeyDown, afterKeyDown, recorderCallback);\n  keyRecorder.mount();\n  return {\n    addContext,\n    getActiveContextName,\n    getContext,\n    setActiveContextName,\n    /**\n     * Returns whether `control` or `meta` keys are pressed.\n     *\n     * @memberof ShortcutManager#\n     * @type {Function}\n     * @returns {boolean}\n     */\n    isCtrlPressed: () => !isCtrlKeySilenced && (keyRecorder.isPressed('control') || keyRecorder.isPressed('meta')),\n    /**\n     * Release every previously pressed key.\n     *\n     * @type {Function}\n     * @memberof ShortcutManager#\n     */\n    releasePressedKeys: () => keyRecorder.releasePressedKeys(),\n    /**\n     * Destroy a context manager instance.\n     *\n     * @type {Function}\n     * @memberof ShortcutManager#\n     */\n    destroy: () => keyRecorder.unmount()\n  };\n};", "import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/web.immediate.js\";\nimport { addClass, empty, observeVisibilityChangeOnce, removeClass } from \"./helpers/dom/element.mjs\";\nimport { isFunction } from \"./helpers/function.mjs\";\nimport { isDefined, isUndefined, isRegExp, _injectProductInfo, isEmpty } from \"./helpers/mixed.mjs\";\nimport { isMobileBrowser, isIpadOS } from \"./helpers/browser.mjs\";\nimport EditorManager from \"./editorManager.mjs\";\nimport EventManager from \"./eventManager.mjs\";\nimport { deepClone, duckSchema, isObjectEqual, isObject, deepObjectSize, hasOwnProperty, createObjectPropListener, objectEach } from \"./helpers/object.mjs\";\nimport { FocusManager } from \"./focusManager.mjs\";\nimport { arrayMap, arrayEach, arrayReduce, getDifferenceOfArrays, stringToArray, pivot } from \"./helpers/array.mjs\";\nimport { instanceToHTML } from \"./utils/parseTable.mjs\";\nimport { getPlugin, getPluginsNames } from \"./plugins/registry.mjs\";\nimport { getRenderer } from \"./renderers/registry.mjs\";\nimport { getEditor } from \"./editors/registry.mjs\";\nimport { getValidator } from \"./validators/registry.mjs\";\nimport { randomString, toUpperCaseFirst } from \"./helpers/string.mjs\";\nimport { rangeEach, rangeEachReverse, isNumericLike } from \"./helpers/number.mjs\";\nimport TableView from \"./tableView.mjs\";\nimport DataSource from \"./dataMap/dataSource.mjs\";\nimport { spreadsheetColumnLabel } from \"./helpers/data.mjs\";\nimport { IndexMapper } from \"./translations/index.mjs\";\nimport { registerAsRootInstance, hasValidParameter, isRootInstance } from \"./utils/rootInstance.mjs\";\nimport { ViewportColumnsCalculator } from \"./3rdparty/walkontable/src/index.mjs\";\nimport Hooks from \"./pluginHooks.mjs\";\nimport { hasLanguageDictionary, getValidLanguageCode, getTranslatedPhrase } from \"./i18n/registry.mjs\";\nimport { warnUserAboutLanguageRegistration, normalizeLanguageCode } from \"./i18n/utils.mjs\";\nimport { Selection } from \"./selection/index.mjs\";\nimport { MetaManager, DynamicCellMetaMod, ExtendMetaPropertiesMod, replaceData } from \"./dataMap/index.mjs\";\nimport { installFocusCatcher } from \"./core/index.mjs\";\nimport { createUniqueMap } from \"./utils/dataStructures/uniqueMap.mjs\";\nimport { createShortcutManager } from \"./shortcuts/index.mjs\";\nimport { registerAllShortcutContexts } from \"./shortcutContexts/index.mjs\";\nlet activeGuid = null;\n\n/**\n * Keeps the collection of the all Handsontable instances created on the same page. The\n * list is then used to trigger the \"afterUnlisten\" hook when the \"listen()\" method was\n * called on another instance.\n *\n * @type {Map<string, Core>}\n */\nconst foreignHotInstances = new Map();\n\n/**\n * A set of deprecated feature names.\n *\n * @type {Set<string>}\n */\n// eslint-disable-next-line no-unused-vars\nconst deprecationWarns = new Set();\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * Handsontable constructor.\n *\n * @core\n * @class Core\n * @description\n *\n * The `Handsontable` class (known as the `Core`) lets you modify the grid's behavior by using Handsontable's public API methods.\n *\n * ::: only-for react\n * To use these methods, associate a Handsontable instance with your instance\n * of the [`HotTable` component](@/guides/getting-started/installation.md#_4-use-the-hottable-component),\n * by using React's `ref` feature (read more on the [Instance methods](@/guides/getting-started/react-methods.md) page).\n * :::\n *\n * ## How to call a method\n *\n * ::: only-for javascript\n * ```js\n * // create a Handsontable instance\n * const hot = new Handsontable(document.getElementById('example'), options);\n *\n * // call a method\n * hot.setDataAtCell(0, 0, 'new value');\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * import { useRef } from 'react';\n *\n * const hotTableComponent = useRef(null);\n *\n * <HotTable\n *   // associate your `HotTable` component with a Handsontable instance\n *   ref={hotTableComponent}\n *   settings={options}\n * />\n *\n * // access the Handsontable instance, under the `.current.hotInstance` property\n * // call a method\n * hotTableComponent.current.hotInstance.setDataAtCell(0, 0, 'new value');\n * ```\n * :::\n *\n * @param {HTMLElement} rootElement The element to which the Handsontable instance is injected.\n * @param {object} userSettings The user defined options.\n * @param {boolean} [rootInstanceSymbol=false] Indicates if the instance is root of all later instances created.\n */\nexport default function Core(rootElement, userSettings) {\n  var _userSettings$layoutD,\n    _this = this;\n  let rootInstanceSymbol = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let preventScrollingToCell = false;\n  let instance = this;\n  const eventManager = new EventManager(instance);\n  let datamap;\n  let dataSource;\n  let grid;\n  let editorManager;\n  let focusManager;\n  let firstRun = true;\n  if (hasValidParameter(rootInstanceSymbol)) {\n    registerAsRootInstance(this);\n  }\n\n  // TODO: check if references to DOM elements should be move to UI layer (Walkontable)\n  /**\n   * Reference to the container element.\n   *\n   * @private\n   * @type {HTMLElement}\n   */\n  this.rootElement = rootElement;\n  /**\n   * The nearest document over container.\n   *\n   * @private\n   * @type {Document}\n   */\n  this.rootDocument = rootElement.ownerDocument;\n  /**\n   * Window object over container's document.\n   *\n   * @private\n   * @type {Window}\n   */\n  this.rootWindow = this.rootDocument.defaultView;\n  /**\n   * A boolean to tell if the Handsontable has been fully destroyed. This is set to `true`\n   * after `afterDestroy` hook is called.\n   *\n   * @memberof Core#\n   * @member isDestroyed\n   * @type {boolean}\n   */\n  this.isDestroyed = false;\n  /**\n   * The counter determines how many times the render suspending was called. It allows\n   * tracking the nested suspending calls. For each render suspend resuming call the\n   * counter is decremented. The value equal to 0 means the render suspending feature\n   * is disabled.\n   *\n   * @private\n   * @type {number}\n   */\n  this.renderSuspendedCounter = 0;\n  /**\n   * The counter determines how many times the execution suspending was called. It allows\n   * tracking the nested suspending calls. For each execution suspend resuming call the\n   * counter is decremented. The value equal to 0 means the execution suspending feature\n   * is disabled.\n   *\n   * @private\n   * @type {number}\n   */\n  this.executionSuspendedCounter = 0;\n  const layoutDirection = (_userSettings$layoutD = userSettings === null || userSettings === void 0 ? void 0 : userSettings.layoutDirection) !== null && _userSettings$layoutD !== void 0 ? _userSettings$layoutD : 'inherit';\n  const rootElementDirection = ['rtl', 'ltr'].includes(layoutDirection) ? layoutDirection : this.rootWindow.getComputedStyle(this.rootElement).direction;\n  this.rootElement.setAttribute('dir', rootElementDirection);\n\n  /**\n   * Checks if the grid is rendered using the right-to-left layout direction.\n   *\n   * @since 12.0.0\n   * @memberof Core#\n   * @function isRtl\n   * @returns {boolean} True if RTL.\n   */\n  this.isRtl = function () {\n    return rootElementDirection === 'rtl';\n  };\n\n  /**\n   * Checks if the grid is rendered using the left-to-right layout direction.\n   *\n   * @since 12.0.0\n   * @memberof Core#\n   * @function isLtr\n   * @returns {boolean} True if LTR.\n   */\n  this.isLtr = function () {\n    return !instance.isRtl();\n  };\n\n  /**\n   * Returns 1 for LTR; -1 for RTL. Useful for calculations.\n   *\n   * @since 12.0.0\n   * @memberof Core#\n   * @function getDirectionFactor\n   * @returns {number} Returns 1 for LTR; -1 for RTL.\n   */\n  this.getDirectionFactor = function () {\n    return instance.isLtr() ? 1 : -1;\n  };\n  userSettings.language = getValidLanguageCode(userSettings.language);\n  const metaManager = new MetaManager(instance, userSettings, [DynamicCellMetaMod, ExtendMetaPropertiesMod]);\n  const tableMeta = metaManager.getTableMeta();\n  const globalMeta = metaManager.getGlobalMeta();\n  const pluginsRegistry = createUniqueMap();\n  this.container = this.rootDocument.createElement('div');\n  this.renderCall = false;\n  rootElement.insertBefore(this.container, rootElement.firstChild);\n  if (isRootInstance(this)) {\n    _injectProductInfo(userSettings.licenseKey, rootElement);\n  }\n  this.guid = `ht_${randomString()}`; // this is the namespace for global events\n\n  foreignHotInstances.set(this.guid, this);\n\n  /**\n   * Instance of index mapper which is responsible for managing the column indexes.\n   *\n   * @memberof Core#\n   * @member columnIndexMapper\n   * @type {IndexMapper}\n   */\n  this.columnIndexMapper = new IndexMapper();\n  /**\n   * Instance of index mapper which is responsible for managing the row indexes.\n   *\n   * @memberof Core#\n   * @member rowIndexMapper\n   * @type {IndexMapper}\n   */\n  this.rowIndexMapper = new IndexMapper();\n  this.columnIndexMapper.addLocalHook('indexesSequenceChange', source => {\n    instance.runHooks('afterColumnSequenceChange', source);\n  });\n  this.rowIndexMapper.addLocalHook('indexesSequenceChange', source => {\n    instance.runHooks('afterRowSequenceChange', source);\n  });\n  dataSource = new DataSource(instance);\n  if (!this.rootElement.id || this.rootElement.id.substring(0, 3) === 'ht_') {\n    this.rootElement.id = this.guid; // if root element does not have an id, assign a random id\n  }\n\n  const visualToRenderableCoords = coords => {\n    const {\n      row: visualRow,\n      col: visualColumn\n    } = coords;\n    return instance._createCellCoords(\n    // We just store indexes for rows and columns without headers.\n    visualRow >= 0 ? instance.rowIndexMapper.getRenderableFromVisualIndex(visualRow) : visualRow, visualColumn >= 0 ? instance.columnIndexMapper.getRenderableFromVisualIndex(visualColumn) : visualColumn);\n  };\n  const renderableToVisualCoords = coords => {\n    const {\n      row: renderableRow,\n      col: renderableColumn\n    } = coords;\n    return instance._createCellCoords(\n    // We just store indexes for rows and columns without headers.\n    renderableRow >= 0 ? instance.rowIndexMapper.getVisualFromRenderableIndex(renderableRow) : renderableRow, renderableColumn >= 0 ? instance.columnIndexMapper.getVisualFromRenderableIndex(renderableColumn) : renderableColumn // eslint-disable-line max-len\n    );\n  };\n\n  let selection = new Selection(tableMeta, {\n    rowIndexMapper: instance.rowIndexMapper,\n    columnIndexMapper: instance.columnIndexMapper,\n    countCols: () => instance.countCols(),\n    countRows: () => instance.countRows(),\n    propToCol: prop => datamap.propToCol(prop),\n    isEditorOpened: () => instance.getActiveEditor() ? instance.getActiveEditor().isOpened() : false,\n    countRenderableColumns: () => this.view.countRenderableColumns(),\n    countRenderableRows: () => this.view.countRenderableRows(),\n    countRowHeaders: () => this.countRowHeaders(),\n    countColHeaders: () => this.countColHeaders(),\n    getShortcutManager: () => instance.getShortcutManager(),\n    createCellCoords: (row, column) => instance._createCellCoords(row, column),\n    createCellRange: (highlight, from, to) => instance._createCellRange(highlight, from, to),\n    visualToRenderableCoords,\n    renderableToVisualCoords,\n    isDisabledCellSelection: (visualRow, visualColumn) => {\n      if (visualRow < 0 || visualColumn < 0) {\n        return instance.getSettings().disableVisualSelection;\n      }\n      return instance.getCellMeta(visualRow, visualColumn).disableVisualSelection;\n    }\n  });\n  this.selection = selection;\n  const onIndexMapperCacheUpdate = _ref => {\n    let {\n      hiddenIndexesChanged\n    } = _ref;\n    if (hiddenIndexesChanged) {\n      this.selection.refresh();\n    }\n  };\n  this.columnIndexMapper.addLocalHook('cacheUpdated', onIndexMapperCacheUpdate);\n  this.rowIndexMapper.addLocalHook('cacheUpdated', onIndexMapperCacheUpdate);\n  this.selection.addLocalHook('afterSetRangeEnd', cellCoords => {\n    const preventScrolling = createObjectPropListener(false);\n    const selectionRange = this.selection.getSelectedRange();\n    const {\n      from,\n      to\n    } = selectionRange.current();\n    const selectionLayerLevel = selectionRange.size() - 1;\n    this.runHooks('afterSelection', from.row, from.col, to.row, to.col, preventScrolling, selectionLayerLevel);\n    this.runHooks('afterSelectionByProp', from.row, instance.colToProp(from.col), to.row, instance.colToProp(to.col), preventScrolling, selectionLayerLevel); // eslint-disable-line max-len\n\n    let scrollToCell = true;\n    if (preventScrollingToCell) {\n      scrollToCell = false;\n    }\n    if (preventScrolling.isTouched()) {\n      scrollToCell = !preventScrolling.value;\n    }\n    const currentSelectedRange = this.selection.selectedRange.current();\n    const isSelectedByAnyHeader = this.selection.isSelectedByAnyHeader();\n    const isSelectedByRowHeader = this.selection.isSelectedByRowHeader();\n    const isSelectedByColumnHeader = this.selection.isSelectedByColumnHeader();\n    if (scrollToCell !== false) {\n      if (!isSelectedByAnyHeader) {\n        if (currentSelectedRange && !this.selection.isMultiple()) {\n          const {\n            row,\n            col\n          } = currentSelectedRange.from;\n          if (row < 0 && col >= 0) {\n            this.scrollViewportTo({\n              col\n            });\n          } else if (col < 0 && row >= 0) {\n            this.scrollViewportTo({\n              row\n            });\n          } else {\n            this.scrollViewportTo({\n              row,\n              col\n            });\n          }\n        } else {\n          this.scrollViewportTo(cellCoords.toObject());\n        }\n      } else if (isSelectedByRowHeader) {\n        this.scrollViewportTo({\n          row: cellCoords.row\n        });\n      } else if (isSelectedByColumnHeader) {\n        this.scrollViewportTo({\n          col: cellCoords.col\n        });\n      }\n    }\n\n    // @TODO: These CSS classes are no longer needed anymore. They are used only as a indicator of the selected\n    // rows/columns in the MergedCells plugin (via border.js#L520 in the walkontable module). After fixing\n    // the Border class this should be removed.\n    if (isSelectedByRowHeader && isSelectedByColumnHeader) {\n      addClass(this.rootElement, ['ht__selection--rows', 'ht__selection--columns']);\n    } else if (isSelectedByRowHeader) {\n      removeClass(this.rootElement, 'ht__selection--columns');\n      addClass(this.rootElement, 'ht__selection--rows');\n    } else if (isSelectedByColumnHeader) {\n      removeClass(this.rootElement, 'ht__selection--rows');\n      addClass(this.rootElement, 'ht__selection--columns');\n    } else {\n      removeClass(this.rootElement, ['ht__selection--rows', 'ht__selection--columns']);\n    }\n    this._refreshBorders(null);\n  });\n  this.selection.addLocalHook('afterSelectionFinished', cellRanges => {\n    const selectionLayerLevel = cellRanges.length - 1;\n    const {\n      from,\n      to\n    } = cellRanges[selectionLayerLevel];\n    this.runHooks('afterSelectionEnd', from.row, from.col, to.row, to.col, selectionLayerLevel);\n    this.runHooks('afterSelectionEndByProp', from.row, instance.colToProp(from.col), to.row, instance.colToProp(to.col), selectionLayerLevel);\n  });\n  this.selection.addLocalHook('afterIsMultipleSelection', isMultiple => {\n    const changedIsMultiple = this.runHooks('afterIsMultipleSelection', isMultiple.value);\n    if (isMultiple.value) {\n      isMultiple.value = changedIsMultiple;\n    }\n  });\n  this.selection.addLocalHook('afterDeselect', () => {\n    editorManager.destroyEditor();\n    this._refreshBorders();\n    removeClass(this.rootElement, ['ht__selection--rows', 'ht__selection--columns']);\n    this.runHooks('afterDeselect');\n  });\n  this.selection.addLocalHook('beforeHighlightSet', () => this.runHooks('beforeSelectionHighlightSet')).addLocalHook('beforeSetRangeStart', function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return _this.runHooks('beforeSetRangeStart', ...args);\n  }).addLocalHook('beforeSetRangeStartOnly', function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return _this.runHooks('beforeSetRangeStartOnly', ...args);\n  }).addLocalHook('beforeSetRangeEnd', function () {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    return _this.runHooks('beforeSetRangeEnd', ...args);\n  }).addLocalHook('beforeSelectColumns', function () {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    return _this.runHooks('beforeSelectColumns', ...args);\n  }).addLocalHook('afterSelectColumns', function () {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n    return _this.runHooks('afterSelectColumns', ...args);\n  }).addLocalHook('beforeSelectRows', function () {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n    return _this.runHooks('beforeSelectRows', ...args);\n  }).addLocalHook('afterSelectRows', function () {\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n    return _this.runHooks('afterSelectRows', ...args);\n  }).addLocalHook('beforeModifyTransformStart', function () {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n    return _this.runHooks('modifyTransformStart', ...args);\n  }).addLocalHook('afterModifyTransformStart', function () {\n    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      args[_key9] = arguments[_key9];\n    }\n    return _this.runHooks('afterModifyTransformStart', ...args);\n  }).addLocalHook('beforeModifyTransformEnd', function () {\n    for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n      args[_key10] = arguments[_key10];\n    }\n    return _this.runHooks('modifyTransformEnd', ...args);\n  }).addLocalHook('afterModifyTransformEnd', function () {\n    for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n      args[_key11] = arguments[_key11];\n    }\n    return _this.runHooks('afterModifyTransformEnd', ...args);\n  }).addLocalHook('beforeRowWrap', function () {\n    for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n      args[_key12] = arguments[_key12];\n    }\n    return _this.runHooks('beforeRowWrap', ...args);\n  }).addLocalHook('beforeColumnWrap', function () {\n    for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n      args[_key13] = arguments[_key13];\n    }\n    return _this.runHooks('beforeColumnWrap', ...args);\n  }).addLocalHook('insertRowRequire', totalRows => this.alter('insert_row_above', totalRows, 1, 'auto')).addLocalHook('insertColRequire', totalCols => this.alter('insert_col_start', totalCols, 1, 'auto'));\n  grid = {\n    /**\n     * Inserts or removes rows and columns.\n     *\n     * @private\n     * @param {string} action Possible values: \"insert_row_above\", \"insert_row_below\", \"insert_col_start\", \"insert_col_end\",\n     *                        \"remove_row\", \"remove_col\".\n     * @param {number|Array} index Row or column visual index which from the alter action will be triggered.\n     *                             Alter actions such as \"remove_row\" and \"remove_col\" support array indexes in the\n     *                             format `[[index, amount], [index, amount]...]` this can be used to remove\n     *                             non-consecutive columns or rows in one call.\n     * @param {number} [amount=1] Amount of rows or columns to remove.\n     * @param {string} [source] Optional. Source of hook runner.\n     * @param {boolean} [keepEmptyRows] Optional. Flag for preventing deletion of empty rows.\n     */\n    alter(action, index) {\n      var _index, _index2;\n      let amount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      let source = arguments.length > 3 ? arguments[3] : undefined;\n      let keepEmptyRows = arguments.length > 4 ? arguments[4] : undefined;\n      const normalizeIndexesGroup = indexes => {\n        if (indexes.length === 0) {\n          return [];\n        }\n        const sortedIndexes = [...indexes];\n\n        // Sort the indexes in ascending order.\n        sortedIndexes.sort((_ref2, _ref3) => {\n          let [indexA] = _ref2;\n          let [indexB] = _ref3;\n          if (indexA === indexB) {\n            return 0;\n          }\n          return indexA > indexB ? 1 : -1;\n        });\n\n        // Normalize the {index, amount} groups into bigger groups.\n        const normalizedIndexes = arrayReduce(sortedIndexes, (acc, _ref4) => {\n          let [groupIndex, groupAmount] = _ref4;\n          const previousItem = acc[acc.length - 1];\n          const [prevIndex, prevAmount] = previousItem;\n          const prevLastIndex = prevIndex + prevAmount;\n          if (groupIndex <= prevLastIndex) {\n            const amountToAdd = Math.max(groupAmount - (prevLastIndex - groupIndex), 0);\n            previousItem[1] += amountToAdd;\n          } else {\n            acc.push([groupIndex, groupAmount]);\n          }\n          return acc;\n        }, [sortedIndexes[0]]);\n        return normalizedIndexes;\n      };\n\n      /* eslint-disable no-case-declarations */\n      switch (action) {\n        case 'insert_row_below':\n        case 'insert_row_above':\n          const numberOfSourceRows = instance.countSourceRows();\n          if (tableMeta.maxRows === numberOfSourceRows) {\n            return;\n          }\n\n          // `above` is the default behavior for creating new rows\n          const insertRowMode = action === 'insert_row_below' ? 'below' : 'above';\n\n          // Calling the `insert_row_above` action adds a new row at the beginning of the data set.\n          // eslint-disable-next-line no-param-reassign\n          index = (_index = index) !== null && _index !== void 0 ? _index : insertRowMode === 'below' ? numberOfSourceRows : 0;\n          const {\n            delta: rowDelta,\n            startPhysicalIndex: startRowPhysicalIndex\n          } = datamap.createRow(index, amount, {\n            source,\n            mode: insertRowMode\n          });\n          if (rowDelta) {\n            const currentSelectedRange = selection.selectedRange.current();\n            const currentFromRange = currentSelectedRange === null || currentSelectedRange === void 0 ? void 0 : currentSelectedRange.from;\n            const currentFromRow = currentFromRange === null || currentFromRange === void 0 ? void 0 : currentFromRange.row;\n            const startVisualRowIndex = instance.toVisualRow(startRowPhysicalIndex);\n            if (selection.isSelectedByCorner()) {\n              selection.selectAll(true, true, {\n                disableHeadersHighlight: true\n              });\n            } else if (isDefined(currentFromRow) && currentFromRow >= startVisualRowIndex) {\n              // Moving the selection (if it exists) downward – it should be applied to the \"old\" row.\n              // TODO: The logic here should be handled by selection module.\n              const {\n                row: currentToRow,\n                col: currentToColumn\n              } = currentSelectedRange.to;\n              let currentFromColumn = currentFromRange.col;\n\n              // Workaround: headers are not stored inside selection.\n              if (selection.isSelectedByRowHeader()) {\n                currentFromColumn = -1;\n              }\n\n              // Remove from the stack the last added selection as that selection below will be\n              // replaced by new transformed selection.\n              selection.getSelectedRange().pop();\n              // I can't use transforms as they don't work in negative indexes.\n              selection.setRangeStartOnly(instance._createCellCoords(currentFromRow + rowDelta, currentFromColumn), true);\n              selection.setRangeEnd(instance._createCellCoords(currentToRow + rowDelta, currentToColumn)); // will call render() internally\n            } else {\n              instance._refreshBorders(); // it will call render and prepare methods\n            }\n          }\n\n          break;\n        case 'insert_col_start':\n        case 'insert_col_end':\n          // \"start\" is a default behavior for creating new columns\n          const insertColumnMode = action === 'insert_col_end' ? 'end' : 'start';\n\n          // Calling the `insert_col_start` action adds a new column to the left of the data set.\n          // eslint-disable-next-line no-param-reassign\n          index = (_index2 = index) !== null && _index2 !== void 0 ? _index2 : insertColumnMode === 'end' ? instance.countSourceCols() : 0;\n          const {\n            delta: colDelta,\n            startPhysicalIndex: startColumnPhysicalIndex\n          } = datamap.createCol(index, amount, {\n            source,\n            mode: insertColumnMode\n          });\n          if (colDelta) {\n            if (Array.isArray(tableMeta.colHeaders)) {\n              const spliceArray = [instance.toVisualColumn(startColumnPhysicalIndex), 0];\n              spliceArray.length += colDelta; // inserts empty (undefined) elements at the end of an array\n              Array.prototype.splice.apply(tableMeta.colHeaders, spliceArray); // inserts empty (undefined) elements into the colHeader array\n            }\n\n            const currentSelectedRange = selection.selectedRange.current();\n            const currentFromRange = currentSelectedRange === null || currentSelectedRange === void 0 ? void 0 : currentSelectedRange.from;\n            const currentFromColumn = currentFromRange === null || currentFromRange === void 0 ? void 0 : currentFromRange.col;\n            const startVisualColumnIndex = instance.toVisualColumn(startColumnPhysicalIndex);\n            if (selection.isSelectedByCorner()) {\n              selection.selectAll(true, true, {\n                disableHeadersHighlight: true\n              });\n            } else if (isDefined(currentFromColumn) && currentFromColumn >= startVisualColumnIndex) {\n              // Moving the selection (if it exists) rightward – it should be applied to the \"old\" column.\n              // TODO: The logic here should be handled by selection module.\n              const {\n                row: currentToRow,\n                col: currentToColumn\n              } = currentSelectedRange.to;\n              let currentFromRow = currentFromRange.row;\n\n              // Workaround: headers are not stored inside selection.\n              if (selection.isSelectedByColumnHeader()) {\n                currentFromRow = -1;\n              }\n\n              // Remove from the stack the last added selection as that selection below will be\n              // replaced by new transformed selection.\n              selection.getSelectedRange().pop();\n\n              // I can't use transforms as they don't work in negative indexes.\n              selection.setRangeStartOnly(instance._createCellCoords(currentFromRow, currentFromColumn + colDelta), true);\n              selection.setRangeEnd(instance._createCellCoords(currentToRow, currentToColumn + colDelta)); // will call render() internally\n            } else {\n              instance._refreshBorders(); // it will call render and prepare methods\n            }\n          }\n\n          break;\n        case 'remove_row':\n          const removeRow = indexes => {\n            let offset = 0;\n\n            // Normalize the {index, amount} groups into bigger groups.\n            arrayEach(indexes, _ref5 => {\n              let [groupIndex, groupAmount] = _ref5;\n              const calcIndex = isEmpty(groupIndex) ? instance.countRows() - 1 : Math.max(groupIndex - offset, 0);\n\n              // If the 'index' is an integer decrease it by 'offset' otherwise pass it through to make the value\n              // compatible with datamap.removeCol method.\n              if (Number.isInteger(groupIndex)) {\n                // eslint-disable-next-line no-param-reassign\n                groupIndex = Math.max(groupIndex - offset, 0);\n              }\n\n              // TODO: for datamap.removeRow index should be passed as it is (with undefined and null values). If not, the logic\n              // inside the datamap.removeRow breaks the removing functionality.\n              const wasRemoved = datamap.removeRow(groupIndex, groupAmount, source);\n              if (!wasRemoved) {\n                return;\n              }\n              const totalRows = instance.countRows();\n              const fixedRowsTop = tableMeta.fixedRowsTop;\n              if (fixedRowsTop >= calcIndex + 1) {\n                tableMeta.fixedRowsTop -= Math.min(groupAmount, fixedRowsTop - calcIndex);\n              }\n              const fixedRowsBottom = tableMeta.fixedRowsBottom;\n              if (fixedRowsBottom && calcIndex >= totalRows - fixedRowsBottom) {\n                tableMeta.fixedRowsBottom -= Math.min(groupAmount, fixedRowsBottom);\n              }\n              offset += groupAmount;\n            });\n          };\n          if (Array.isArray(index)) {\n            removeRow(normalizeIndexesGroup(index));\n          } else {\n            removeRow([[index, amount]]);\n          }\n          grid.adjustRowsAndCols();\n          instance._refreshBorders(); // it will call render and prepare methods\n          break;\n        case 'remove_col':\n          const removeCol = indexes => {\n            let offset = 0;\n\n            // Normalize the {index, amount} groups into bigger groups.\n            arrayEach(indexes, _ref6 => {\n              let [groupIndex, groupAmount] = _ref6;\n              const calcIndex = isEmpty(groupIndex) ? instance.countCols() - 1 : Math.max(groupIndex - offset, 0);\n              let physicalColumnIndex = instance.toPhysicalColumn(calcIndex);\n\n              // If the 'index' is an integer decrease it by 'offset' otherwise pass it through to make the value\n              // compatible with datamap.removeCol method.\n              if (Number.isInteger(groupIndex)) {\n                // eslint-disable-next-line no-param-reassign\n                groupIndex = Math.max(groupIndex - offset, 0);\n              }\n\n              // TODO: for datamap.removeCol index should be passed as it is (with undefined and null values). If not, the logic\n              // inside the datamap.removeCol breaks the removing functionality.\n              const wasRemoved = datamap.removeCol(groupIndex, groupAmount, source);\n              if (!wasRemoved) {\n                return;\n              }\n              const fixedColumnsStart = tableMeta.fixedColumnsStart;\n              if (fixedColumnsStart >= calcIndex + 1) {\n                tableMeta.fixedColumnsStart -= Math.min(groupAmount, fixedColumnsStart - calcIndex);\n              }\n              if (Array.isArray(tableMeta.colHeaders)) {\n                if (typeof physicalColumnIndex === 'undefined') {\n                  physicalColumnIndex = -1;\n                }\n                tableMeta.colHeaders.splice(physicalColumnIndex, groupAmount);\n              }\n              offset += groupAmount;\n            });\n          };\n          if (Array.isArray(index)) {\n            removeCol(normalizeIndexesGroup(index));\n          } else {\n            removeCol([[index, amount]]);\n          }\n          grid.adjustRowsAndCols();\n          instance._refreshBorders(); // it will call render and prepare methods\n\n          break;\n        default:\n          throw new Error(`There is no such action \"${action}\"`);\n      }\n      if (!keepEmptyRows) {\n        grid.adjustRowsAndCols(); // makes sure that we did not add rows that will be removed in next refresh\n      }\n    },\n\n    /**\n     * Makes sure there are empty rows at the bottom of the table.\n     *\n     * @private\n     */\n    adjustRowsAndCols() {\n      const minRows = tableMeta.minRows;\n      const minSpareRows = tableMeta.minSpareRows;\n      const minCols = tableMeta.minCols;\n      const minSpareCols = tableMeta.minSpareCols;\n      if (instance.countRows() === 0 && instance.countCols() === 0) {\n        selection.deselect();\n      }\n      if (minRows) {\n        // should I add empty rows to data source to meet minRows?\n        const nrOfRows = instance.countRows();\n        if (nrOfRows < minRows) {\n          // The synchronization with cell meta is not desired here. For `minRows` option,\n          // we don't want to touch/shift cell meta objects.\n          datamap.createRow(nrOfRows, minRows - nrOfRows, {\n            source: 'auto'\n          });\n        }\n      }\n      if (minSpareRows) {\n        const emptyRows = instance.countEmptyRows(true);\n\n        // should I add empty rows to meet minSpareRows?\n        if (emptyRows < minSpareRows) {\n          const emptyRowsMissing = minSpareRows - emptyRows;\n          const rowsToCreate = Math.min(emptyRowsMissing, tableMeta.maxRows - instance.countSourceRows());\n\n          // The synchronization with cell meta is not desired here. For `minSpareRows` option,\n          // we don't want to touch/shift cell meta objects.\n          datamap.createRow(instance.countRows(), rowsToCreate, {\n            source: 'auto'\n          });\n        }\n      }\n      {\n        let emptyCols;\n\n        // count currently empty cols\n        if (minCols || minSpareCols) {\n          emptyCols = instance.countEmptyCols(true);\n        }\n        let nrOfColumns = instance.countCols();\n\n        // should I add empty cols to meet minCols?\n        if (minCols && !tableMeta.columns && nrOfColumns < minCols) {\n          // The synchronization with cell meta is not desired here. For `minSpareRows` option,\n          // we don't want to touch/shift cell meta objects.\n          const colsToCreate = minCols - nrOfColumns;\n          emptyCols += colsToCreate;\n          datamap.createCol(nrOfColumns, colsToCreate, {\n            source: 'auto'\n          });\n        }\n        // should I add empty cols to meet minSpareCols?\n        if (minSpareCols && !tableMeta.columns && instance.dataType === 'array' && emptyCols < minSpareCols) {\n          nrOfColumns = instance.countCols();\n          const emptyColsMissing = minSpareCols - emptyCols;\n          const colsToCreate = Math.min(emptyColsMissing, tableMeta.maxCols - nrOfColumns);\n\n          // The synchronization with cell meta is not desired here. For `minSpareRows` option,\n          // we don't want to touch/shift cell meta objects.\n          datamap.createCol(nrOfColumns, colsToCreate, {\n            source: 'auto'\n          });\n        }\n      }\n      if (selection.isSelected()) {\n        const rowCount = instance.countRows();\n        const colCount = instance.countCols();\n        arrayEach(selection.selectedRange, range => {\n          let selectionChanged = false;\n          let fromRow = range.from.row;\n          let fromCol = range.from.col;\n          let toRow = range.to.row;\n          let toCol = range.to.col;\n\n          // if selection is outside, move selection to last row\n          if (fromRow > rowCount - 1) {\n            fromRow = rowCount - 1;\n            selectionChanged = true;\n            if (toRow > fromRow) {\n              toRow = fromRow;\n            }\n          } else if (toRow > rowCount - 1) {\n            toRow = rowCount - 1;\n            selectionChanged = true;\n            if (fromRow > toRow) {\n              fromRow = toRow;\n            }\n          }\n          // if selection is outside, move selection to last row\n          if (fromCol > colCount - 1) {\n            fromCol = colCount - 1;\n            selectionChanged = true;\n            if (toCol > fromCol) {\n              toCol = fromCol;\n            }\n          } else if (toCol > colCount - 1) {\n            toCol = colCount - 1;\n            selectionChanged = true;\n            if (fromCol > toCol) {\n              fromCol = toCol;\n            }\n          }\n          if (selectionChanged) {\n            instance.selectCell(fromRow, fromCol, toRow, toCol);\n          }\n        });\n      }\n      if (instance.view) {\n        instance.view.adjustElementsSize();\n      }\n    },\n    /**\n     * Populate the data from the provided 2d array from the given cell coordinates.\n     *\n     * @private\n     * @param {object} start Start selection position. Visual indexes.\n     * @param {Array} input 2d data array.\n     * @param {object} [end] End selection position (only for drag-down mode). Visual indexes.\n     * @param {string} [source=\"populateFromArray\"] Source information string.\n     * @param {string} [method=\"overwrite\"] Populate method. Possible options: `shift_down`, `shift_right`, `overwrite`.\n     * @returns {object|undefined} Ending td in pasted area (only if any cell was changed).\n     */\n    populateFromArray(start, input, end, source, method) {\n      let r;\n      let rlen;\n      let c;\n      let clen;\n      const setData = [];\n      const current = {};\n      const newDataByColumns = [];\n      const startRow = start.row;\n      const startColumn = start.col;\n      rlen = input.length;\n      if (rlen === 0) {\n        return false;\n      }\n      let columnsPopulationEnd = 0;\n      let rowsPopulationEnd = 0;\n      if (isObject(end)) {\n        columnsPopulationEnd = end.col - startColumn + 1;\n        rowsPopulationEnd = end.row - startRow + 1;\n      }\n\n      // insert data with specified pasteMode method\n      switch (method) {\n        case 'shift_down':\n          // translate data from a list of rows to a list of columns\n          const populatedDataByColumns = pivot(input);\n          const numberOfDataColumns = populatedDataByColumns.length;\n          // method's argument can extend the range of data population (data would be repeated)\n          const numberOfColumnsToPopulate = Math.max(numberOfDataColumns, columnsPopulationEnd);\n          const pushedDownDataByRows = instance.getData().slice(startRow);\n\n          // translate data from a list of rows to a list of columns\n          const pushedDownDataByColumns = pivot(pushedDownDataByRows).slice(startColumn, startColumn + numberOfColumnsToPopulate);\n          for (c = 0; c < numberOfColumnsToPopulate; c += 1) {\n            if (c < numberOfDataColumns) {\n              for (r = 0, rlen = populatedDataByColumns[c].length; r < rowsPopulationEnd - rlen; r += 1) {\n                // repeating data for rows\n                populatedDataByColumns[c].push(populatedDataByColumns[c][r % rlen]);\n              }\n              if (c < pushedDownDataByColumns.length) {\n                newDataByColumns.push(populatedDataByColumns[c].concat(pushedDownDataByColumns[c]));\n              } else {\n                // if before data population, there was no data in the column\n                // we fill the required rows' newly-created cells with `null` values\n                newDataByColumns.push(populatedDataByColumns[c].concat(new Array(pushedDownDataByRows.length).fill(null)));\n              }\n            } else {\n              // Repeating data for columns.\n              newDataByColumns.push(populatedDataByColumns[c % numberOfDataColumns].concat(pushedDownDataByColumns[c]));\n            }\n          }\n          instance.populateFromArray(startRow, startColumn, pivot(newDataByColumns));\n          break;\n        case 'shift_right':\n          const numberOfDataRows = input.length;\n          // method's argument can extend the range of data population (data would be repeated)\n          const numberOfRowsToPopulate = Math.max(numberOfDataRows, rowsPopulationEnd);\n          const pushedRightDataByRows = instance.getData().slice(startRow).map(rowData => rowData.slice(startColumn));\n          for (r = 0; r < numberOfRowsToPopulate; r += 1) {\n            if (r < numberOfDataRows) {\n              for (c = 0, clen = input[r].length; c < columnsPopulationEnd - clen; c += 1) {\n                // repeating data for rows\n                input[r].push(input[r][c % clen]);\n              }\n              if (r < pushedRightDataByRows.length) {\n                for (let i = 0; i < pushedRightDataByRows[r].length; i += 1) {\n                  input[r].push(pushedRightDataByRows[r][i]);\n                }\n              } else {\n                // if before data population, there was no data in the row\n                // we fill the required columns' newly-created cells with `null` values\n                input[r].push(...new Array(pushedRightDataByRows[0].length).fill(null));\n              }\n            } else {\n              // Repeating data for columns.\n              input.push(input[r % rlen].slice(0, numberOfRowsToPopulate).concat(pushedRightDataByRows[r]));\n            }\n          }\n          instance.populateFromArray(startRow, startColumn, input);\n          break;\n        case 'overwrite':\n        default:\n          // overwrite and other not specified options\n          current.row = start.row;\n          current.col = start.col;\n          let skippedRow = 0;\n          let skippedColumn = 0;\n          let pushData = true;\n          let cellMeta;\n          const getInputValue = function getInputValue(row) {\n            let col = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            const rowValue = input[row % input.length];\n            if (col !== null) {\n              return rowValue[col % rowValue.length];\n            }\n            return rowValue;\n          };\n          const rowInputLength = input.length;\n          const rowSelectionLength = end ? end.row - start.row + 1 : 0;\n          if (end) {\n            rlen = rowSelectionLength;\n          } else {\n            rlen = Math.max(rowInputLength, rowSelectionLength);\n          }\n          for (r = 0; r < rlen; r++) {\n            if (end && current.row > end.row && rowSelectionLength > rowInputLength || !tableMeta.allowInsertRow && current.row > instance.countRows() - 1 || current.row >= tableMeta.maxRows) {\n              break;\n            }\n            const visualRow = r - skippedRow;\n            const colInputLength = getInputValue(visualRow).length;\n            const colSelectionLength = end ? end.col - start.col + 1 : 0;\n            if (end) {\n              clen = colSelectionLength;\n            } else {\n              clen = Math.max(colInputLength, colSelectionLength);\n            }\n            current.col = start.col;\n            cellMeta = instance.getCellMeta(current.row, current.col);\n            if ((source === 'CopyPaste.paste' || source === 'Autofill.fill') && cellMeta.skipRowOnPaste) {\n              skippedRow += 1;\n              current.row += 1;\n              rlen += 1;\n              /* eslint-disable no-continue */\n              continue;\n            }\n            skippedColumn = 0;\n            for (c = 0; c < clen; c++) {\n              if (end && current.col > end.col && colSelectionLength > colInputLength || !tableMeta.allowInsertColumn && current.col > instance.countCols() - 1 || current.col >= tableMeta.maxCols) {\n                break;\n              }\n              cellMeta = instance.getCellMeta(current.row, current.col);\n              if ((source === 'CopyPaste.paste' || source === 'Autofill.fill') && cellMeta.skipColumnOnPaste) {\n                skippedColumn += 1;\n                current.col += 1;\n                clen += 1;\n                continue;\n              }\n              if (cellMeta.readOnly && source !== 'UndoRedo.undo') {\n                current.col += 1;\n                /* eslint-disable no-continue */\n                continue;\n              }\n              const visualColumn = c - skippedColumn;\n              let value = getInputValue(visualRow, visualColumn);\n              let orgValue = instance.getDataAtCell(current.row, current.col);\n              if (value !== null && typeof value === 'object') {\n                // when 'value' is array and 'orgValue' is null, set 'orgValue' to\n                // an empty array so that the null value can be compared to 'value'\n                // as an empty value for the array context\n                if (Array.isArray(value) && orgValue === null) orgValue = [];\n                if (orgValue === null || typeof orgValue !== 'object') {\n                  pushData = false;\n                } else {\n                  const orgValueSchema = duckSchema(Array.isArray(orgValue) ? orgValue : orgValue[0] || orgValue);\n                  const valueSchema = duckSchema(Array.isArray(value) ? value : value[0] || value);\n\n                  // Allow overwriting values with the same object-based schema or any array-based schema.\n                  if (isObjectEqual(orgValueSchema, valueSchema) || Array.isArray(orgValueSchema) && Array.isArray(valueSchema)) {\n                    value = deepClone(value);\n                  } else {\n                    pushData = false;\n                  }\n                }\n              } else if (orgValue !== null && typeof orgValue === 'object') {\n                pushData = false;\n              }\n              if (pushData) {\n                setData.push([current.row, current.col, value]);\n              }\n              pushData = true;\n              current.col += 1;\n            }\n            current.row += 1;\n          }\n          instance.setDataAtCell(setData, null, null, source || 'populateFromArray');\n          break;\n      }\n    }\n  };\n\n  /**\n   * Internal function to set `language` key of settings.\n   *\n   * @private\n   * @param {string} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n   * @fires Hooks#afterLanguageChange\n   */\n  function setLanguage(languageCode) {\n    const normalizedLanguageCode = normalizeLanguageCode(languageCode);\n    if (hasLanguageDictionary(normalizedLanguageCode)) {\n      instance.runHooks('beforeLanguageChange', normalizedLanguageCode);\n      globalMeta.language = normalizedLanguageCode;\n      instance.runHooks('afterLanguageChange', normalizedLanguageCode);\n    } else {\n      warnUserAboutLanguageRegistration(languageCode);\n    }\n  }\n\n  /**\n   * Internal function to set `className` or `tableClassName`, depending on the key from the settings object.\n   *\n   * @private\n   * @param {string} className `className` or `tableClassName` from the key in the settings object.\n   * @param {string|string[]} classSettings String or array of strings. Contains class name(s) from settings object.\n   */\n  function setClassName(className, classSettings) {\n    const element = className === 'className' ? instance.rootElement : instance.table;\n    if (firstRun) {\n      addClass(element, classSettings);\n    } else {\n      let globalMetaSettingsArray = [];\n      let settingsArray = [];\n      if (globalMeta[className]) {\n        globalMetaSettingsArray = Array.isArray(globalMeta[className]) ? globalMeta[className] : stringToArray(globalMeta[className]);\n      }\n      if (classSettings) {\n        settingsArray = Array.isArray(classSettings) ? classSettings : stringToArray(classSettings);\n      }\n      const classNameToRemove = getDifferenceOfArrays(globalMetaSettingsArray, settingsArray);\n      const classNameToAdd = getDifferenceOfArrays(settingsArray, globalMetaSettingsArray);\n      if (classNameToRemove.length) {\n        removeClass(element, classNameToRemove);\n      }\n      if (classNameToAdd.length) {\n        addClass(element, classNameToAdd);\n      }\n    }\n    globalMeta[className] = classSettings;\n  }\n  this.init = function () {\n    dataSource.setData(tableMeta.data);\n    instance.runHooks('beforeInit');\n    if (isMobileBrowser() || isIpadOS()) {\n      addClass(instance.rootElement, 'mobile');\n    }\n    this.updateSettings(tableMeta, true);\n    this.view = new TableView(this);\n    editorManager = EditorManager.getInstance(instance, tableMeta, selection);\n    focusManager = new FocusManager(instance);\n    if (isRootInstance(this)) {\n      installFocusCatcher(instance);\n    }\n    instance.runHooks('init');\n    this.forceFullRender = true; // used when data was changed\n    this.view.render();\n\n    // Run the logic only if it's the table's initialization and the root element is not visible.\n    if (!!firstRun && instance.rootElement.offsetParent === null) {\n      observeVisibilityChangeOnce(instance.rootElement, () => {\n        // Update the spreader size cache before rendering.\n        instance.view._wt.wtOverlays.updateLastSpreaderSize();\n        instance.render();\n        instance.view.adjustElementsSize();\n      });\n    }\n    if (typeof firstRun === 'object') {\n      instance.runHooks('afterChange', firstRun[0], firstRun[1]);\n      firstRun = false;\n    }\n    instance.runHooks('afterInit');\n  };\n\n  /**\n   * @ignore\n   * @returns {object}\n   */\n  function ValidatorsQueue() {\n    // moved this one level up so it can be used in any function here. Probably this should be moved to a separate file\n    let resolved = false;\n    return {\n      validatorsInQueue: 0,\n      valid: true,\n      addValidatorToQueue() {\n        this.validatorsInQueue += 1;\n        resolved = false;\n      },\n      removeValidatorFormQueue() {\n        this.validatorsInQueue = this.validatorsInQueue - 1 < 0 ? 0 : this.validatorsInQueue - 1;\n        this.checkIfQueueIsEmpty();\n      },\n      onQueueEmpty() {},\n      checkIfQueueIsEmpty() {\n        if (this.validatorsInQueue === 0 && resolved === false) {\n          resolved = true;\n          this.onQueueEmpty(this.valid);\n        }\n      }\n    };\n  }\n\n  /**\n   * Get parsed number from numeric string.\n   *\n   * @private\n   * @param {string} numericData Float (separated by a dot or a comma) or integer.\n   * @returns {number} Number if we get data in parsable format, not changed value otherwise.\n   */\n  function getParsedNumber(numericData) {\n    // Unifying \"float like\" string. Change from value with comma determiner to value with dot determiner,\n    // for example from `450,65` to `450.65`.\n    const unifiedNumericData = numericData.replace(',', '.');\n    if (isNaN(parseFloat(unifiedNumericData)) === false) {\n      return parseFloat(unifiedNumericData);\n    }\n    return numericData;\n  }\n\n  /**\n   * @ignore\n   * @param {Array} changes The 2D array containing information about each of the edited cells.\n   * @param {string} source The string that identifies source of validation.\n   * @param {Function} callback The callback function fot async validation.\n   */\n  function validateChanges(changes, source, callback) {\n    if (!changes.length) {\n      return;\n    }\n    const activeEditor = instance.getActiveEditor();\n    const waitingForValidator = new ValidatorsQueue();\n    let shouldBeCanceled = true;\n    waitingForValidator.onQueueEmpty = isValid => {\n      if (activeEditor && shouldBeCanceled) {\n        activeEditor.cancelChanges();\n      }\n      callback(isValid); // called when async validators are resolved and beforeChange was not async\n    };\n\n    for (let i = changes.length - 1; i >= 0; i--) {\n      const [row, prop,, newValue] = changes[i];\n      const col = datamap.propToCol(prop);\n      const cellProperties = instance.getCellMeta(row, col);\n      if (cellProperties.type === 'numeric' && typeof newValue === 'string' && isNumericLike(newValue)) {\n        changes[i][3] = getParsedNumber(newValue);\n      }\n\n      /* eslint-disable no-loop-func */\n      if (instance.getCellValidator(cellProperties)) {\n        waitingForValidator.addValidatorToQueue();\n        instance.validateCell(changes[i][3], cellProperties, function (index, cellPropertiesReference) {\n          return function (result) {\n            if (typeof result !== 'boolean') {\n              throw new Error('Validation error: result is not boolean');\n            }\n            if (result === false && cellPropertiesReference.allowInvalid === false) {\n              shouldBeCanceled = false;\n              changes.splice(index, 1); // cancel the change\n              cellPropertiesReference.valid = true; // we cancelled the change, so cell value is still valid\n\n              const cell = instance.getCell(cellPropertiesReference.visualRow, cellPropertiesReference.visualCol);\n              if (cell !== null) {\n                removeClass(cell, tableMeta.invalidCellClassName);\n              }\n            }\n            waitingForValidator.removeValidatorFormQueue();\n          };\n        }(i, cellProperties), source);\n      }\n    }\n    waitingForValidator.checkIfQueueIsEmpty();\n  }\n\n  /**\n   * Internal function to apply changes. Called after validateChanges.\n   *\n   * @private\n   * @param {Array} changes Array in form of [row, prop, oldValue, newValue].\n   * @param {string} source String that identifies how this change will be described in changes array (useful in onChange callback).\n   * @fires Hooks#beforeChangeRender\n   * @fires Hooks#afterChange\n   */\n  function applyChanges(changes, source) {\n    let i = changes.length - 1;\n    if (i < 0) {\n      return;\n    }\n    for (; i >= 0; i--) {\n      let skipThisChange = false;\n      if (changes[i] === null) {\n        changes.splice(i, 1);\n        /* eslint-disable no-continue */\n        continue;\n      }\n      if ((changes[i][2] === null || changes[i][2] === undefined) && (changes[i][3] === null || changes[i][3] === undefined)) {\n        /* eslint-disable no-continue */\n        continue;\n      }\n      if (tableMeta.allowInsertRow) {\n        while (changes[i][0] > instance.countRows() - 1) {\n          const {\n            delta: numberOfCreatedRows\n          } = datamap.createRow(undefined, undefined, {\n            source\n          });\n          if (numberOfCreatedRows === 0) {\n            skipThisChange = true;\n            break;\n          }\n        }\n      }\n      if (instance.dataType === 'array' && (!tableMeta.columns || tableMeta.columns.length === 0) && tableMeta.allowInsertColumn) {\n        while (datamap.propToCol(changes[i][1]) > instance.countCols() - 1) {\n          const {\n            delta: numberOfCreatedColumns\n          } = datamap.createCol(undefined, undefined, {\n            source\n          });\n          if (numberOfCreatedColumns === 0) {\n            skipThisChange = true;\n            break;\n          }\n        }\n      }\n      if (skipThisChange) {\n        /* eslint-disable no-continue */\n        continue;\n      }\n      datamap.set(changes[i][0], changes[i][1], changes[i][3]);\n    }\n    instance.forceFullRender = true; // used when data was changed\n    grid.adjustRowsAndCols();\n    instance.runHooks('beforeChangeRender', changes, source);\n    editorManager.lockEditor();\n    instance._refreshBorders(null);\n    editorManager.unlockEditor();\n    instance.view.adjustElementsSize();\n    instance.runHooks('afterChange', changes, source || 'edit');\n    const activeEditor = instance.getActiveEditor();\n    if (activeEditor && isDefined(activeEditor.refreshValue)) {\n      activeEditor.refreshValue();\n    }\n  }\n\n  /**\n   * Creates and returns the CellCoords object.\n   *\n   * @private\n   * @memberof Core#\n   * @function _createCellCoords\n   * @param {number} row The row index.\n   * @param {number} column The column index.\n   * @returns {CellCoords}\n   */\n  this._createCellCoords = function (row, column) {\n    return instance.view._wt.createCellCoords(row, column);\n  };\n\n  /**\n   * Creates and returns the CellRange object.\n   *\n   * @private\n   * @memberof Core#\n   * @function _createCellRange\n   * @param {CellCoords} highlight Defines the border around a cell where selection was started and to edit the cell\n   *                               when you press Enter. The highlight cannot point to headers (negative values).\n   * @param {CellCoords} from Initial coordinates.\n   * @param {CellCoords} to Final coordinates.\n   * @returns {CellRange}\n   */\n  this._createCellRange = function (highlight, from, to) {\n    return instance.view._wt.createCellRange(highlight, from, to);\n  };\n\n  /**\n   * Validate a single cell.\n   *\n   * @memberof Core#\n   * @function validateCell\n   * @param {string|number} value The value to validate.\n   * @param {object} cellProperties The cell meta which corresponds with the value.\n   * @param {Function} callback The callback function.\n   * @param {string} source The string that identifies source of the validation.\n   */\n  this.validateCell = function (value, cellProperties, callback, source) {\n    let validator = instance.getCellValidator(cellProperties);\n\n    // the `canBeValidated = false` argument suggests, that the cell passes validation by default.\n    /**\n     * @private\n     * @function done\n     * @param {boolean} valid Indicates if the validation was successful.\n     * @param {boolean} [canBeValidated=true] Flag which controls the validation process.\n     */\n    function done(valid) {\n      let canBeValidated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      // Fixes GH#3903\n      if (!canBeValidated || cellProperties.hidden === true) {\n        callback(valid);\n        return;\n      }\n      const col = cellProperties.visualCol;\n      const row = cellProperties.visualRow;\n      const td = instance.getCell(row, col, true);\n      if (td && td.nodeName !== 'TH') {\n        const renderableRow = instance.rowIndexMapper.getRenderableFromVisualIndex(row);\n        const renderableColumn = instance.columnIndexMapper.getRenderableFromVisualIndex(col);\n        instance.view._wt.getSetting('cellRenderer', renderableRow, renderableColumn, td);\n      }\n      callback(valid);\n    }\n    if (isRegExp(validator)) {\n      validator = function (expression) {\n        return function (cellValue, validatorCallback) {\n          validatorCallback(expression.test(cellValue));\n        };\n      }(validator);\n    }\n    if (isFunction(validator)) {\n      // eslint-disable-next-line no-param-reassign\n      value = instance.runHooks('beforeValidate', value, cellProperties.visualRow, cellProperties.prop, source);\n\n      // To provide consistent behaviour, validation should be always asynchronous\n      instance._registerImmediate(() => {\n        validator.call(cellProperties, value, valid => {\n          if (!instance) {\n            return;\n          }\n          // eslint-disable-next-line no-param-reassign\n          valid = instance.runHooks('afterValidate', valid, value, cellProperties.visualRow, cellProperties.prop, source);\n          cellProperties.valid = valid;\n          done(valid);\n          instance.runHooks('postAfterValidate', valid, value, cellProperties.visualRow, cellProperties.prop, source);\n        });\n      });\n    } else {\n      // resolve callback even if validator function was not found\n      instance._registerImmediate(() => {\n        cellProperties.valid = true;\n        done(cellProperties.valid, false);\n      });\n    }\n  };\n\n  /**\n   * @ignore\n   * @param {number} row The visual row index.\n   * @param {string|number} propOrCol The visual prop or column index.\n   * @param {*} value The cell value.\n   * @returns {Array}\n   */\n  function setDataInputToArray(row, propOrCol, value) {\n    if (Array.isArray(row)) {\n      // it's an array of changes\n      return row;\n    }\n    return [[row, propOrCol, value]];\n  }\n\n  /**\n   * Process changes prepared for applying to the dataset (unifying list of changes, closing an editor - when needed,\n   * calling a hook).\n   *\n   * @private\n   * @param {Array} changes Array of changes in format `[[row, col, value],...]`.\n   * @param {string} [source] String that identifies how this change will be described in the changes array (useful in afterChange or beforeChange callback). Set to 'edit' if left empty.\n   * @returns {Array} List of changes finally applied to the dataset.\n   */\n  function processChanges(changes, source) {\n    const activeEditor = instance.getActiveEditor();\n    const beforeChangeResult = instance.runHooks('beforeChange', changes, source || 'edit');\n    // The `beforeChange` hook could add a `null` for purpose of cancelling some dataset's change.\n    const filteredChanges = changes.filter(change => change !== null);\n    if (beforeChangeResult === false || filteredChanges.length === 0) {\n      if (activeEditor) {\n        activeEditor.cancelChanges();\n      }\n      return [];\n    }\n    return filteredChanges;\n  }\n\n  /**\n   * @description\n   * Set new value to a cell. To change many cells at once (recommended way), pass an array of `changes` in format\n   * `[[row, col, value],...]` as the first argument.\n   *\n   * @memberof Core#\n   * @function setDataAtCell\n   * @param {number|Array} row Visual row index or array of changes in format `[[row, col, value],...]`.\n   * @param {number} [column] Visual column index.\n   * @param {string} [value] New value.\n   * @param {string} [source] String that identifies how this change will be described in the changes array (useful in afterChange or beforeChange callback). Set to 'edit' if left empty.\n   */\n  this.setDataAtCell = function (row, column, value, source) {\n    const input = setDataInputToArray(row, column, value);\n    const changes = [];\n    let changeSource = source;\n    let i;\n    let ilen;\n    let prop;\n    for (i = 0, ilen = input.length; i < ilen; i++) {\n      if (typeof input[i] !== 'object') {\n        throw new Error('Method `setDataAtCell` accepts row number or changes array of arrays as its first parameter');\n      }\n      if (typeof input[i][1] !== 'number') {\n        throw new Error('Method `setDataAtCell` accepts row and column number as its parameters. If you want to use object property name, use method `setDataAtRowProp`'); // eslint-disable-line max-len\n      }\n\n      if (input[i][1] >= this.countCols()) {\n        prop = input[i][1];\n      } else {\n        prop = datamap.colToProp(input[i][1]);\n      }\n      changes.push([input[i][0], prop, dataSource.getAtCell(this.toPhysicalRow(input[i][0]), input[i][1]), input[i][2]]);\n    }\n    if (!changeSource && typeof row === 'object') {\n      changeSource = column;\n    }\n    const processedChanges = processChanges(changes, source);\n    instance.runHooks('afterSetDataAtCell', processedChanges, changeSource);\n    validateChanges(processedChanges, changeSource, () => {\n      applyChanges(processedChanges, changeSource);\n    });\n  };\n\n  /**\n   * @description\n   * Set new value to a cell. To change many cells at once (recommended way), pass an array of `changes` in format\n   * `[[row, prop, value],...]` as the first argument.\n   *\n   * @memberof Core#\n   * @function setDataAtRowProp\n   * @param {number|Array} row Visual row index or array of changes in format `[[row, prop, value], ...]`.\n   * @param {string} prop Property name or the source string (e.g. `'first.name'` or `'0'`).\n   * @param {string} value Value to be set.\n   * @param {string} [source] String that identifies how this change will be described in changes array (useful in onChange callback).\n   */\n  this.setDataAtRowProp = function (row, prop, value, source) {\n    const input = setDataInputToArray(row, prop, value);\n    const changes = [];\n    let changeSource = source;\n    let i;\n    let ilen;\n    for (i = 0, ilen = input.length; i < ilen; i++) {\n      changes.push([input[i][0], input[i][1], dataSource.getAtCell(this.toPhysicalRow(input[i][0]), input[i][1]), input[i][2]]);\n    }\n    if (!changeSource && typeof row === 'object') {\n      changeSource = prop;\n    }\n    const processedChanges = processChanges(changes, source);\n    instance.runHooks('afterSetDataAtRowProp', processedChanges, changeSource);\n    validateChanges(processedChanges, changeSource, () => {\n      applyChanges(processedChanges, changeSource);\n    });\n  };\n\n  /**\n   * Listen to the keyboard input on document body. This allows Handsontable to capture keyboard events and respond\n   * in the right way.\n   *\n   * @memberof Core#\n   * @function listen\n   * @fires Hooks#afterListen\n   */\n  this.listen = function () {\n    if (instance && !instance.isListening()) {\n      foreignHotInstances.forEach(foreignHot => {\n        if (instance !== foreignHot) {\n          foreignHot.unlisten();\n        }\n      });\n      activeGuid = instance.guid;\n      instance.runHooks('afterListen');\n    }\n  };\n\n  /**\n   * Stop listening to keyboard input on the document body. Calling this method makes the Handsontable inactive for\n   * any keyboard events.\n   *\n   * @memberof Core#\n   * @function unlisten\n   */\n  this.unlisten = function () {\n    if (this.isListening()) {\n      activeGuid = null;\n      instance.runHooks('afterUnlisten');\n    }\n  };\n\n  /**\n   * Returns `true` if the current Handsontable instance is listening to keyboard input on document body.\n   *\n   * @memberof Core#\n   * @function isListening\n   * @returns {boolean} `true` if the instance is listening, `false` otherwise.\n   */\n  this.isListening = function () {\n    return activeGuid === instance.guid;\n  };\n\n  /**\n   * Destroys the current editor, render the table and prepares the editor of the newly selected cell.\n   *\n   * @memberof Core#\n   * @function destroyEditor\n   * @param {boolean} [revertOriginal=false] If `true`, the previous value will be restored. Otherwise, the edited value will be saved.\n   * @param {boolean} [prepareEditorIfNeeded=true] If `true` the editor under the selected cell will be prepared to open.\n   */\n  this.destroyEditor = function () {\n    let revertOriginal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let prepareEditorIfNeeded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    instance._refreshBorders(revertOriginal, prepareEditorIfNeeded);\n  };\n\n  /**\n   * Populates cells at position with 2D input array (e.g. `[[1, 2], [3, 4]]`). Use `endRow`, `endCol` when you\n   * want to cut input when a certain row is reached.\n   *\n   * The `populateFromArray()` method can't change [`readOnly`](@/api/options.md#readonly) cells.\n   *\n   * Optional `method` argument has the same effect as pasteMode option (see {@link Options#pasteMode}).\n   *\n   * @memberof Core#\n   * @function populateFromArray\n   * @param {number} row Start visual row index.\n   * @param {number} column Start visual column index.\n   * @param {Array} input 2d array.\n   * @param {number} [endRow] End visual row index (use when you want to cut input when certain row is reached).\n   * @param {number} [endCol] End visual column index (use when you want to cut input when certain column is reached).\n   * @param {string} [source=populateFromArray] Used to identify this call in the resulting events (beforeChange, afterChange).\n   * @param {string} [method=overwrite] Populate method, possible values: `'shift_down'`, `'shift_right'`, `'overwrite'`.\n   * @returns {object|undefined} Ending td in pasted area (only if any cell was changed).\n   */\n  this.populateFromArray = function (row, column, input, endRow, endCol, source, method) {\n    if (!(typeof input === 'object' && typeof input[0] === 'object')) {\n      throw new Error('populateFromArray parameter `input` must be an array of arrays'); // API changed in 0.9-beta2, let's check if you use it correctly\n    }\n\n    const c = typeof endRow === 'number' ? instance._createCellCoords(endRow, endCol) : null;\n    return grid.populateFromArray(instance._createCellCoords(row, column), input, c, source, method);\n  };\n\n  /**\n   * Adds/removes data from the column. This method works the same as Array.splice for arrays.\n   *\n   * @memberof Core#\n   * @function spliceCol\n   * @param {number} column Index of the column in which do you want to do splice.\n   * @param {number} index Index at which to start changing the array. If negative, will begin that many elements from the end.\n   * @param {number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed.\n   * @param {...number} [elements] The elements to add to the array. If you don't specify any elements, spliceCol simply removes elements from the array.\n   * @returns {Array} Returns removed portion of columns.\n   */\n  this.spliceCol = function (column, index, amount) {\n    for (var _len14 = arguments.length, elements = new Array(_len14 > 3 ? _len14 - 3 : 0), _key14 = 3; _key14 < _len14; _key14++) {\n      elements[_key14 - 3] = arguments[_key14];\n    }\n    return datamap.spliceCol(column, index, amount, ...elements);\n  };\n\n  /**\n   * Adds/removes data from the row. This method works the same as Array.splice for arrays.\n   *\n   * @memberof Core#\n   * @function spliceRow\n   * @param {number} row Index of column in which do you want to do splice.\n   * @param {number} index Index at which to start changing the array. If negative, will begin that many elements from the end.\n   * @param {number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed.\n   * @param {...number} [elements] The elements to add to the array. If you don't specify any elements, spliceCol simply removes elements from the array.\n   * @returns {Array} Returns removed portion of rows.\n   */\n  this.spliceRow = function (row, index, amount) {\n    for (var _len15 = arguments.length, elements = new Array(_len15 > 3 ? _len15 - 3 : 0), _key15 = 3; _key15 < _len15; _key15++) {\n      elements[_key15 - 3] = arguments[_key15];\n    }\n    return datamap.spliceRow(row, index, amount, ...elements);\n  };\n\n  /**\n   * Returns indexes of the currently selected cells as an array of arrays `[[startRow, startCol, endRow, endCol],...]`.\n   *\n   * Start row and start column are the coordinates of the active cell (where the selection was started).\n   *\n   * The version 0.36.0 adds a non-consecutive selection feature. Since this version, the method returns an array of arrays.\n   * Additionally to collect the coordinates of the currently selected area (as it was previously done by the method)\n   * you need to use `getSelectedLast` method.\n   *\n   * @memberof Core#\n   * @function getSelected\n   * @returns {Array[]|undefined} An array of arrays of the selection's coordinates.\n   */\n  this.getSelected = function () {\n    // https://github.com/handsontable/handsontable/issues/44  //cjl\n    if (selection.isSelected()) {\n      return arrayMap(selection.getSelectedRange(), _ref7 => {\n        let {\n          from,\n          to\n        } = _ref7;\n        return [from.row, from.col, to.row, to.col];\n      });\n    }\n  };\n\n  /**\n   * Returns the last coordinates applied to the table as a an array `[startRow, startCol, endRow, endCol]`.\n   *\n   * @since 0.36.0\n   * @memberof Core#\n   * @function getSelectedLast\n   * @returns {Array|undefined} An array of the selection's coordinates.\n   */\n  this.getSelectedLast = function () {\n    const selected = this.getSelected();\n    let result;\n    if (selected && selected.length > 0) {\n      result = selected[selected.length - 1];\n    }\n    return result;\n  };\n\n  /**\n   * Returns the current selection as an array of CellRange objects.\n   *\n   * The version 0.36.0 adds a non-consecutive selection feature. Since this version, the method returns an array of arrays.\n   * Additionally to collect the coordinates of the currently selected area (as it was previously done by the method)\n   * you need to use `getSelectedRangeLast` method.\n   *\n   * @memberof Core#\n   * @function getSelectedRange\n   * @returns {CellRange[]|undefined} Selected range object or undefined if there is no selection.\n   */\n  this.getSelectedRange = function () {\n    // https://github.com/handsontable/handsontable/issues/44  //cjl\n    if (selection.isSelected()) {\n      return Array.from(selection.getSelectedRange());\n    }\n  };\n\n  /**\n   * Returns the last coordinates applied to the table as a CellRange object.\n   *\n   * @memberof Core#\n   * @function getSelectedRangeLast\n   * @since 0.36.0\n   * @returns {CellRange|undefined} Selected range object or undefined` if there is no selection.\n   */\n  this.getSelectedRangeLast = function () {\n    const selectedRange = this.getSelectedRange();\n    let result;\n    if (selectedRange && selectedRange.length > 0) {\n      result = selectedRange[selectedRange.length - 1];\n    }\n    return result;\n  };\n\n  /**\n   * Erases content from cells that have been selected in the table.\n   *\n   * @memberof Core#\n   * @function emptySelectedCells\n   * @param {string} [source] String that identifies how this change will be described in the changes array (useful in afterChange or beforeChange callback). Set to 'edit' if left empty.\n   * @since 0.36.0\n   */\n  this.emptySelectedCells = function (source) {\n    if (!selection.isSelected() || this.countRows() === 0 || this.countCols() === 0) {\n      return;\n    }\n    const changes = [];\n    arrayEach(selection.getSelectedRange(), cellRange => {\n      if (cellRange.isSingleHeader()) {\n        return;\n      }\n      const topStart = cellRange.getTopStartCorner();\n      const bottomEnd = cellRange.getBottomEndCorner();\n      rangeEach(topStart.row, bottomEnd.row, row => {\n        rangeEach(topStart.col, bottomEnd.col, column => {\n          if (!this.getCellMeta(row, column).readOnly) {\n            changes.push([row, column, null]);\n          }\n        });\n      });\n    });\n    if (changes.length > 0) {\n      this.setDataAtCell(changes, source);\n    }\n  };\n\n  /**\n   * Checks if the table rendering process was suspended. See explanation in {@link Core#suspendRender}.\n   *\n   * @memberof Core#\n   * @function isRenderSuspended\n   * @since 8.3.0\n   * @returns {boolean}\n   */\n  this.isRenderSuspended = function () {\n    return this.renderSuspendedCounter > 0;\n  };\n\n  /**\n   * Suspends the rendering process. It's helpful to wrap the table render\n   * cycles triggered by API calls or UI actions (or both) and call the \"render\"\n   * once in the end. As a result, it improves the performance of wrapped operations.\n   * When the table is in the suspend state, most operations will have no visual\n   * effect until the rendering state is resumed. Resuming the state automatically\n   * invokes the table rendering. To make sure that after executing all operations,\n   * the table will be rendered, it's highly recommended to use the {@link Core#batchRender}\n   * method or {@link Core#batch}, which additionally aggregates the logic execution\n   * that happens behind the table.\n   *\n   * The method is intended to be used by advanced users. Suspending the rendering\n   * process could cause visual glitches when wrongly implemented.\n   *\n   * Every [`suspendRender()`](@/api/core.md#suspendrender) call needs to correspond with one [`resumeRender()`](@/api/core.md#resumerender) call.\n   * For example, if you call [`suspendRender()`](@/api/core.md#suspendrender) 5 times, you need to call [`resumeRender()`](@/api/core.md#resumerender) 5 times as well.\n   *\n   * @memberof Core#\n   * @function suspendRender\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.suspendRender();\n   * hot.alter('insert_row_above', 5, 45);\n   * hot.alter('insert_col_start', 10, 40);\n   * hot.setDataAtCell(1, 1, 'John');\n   * hot.setDataAtCell(2, 2, 'Mark');\n   * hot.setDataAtCell(3, 3, 'Ann');\n   * hot.setDataAtCell(4, 4, 'Sophia');\n   * hot.setDataAtCell(5, 5, 'Mia');\n   * hot.selectCell(0, 0);\n   * hot.resumeRender(); // It re-renders the table internally\n   * ```\n   */\n  this.suspendRender = function () {\n    this.renderSuspendedCounter += 1;\n  };\n\n  /**\n   * Resumes the rendering process. In combination with the {@link Core#suspendRender}\n   * method it allows aggregating the table render cycles triggered by API calls or UI\n   * actions (or both) and calls the \"render\" once in the end. When the table is in\n   * the suspend state, most operations will have no visual effect until the rendering\n   * state is resumed. Resuming the state automatically invokes the table rendering.\n   *\n   * The method is intended to be used by advanced users. Suspending the rendering\n   * process could cause visual glitches when wrongly implemented.\n   *\n   * Every [`suspendRender()`](@/api/core.md#suspendrender) call needs to correspond with one [`resumeRender()`](@/api/core.md#resumerender) call.\n   * For example, if you call [`suspendRender()`](@/api/core.md#suspendrender) 5 times, you need to call [`resumeRender()`](@/api/core.md#resumerender) 5 times as well.\n   *\n   * @memberof Core#\n   * @function resumeRender\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.suspendRender();\n   * hot.alter('insert_row_above', 5, 45);\n   * hot.alter('insert_col_start', 10, 40);\n   * hot.setDataAtCell(1, 1, 'John');\n   * hot.setDataAtCell(2, 2, 'Mark');\n   * hot.setDataAtCell(3, 3, 'Ann');\n   * hot.setDataAtCell(4, 4, 'Sophia');\n   * hot.setDataAtCell(5, 5, 'Mia');\n   * hot.selectCell(0, 0);\n   * hot.resumeRender(); // It re-renders the table internally\n   * ```\n   */\n  this.resumeRender = function () {\n    const nextValue = this.renderSuspendedCounter - 1;\n    this.renderSuspendedCounter = Math.max(nextValue, 0);\n    if (!this.isRenderSuspended() && nextValue === this.renderSuspendedCounter) {\n      if (this.renderCall) {\n        this.render();\n      } else {\n        this._refreshBorders(null);\n      }\n    }\n  };\n\n  /**\n   * Rerender the table. Calling this method starts the process of recalculating, redrawing and applying the changes\n   * to the DOM. While rendering the table all cell renderers are recalled.\n   *\n   * Calling this method manually is not recommended. Handsontable tries to render itself by choosing the most\n   * optimal moments in its lifecycle.\n   *\n   * @memberof Core#\n   * @function render\n   */\n  this.render = function () {\n    if (this.view) {\n      this.renderCall = true;\n      this.forceFullRender = true; // used when data was changed\n\n      if (!this.isRenderSuspended()) {\n        editorManager.lockEditor();\n        this._refreshBorders(null);\n        editorManager.unlockEditor();\n      }\n    }\n  };\n\n  /**\n   * The method aggregates multi-line API calls into a callback and postpones the\n   * table rendering process. After the execution of the operations, the table is\n   * rendered once. As a result, it improves the performance of wrapped operations.\n   * Without batching, a similar case could trigger multiple table render calls.\n   *\n   * @memberof Core#\n   * @function batchRender\n   * @param {Function} wrappedOperations Batched operations wrapped in a function.\n   * @returns {*} Returns result from the wrappedOperations callback.\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.batchRender(() => {\n   *   hot.alter('insert_row_above', 5, 45);\n   *   hot.alter('insert_col_start', 10, 40);\n   *   hot.setDataAtCell(1, 1, 'John');\n   *   hot.setDataAtCell(2, 2, 'Mark');\n   *   hot.setDataAtCell(3, 3, 'Ann');\n   *   hot.setDataAtCell(4, 4, 'Sophia');\n   *   hot.setDataAtCell(5, 5, 'Mia');\n   *   hot.selectCell(0, 0);\n   *   // The table will be rendered once after executing the callback\n   * });\n   * ```\n   */\n  this.batchRender = function (wrappedOperations) {\n    this.suspendRender();\n    const result = wrappedOperations();\n    this.resumeRender();\n    return result;\n  };\n\n  /**\n   * Checks if the table indexes recalculation process was suspended. See explanation\n   * in {@link Core#suspendExecution}.\n   *\n   * @memberof Core#\n   * @function isExecutionSuspended\n   * @since 8.3.0\n   * @returns {boolean}\n   */\n  this.isExecutionSuspended = function () {\n    return this.executionSuspendedCounter > 0;\n  };\n\n  /**\n   * Suspends the execution process. It's helpful to wrap the table logic changes\n   * such as index changes into one call after which the cache is updated. As a result,\n   * it improves the performance of wrapped operations.\n   *\n   * The method is intended to be used by advanced users. Suspending the execution\n   * process could cause visual glitches caused by not updated the internal table cache.\n   *\n   * @memberof Core#\n   * @function suspendExecution\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.suspendExecution();\n   * const filters = hot.getPlugin('filters');\n   *\n   * filters.addCondition(2, 'contains', ['3']);\n   * filters.filter();\n   * hot.getPlugin('columnSorting').sort({ column: 1, sortOrder: 'desc' });\n   * hot.resumeExecution(); // It updates the cache internally\n   * ```\n   */\n  this.suspendExecution = function () {\n    this.executionSuspendedCounter += 1;\n    this.columnIndexMapper.suspendOperations();\n    this.rowIndexMapper.suspendOperations();\n  };\n\n  /**\n   * Resumes the execution process. In combination with the {@link Core#suspendExecution}\n   * method it allows aggregating the table logic changes after which the cache is\n   * updated. Resuming the state automatically invokes the table cache updating process.\n   *\n   * The method is intended to be used by advanced users. Suspending the execution\n   * process could cause visual glitches caused by not updated the internal table cache.\n   *\n   * @memberof Core#\n   * @function resumeExecution\n   * @param {boolean} [forceFlushChanges=false] If `true`, the table internal data cache\n   * is recalculated after the execution of the batched operations. For nested\n   * {@link Core#batchExecution} calls, it can be desire to recalculate the table\n   * after each batch.\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.suspendExecution();\n   * const filters = hot.getPlugin('filters');\n   *\n   * filters.addCondition(2, 'contains', ['3']);\n   * filters.filter();\n   * hot.getPlugin('columnSorting').sort({ column: 1, sortOrder: 'desc' });\n   * hot.resumeExecution(); // It updates the cache internally\n   * ```\n   */\n  this.resumeExecution = function () {\n    let forceFlushChanges = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const nextValue = this.executionSuspendedCounter - 1;\n    this.executionSuspendedCounter = Math.max(nextValue, 0);\n    if (!this.isExecutionSuspended() && nextValue === this.executionSuspendedCounter || forceFlushChanges) {\n      this.columnIndexMapper.resumeOperations();\n      this.rowIndexMapper.resumeOperations();\n    }\n  };\n\n  /**\n   * The method aggregates multi-line API calls into a callback and postpones the\n   * table execution process. After the execution of the operations, the internal table\n   * cache is recalculated once. As a result, it improves the performance of wrapped\n   * operations. Without batching, a similar case could trigger multiple table cache rebuilds.\n   *\n   * @memberof Core#\n   * @function batchExecution\n   * @param {Function} wrappedOperations Batched operations wrapped in a function.\n   * @param {boolean} [forceFlushChanges=false] If `true`, the table internal data cache\n   * is recalculated after the execution of the batched operations. For nested calls,\n   * it can be a desire to recalculate the table after each batch.\n   * @returns {*} Returns result from the wrappedOperations callback.\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.batchExecution(() => {\n   *   const filters = hot.getPlugin('filters');\n   *\n   *   filters.addCondition(2, 'contains', ['3']);\n   *   filters.filter();\n   *   hot.getPlugin('columnSorting').sort({ column: 1, sortOrder: 'desc' });\n   *   // The table cache will be recalculated once after executing the callback\n   * });\n   * ```\n   */\n  this.batchExecution = function (wrappedOperations) {\n    let forceFlushChanges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.suspendExecution();\n    const result = wrappedOperations();\n    this.resumeExecution(forceFlushChanges);\n    return result;\n  };\n\n  /**\n   * It batches the rendering process and index recalculations. The method aggregates\n   * multi-line API calls into a callback and postpones the table rendering process\n   * as well aggregates the table logic changes such as index changes into one call\n   * after which the cache is updated. After the execution of the operations, the\n   * table is rendered, and the cache is updated once. As a result, it improves the\n   * performance of wrapped operations.\n   *\n   * @memberof Core#\n   * @function batch\n   * @param {Function} wrappedOperations Batched operations wrapped in a function.\n   * @returns {*} Returns result from the wrappedOperations callback.\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.batch(() => {\n   *   hot.alter('insert_row_above', 5, 45);\n   *   hot.alter('insert_col_start', 10, 40);\n   *   hot.setDataAtCell(1, 1, 'x');\n   *   hot.setDataAtCell(2, 2, 'c');\n   *   hot.setDataAtCell(3, 3, 'v');\n   *   hot.setDataAtCell(4, 4, 'b');\n   *   hot.setDataAtCell(5, 5, 'n');\n   *   hot.selectCell(0, 0);\n   *\n   *   const filters = hot.getPlugin('filters');\n   *\n   *   filters.addCondition(2, 'contains', ['3']);\n   *   filters.filter();\n   *   hot.getPlugin('columnSorting').sort({ column: 1, sortOrder: 'desc' });\n   *   // The table will be re-rendered and cache will be recalculated once after executing the callback\n   * });\n   * ```\n   */\n  this.batch = function (wrappedOperations) {\n    this.suspendRender();\n    this.suspendExecution();\n    const result = wrappedOperations();\n    this.resumeExecution();\n    this.resumeRender();\n    return result;\n  };\n\n  /**\n   * Updates dimensions of the table. The method compares previous dimensions with the current ones and updates accordingly.\n   *\n   * @memberof Core#\n   * @function refreshDimensions\n   * @fires Hooks#beforeRefreshDimensions\n   * @fires Hooks#afterRefreshDimensions\n   */\n  this.refreshDimensions = function () {\n    if (!instance.view) {\n      return;\n    }\n    const {\n      width: lastWidth,\n      height: lastHeight\n    } = instance.view.getLastSize();\n    const {\n      width,\n      height\n    } = instance.rootElement.getBoundingClientRect();\n    const isSizeChanged = width !== lastWidth || height !== lastHeight;\n    const isResizeBlocked = instance.runHooks('beforeRefreshDimensions', {\n      width: lastWidth,\n      height: lastHeight\n    }, {\n      width,\n      height\n    }, isSizeChanged) === false;\n    if (isResizeBlocked) {\n      return;\n    }\n    if (isSizeChanged || instance.view._wt.wtOverlays.scrollableElement === instance.rootWindow) {\n      instance.view.setLastSize(width, height);\n      instance.render();\n    }\n    instance.runHooks('afterRefreshDimensions', {\n      width: lastWidth,\n      height: lastHeight\n    }, {\n      width,\n      height\n    }, isSizeChanged);\n  };\n\n  /**\n   * The `updateData()` method replaces Handsontable's [`data`](@/api/options.md#data) with a new dataset.\n   *\n   * The `updateData()` method:\n   * - Keeps cells' states (e.g. cells' [formatting](@/guides/cell-features/formatting-cells.md) and cells' [`readOnly`](@/api/options.md#readonly) states)\n   * - Keeps rows' states (e.g. row order)\n   * - Keeps columns' states (e.g. column order)\n   *\n   * To replace Handsontable's [`data`](@/api/options.md#data) and reset states, use the [`loadData()`](#loaddata) method.\n   *\n   * Read more:\n   * - [Binding to data](@/guides/getting-started/binding-to-data.md)\n   * - [Saving data](@/guides/getting-started/saving-data.md)\n   *\n   * @memberof Core#\n   * @function updateData\n   * @since 11.1.0\n   * @param {Array} data An [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), that contains Handsontable's data\n   * @param {string} [source] The source of the `updateData()` call\n   * @fires Hooks#beforeUpdateData\n   * @fires Hooks#afterUpdateData\n   * @fires Hooks#afterChange\n   */\n  this.updateData = function (data, source) {\n    replaceData(data, newDataMap => {\n      datamap = newDataMap;\n    }, newDataMap => {\n      datamap = newDataMap;\n      instance.columnIndexMapper.fitToLength(this.getInitialColumnCount());\n      instance.rowIndexMapper.fitToLength(this.countSourceRows());\n      grid.adjustRowsAndCols();\n    }, {\n      hotInstance: instance,\n      dataMap: datamap,\n      dataSource,\n      internalSource: 'updateData',\n      source,\n      metaManager,\n      firstRun\n    });\n  };\n\n  /**\n   * The `loadData()` method replaces Handsontable's [`data`](@/api/options.md#data) with a new dataset.\n   *\n   * Additionally, the `loadData()` method:\n   * - Resets cells' states (e.g. cells' [formatting](@/guides/cell-features/formatting-cells.md) and cells' [`readOnly`](@/api/options.md#readonly) states)\n   * - Resets rows' states (e.g. row order)\n   * - Resets columns' states (e.g. column order)\n   *\n   * To replace Handsontable's [`data`](@/api/options.md#data) without resetting states, use the [`updateData()`](#updatedata) method.\n   *\n   * Read more:\n   * - [Binding to data](@/guides/getting-started/binding-to-data.md)\n   * - [Saving data](@/guides/getting-started/saving-data.md)\n   *\n   * @memberof Core#\n   * @function loadData\n   * @param {Array} data An [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), that contains Handsontable's data\n   * @param {string} [source] The source of the `loadData()` call\n   * @fires Hooks#beforeLoadData\n   * @fires Hooks#afterLoadData\n   * @fires Hooks#afterChange\n   */\n  this.loadData = function (data, source) {\n    replaceData(data, newDataMap => {\n      datamap = newDataMap;\n    }, () => {\n      metaManager.clearCellsCache();\n      instance.initIndexMappers();\n      grid.adjustRowsAndCols();\n      if (firstRun) {\n        firstRun = [null, 'loadData'];\n      }\n    }, {\n      hotInstance: instance,\n      dataMap: datamap,\n      dataSource,\n      internalSource: 'loadData',\n      source,\n      metaManager,\n      firstRun\n    });\n  };\n\n  /**\n   * Gets the initial column count, calculated based on the `columns` setting.\n   *\n   * @private\n   * @returns {number} The calculated number of columns.\n   */\n  this.getInitialColumnCount = function () {\n    const columnsSettings = tableMeta.columns;\n    let finalNrOfColumns = 0;\n\n    // We will check number of columns when the `columns` property was defined as an array. Columns option may\n    // narrow down or expand displayed dataset in that case.\n    if (Array.isArray(columnsSettings)) {\n      finalNrOfColumns = columnsSettings.length;\n    } else if (isFunction(columnsSettings)) {\n      if (instance.dataType === 'array') {\n        const nrOfSourceColumns = this.countSourceCols();\n        for (let columnIndex = 0; columnIndex < nrOfSourceColumns; columnIndex += 1) {\n          if (columnsSettings(columnIndex)) {\n            finalNrOfColumns += 1;\n          }\n        }\n\n        // Extended dataset by the `columns` property? Moved code right from the refactored `countCols` method.\n      } else if (instance.dataType === 'object' || instance.dataType === 'function') {\n        finalNrOfColumns = datamap.colToPropCache.length;\n      }\n\n      // In some cases we need to check columns length from the schema, i.e. `data` may be empty.\n    } else if (isDefined(tableMeta.dataSchema)) {\n      const schema = datamap.getSchema();\n\n      // Schema may be defined as an array of objects. Each object will define column.\n      finalNrOfColumns = Array.isArray(schema) ? schema.length : deepObjectSize(schema);\n    } else {\n      // We init index mappers by length of source data to provide indexes also for skipped indexes.\n      finalNrOfColumns = this.countSourceCols();\n    }\n    return finalNrOfColumns;\n  };\n\n  /**\n   * Init index mapper which manage indexes assigned to the data.\n   *\n   * @private\n   */\n  this.initIndexMappers = function () {\n    this.columnIndexMapper.initToLength(this.getInitialColumnCount());\n    this.rowIndexMapper.initToLength(this.countSourceRows());\n  };\n\n  /**\n   * Returns the current data object (the same one that was passed by `data` configuration option or `loadData` method,\n   * unless some modifications have been applied (i.e. Sequence of rows/columns was changed, some row/column was skipped).\n   * If that's the case - use the {@link Core#getSourceData} method.).\n   *\n   * Optionally you can provide cell range by defining `row`, `column`, `row2`, `column2` to get only a fragment of table data.\n   *\n   * @memberof Core#\n   * @function getData\n   * @param {number} [row] From visual row index.\n   * @param {number} [column] From visual column index.\n   * @param {number} [row2] To visual row index.\n   * @param {number} [column2] To visual column index.\n   * @returns {Array[]} Array with the data.\n   * @example\n   * ```js\n   * // Get all data (in order how it is rendered in the table).\n   * hot.getData();\n   * // Get data fragment (from top-left 0, 0 to bottom-right 3, 3).\n   * hot.getData(3, 3);\n   * // Get data fragment (from top-left 2, 1 to bottom-right 3, 3).\n   * hot.getData(2, 1, 3, 3);\n   * ```\n   */\n  this.getData = function (row, column, row2, column2) {\n    if (isUndefined(row)) {\n      return datamap.getAll();\n    }\n    return datamap.getRange(instance._createCellCoords(row, column), instance._createCellCoords(row2, column2), datamap.DESTINATION_RENDERER);\n  };\n\n  /**\n   * Returns a string value of the selected range. Each column is separated by tab, each row is separated by a new\n   * line character.\n   *\n   * @memberof Core#\n   * @function getCopyableText\n   * @param {number} startRow From visual row index.\n   * @param {number} startCol From visual column index.\n   * @param {number} endRow To visual row index.\n   * @param {number} endCol To visual column index.\n   * @returns {string}\n   */\n  this.getCopyableText = function (startRow, startCol, endRow, endCol) {\n    return datamap.getCopyableText(instance._createCellCoords(startRow, startCol), instance._createCellCoords(endRow, endCol));\n  };\n\n  /**\n   * Returns the data's copyable value at specified `row` and `column` index.\n   *\n   * @memberof Core#\n   * @function getCopyableData\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @returns {string}\n   */\n  this.getCopyableData = function (row, column) {\n    return datamap.getCopyable(row, datamap.colToProp(column));\n  };\n\n  /**\n   * Returns schema provided by constructor settings. If it doesn't exist then it returns the schema based on the data\n   * structure in the first row.\n   *\n   * @memberof Core#\n   * @function getSchema\n   * @returns {object} Schema object.\n   */\n  this.getSchema = function () {\n    return datamap.getSchema();\n  };\n\n  /**\n   * Use it if you need to change configuration after initialization. The `settings` argument is an object containing the changed\n   * settings, declared the same way as in the initial settings object.\n   *\n   * __Note__, that although the `updateSettings` method doesn't overwrite the previously declared settings, it might reset\n   * the settings made post-initialization. (for example - ignore changes made using the columnResize feature).\n   *\n   * Since 8.0.0 passing `columns` or `data` inside `settings` objects will result in resetting states corresponding to rows and columns\n   * (for example, row/column sequence, column width, row height, frozen columns etc.).\n   *\n   * Since 12.0.0 passing `data` inside `settings` objects no longer results in resetting states corresponding to rows and columns\n   * (for example, row/column sequence, column width, row height, frozen columns etc.).\n   *\n   * @memberof Core#\n   * @function updateSettings\n   * @param {object} settings A settings object (see {@link Options}). Only provide the settings that are changed, not the whole settings object that was used for initialization.\n   * @param {boolean} [init=false] Internally used for in initialization mode.\n   * @example\n   * ```js\n   * hot.updateSettings({\n   *    contextMenu: true,\n   *    colHeaders: true,\n   *    fixedRowsTop: 2\n   * });\n   * ```\n   * @fires Hooks#afterCellMetaReset\n   * @fires Hooks#afterUpdateSettings\n   */\n  this.updateSettings = function (settings) {\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const dataUpdateFunction = (firstRun ? instance.loadData : instance.updateData).bind(this);\n    let columnsAsFunc = false;\n    let i;\n    let j;\n    if (isDefined(settings.rows)) {\n      throw new Error('The \"rows\" setting is no longer supported. Do you mean startRows, minRows or maxRows?');\n    }\n    if (isDefined(settings.cols)) {\n      throw new Error('The \"cols\" setting is no longer supported. Do you mean startCols, minCols or maxCols?');\n    }\n    if (isDefined(settings.ganttChart)) {\n      throw new Error('Since 8.0.0 the \"ganttChart\" setting is no longer supported.');\n    }\n\n    // eslint-disable-next-line no-restricted-syntax\n    for (i in settings) {\n      if (i === 'data') {\n        // Do nothing. loadData will be triggered later\n      } else if (i === 'language') {\n        setLanguage(settings.language);\n      } else if (i === 'className') {\n        setClassName('className', settings.className);\n      } else if (i === 'tableClassName' && instance.table) {\n        setClassName('tableClassName', settings.tableClassName);\n        instance.view._wt.wtOverlays.syncOverlayTableClassNames();\n      } else if (Hooks.getSingleton().isRegistered(i) || Hooks.getSingleton().isDeprecated(i)) {\n        if (isFunction(settings[i]) || Array.isArray(settings[i])) {\n          settings[i].initialHook = true;\n          instance.addHook(i, settings[i]);\n        }\n      } else if (!init && hasOwnProperty(settings, i)) {\n        // Update settings\n        globalMeta[i] = settings[i];\n      }\n    }\n\n    // Load data or create data map\n    if (settings.data === undefined && tableMeta.data === undefined) {\n      dataUpdateFunction(null, 'updateSettings'); // data source created just now\n    } else if (settings.data !== undefined) {\n      dataUpdateFunction(settings.data, 'updateSettings'); // data source given as option\n    } else if (settings.columns !== undefined) {\n      datamap.createMap();\n\n      // The `column` property has changed - dataset may be expanded or narrowed down. The `loadData` do the same.\n      instance.initIndexMappers();\n    }\n    const clen = instance.countCols();\n    const columnSetting = tableMeta.columns;\n\n    // Init columns constructors configuration\n    if (columnSetting && isFunction(columnSetting)) {\n      columnsAsFunc = true;\n    }\n\n    // Clear cell meta cache\n    if (settings.cell !== undefined || settings.cells !== undefined || settings.columns !== undefined) {\n      metaManager.clearCache();\n    }\n    if (clen > 0) {\n      for (i = 0, j = 0; i < clen; i++) {\n        // Use settings provided by user\n        if (columnSetting) {\n          const column = columnsAsFunc ? columnSetting(i) : columnSetting[j];\n          if (column) {\n            metaManager.updateColumnMeta(j, column);\n          }\n        }\n        j += 1;\n      }\n    }\n    if (isDefined(settings.cell)) {\n      objectEach(settings.cell, cell => {\n        instance.setCellMetaObject(cell.row, cell.col, cell);\n      });\n    }\n    instance.runHooks('afterCellMetaReset');\n    let currentHeight = instance.rootElement.style.height;\n    if (currentHeight !== '') {\n      currentHeight = parseInt(instance.rootElement.style.height, 10);\n    }\n    let height = settings.height;\n    if (isFunction(height)) {\n      height = height();\n    }\n    if (init) {\n      const initialStyle = instance.rootElement.getAttribute('style');\n      if (initialStyle) {\n        instance.rootElement.setAttribute('data-initialstyle', instance.rootElement.getAttribute('style'));\n      }\n    }\n    if (height === null) {\n      const initialStyle = instance.rootElement.getAttribute('data-initialstyle');\n      if (initialStyle && (initialStyle.indexOf('height') > -1 || initialStyle.indexOf('overflow') > -1)) {\n        instance.rootElement.setAttribute('style', initialStyle);\n      } else {\n        instance.rootElement.style.height = '';\n        instance.rootElement.style.overflow = '';\n      }\n    } else if (height !== undefined) {\n      instance.rootElement.style.height = isNaN(height) ? `${height}` : `${height}px`;\n      instance.rootElement.style.overflow = 'hidden';\n    }\n    if (typeof settings.width !== 'undefined') {\n      let width = settings.width;\n      if (isFunction(width)) {\n        width = width();\n      }\n      instance.rootElement.style.width = isNaN(width) ? `${width}` : `${width}px`;\n    }\n    if (!init) {\n      if (instance.view) {\n        instance.view._wt.wtViewport.resetHasOversizedColumnHeadersMarked();\n        instance.view._wt.exportSettingsAsClassNames();\n      }\n      instance.runHooks('afterUpdateSettings', settings);\n    }\n    grid.adjustRowsAndCols();\n    if (instance.view && !firstRun) {\n      instance.forceFullRender = true; // used when data was changed\n      editorManager.lockEditor();\n      instance._refreshBorders(null);\n      instance.view._wt.wtOverlays.adjustElementsSize();\n      editorManager.unlockEditor();\n    }\n    if (!init && instance.view && (currentHeight === '' || height === '' || height === undefined) && currentHeight !== height) {\n      instance.view._wt.wtOverlays.updateMainScrollableElements();\n    }\n  };\n\n  /**\n   * Gets the value of the currently focused cell.\n   *\n   * For column headers and row headers, returns `null`.\n   *\n   * @memberof Core#\n   * @function getValue\n   * @returns {*} The value of the focused cell.\n   */\n  this.getValue = function () {\n    const sel = instance.getSelectedLast();\n    if (tableMeta.getValue) {\n      if (isFunction(tableMeta.getValue)) {\n        return tableMeta.getValue.call(instance);\n      } else if (sel) {\n        return instance.getData()[sel[0][0]][tableMeta.getValue];\n      }\n    } else if (sel) {\n      return instance.getDataAtCell(sel[0], sel[1]);\n    }\n  };\n\n  /**\n   * Returns the object settings.\n   *\n   * @memberof Core#\n   * @function getSettings\n   * @returns {TableMeta} Object containing the current table settings.\n   */\n  this.getSettings = function () {\n    return tableMeta;\n  };\n\n  /**\n   * Clears the data from the table (the table settings remain intact).\n   *\n   * @memberof Core#\n   * @function clear\n   */\n  this.clear = function () {\n    this.selectAll();\n    this.emptySelectedCells();\n  };\n\n  /**\n   * The `alter()` method lets you alter the grid's structure\n   * by adding or removing rows and columns at specified positions.\n   *\n   * ::: tip\n   * The `alter()` method works only when your [`data`](@/api/options.md#data)\n   * is an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays).\n   * :::\n   *\n   * ```js\n   * // above row 10 (by visual index), insert 1 new row\n   * hot.alter('insert_row_above', 10);\n   * ```\n   *\n   *  | Action               | With `index` | Without `index` |\n   *  | -------------------- | ------------ | --------------- |\n   *  | `'insert_row_above'` | Inserts rows above the `index` row. | Inserts rows above the first row. |\n   *  | `'insert_row_below'` | Inserts rows below the `index` row. | Inserts rows below the last row. |\n   *  | `'remove_row'`       | Removes rows, starting from the `index` row. | Removes rows, starting from the last row. |\n   *  | `'insert_col_start'` | Inserts columns before the `index` column. | Inserts columns before the first column. |\n   *  | `'insert_col_end'`   | Inserts columns after the `index` column. | Inserts columns after the last column. |\n   *  | `'remove_col'`       | Removes columns, starting from the `index` column. | Removes columns, starting from the last column. |\n   *\n   * Additional information about `'insert_col_start'` and `'insert_col_end'`:\n   * - Their behavior depends on your [`layoutDirection`](@/api/options.md#layoutdirection).\n   * - If the provided `index` is higher than the actual number of columns, Handsontable doesn't generate\n   * the columns missing in between. Instead, the new columns are inserted next to the last column.\n   *\n   * @memberof Core#\n   * @function alter\n   * @param {string} action Available operations:\n   * <ul>\n   *    <li> `'insert_row_above'` </li>\n   *    <li> `'insert_row_below'` </li>\n   *    <li> `'remove_row'` </li> </li>\n   *    <li> `'insert_col_start'` </li>\n   *    <li> `'insert_col_end'` </li>\n   *    <li> `'remove_col'` </li>\n   * </ul>\n   * @param {number|number[]} [index] A visual index of the row/column before or after which the new row/column will be\n   *                                inserted or removed. Can also be an array of arrays, in format `[[index, amount],...]`.\n   * @param {number} [amount] The amount of rows or columns to be inserted or removed (default: `1`).\n   * @param {string} [source] Source indicator.\n   * @param {boolean} [keepEmptyRows] If set to `true`: prevents removing empty rows.\n   * @example\n   * ```js\n   * // above row 10 (by visual index), insert 1 new row\n   * hot.alter('insert_row_above', 10);\n   *\n   * // below row 10 (by visual index), insert 3 new rows\n   * hot.alter('insert_row_below', 10, 3);\n   *\n   * // in the LTR layout direction: to the left of column 10 (by visual index), insert 3 new columns\n   * // in the RTL layout direction: to the right of column 10 (by visual index), insert 3 new columns\n   * hot.alter('insert_col_start', 10, 3);\n   *\n   * // in the LTR layout direction: to the right of column 10 (by visual index), insert 1 new column\n   * // in the RTL layout direction: to the left of column 10 (by visual index), insert 1 new column\n   * hot.alter('insert_col_end', 10);\n   *\n   * // remove 2 rows, starting from row 10 (by visual index)\n   * hot.alter('remove_row', 10, 2);\n   *\n   * // remove 3 rows, starting from row 1 (by visual index)\n   * // remove 2 rows, starting from row 5 (by visual index)\n   * hot.alter('remove_row', [[1, 3], [5, 2]]);\n   * ```\n   */\n  this.alter = function (action, index, amount, source, keepEmptyRows) {\n    grid.alter(action, index, amount, source, keepEmptyRows);\n  };\n\n  /**\n   * Returns a TD element for the given `row` and `column` arguments, if it is rendered on screen.\n   * Returns `null` if the TD is not rendered on screen (probably because that part of the table is not visible).\n   *\n   * @memberof Core#\n   * @function getCell\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {boolean} [topmost=false] If set to `true`, it returns the TD element from the topmost overlay. For example,\n   * if the wanted cell is in the range of fixed rows, it will return a TD element from the `top` overlay.\n   * @returns {HTMLTableCellElement|null} The cell's TD element.\n   */\n  this.getCell = function (row, column) {\n    let topmost = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let renderableColumnIndex = column; // Handling also column headers.\n    let renderableRowIndex = row; // Handling also row headers.\n\n    if (column >= 0) {\n      if (this.columnIndexMapper.isHidden(this.toPhysicalColumn(column))) {\n        return null;\n      }\n      renderableColumnIndex = this.columnIndexMapper.getRenderableFromVisualIndex(column);\n    }\n    if (row >= 0) {\n      if (this.rowIndexMapper.isHidden(this.toPhysicalRow(row))) {\n        return null;\n      }\n      renderableRowIndex = this.rowIndexMapper.getRenderableFromVisualIndex(row);\n    }\n    if (renderableRowIndex === null || renderableColumnIndex === null) {\n      return null;\n    }\n    return instance.view.getCellAtCoords(instance._createCellCoords(renderableRowIndex, renderableColumnIndex), topmost);\n  };\n\n  /**\n   * Returns the coordinates of the cell, provided as a HTML table cell element.\n   *\n   * @memberof Core#\n   * @function getCoords\n   * @param {HTMLTableCellElement} element The HTML Element representing the cell.\n   * @returns {CellCoords|null} Visual coordinates object.\n   * @example\n   * ```js\n   * hot.getCoords(hot.getCell(1, 1));\n   * // it returns CellCoords object instance with props row: 1 and col: 1.\n   * ```\n   */\n  this.getCoords = function (element) {\n    const renderableCoords = this.view._wt.wtTable.getCoords(element);\n    if (renderableCoords === null) {\n      return null;\n    }\n    const {\n      row: renderableRow,\n      col: renderableColumn\n    } = renderableCoords;\n    let visualRow = renderableRow;\n    let visualColumn = renderableColumn;\n    if (renderableRow >= 0) {\n      visualRow = this.rowIndexMapper.getVisualFromRenderableIndex(renderableRow);\n    }\n    if (renderableColumn >= 0) {\n      visualColumn = this.columnIndexMapper.getVisualFromRenderableIndex(renderableColumn);\n    }\n    return instance._createCellCoords(visualRow, visualColumn);\n  };\n\n  /**\n   * Returns the property name that corresponds with the given column index.\n   * If the data source is an array of arrays, it returns the columns index.\n   *\n   * @memberof Core#\n   * @function colToProp\n   * @param {number} column Visual column index.\n   * @returns {string|number} Column property or physical column index.\n   */\n  this.colToProp = function (column) {\n    return datamap.colToProp(column);\n  };\n\n  /**\n   * Returns column index that corresponds with the given property.\n   *\n   * @memberof Core#\n   * @function propToCol\n   * @param {string|number} prop Property name or physical column index.\n   * @returns {number} Visual column index.\n   */\n  this.propToCol = function (prop) {\n    return datamap.propToCol(prop);\n  };\n\n  /**\n   * Translate physical row index into visual.\n   *\n   * This method is useful when you want to retrieve visual row index which can be reordered, moved or trimmed\n   * based on a physical index.\n   *\n   * @memberof Core#\n   * @function toVisualRow\n   * @param {number} row Physical row index.\n   * @returns {number} Returns visual row index.\n   */\n  this.toVisualRow = row => this.rowIndexMapper.getVisualFromPhysicalIndex(row);\n\n  /**\n   * Translate physical column index into visual.\n   *\n   * This method is useful when you want to retrieve visual column index which can be reordered, moved or trimmed\n   * based on a physical index.\n   *\n   * @memberof Core#\n   * @function toVisualColumn\n   * @param {number} column Physical column index.\n   * @returns {number} Returns visual column index.\n   */\n  this.toVisualColumn = column => this.columnIndexMapper.getVisualFromPhysicalIndex(column);\n\n  /**\n   * Translate visual row index into physical.\n   *\n   * This method is useful when you want to retrieve physical row index based on a visual index which can be\n   * reordered, moved or trimmed.\n   *\n   * @memberof Core#\n   * @function toPhysicalRow\n   * @param {number} row Visual row index.\n   * @returns {number} Returns physical row index.\n   */\n  this.toPhysicalRow = row => this.rowIndexMapper.getPhysicalFromVisualIndex(row);\n\n  /**\n   * Translate visual column index into physical.\n   *\n   * This method is useful when you want to retrieve physical column index based on a visual index which can be\n   * reordered, moved or trimmed.\n   *\n   * @memberof Core#\n   * @function toPhysicalColumn\n   * @param {number} column Visual column index.\n   * @returns {number} Returns physical column index.\n   */\n  this.toPhysicalColumn = column => this.columnIndexMapper.getPhysicalFromVisualIndex(column);\n\n  /**\n   * @description\n   * Returns the cell value at `row`, `column`.\n   *\n   * __Note__: If data is reordered, sorted or trimmed, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataAtCell\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @returns {*} Data at cell.\n   */\n  this.getDataAtCell = function (row, column) {\n    return datamap.get(row, datamap.colToProp(column));\n  };\n\n  /**\n   * Returns value at visual `row` and `prop` indexes.\n   *\n   * __Note__: If data is reordered, sorted or trimmed, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataAtRowProp\n   * @param {number} row Visual row index.\n   * @param {string} prop Property name.\n   * @returns {*} Cell value.\n   */\n  this.getDataAtRowProp = function (row, prop) {\n    return datamap.get(row, prop);\n  };\n\n  /**\n   * @description\n   * Returns array of column values from the data source.\n   *\n   * __Note__: If columns were reordered or sorted, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataAtCol\n   * @param {number} column Visual column index.\n   * @returns {Array} Array of cell values.\n   */\n  this.getDataAtCol = function (column) {\n    const columnData = [];\n    const dataByRows = datamap.getRange(instance._createCellCoords(0, column), instance._createCellCoords(tableMeta.data.length - 1, column), datamap.DESTINATION_RENDERER);\n    for (let i = 0; i < dataByRows.length; i += 1) {\n      for (let j = 0; j < dataByRows[i].length; j += 1) {\n        columnData.push(dataByRows[i][j]);\n      }\n    }\n    return columnData;\n  };\n\n  /**\n   * Given the object property name (e.g. `'first.name'` or `'0'`), returns an array of column's values from the table data.\n   * You can also provide a column index as the first argument.\n   *\n   * @memberof Core#\n   * @function getDataAtProp\n   * @param {string|number} prop Property name or physical column index.\n   * @returns {Array} Array of cell values.\n   */\n  // TODO: Getting data from `datamap` should work on visual indexes.\n  this.getDataAtProp = function (prop) {\n    const columnData = [];\n    const dataByRows = datamap.getRange(instance._createCellCoords(0, datamap.propToCol(prop)), instance._createCellCoords(tableMeta.data.length - 1, datamap.propToCol(prop)), datamap.DESTINATION_RENDERER);\n    for (let i = 0; i < dataByRows.length; i += 1) {\n      for (let j = 0; j < dataByRows[i].length; j += 1) {\n        columnData.push(dataByRows[i][j]);\n      }\n    }\n    return columnData;\n  };\n\n  /**\n   * Returns a clone of the source data object.\n   * Optionally you can provide a cell range by using the `row`, `column`, `row2`, `column2` arguments, to get only a\n   * fragment of the table data.\n   *\n   * __Note__: This method does not participate in data transformation. If the visual data of the table is reordered,\n   * sorted or trimmed only physical indexes are correct.\n   *\n   * __Note__: This method may return incorrect values for cells that contain\n   * [formulas](@/guides/formulas/formula-calculation.md). This is because `getSourceData()`\n   * operates on source data ([physical indexes](@/api/indexMapper.md)),\n   * whereas formulas operate on visual data (visual indexes).\n   *\n   * @memberof Core#\n   * @function getSourceData\n   * @param {number} [row] From physical row index.\n   * @param {number} [column] From physical column index (or visual index, if data type is an array of objects).\n   * @param {number} [row2] To physical row index.\n   * @param {number} [column2] To physical column index (or visual index, if data type is an array of objects).\n   * @returns {Array[]|object[]} The table data.\n   */\n  this.getSourceData = function (row, column, row2, column2) {\n    let data;\n    if (row === undefined) {\n      data = dataSource.getData();\n    } else {\n      data = dataSource.getByRange(instance._createCellCoords(row, column), instance._createCellCoords(row2, column2));\n    }\n    return data;\n  };\n\n  /**\n   * Returns the source data object as an arrays of arrays format even when source data was provided in another format.\n   * Optionally you can provide a cell range by using the `row`, `column`, `row2`, `column2` arguments, to get only a\n   * fragment of the table data.\n   *\n   * __Note__: This method does not participate in data transformation. If the visual data of the table is reordered,\n   * sorted or trimmed only physical indexes are correct.\n   *\n   * @memberof Core#\n   * @function getSourceDataArray\n   * @param {number} [row] From physical row index.\n   * @param {number} [column] From physical column index (or visual index, if data type is an array of objects).\n   * @param {number} [row2] To physical row index.\n   * @param {number} [column2] To physical column index (or visual index, if data type is an array of objects).\n   * @returns {Array} An array of arrays.\n   */\n  this.getSourceDataArray = function (row, column, row2, column2) {\n    let data;\n    if (row === undefined) {\n      data = dataSource.getData(true);\n    } else {\n      data = dataSource.getByRange(instance._createCellCoords(row, column), instance._createCellCoords(row2, column2), true);\n    }\n    return data;\n  };\n\n  /**\n   * Returns an array of column values from the data source.\n   *\n   * @memberof Core#\n   * @function getSourceDataAtCol\n   * @param {number} column Visual column index.\n   * @returns {Array} Array of the column's cell values.\n   */\n  // TODO: Getting data from `sourceData` should work always on physical indexes.\n  this.getSourceDataAtCol = function (column) {\n    return dataSource.getAtColumn(column);\n  };\n\n  /* eslint-disable jsdoc/require-param */\n  /**\n   * Set the provided value in the source data set at the provided coordinates.\n   *\n   * @memberof Core#\n   * @function setSourceDataAtCell\n   * @param {number|Array} row Physical row index or array of changes in format `[[row, prop, value], ...]`.\n   * @param {number|string} column Physical column index / prop name.\n   * @param {*} value The value to be set at the provided coordinates.\n   * @param {string} [source] Source of the change as a string.\n   */\n  /* eslint-enable jsdoc/require-param */\n  this.setSourceDataAtCell = function (row, column, value, source) {\n    const input = setDataInputToArray(row, column, value);\n    const isThereAnySetSourceListener = this.hasHook('afterSetSourceDataAtCell');\n    const changesForHook = [];\n    if (isThereAnySetSourceListener) {\n      arrayEach(input, _ref8 => {\n        let [changeRow, changeProp, changeValue] = _ref8;\n        changesForHook.push([changeRow, changeProp, dataSource.getAtCell(changeRow, changeProp),\n        // The previous value.\n        changeValue]);\n      });\n    }\n    arrayEach(input, _ref9 => {\n      let [changeRow, changeProp, changeValue] = _ref9;\n      dataSource.setAtCell(changeRow, changeProp, changeValue);\n    });\n    if (isThereAnySetSourceListener) {\n      this.runHooks('afterSetSourceDataAtCell', changesForHook, source);\n    }\n    this.render();\n    const activeEditor = instance.getActiveEditor();\n    if (activeEditor && isDefined(activeEditor.refreshValue)) {\n      activeEditor.refreshValue();\n    }\n  };\n\n  /**\n   * Returns a single row of the data (array or object, depending on what data format you use).\n   *\n   * __Note__: This method does not participate in data transformation. If the visual data of the table is reordered,\n   * sorted or trimmed only physical indexes are correct.\n   *\n   * @memberof Core#\n   * @function getSourceDataAtRow\n   * @param {number} row Physical row index.\n   * @returns {Array|object} Single row of data.\n   */\n  this.getSourceDataAtRow = function (row) {\n    return dataSource.getAtRow(row);\n  };\n\n  /**\n   * Returns a single value from the data source.\n   *\n   * @memberof Core#\n   * @function getSourceDataAtCell\n   * @param {number} row Physical row index.\n   * @param {number} column Visual column index.\n   * @returns {*} Cell data.\n   */\n  // TODO: Getting data from `sourceData` should work always on physical indexes.\n  this.getSourceDataAtCell = function (row, column) {\n    return dataSource.getAtCell(row, column);\n  };\n\n  /**\n   * @description\n   * Returns a single row of the data.\n   *\n   * __Note__: If rows were reordered, sorted or trimmed, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataAtRow\n   * @param {number} row Visual row index.\n   * @returns {Array} Array of row's cell data.\n   */\n  this.getDataAtRow = function (row) {\n    const data = datamap.getRange(instance._createCellCoords(row, 0), instance._createCellCoords(row, this.countCols() - 1), datamap.DESTINATION_RENDERER);\n    return data[0] || [];\n  };\n\n  /**\n   * @description\n   * Returns a data type defined in the Handsontable settings under the `type` key ({@link Options#type}).\n   * If there are cells with different types in the selected range, it returns `'mixed'`.\n   *\n   * __Note__: If data is reordered, sorted or trimmed, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataType\n   * @param {number} rowFrom From visual row index.\n   * @param {number} columnFrom From visual column index.\n   * @param {number} rowTo To visual row index.\n   * @param {number} columnTo To visual column index.\n   * @returns {string} Cell type (e.q: `'mixed'`, `'text'`, `'numeric'`, `'autocomplete'`).\n   */\n  this.getDataType = function (rowFrom, columnFrom, rowTo, columnTo) {\n    const coords = rowFrom === undefined ? [0, 0, this.countRows(), this.countCols()] : [rowFrom, columnFrom, rowTo, columnTo];\n    const [rowStart, columnStart] = coords;\n    let [,, rowEnd, columnEnd] = coords;\n    let previousType = null;\n    let currentType = null;\n    if (rowEnd === undefined) {\n      rowEnd = rowStart;\n    }\n    if (columnEnd === undefined) {\n      columnEnd = columnStart;\n    }\n    let type = 'mixed';\n    rangeEach(Math.max(Math.min(rowStart, rowEnd), 0), Math.max(rowStart, rowEnd), row => {\n      let isTypeEqual = true;\n      rangeEach(Math.max(Math.min(columnStart, columnEnd), 0), Math.max(columnStart, columnEnd), column => {\n        const cellType = this.getCellMeta(row, column);\n        currentType = cellType.type;\n        if (previousType) {\n          isTypeEqual = previousType === currentType;\n        } else {\n          previousType = currentType;\n        }\n        return isTypeEqual;\n      });\n      type = isTypeEqual ? currentType : 'mixed';\n      return isTypeEqual;\n    });\n    return type;\n  };\n\n  /**\n   * Remove a property defined by the `key` argument from the cell meta object for the provided `row` and `column` coordinates.\n   *\n   * @memberof Core#\n   * @function removeCellMeta\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {string} key Property name.\n   * @fires Hooks#beforeRemoveCellMeta\n   * @fires Hooks#afterRemoveCellMeta\n   */\n  this.removeCellMeta = function (row, column, key) {\n    const [physicalRow, physicalColumn] = [this.toPhysicalRow(row), this.toPhysicalColumn(column)];\n    let cachedValue = metaManager.getCellMetaKeyValue(physicalRow, physicalColumn, key);\n    const hookResult = instance.runHooks('beforeRemoveCellMeta', row, column, key, cachedValue);\n    if (hookResult !== false) {\n      metaManager.removeCellMeta(physicalRow, physicalColumn, key);\n      instance.runHooks('afterRemoveCellMeta', row, column, key, cachedValue);\n    }\n    cachedValue = null;\n  };\n\n  /**\n   * Removes or adds one or more rows of the cell meta objects to the cell meta collections.\n   *\n   * @since 0.30.0\n   * @memberof Core#\n   * @function spliceCellsMeta\n   * @param {number} visualIndex A visual index that specifies at what position to add/remove items.\n   * @param {number} [deleteAmount=0] The number of items to be removed. If set to 0, no cell meta objects will be removed.\n   * @param {...object} [cellMetaRows] The new cell meta row objects to be added to the cell meta collection.\n   */\n  this.spliceCellsMeta = function (visualIndex) {\n    let deleteAmount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    for (var _len16 = arguments.length, cellMetaRows = new Array(_len16 > 2 ? _len16 - 2 : 0), _key16 = 2; _key16 < _len16; _key16++) {\n      cellMetaRows[_key16 - 2] = arguments[_key16];\n    }\n    if (cellMetaRows.length > 0 && !Array.isArray(cellMetaRows[0])) {\n      throw new Error('The 3rd argument (cellMetaRows) has to be passed as an array of cell meta objects array.');\n    }\n    if (deleteAmount > 0) {\n      metaManager.removeRow(this.toPhysicalRow(visualIndex), deleteAmount);\n    }\n    if (cellMetaRows.length > 0) {\n      arrayEach(cellMetaRows.reverse(), cellMetaRow => {\n        metaManager.createRow(this.toPhysicalRow(visualIndex));\n        arrayEach(cellMetaRow, (cellMeta, columnIndex) => this.setCellMetaObject(visualIndex, columnIndex, cellMeta));\n      });\n    }\n    instance.render();\n  };\n\n  /**\n   * Set cell meta data object defined by `prop` to the corresponding params `row` and `column`.\n   *\n   * @memberof Core#\n   * @function setCellMetaObject\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {object} prop Meta object.\n   */\n  this.setCellMetaObject = function (row, column, prop) {\n    if (typeof prop === 'object') {\n      objectEach(prop, (value, key) => {\n        this.setCellMeta(row, column, key, value);\n      });\n    }\n  };\n\n  /**\n   * Sets a property defined by the `key` property to the meta object of a cell corresponding to params `row` and `column`.\n   *\n   * @memberof Core#\n   * @function setCellMeta\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {string} key Property name.\n   * @param {string} value Property value.\n   * @fires Hooks#beforeSetCellMeta\n   * @fires Hooks#afterSetCellMeta\n   */\n  this.setCellMeta = function (row, column, key, value) {\n    const allowSetCellMeta = instance.runHooks('beforeSetCellMeta', row, column, key, value);\n    if (allowSetCellMeta === false) {\n      return;\n    }\n    let physicalRow = row;\n    let physicalColumn = column;\n    if (row < this.countRows()) {\n      physicalRow = this.toPhysicalRow(row);\n    }\n    if (column < this.countCols()) {\n      physicalColumn = this.toPhysicalColumn(column);\n    }\n    metaManager.setCellMeta(physicalRow, physicalColumn, key, value);\n    instance.runHooks('afterSetCellMeta', row, column, key, value);\n  };\n\n  /**\n   * Get all the cells meta settings at least once generated in the table (in order of cell initialization).\n   *\n   * @memberof Core#\n   * @function getCellsMeta\n   * @returns {Array} Returns an array of ColumnSettings object instances.\n   */\n  this.getCellsMeta = function () {\n    return metaManager.getCellsMeta();\n  };\n\n  /**\n   * Returns the cell properties object for the given `row` and `column` coordinates.\n   *\n   * @memberof Core#\n   * @function getCellMeta\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @returns {object} The cell properties object.\n   * @fires Hooks#beforeGetCellMeta\n   * @fires Hooks#afterGetCellMeta\n   */\n  this.getCellMeta = function (row, column) {\n    let physicalRow = this.toPhysicalRow(row);\n    let physicalColumn = this.toPhysicalColumn(column);\n    if (physicalRow === null) {\n      physicalRow = row;\n    }\n    if (physicalColumn === null) {\n      physicalColumn = column;\n    }\n    return metaManager.getCellMeta(physicalRow, physicalColumn, {\n      visualRow: row,\n      visualColumn: column\n    });\n  };\n\n  /**\n   * Returns an array of cell meta objects for specified physical row index.\n   *\n   * @memberof Core#\n   * @function getCellMetaAtRow\n   * @param {number} row Physical row index.\n   * @returns {Array}\n   */\n  this.getCellMetaAtRow = function (row) {\n    return metaManager.getCellsMetaAtRow(row);\n  };\n\n  /**\n   * Checks if your [data format](@/guides/getting-started/binding-to-data.md#compatible-data-types)\n   * and [configuration options](@/guides/getting-started/configuration-options.md)\n   * allow for changing the number of columns.\n   *\n   * Returns `false` when your data is an array of objects,\n   * or when you use the [`columns`](@/api/options.md#columns) option.\n   * Otherwise, returns `true`.\n   *\n   * @memberof Core#\n   * @function isColumnModificationAllowed\n   * @returns {boolean}\n   */\n  this.isColumnModificationAllowed = function () {\n    return !(instance.dataType === 'object' || tableMeta.columns);\n  };\n\n  /**\n   * Returns the cell renderer function by given `row` and `column` arguments.\n   *\n   * @memberof Core#\n   * @function getCellRenderer\n   * @param {number|object} rowOrMeta Visual row index or cell meta object (see {@link Core#getCellMeta}).\n   * @param {number} column Visual column index.\n   * @returns {Function} Returns the renderer function.\n   * @example\n   * ```js\n   * // Get cell renderer using `row` and `column` coordinates.\n   * hot.getCellRenderer(1, 1);\n   * // Get cell renderer using cell meta object.\n   * hot.getCellRenderer(hot.getCellMeta(1, 1));\n   * ```\n   */\n  this.getCellRenderer = function (rowOrMeta, column) {\n    const cellRenderer = typeof rowOrMeta === 'number' ? instance.getCellMeta(rowOrMeta, column).renderer : rowOrMeta.renderer;\n    if (typeof cellRenderer === 'string') {\n      return getRenderer(cellRenderer);\n    }\n    return isUndefined(cellRenderer) ? getRenderer('text') : cellRenderer;\n  };\n\n  /**\n   * Returns the cell editor class by the provided `row` and `column` arguments.\n   *\n   * @memberof Core#\n   * @function getCellEditor\n   * @param {number} rowOrMeta Visual row index or cell meta object (see {@link Core#getCellMeta}).\n   * @param {number} column Visual column index.\n   * @returns {Function|boolean} Returns the editor class or `false` is cell editor is disabled.\n   * @example\n   * ```js\n   * // Get cell editor class using `row` and `column` coordinates.\n   * hot.getCellEditor(1, 1);\n   * // Get cell editor class using cell meta object.\n   * hot.getCellEditor(hot.getCellMeta(1, 1));\n   * ```\n   */\n  this.getCellEditor = function (rowOrMeta, column) {\n    const cellEditor = typeof rowOrMeta === 'number' ? instance.getCellMeta(rowOrMeta, column).editor : rowOrMeta.editor;\n    if (typeof cellEditor === 'string') {\n      return getEditor(cellEditor);\n    }\n    return isUndefined(cellEditor) ? getEditor('text') : cellEditor;\n  };\n\n  /**\n   * Returns the cell validator by `row` and `column`.\n   *\n   * @memberof Core#\n   * @function getCellValidator\n   * @param {number|object} rowOrMeta Visual row index or cell meta object (see {@link Core#getCellMeta}).\n   * @param {number} column Visual column index.\n   * @returns {Function|RegExp|undefined} The validator function.\n   * @example\n   * ```js\n   * // Get cell validator using `row` and `column` coordinates.\n   * hot.getCellValidator(1, 1);\n   * // Get cell validator using cell meta object.\n   * hot.getCellValidator(hot.getCellMeta(1, 1));\n   * ```\n   */\n  this.getCellValidator = function (rowOrMeta, column) {\n    const cellValidator = typeof rowOrMeta === 'number' ? instance.getCellMeta(rowOrMeta, column).validator : rowOrMeta.validator;\n    if (typeof cellValidator === 'string') {\n      return getValidator(cellValidator);\n    }\n    return cellValidator;\n  };\n\n  /**\n   * Validates every cell in the data set,\n   * using a [validator function](@/guides/cell-functions/cell-validator.md) configured for each cell.\n   *\n   * Doesn't validate cells that are currently [trimmed](@/guides/rows/row-trimming.md),\n   * [hidden](@/guides/rows/row-hiding.md), or [filtered](@/guides/columns/column-filter.md),\n   * as such cells are not included in the data set until you bring them back again.\n   *\n   * After the validation, the `callback` function is fired, with the `valid` argument set to:\n   * - `true` for valid cells\n   * - `false` for invalid cells\n   *\n   * @memberof Core#\n   * @function validateCells\n   * @param {Function} [callback] The callback function.\n   * @example\n   * ```js\n   * hot.validateCells((valid) => {\n   *   if (valid) {\n   *     // ... code for validated cells\n   *   }\n   * })\n   * ```\n   */\n  this.validateCells = function (callback) {\n    this._validateCells(callback);\n  };\n\n  /**\n   * Validates rows using their validator functions and calls callback when finished.\n   *\n   * If one of the cells is invalid, the callback will be fired with `'valid'` arguments as `false` - otherwise it\n   *  would equal `true`.\n   *\n   * @memberof Core#\n   * @function validateRows\n   * @param {Array} [rows] Array of validation target visual row indexes.\n   * @param {Function} [callback] The callback function.\n   * @example\n   * ```js\n   * hot.validateRows([3, 4, 5], (valid) => {\n   *   if (valid) {\n   *     // ... code for validated rows\n   *   }\n   * })\n   * ```\n   */\n  this.validateRows = function (rows, callback) {\n    if (!Array.isArray(rows)) {\n      throw new Error('validateRows parameter `rows` must be an array');\n    }\n    this._validateCells(callback, rows);\n  };\n\n  /**\n   * Validates columns using their validator functions and calls callback when finished.\n   *\n   * If one of the cells is invalid, the callback will be fired with `'valid'` arguments as `false` - otherwise it\n   *  would equal `true`.\n   *\n   * @memberof Core#\n   * @function validateColumns\n   * @param {Array} [columns] Array of validation target visual columns indexes.\n   * @param {Function} [callback] The callback function.\n   * @example\n   * ```js\n   * hot.validateColumns([3, 4, 5], (valid) => {\n   *   if (valid) {\n   *     // ... code for validated columns\n   *   }\n   * })\n   * ```\n   */\n  this.validateColumns = function (columns, callback) {\n    if (!Array.isArray(columns)) {\n      throw new Error('validateColumns parameter `columns` must be an array');\n    }\n    this._validateCells(callback, undefined, columns);\n  };\n\n  /**\n   * Validates all cells using their validator functions and calls callback when finished.\n   *\n   * If one of the cells is invalid, the callback will be fired with `'valid'` arguments as `false` - otherwise it would equal `true`.\n   *\n   * Private use intended.\n   *\n   * @private\n   * @memberof Core#\n   * @function _validateCells\n   * @param {Function} [callback] The callback function.\n   * @param {Array} [rows] An array of validation target visual row indexes.\n   * @param {Array} [columns] An array of validation target visual column indexes.\n   */\n  this._validateCells = function (callback, rows, columns) {\n    const waitingForValidator = new ValidatorsQueue();\n    if (callback) {\n      waitingForValidator.onQueueEmpty = callback;\n    }\n    let i = instance.countRows() - 1;\n    while (i >= 0) {\n      if (rows !== undefined && rows.indexOf(i) === -1) {\n        i -= 1;\n        continue;\n      }\n      let j = instance.countCols() - 1;\n      while (j >= 0) {\n        if (columns !== undefined && columns.indexOf(j) === -1) {\n          j -= 1;\n          continue;\n        }\n        waitingForValidator.addValidatorToQueue();\n        instance.validateCell(instance.getDataAtCell(i, j), instance.getCellMeta(i, j), result => {\n          if (typeof result !== 'boolean') {\n            throw new Error('Validation error: result is not boolean');\n          }\n          if (result === false) {\n            waitingForValidator.valid = false;\n          }\n          waitingForValidator.removeValidatorFormQueue();\n        }, 'validateCells');\n        j -= 1;\n      }\n      i -= 1;\n    }\n    waitingForValidator.checkIfQueueIsEmpty();\n  };\n\n  /**\n   * Returns an array of row headers' values (if they are enabled). If param `row` was given, it returns the header of the given row as a string.\n   *\n   * @memberof Core#\n   * @function getRowHeader\n   * @param {number} [row] Visual row index.\n   * @fires Hooks#modifyRowHeader\n   * @returns {Array|string|number} Array of header values / single header value.\n   */\n  this.getRowHeader = function (row) {\n    let rowHeader = tableMeta.rowHeaders;\n    let physicalRow = row;\n    if (physicalRow !== undefined) {\n      physicalRow = instance.runHooks('modifyRowHeader', physicalRow);\n    }\n    if (physicalRow === undefined) {\n      rowHeader = [];\n      rangeEach(instance.countRows() - 1, i => {\n        rowHeader.push(instance.getRowHeader(i));\n      });\n    } else if (Array.isArray(rowHeader) && rowHeader[physicalRow] !== undefined) {\n      rowHeader = rowHeader[physicalRow];\n    } else if (isFunction(rowHeader)) {\n      rowHeader = rowHeader(physicalRow);\n    } else if (rowHeader && typeof rowHeader !== 'string' && typeof rowHeader !== 'number') {\n      rowHeader = physicalRow + 1;\n    }\n    return rowHeader;\n  };\n\n  /**\n   * Returns information about if this table is configured to display row headers.\n   *\n   * @memberof Core#\n   * @function hasRowHeaders\n   * @returns {boolean} `true` if the instance has the row headers enabled, `false` otherwise.\n   */\n  this.hasRowHeaders = function () {\n    return !!tableMeta.rowHeaders;\n  };\n\n  /**\n   * Returns information about if this table is configured to display column headers.\n   *\n   * @memberof Core#\n   * @function hasColHeaders\n   * @returns {boolean} `true` if the instance has the column headers enabled, `false` otherwise.\n   */\n  this.hasColHeaders = function () {\n    if (tableMeta.colHeaders !== undefined && tableMeta.colHeaders !== null) {\n      // Polymer has empty value = null\n      return !!tableMeta.colHeaders;\n    }\n    for (let i = 0, ilen = instance.countCols(); i < ilen; i++) {\n      if (instance.getColHeader(i)) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Gets the values of column headers (if column headers are [enabled](@/api/options.md#colheaders)).\n   *\n   * To get an array with the values of all\n   * [bottom-most](@/guides/cell-features/clipboard.md#copy-with-headers) column headers,\n   * call `getColHeader()` with no arguments.\n   *\n   * To get the value of the bottom-most header of a specific column, use the `column` parameter.\n   *\n   * To get the value of a [specific-level](@/guides/columns/column-groups.md) header\n   * of a specific column, use the `column` and `headerLevel` parameters.\n   *\n   * Read more:\n   * - [Guides: Column groups](@/guides/columns/column-groups.md)\n   * - [Options: `colHeaders`](@/api/options.md#colheaders)\n   * - [Guides: Copy with headers](@/guides/cell-features/clipboard.md#copy-with-headers)\n   *\n   * ```js\n   * // get the contents of all bottom-most column headers\n   * hot.getColHeader();\n   *\n   * // get the contents of the bottom-most header of a specific column\n   * hot.getColHeader(5);\n   *\n   * // get the contents of a specific column header at a specific level\n   * hot.getColHeader(5, -2);\n   * ```\n   *\n   * @memberof Core#\n   * @function getColHeader\n   * @param {number} [column] A visual column index.\n   * @param {number} [headerLevel=-1] (Since 12.3.0) Header level index. Accepts positive (0 to n)\n   *                                  and negative (-1 to -n) values. For positive values, 0 points to the\n   *                                  topmost header. For negative values, -1 points to the bottom-most\n   *                                  header (the header closest to the cells).\n   * @fires Hooks#modifyColHeader\n   * @fires Hooks#modifyColumnHeaderValue\n   * @returns {Array|string|number} Column header values.\n   */\n  this.getColHeader = function (column) {\n    let headerLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    const columnIndex = instance.runHooks('modifyColHeader', column);\n    if (columnIndex === undefined) {\n      const out = [];\n      const ilen = instance.countCols();\n      for (let i = 0; i < ilen; i++) {\n        out.push(instance.getColHeader(i));\n      }\n      return out;\n    }\n    let result = tableMeta.colHeaders;\n    const translateVisualIndexToColumns = function (visualColumnIndex) {\n      const arr = [];\n      const columnsLen = instance.countCols();\n      let index = 0;\n      for (; index < columnsLen; index++) {\n        if (isFunction(tableMeta.columns) && tableMeta.columns(index)) {\n          arr.push(index);\n        }\n      }\n      return arr[visualColumnIndex];\n    };\n    const physicalColumn = instance.toPhysicalColumn(columnIndex);\n    const prop = translateVisualIndexToColumns(physicalColumn);\n    if (tableMeta.colHeaders === false) {\n      result = null;\n    } else if (tableMeta.columns && isFunction(tableMeta.columns) && tableMeta.columns(prop) && tableMeta.columns(prop).title) {\n      result = tableMeta.columns(prop).title;\n    } else if (tableMeta.columns && tableMeta.columns[physicalColumn] && tableMeta.columns[physicalColumn].title) {\n      result = tableMeta.columns[physicalColumn].title;\n    } else if (Array.isArray(tableMeta.colHeaders) && tableMeta.colHeaders[physicalColumn] !== undefined) {\n      result = tableMeta.colHeaders[physicalColumn];\n    } else if (isFunction(tableMeta.colHeaders)) {\n      result = tableMeta.colHeaders(physicalColumn);\n    } else if (tableMeta.colHeaders && typeof tableMeta.colHeaders !== 'string' && typeof tableMeta.colHeaders !== 'number') {\n      result = spreadsheetColumnLabel(columnIndex); // see #1458\n    }\n\n    result = instance.runHooks('modifyColumnHeaderValue', result, column, headerLevel);\n    return result;\n  };\n\n  /**\n   * Return column width from settings (no guessing). Private use intended.\n   *\n   * @private\n   * @memberof Core#\n   * @function _getColWidthFromSettings\n   * @param {number} col Visual col index.\n   * @returns {number}\n   */\n  this._getColWidthFromSettings = function (col) {\n    let width;\n\n    // We currently don't support cell meta objects for headers (negative values)\n    if (col >= 0) {\n      const cellProperties = instance.getCellMeta(0, col);\n      width = cellProperties.width;\n    }\n    if (width === undefined || width === tableMeta.width) {\n      width = tableMeta.colWidths;\n    }\n    if (width !== undefined && width !== null) {\n      switch (typeof width) {\n        case 'object':\n          // array\n          width = width[col];\n          break;\n        case 'function':\n          width = width(col);\n          break;\n        default:\n          break;\n      }\n      if (typeof width === 'string') {\n        width = parseInt(width, 10);\n      }\n    }\n    return width;\n  };\n\n  /**\n   * Returns the width of the requested column.\n   *\n   * @memberof Core#\n   * @function getColWidth\n   * @param {number} column Visual column index.\n   * @returns {number} Column width.\n   * @fires Hooks#modifyColWidth\n   */\n  this.getColWidth = function (column) {\n    let width = instance._getColWidthFromSettings(column);\n    width = instance.runHooks('modifyColWidth', width, column);\n    if (width === undefined) {\n      width = ViewportColumnsCalculator.DEFAULT_WIDTH;\n    }\n    return width;\n  };\n\n  /**\n   * Return row height from settings (no guessing). Private use intended.\n   *\n   * @private\n   * @memberof Core#\n   * @function _getRowHeightFromSettings\n   * @param {number} row Visual row index.\n   * @returns {number}\n   */\n  this._getRowHeightFromSettings = function (row) {\n    // let cellProperties = instance.getCellMeta(row, 0);\n    // let height = cellProperties.height;\n    //\n    // if (height === undefined || height === tableMeta.height) {\n    //  height = cellProperties.rowHeights;\n    // }\n    let height = tableMeta.rowHeights;\n    if (height !== undefined && height !== null) {\n      switch (typeof height) {\n        case 'object':\n          // array\n          height = height[row];\n          break;\n        case 'function':\n          height = height(row);\n          break;\n        default:\n          break;\n      }\n      if (typeof height === 'string') {\n        height = parseInt(height, 10);\n      }\n    }\n    return height;\n  };\n\n  /**\n   * Returns a row's height, as recognized by Handsontable.\n   *\n   * Depending on your configuration, the method returns (in order of priority):\n   *   1. The row height set by the [`ManualRowResize`](@/api/manualRowResize.md) plugin\n   *     (if the plugin is enabled).\n   *   2. The row height set by the [`rowHeights`](@/api/options.md#rowheights) configuration option\n   *     (if the option is set).\n   *   3. The row height as measured in the DOM by the [`AutoRowSize`](@/api/autoRowSize.md) plugin\n   *     (if the plugin is enabled).\n   *   4. `undefined`, if neither [`ManualRowResize`](@/api/manualRowResize.md),\n   *     nor [`rowHeights`](@/api/options.md#rowheights),\n   *     nor [`AutoRowSize`](@/api/autoRowSize.md) is used.\n   *\n   * The height returned includes 1 px of the row's bottom border.\n   *\n   * Mind that this method is different from the\n   * [`getRowHeight()`](@/api/autoRowSize.md#getrowheight) method\n   * of the [`AutoRowSize`](@/api/autoRowSize.md) plugin.\n   *\n   * @memberof Core#\n   * @function getRowHeight\n   * @param {number} row A visual row index.\n   * @returns {number|undefined} The height of the specified row, in pixels.\n   * @fires Hooks#modifyRowHeight\n   */\n  this.getRowHeight = function (row) {\n    let height = instance._getRowHeightFromSettings(row);\n    height = instance.runHooks('modifyRowHeight', height, row);\n    return height;\n  };\n\n  /**\n   * Returns the total number of rows in the data source.\n   *\n   * @memberof Core#\n   * @function countSourceRows\n   * @returns {number} Total number of rows.\n   */\n  this.countSourceRows = function () {\n    return dataSource.countRows();\n  };\n\n  /**\n   * Returns the total number of columns in the data source.\n   *\n   * @memberof Core#\n   * @function countSourceCols\n   * @returns {number} Total number of columns.\n   */\n  this.countSourceCols = function () {\n    return dataSource.countFirstRowKeys();\n  };\n\n  /**\n   * Returns the total number of visual rows in the table.\n   *\n   * @memberof Core#\n   * @function countRows\n   * @returns {number} Total number of rows.\n   */\n  this.countRows = function () {\n    return datamap.getLength();\n  };\n\n  /**\n   * Returns the total number of visible columns in the table.\n   *\n   * @memberof Core#\n   * @function countCols\n   * @returns {number} Total number of columns.\n   */\n  this.countCols = function () {\n    const maxCols = tableMeta.maxCols;\n    const dataLen = this.columnIndexMapper.getNotTrimmedIndexesLength();\n    return Math.min(maxCols, dataLen);\n  };\n\n  /**\n   * Returns the number of rendered rows including rows that are partially or fully rendered\n   * outside the table viewport.\n   *\n   * @memberof Core#\n   * @function countRenderedRows\n   * @returns {number} Returns -1 if table is not visible.\n   */\n  this.countRenderedRows = function () {\n    return instance.view._wt.drawn ? instance.view._wt.wtTable.getRenderedRowsCount() : -1;\n  };\n\n  /**\n   * Returns the number of rendered rows that are only visible in the table viewport.\n   * The rows that are partially visible are not counted.\n   *\n   * @memberof Core#\n   * @function countVisibleRows\n   * @returns {number} Number of visible rows or -1.\n   */\n  this.countVisibleRows = function () {\n    return instance.view._wt.drawn ? instance.view._wt.wtTable.getVisibleRowsCount() : -1;\n  };\n\n  /**\n   * Returns the number of rendered rows including columns that are partially or fully rendered\n   * outside the table viewport.\n   *\n   * @memberof Core#\n   * @function countRenderedCols\n   * @returns {number} Returns -1 if table is not visible.\n   */\n  this.countRenderedCols = function () {\n    return instance.view._wt.drawn ? instance.view._wt.wtTable.getRenderedColumnsCount() : -1;\n  };\n\n  /**\n   * Returns the number of rendered columns that are only visible in the table viewport.\n   * The columns that are partially visible are not counted.\n   *\n   * @memberof Core#\n   * @function countVisibleCols\n   * @returns {number} Number of visible columns or -1.\n   */\n  this.countVisibleCols = function () {\n    return instance.view._wt.drawn ? instance.view._wt.wtTable.getVisibleColumnsCount() : -1;\n  };\n\n  /**\n   * Returns the number of rendered row headers.\n   *\n   * @since 14.0.0\n   * @memberof Core#\n   * @function countRowHeaders\n   * @returns {number} Number of row headers.\n   */\n  this.countRowHeaders = function () {\n    return this.view.getRowHeadersCount();\n  };\n\n  /**\n   * Returns the number of rendered column headers.\n   *\n   * @since 14.0.0\n   * @memberof Core#\n   * @function countColHeaders\n   * @returns {number} Number of column headers.\n   */\n  this.countColHeaders = function () {\n    return this.view.getColumnHeadersCount();\n  };\n\n  /**\n   * Returns the number of empty rows. If the optional ending parameter is `true`, returns the\n   * number of empty rows at the bottom of the table.\n   *\n   * @memberof Core#\n   * @function countEmptyRows\n   * @param {boolean} [ending=false] If `true`, will only count empty rows at the end of the data source.\n   * @returns {number} Count empty rows.\n   */\n  this.countEmptyRows = function () {\n    let ending = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let emptyRows = 0;\n    rangeEachReverse(instance.countRows() - 1, visualIndex => {\n      if (instance.isEmptyRow(visualIndex)) {\n        emptyRows += 1;\n      } else if (ending === true) {\n        return false;\n      }\n    });\n    return emptyRows;\n  };\n\n  /**\n   * Returns the number of empty columns. If the optional ending parameter is `true`, returns the number of empty\n   * columns at right hand edge of the table.\n   *\n   * @memberof Core#\n   * @function countEmptyCols\n   * @param {boolean} [ending=false] If `true`, will only count empty columns at the end of the data source row.\n   * @returns {number} Count empty cols.\n   */\n  this.countEmptyCols = function () {\n    let ending = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let emptyColumns = 0;\n    rangeEachReverse(instance.countCols() - 1, visualIndex => {\n      if (instance.isEmptyCol(visualIndex)) {\n        emptyColumns += 1;\n      } else if (ending === true) {\n        return false;\n      }\n    });\n    return emptyColumns;\n  };\n\n  /**\n   * Check if all cells in the row declared by the `row` argument are empty.\n   *\n   * @memberof Core#\n   * @function isEmptyRow\n   * @param {number} row Visual row index.\n   * @returns {boolean} `true` if the row at the given `row` is empty, `false` otherwise.\n   */\n  this.isEmptyRow = function (row) {\n    return tableMeta.isEmptyRow.call(instance, row);\n  };\n\n  /**\n   * Check if all cells in the the column declared by the `column` argument are empty.\n   *\n   * @memberof Core#\n   * @function isEmptyCol\n   * @param {number} column Column index.\n   * @returns {boolean} `true` if the column at the given `col` is empty, `false` otherwise.\n   */\n  this.isEmptyCol = function (column) {\n    return tableMeta.isEmptyCol.call(instance, column);\n  };\n\n  /**\n   * Select a single cell, or a single range of adjacent cells.\n   *\n   * To select a cell, pass its visual row and column indexes, for example: `selectCell(2, 4)`.\n   *\n   * To select a range, pass the visual indexes of the first and last cell in the range, for example: `selectCell(2, 4, 3, 5)`.\n   *\n   * If your columns have properties, you can pass those properties' values instead of column indexes, for example: `selectCell(2, 'first_name')`.\n   *\n   * By default, `selectCell()` also:\n   *  - Scrolls the viewport to the newly-selected cells.\n   *  - Switches the keyboard focus to Handsontable (by calling Handsontable's [`listen()`](#listen) method).\n   *\n   * @example\n   * ```js\n   * // select a single cell\n   * hot.selectCell(2, 4);\n   *\n   * // select a range of cells\n   * hot.selectCell(2, 4, 3, 5);\n   *\n   * // select a single cell, using a column property\n   * hot.selectCell(2, 'first_name');\n   *\n   * // select a range of cells, using column properties\n   * hot.selectCell(2, 'first_name', 3, 'last_name');\n   *\n   * // select a range of cells, without scrolling to them\n   * hot.selectCell(2, 4, 3, 5, false);\n   *\n   * // select a range of cells, without switching the keyboard focus to Handsontable\n   * hot.selectCell(2, 4, 3, 5, null, false);\n   * ```\n   *\n   * @memberof Core#\n   * @function selectCell\n   * @param {number} row A visual row index.\n   * @param {number|string} column A visual column index (`number`), or a column property's value (`string`).\n   * @param {number} [endRow] If selecting a range: the visual row index of the last cell in the range.\n   * @param {number|string} [endColumn] If selecting a range: the visual column index (or a column property's value) of the last cell in the range.\n   * @param {boolean} [scrollToCell=true] `true`: scroll the viewport to the newly-selected cells. `false`: keep the previous viewport.\n   * @param {boolean} [changeListener=true] `true`: switch the keyboard focus to Handsontable. `false`: keep the previous keyboard focus.\n   * @returns {boolean} `true`: the selection was successful, `false`: the selection failed.\n   */\n  this.selectCell = function (row, column, endRow, endColumn) {\n    let scrollToCell = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    let changeListener = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    if (isUndefined(row) || isUndefined(column)) {\n      return false;\n    }\n    return this.selectCells([[row, column, endRow, endColumn]], scrollToCell, changeListener);\n  };\n\n  /**\n   * Select multiple cells or ranges of cells, adjacent or non-adjacent.\n   *\n   * You can pass one of the below:\n   * - An array of arrays (which matches the output of Handsontable's [`getSelected()`](#getselected) method).\n   * - An array of [`CellRange`](@/api/cellRange.md) objects (which matches the output of Handsontable's [`getSelectedRange()`](#getselectedrange) method).\n   *\n   * To select multiple cells, pass the visual row and column indexes of each cell, for example: `hot.selectCells([[1, 1], [5, 5]])`.\n   *\n   * To select multiple ranges, pass the visual indexes of the first and last cell in each range, for example: `hot.selectCells([[1, 1, 2, 2], [6, 2, 0, 2]])`.\n   *\n   * If your columns have properties, you can pass those properties' values instead of column indexes, for example: `hot.selectCells([[1, 'first_name'], [5, 'last_name']])`.\n   *\n   * By default, `selectCell()` also:\n   *  - Scrolls the viewport to the newly-selected cells.\n   *  - Switches the keyboard focus to Handsontable (by calling Handsontable's [`listen()`](#listen) method).\n   *\n   * @example\n   * ```js\n   * // select non-adjacent cells\n   * hot.selectCells([[1, 1], [5, 5], [10, 10]]);\n   *\n   * // select non-adjacent ranges of cells\n   * hot.selectCells([[1, 1, 2, 2], [10, 10, 20, 20]]);\n   *\n   * // select cells and ranges of cells\n   * hot.selectCells([[1, 1, 2, 2], [3, 3], [6, 2, 0, 2]]);\n   *\n   * // select cells, using column properties\n   * hot.selectCells([[1, 'id', 2, 'first_name'], [3, 'full_name'], [6, 'last_name', 0, 'first_name']]);\n   *\n   * // select multiple ranges, using an array of `CellRange` objects\n   * const selected = hot.getSelectedRange();\n   *\n   * selected[0].from.row = 0;\n   * selected[0].from.col = 0;\n   * selected[0].to.row = 5;\n   * selected[0].to.col = 5;\n   *\n   * selected[1].from.row = 10;\n   * selected[1].from.col = 10;\n   * selected[1].to.row = 20;\n   * selected[1].to.col = 20;\n   *\n   * hot.selectCells(selected);\n   * ```\n   *\n   * @memberof Core#\n   * @since 0.38.0\n   * @function selectCells\n   * @param {Array[]|CellRange[]} coords Visual coordinates,\n   * passed either as an array of arrays (`[[rowStart, columnStart, rowEnd, columnEnd], ...]`)\n   * or as an array of [`CellRange`](@/api/cellRange.md) objects.\n   * @param {boolean} [scrollToCell=true] `true`: scroll the viewport to the newly-selected cells. `false`: keep the previous viewport.\n   * @param {boolean} [changeListener=true] `true`: switch the keyboard focus to Handsontable. `false`: keep the previous keyboard focus.\n   * @returns {boolean} `true`: the selection was successful, `false`: the selection failed.\n   */\n  this.selectCells = function () {\n    let coords = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [[]];\n    let scrollToCell = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let changeListener = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (scrollToCell === false) {\n      preventScrollingToCell = true;\n    }\n    const wasSelected = selection.selectCells(coords);\n    if (wasSelected && changeListener) {\n      instance.listen();\n    }\n    preventScrollingToCell = false;\n    return wasSelected;\n  };\n\n  /**\n   * Select column specified by `startColumn` visual index, column property or a range of columns finishing at `endColumn`.\n   *\n   * @example\n   * ```js\n   * // Select column using visual index.\n   * hot.selectColumns(1);\n   * // Select column using column property.\n   * hot.selectColumns('id');\n   * // Select range of columns using visual indexes.\n   * hot.selectColumns(1, 4);\n   * // Select range of columns using visual indexes and mark the first header as highlighted.\n   * hot.selectColumns(1, 2, -1);\n   * // Select range of columns using visual indexes and mark the second cell as highlighted.\n   * hot.selectColumns(2, 1, 1);\n   * // Select range of columns using column properties.\n   * hot.selectColumns('id', 'last_name');\n   * ```\n   *\n   * @memberof Core#\n   * @since 0.38.0\n   * @function selectColumns\n   * @param {number} startColumn The visual column index from which the selection starts.\n   * @param {number} [endColumn=startColumn] The visual column index to which the selection finishes. If `endColumn`\n   *                                         is not defined the column defined by `startColumn` will be selected.\n   * @param {number} [focusPosition=0] The argument allows changing the cell/header focus position.\n   *                                   The value can take visual row index from -N to N, where negative values\n   *                                   point to the headers and positive values point to the cell range.\n   * @returns {boolean} `true` if selection was successful, `false` otherwise.\n   */\n  this.selectColumns = function (startColumn) {\n    let endColumn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : startColumn;\n    let focusPosition = arguments.length > 2 ? arguments[2] : undefined;\n    return selection.selectColumns(startColumn, endColumn, focusPosition);\n  };\n\n  /**\n   * Select row specified by `startRow` visual index or a range of rows finishing at `endRow`.\n   *\n   * @example\n   * ```js\n   * // Select row using visual index.\n   * hot.selectRows(1);\n   * // select a range of rows, using visual indexes.\n   * hot.selectRows(1, 4);\n   * // select a range of rows, using visual indexes, and mark the header as highlighted.\n   * hot.selectRows(1, 2, -1);\n   * // Select range of rows using visual indexes and mark the second cell as highlighted.\n   * hot.selectRows(2, 1, 1);\n   * ```\n   *\n   * @memberof Core#\n   * @since 0.38.0\n   * @function selectRows\n   * @param {number} startRow The visual row index from which the selection starts.\n   * @param {number} [endRow=startRow] The visual row index to which the selection finishes. If `endRow`\n   *                                   is not defined the row defined by `startRow` will be selected.\n   * @param {number} [focusPosition=0] The argument allows changing the cell/header focus position.\n   *                                   The value can take visual column index from -N to N, where negative values\n   *                                   point to the headers and positive values point to the cell range.\n   * @returns {boolean} `true` if selection was successful, `false` otherwise.\n   */\n  this.selectRows = function (startRow) {\n    let endRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : startRow;\n    let focusPosition = arguments.length > 2 ? arguments[2] : undefined;\n    return selection.selectRows(startRow, endRow, focusPosition);\n  };\n\n  /**\n   * Deselects the current cell selection on the table.\n   *\n   * @memberof Core#\n   * @function deselectCell\n   */\n  this.deselectCell = function () {\n    selection.deselect();\n  };\n\n  /**\n   * Select all cells in the table excluding headers and corner elements.\n   *\n   * The previous selection is overwritten.\n   *\n   * ```js\n   * // Select all cells in the table along with row headers, including all headers and the corner cell.\n   * // Doesn't select column headers and corner elements.\n   * hot.selectAll();\n   *\n   * // Select all cells in the table, including row headers but excluding the corner cell and column headers.\n   * hot.selectAll(true, false);\n   *\n   * // Select all cells in the table, including all headers and the corner cell, but move the focus.\n   * // highlight to position 2, 1\n   * hot.selectAll(-2, -1, {\n   *    focusPosition: { row: 2, col: 1 }\n   * });\n   *\n   * // Select all cells in the table, without headers and corner elements.\n   * hot.selectAll(false);\n   * ```\n   *\n   * @since 0.38.2\n   * @memberof Core#\n   * @function selectAll\n   * @param {boolean} [includeRowHeaders=false] `true` If the selection should include the row headers,\n   * `false` otherwise.\n   * @param {boolean} [includeColumnHeaders=false] `true` If the selection should include the column\n   * headers, `false` otherwise.\n   *\n   * @param {object} [options] Additional object with options. Since 14.0.0\n   * @param {{row: number, col: number} | boolean} [options.focusPosition] The argument allows changing the cell/header\n   * focus position. The value takes an object with a `row` and `col` properties from -N to N, where\n   * negative values point to the headers and positive values point to the cell range. If `false`, the focus\n   * position won't be changed. Example:\n   * ```js\n   * hot.selectAll(0, 0, {\n   * focusPosition: { row: 0, col: 1 },\n   * disableHeadersHighlight: true\n   * })\n   * ```\n   *\n   * @param {boolean} [options.disableHeadersHighlight] If `true`, disables highlighting the headers even when\n   * the logical coordinates points on them.\n   */\n  this.selectAll = function () {\n    let includeRowHeaders = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let includeColumnHeaders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : includeRowHeaders;\n    let options = arguments.length > 2 ? arguments[2] : undefined;\n    preventScrollingToCell = true;\n    selection.selectAll(includeRowHeaders, includeColumnHeaders, options);\n    preventScrollingToCell = false;\n  };\n  const getIndexToScroll = (indexMapper, visualIndex) => {\n    // Looking for a visual index on the right and then (when not found) on the left.\n    return indexMapper.getNearestNotHiddenIndex(visualIndex, 1, true);\n  };\n\n  /**\n   * Scroll viewport to coordinates specified by the `row` and/or `col` object properties.\n   *\n   * ```js\n   * // scroll the viewport to the visual row index (leave the horizontal scroll untouched)\n   * hot.scrollViewportTo({ row: 50 });\n   *\n   * // scroll the viewport to the passed coordinates so that the cell at 50, 50 will be snapped to\n   * // the bottom-end table's edge.\n   * hot.scrollViewportTo({\n   *   row: 50,\n   *   col: 50,\n   *   verticalSnap: 'bottom',\n   *   horizontalSnap: 'end',\n   * });\n   * ```\n   *\n   * @memberof Core#\n   * @function scrollViewportTo\n   * @param {object} options A dictionary containing the following parameters:\n   * @param {number} [options.row] Specifies the number of visual rows along the Y axis to scroll the viewport.\n   * @param {number} [options.col] Specifies the number of visual columns along the X axis to scroll the viewport.\n   * @param {'top' | 'bottom'} [options.verticalSnap] Determines to which edge of the table the viewport will be scrolled based on the passed coordinates.\n   * This option is a string which must take one of the following values:\n   * - `top`: The viewport will be scrolled to a row in such a way that it will be positioned on the top of the viewport;\n   * - `bottom`: The viewport will be scrolled to a row in such a way that it will be positioned on the bottom of the viewport;\n   * - If the property is not defined the vertical auto-snapping is enabled. Depending on where the viewport is scrolled from, a row will\n   * be positioned at the top or bottom of the viewport.\n   * @param {'start' | 'end'} [options.horizontalSnap] Determines to which edge of the table the viewport will be scrolled based on the passed coordinates.\n   * This option is a string which must take one of the following values:\n   * - `start`: The viewport will be scrolled to a column in such a way that it will be positioned on the start (left edge or right, if the layout direction is set to `rtl`) of the viewport;\n   * - `end`: The viewport will be scrolled to a column in such a way that it will be positioned on the end (right edge or left, if the layout direction is set to `rtl`) of the viewport;\n   * - If the property is not defined the horizontal auto-snapping is enabled. Depending on where the viewport is scrolled from, a column will\n   * be positioned at the start or end of the viewport.\n   * @param {boolean} [options.considerHiddenIndexes=true] If `true`, we handle visual indexes, otherwise we handle only indexes which\n   * may be rendered when they are in the viewport (we don't consider hidden indexes as they aren't rendered).\n   * @returns {boolean} `true` if viewport was scrolled, `false` otherwise.\n   */\n  this.scrollViewportTo = function (options) {\n    var _options;\n    // Support for backward compatibility arguments: (row, col, snapToBottom, snapToRight, considerHiddenIndexes)\n    if (typeof options === 'number') {\n      var _arguments$;\n      /* eslint-disable prefer-rest-params */\n      options = {\n        row: arguments[0],\n        col: arguments[1],\n        verticalSnap: arguments[2] ? 'bottom' : 'top',\n        horizontalSnap: arguments[3] ? 'end' : 'start',\n        considerHiddenIndexes: (_arguments$ = arguments[4]) !== null && _arguments$ !== void 0 ? _arguments$ : true\n      };\n      /* eslint-enable prefer-rest-params */\n    }\n\n    const {\n      row,\n      col,\n      verticalSnap,\n      horizontalSnap,\n      considerHiddenIndexes\n    } = (_options = options) !== null && _options !== void 0 ? _options : {};\n    let snapToTop;\n    let snapToBottom;\n    let snapToInlineStart;\n    let snapToInlineEnd;\n    if (verticalSnap !== undefined) {\n      snapToTop = verticalSnap === 'top';\n      snapToBottom = !snapToTop;\n    }\n    if (horizontalSnap !== undefined) {\n      snapToInlineStart = horizontalSnap === 'start';\n      snapToInlineEnd = !snapToInlineStart;\n    }\n    let renderableRow = row;\n    let renderableColumn = col;\n    if (considerHiddenIndexes === undefined || considerHiddenIndexes) {\n      const isValidRowGrid = Number.isInteger(row) && row >= 0;\n      const isValidColumnGrid = Number.isInteger(col) && col >= 0;\n      const visualRowToScroll = isValidRowGrid ? getIndexToScroll(this.rowIndexMapper, row) : undefined;\n      const visualColumnToScroll = isValidColumnGrid ? getIndexToScroll(this.columnIndexMapper, col) : undefined;\n      if (visualRowToScroll === null || visualColumnToScroll === null) {\n        return false;\n      }\n      renderableRow = isValidRowGrid ? instance.rowIndexMapper.getRenderableFromVisualIndex(visualRowToScroll) : row;\n      renderableColumn = isValidColumnGrid ? instance.columnIndexMapper.getRenderableFromVisualIndex(visualColumnToScroll) : col;\n    }\n    const isRowInteger = Number.isInteger(renderableRow);\n    const isColumnInteger = Number.isInteger(renderableColumn);\n    if (isRowInteger && renderableRow >= 0 && isColumnInteger && renderableColumn >= 0) {\n      return instance.view.scrollViewport(instance._createCellCoords(renderableRow, renderableColumn), snapToTop, snapToInlineEnd, snapToBottom, snapToInlineStart);\n    }\n    if (isRowInteger && renderableRow >= 0 && (isColumnInteger && renderableColumn < 0 || !isColumnInteger)) {\n      return instance.view.scrollViewportVertically(renderableRow, snapToTop, snapToBottom);\n    }\n    if (isColumnInteger && renderableColumn >= 0 && (isRowInteger && renderableRow < 0 || !isRowInteger)) {\n      return instance.view.scrollViewportHorizontally(renderableColumn, snapToInlineEnd, snapToInlineStart);\n    }\n    return false;\n  };\n\n  /**\n   * Scrolls the viewport to coordinates specified by the currently focused cell.\n   *\n   * @since 14.0.0\n   * @memberof Core#\n   * @fires Hooks#afterScroll\n   * @function scrollToFocusedCell\n   * @param {Function} callback The callback function to call after the viewport is scrolled.\n   */\n  this.scrollToFocusedCell = function () {\n    let callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : () => {};\n    if (!this.selection.isSelected()) {\n      return;\n    }\n    this.addHookOnce('afterScroll', callback);\n    const {\n      highlight\n    } = this.getSelectedRangeLast();\n    const isScrolled = this.scrollViewportTo(highlight.toObject());\n    if (isScrolled) {\n      this.view.render();\n    } else {\n      this.removeHook('afterScroll', callback);\n      this._registerImmediate(() => callback());\n    }\n  };\n\n  /**\n   * Removes the table from the DOM and destroys the instance of the Handsontable.\n   *\n   * @memberof Core#\n   * @function destroy\n   * @fires Hooks#afterDestroy\n   */\n  this.destroy = function () {\n    instance._clearTimeouts();\n    instance._clearImmediates();\n    if (instance.view) {\n      // in case HT is destroyed before initialization has finished\n      instance.view.destroy();\n    }\n    if (dataSource) {\n      dataSource.destroy();\n    }\n    dataSource = null;\n    this.getShortcutManager().destroy();\n    metaManager.clearCache();\n    foreignHotInstances.delete(this.guid);\n    if (isRootInstance(instance)) {\n      const licenseInfo = this.rootDocument.querySelector('.hot-display-license-info');\n      if (licenseInfo) {\n        licenseInfo.parentNode.removeChild(licenseInfo);\n      }\n    }\n    empty(instance.rootElement);\n    eventManager.destroy();\n    if (editorManager) {\n      editorManager.destroy();\n    }\n\n    // The plugin's `destroy` method is called as a consequence and it should handle\n    // unregistration of plugin's maps. Some unregistered maps reset the cache.\n    instance.batchExecution(() => {\n      instance.rowIndexMapper.unregisterAll();\n      instance.columnIndexMapper.unregisterAll();\n      pluginsRegistry.getItems().forEach(_ref10 => {\n        let [, plugin] = _ref10;\n        plugin.destroy();\n      });\n      pluginsRegistry.clear();\n      instance.runHooks('afterDestroy');\n    }, true);\n    Hooks.getSingleton().destroy(instance);\n    objectEach(instance, (property, key, obj) => {\n      // replace instance methods with post mortem\n      if (isFunction(property)) {\n        obj[key] = postMortem(key);\n      } else if (key !== 'guid') {\n        // replace instance properties with null (restores memory)\n        // it should not be necessary but this prevents a memory leak side effects that show itself in Jasmine tests\n        obj[key] = null;\n      }\n    });\n    instance.isDestroyed = true;\n\n    // replace private properties with null (restores memory)\n    // it should not be necessary but this prevents a memory leak side effects that show itself in Jasmine tests\n    if (datamap) {\n      datamap.destroy();\n    }\n    datamap = null;\n    grid = null;\n    selection = null;\n    editorManager = null;\n    instance = null;\n  };\n\n  /**\n   * Replacement for all methods after the Handsontable was destroyed.\n   *\n   * @private\n   * @param {string} method The method name.\n   * @returns {Function}\n   */\n  function postMortem(method) {\n    return () => {\n      throw new Error(`The \"${method}\" method cannot be called because this Handsontable instance has been destroyed`);\n    };\n  }\n\n  /**\n   * Returns the active editor class instance.\n   *\n   * @memberof Core#\n   * @function getActiveEditor\n   * @returns {BaseEditor} The active editor instance.\n   */\n  this.getActiveEditor = function () {\n    return editorManager.getActiveEditor();\n  };\n\n  /**\n   * Returns plugin instance by provided its name.\n   *\n   * @memberof Core#\n   * @function getPlugin\n   * @param {string} pluginName The plugin name.\n   * @returns {BasePlugin|undefined} The plugin instance or undefined if there is no plugin.\n   */\n  this.getPlugin = function (pluginName) {\n    const unifiedPluginName = toUpperCaseFirst(pluginName);\n\n    // Workaround for the UndoRedo plugin which, currently doesn't follow the plugin architecture.\n    if (unifiedPluginName === 'UndoRedo') {\n      return this.undoRedo;\n    }\n    return pluginsRegistry.getItem(unifiedPluginName);\n  };\n\n  /**\n   * Returns name of the passed plugin.\n   *\n   * @private\n   * @memberof Core#\n   * @param {BasePlugin} plugin The plugin instance.\n   * @returns {string}\n   */\n  this.getPluginName = function (plugin) {\n    // Workaround for the UndoRedo plugin which, currently doesn't follow the plugin architecture.\n    if (plugin === this.undoRedo) {\n      return this.undoRedo.constructor.PLUGIN_KEY;\n    }\n    return pluginsRegistry.getId(plugin);\n  };\n\n  /**\n   * Returns the Handsontable instance.\n   *\n   * @memberof Core#\n   * @function getInstance\n   * @returns {Handsontable} The Handsontable instance.\n   */\n  this.getInstance = function () {\n    return instance;\n  };\n\n  /**\n   * Adds listener to the specified hook name (only for this Handsontable instance).\n   *\n   * @memberof Core#\n   * @function addHook\n   * @see Hooks#add\n   * @param {string} key Hook name (see {@link Hooks}).\n   * @param {Function|Array} callback Function or array of functions.\n   * @example\n   * ```js\n   * hot.addHook('beforeInit', myCallback);\n   * ```\n   */\n  this.addHook = function (key, callback) {\n    Hooks.getSingleton().add(key, callback, instance);\n  };\n\n  /**\n   * Check if for a specified hook name there are added listeners (only for this Handsontable instance). All available\n   * hooks you will find {@link Hooks}.\n   *\n   * @memberof Core#\n   * @function hasHook\n   * @see Hooks#has\n   * @param {string} key Hook name.\n   * @returns {boolean}\n   *\n   * @example\n   * ```js\n   * const hasBeforeInitListeners = hot.hasHook('beforeInit');\n   * ```\n   */\n  this.hasHook = function (key) {\n    return Hooks.getSingleton().has(key, instance) || Hooks.getSingleton().has(key);\n  };\n\n  /**\n   * Adds listener to specified hook name (only for this Handsontable instance). After the listener is triggered,\n   * it will be automatically removed.\n   *\n   * @memberof Core#\n   * @function addHookOnce\n   * @see Hooks#once\n   * @param {string} key Hook name (see {@link Hooks}).\n   * @param {Function|Array} callback Function or array of functions.\n   * @example\n   * ```js\n   * hot.addHookOnce('beforeInit', myCallback);\n   * ```\n   */\n  this.addHookOnce = function (key, callback) {\n    Hooks.getSingleton().once(key, callback, instance);\n  };\n\n  /**\n   * Removes the hook listener previously registered with {@link Core#addHook}.\n   *\n   * @memberof Core#\n   * @function removeHook\n   * @see Hooks#remove\n   * @param {string} key Hook name.\n   * @param {Function} callback Reference to the function which has been registered using {@link Core#addHook}.\n   *\n   * @example\n   * ```js\n   * hot.removeHook('beforeInit', myCallback);\n   * ```\n   */\n  this.removeHook = function (key, callback) {\n    Hooks.getSingleton().remove(key, callback, instance);\n  };\n\n  /**\n   * Run the callbacks for the hook provided in the `key` argument using the parameters given in the other arguments.\n   *\n   * @memberof Core#\n   * @function runHooks\n   * @see Hooks#run\n   * @param {string} key Hook name.\n   * @param {*} [p1] Argument passed to the callback.\n   * @param {*} [p2] Argument passed to the callback.\n   * @param {*} [p3] Argument passed to the callback.\n   * @param {*} [p4] Argument passed to the callback.\n   * @param {*} [p5] Argument passed to the callback.\n   * @param {*} [p6] Argument passed to the callback.\n   * @returns {*}\n   *\n   * @example\n   * ```js\n   * // Run built-in hook\n   * hot.runHooks('beforeInit');\n   * // Run custom hook\n   * hot.runHooks('customAction', 10, 'foo');\n   * ```\n   */\n  this.runHooks = function (key, p1, p2, p3, p4, p5, p6) {\n    return Hooks.getSingleton().run(instance, key, p1, p2, p3, p4, p5, p6);\n  };\n\n  /**\n   * Get language phrase for specified dictionary key.\n   *\n   * @memberof Core#\n   * @function getTranslatedPhrase\n   * @since 0.35.0\n   * @param {string} dictionaryKey Constant which is dictionary key.\n   * @param {*} extraArguments Arguments which will be handled by formatters.\n   * @returns {string}\n   */\n  this.getTranslatedPhrase = function (dictionaryKey, extraArguments) {\n    return getTranslatedPhrase(tableMeta.language, dictionaryKey, extraArguments);\n  };\n\n  /**\n   * Converts instance into outerHTML of HTMLTableElement.\n   *\n   * @memberof Core#\n   * @function toHTML\n   * @since 7.1.0\n   * @returns {string}\n   */\n  this.toHTML = () => instanceToHTML(this);\n\n  /**\n   * Converts instance into HTMLTableElement.\n   *\n   * @memberof Core#\n   * @function toTableElement\n   * @since 7.1.0\n   * @returns {HTMLTableElement}\n   */\n  this.toTableElement = () => {\n    const tempElement = this.rootDocument.createElement('div');\n    tempElement.insertAdjacentHTML('afterbegin', instanceToHTML(this));\n    return tempElement.firstElementChild;\n  };\n  this.timeouts = [];\n\n  /**\n   * Sets timeout. Purpose of this method is to clear all known timeouts when `destroy` method is called.\n   *\n   * @param {number|Function} handle Handler returned from setTimeout or function to execute (it will be automatically wraped\n   *                                 by setTimeout function).\n   * @param {number} [delay=0] If first argument is passed as a function this argument set delay of the execution of that function.\n   * @private\n   */\n  this._registerTimeout = function (handle) {\n    let delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let handleFunc = handle;\n    if (typeof handleFunc === 'function') {\n      handleFunc = setTimeout(handleFunc, delay);\n    }\n    this.timeouts.push(handleFunc);\n  };\n\n  /**\n   * Clears all known timeouts.\n   *\n   * @private\n   */\n  this._clearTimeouts = function () {\n    arrayEach(this.timeouts, handler => {\n      clearTimeout(handler);\n    });\n  };\n  this.immediates = [];\n\n  /**\n   * Execute function execution to the next event loop cycle. Purpose of this method is to clear all known timeouts when `destroy` method is called.\n   *\n   * @param {Function} callback Function to be delayed in execution.\n   * @private\n   */\n  this._registerImmediate = function (callback) {\n    this.immediates.push(setImmediate(callback));\n  };\n\n  /**\n   * Clears all known timeouts.\n   *\n   * @private\n   */\n  this._clearImmediates = function () {\n    arrayEach(this.immediates, handler => {\n      clearImmediate(handler);\n    });\n  };\n\n  /**\n   * Refresh selection borders. This is temporary method relic after selection rewrite.\n   *\n   * @private\n   * @param {boolean} [revertOriginal=false] If `true`, the previous value will be restored. Otherwise, the edited value will be saved.\n   * @param {boolean} [prepareEditorIfNeeded=true] If `true` the editor under the selected cell will be prepared to open.\n   */\n  this._refreshBorders = function () {\n    let revertOriginal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let prepareEditorIfNeeded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    editorManager.destroyEditor(revertOriginal);\n    instance.view.render();\n    if (prepareEditorIfNeeded && selection.isSelected()) {\n      editorManager.prepareEditor();\n    }\n  };\n\n  /**\n   * Gets the instance of the EditorManager.\n   *\n   * @private\n   * @returns {EditorManager}\n   */\n  this._getEditorManager = function () {\n    return editorManager;\n  };\n\n  /**\n   * Check if currently it is RTL direction.\n   *\n   * @private\n   * @memberof Core#\n   * @function isRtl\n   * @returns {boolean} True if RTL.\n   */\n  this.isRtl = function () {\n    return instance.rootWindow.getComputedStyle(instance.rootElement).direction === 'rtl';\n  };\n\n  /**\n   * Check if currently it is LTR direction.\n   *\n   * @private\n   * @memberof Core#\n   * @function isLtr\n   * @returns {boolean} True if LTR.\n   */\n  this.isLtr = function () {\n    return !instance.isRtl();\n  };\n\n  /**\n   * Returns 1 for LTR; -1 for RTL. Useful for calculations.\n   *\n   * @private\n   * @memberof Core#\n   * @function getDirectionFactor\n   * @returns {number} Returns 1 for LTR; -1 for RTL.\n   */\n  this.getDirectionFactor = function () {\n    return instance.isLtr() ? 1 : -1;\n  };\n  const shortcutManager = createShortcutManager({\n    handleEvent() {\n      return instance.isListening();\n    },\n    beforeKeyDown: event => {\n      return this.runHooks('beforeKeyDown', event);\n    },\n    afterKeyDown: event => {\n      if (this.isDestroyed) {\n        // Handsontable could be destroyed after performing action (executing a callback).\n        return;\n      }\n      instance.runHooks('afterDocumentKeyDown', event);\n    },\n    ownerWindow: this.rootWindow\n  });\n  this.addHook('beforeOnCellMouseDown', event => {\n    // Releasing keys as some browser/system shortcuts break events sequence (thus the `keyup` event isn't triggered).\n    if (event.ctrlKey === false && event.metaKey === false) {\n      shortcutManager.releasePressedKeys();\n    }\n  });\n\n  /**\n   * Returns instance of a manager responsible for handling shortcuts stored in some contexts. It run actions after\n   * pressing key combination in active Handsontable instance.\n   *\n   * @memberof Core#\n   * @since 12.0.0\n   * @function getShortcutManager\n   * @returns {ShortcutManager} Instance of {@link ShortcutManager}\n   */\n  this.getShortcutManager = function () {\n    return shortcutManager;\n  };\n\n  /**\n   * Return the Focus Manager responsible for managing the browser's focus in the table.\n   *\n   * @memberof Core#\n   * @since 14.0.0\n   * @function getFocusManager\n   * @returns {FocusManager}\n   */\n  this.getFocusManager = function () {\n    return focusManager;\n  };\n  getPluginsNames().forEach(pluginName => {\n    const PluginClass = getPlugin(pluginName);\n    pluginsRegistry.addItem(pluginName, new PluginClass(this));\n  });\n  registerAllShortcutContexts(instance);\n  shortcutManager.setActiveContextName('grid');\n  Hooks.getSingleton().run(instance, 'construct');\n}", "import Core from \"./core.mjs\";\nimport { rootInstanceSymbol } from \"./utils/rootInstance.mjs\";\nimport { metaSchemaFactory } from \"./dataMap/index.mjs\";\nimport Hooks from \"./pluginHooks.mjs\"; // FIXME: Bug in eslint-plugin-import: https://github.com/benmosher/eslint-plugin-import/issues/1883\n/* eslint-disable import/named */\nimport { dictionaryKeys, getTranslatedPhrase, registerLanguageDictionary, getLanguagesDictionaries, getLanguageDictionary } from \"./i18n/registry.mjs\";\n/* eslint-enable import/named */\nimport { registerCellType } from \"./cellTypes/registry.mjs\";\nimport { TextCellType } from \"./cellTypes/textType/index.mjs\";\nimport { BaseEditor } from \"./editors/baseEditor/index.mjs\";\nimport { CellCoords, CellRange } from \"./3rdparty/walkontable/src/index.mjs\"; // register default mandatory cell type for the Base package\nregisterCellType(TextCellType);\n\n// export the `BaseEditor` class to the Handsontable global namespace\nHandsontable.editors = {\n  BaseEditor\n};\n\n/**\n * @param {HTMLElement} rootElement The element to which the Handsontable instance is injected.\n * @param {object} userSettings The user defined options.\n * @returns {Core}\n */\nfunction Handsontable(rootElement, userSettings) {\n  const instance = new Core(rootElement, userSettings || {}, rootInstanceSymbol);\n  instance.init();\n  return instance;\n}\nHandsontable.Core = function (rootElement) {\n  let userSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Core(rootElement, userSettings, rootInstanceSymbol);\n};\nHandsontable.DefaultSettings = metaSchemaFactory();\nHandsontable.hooks = Hooks.getSingleton();\nHandsontable.CellCoords = CellCoords;\nHandsontable.CellRange = CellRange;\nHandsontable.packageName = 'handsontable';\nHandsontable.buildDate = \"30/11/2023 10:10:40\";\nHandsontable.version = \"14.0.0\";\nHandsontable.languages = {\n  dictionaryKeys,\n  getLanguageDictionary,\n  getLanguagesDictionaries,\n  registerLanguageDictionary,\n  getTranslatedPhrase\n};\nexport { CellCoords, CellRange };\nexport default Handsontable;"],
  "mappings": "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AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA+ET,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAsDf,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAiDf,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA+BX,wBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAsDxB,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA8DV,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAkDb,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAoEV,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA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",
  "names": ["String", "setImmediate", "clearImmediate", "clearImmediate", "setImmediate", "_classPrivateFieldGet2", "_classPrivateMethodInitSpec", "_checkPrivateRedeclaration", "_classPrivateFieldInitSpec", "_classPrivateMethodGet", "_classPrivateFieldGet", "_classExtractFieldDescriptor", "_classApplyDescriptorGet", "_classPrivateFieldSet", "_classApplyDescriptorSet", "holder", "_defineProperty", "_toPropertyKey", "_toPrimitive", "dictionary", "_defineProperty", "_toPropertyKey", "_toPrimitive", "_getItem", "TableMeta", "ColumnMeta", "_defineProperty", "_toPropertyKey", "_toPrimitive", "_defineProperty", "_toPropertyKey", "_toPrimitive", "_defineProperty", "_toPropertyKey", "_toPrimitive", "_defineProperty", "_toPropertyKey", "_toPrimitive", "_defineProperty", "_toPropertyKey", "_toPrimitive", "ColumnMeta", "_defineProperty", "_toPropertyKey", "_toPrimitive", "_defineProperty", "_toPropertyKey", "_toPrimitive", "rootInstanceSymbol", "getInputValue", "_getItem"]
}
