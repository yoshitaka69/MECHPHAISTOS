{
  "version": 3,
  "sources": ["../../core-js/internals/object-keys.js", "../../core-js/internals/object-define-properties.js", "../../core-js/internals/html.js", "../../core-js/internals/object-create.js", "../../core-js/internals/add-to-unscopables.js", "../../handsontable/utils/dataStructures/priorityMap.mjs", "../../handsontable/utils/dataStructures/uniqueMap.mjs", "../../handsontable/utils/dataStructures/uniqueSet.mjs", "../../handsontable/plugins/registry.mjs", "../../handsontable/3rdparty/walkontable/src/cell/coords.mjs", "../../handsontable/3rdparty/walkontable/src/cell/range.mjs", "../../core-js/modules/es.array.at.js", "../../handsontable/3rdparty/walkontable/src/calculator/constants.mjs", "../../handsontable/3rdparty/walkontable/src/calculator/viewportColumns.mjs", "../../handsontable/3rdparty/walkontable/src/calculator/viewportRows.mjs", "../../handsontable/helpers/feature.mjs", "../../handsontable/3rdparty/walkontable/src/event.mjs", "../../handsontable/3rdparty/walkontable/src/filter/column.mjs", "../../handsontable/3rdparty/walkontable/src/filter/row.mjs", "../../handsontable/3rdparty/walkontable/src/utils/orderView/constants.mjs", "../../handsontable/3rdparty/walkontable/src/utils/orderView/viewSize.mjs", "../../handsontable/3rdparty/walkontable/src/utils/orderView/viewSizeSet.mjs", "../../handsontable/3rdparty/walkontable/src/utils/orderView/view.mjs", "../../handsontable/3rdparty/walkontable/src/utils/orderView/sharedView.mjs", "../../handsontable/3rdparty/walkontable/src/utils/nodesPool.mjs", "../../handsontable/3rdparty/walkontable/src/renderer/_base.mjs", "../../handsontable/3rdparty/walkontable/src/renderer/rowHeaders.mjs", "../../handsontable/3rdparty/walkontable/src/renderer/columnHeaders.mjs", "../../handsontable/3rdparty/walkontable/src/renderer/colGroup.mjs", "../../handsontable/3rdparty/walkontable/src/renderer/rows.mjs", "../../handsontable/3rdparty/walkontable/src/renderer/cells.mjs", "../../handsontable/3rdparty/walkontable/src/renderer/table.mjs", "../../handsontable/3rdparty/walkontable/src/renderer/index.mjs", "../../handsontable/3rdparty/walkontable/src/utils/column.mjs", "../../handsontable/3rdparty/walkontable/src/utils/row.mjs", "../../handsontable/3rdparty/walkontable/src/table.mjs", "../../handsontable/3rdparty/walkontable/src/table/mixin/stickyRowsBottom.mjs", "../../handsontable/3rdparty/walkontable/src/table/mixin/stickyColumnsStart.mjs", "../../handsontable/3rdparty/walkontable/src/table/bottomInlineStartCorner.mjs", "../../handsontable/3rdparty/walkontable/src/overlay/constants.mjs", "../../handsontable/3rdparty/walkontable/src/scroll.mjs", "../../handsontable/3rdparty/walkontable/src/core/_base.mjs", "../../handsontable/3rdparty/walkontable/src/core/clone.mjs", "../../handsontable/3rdparty/walkontable/src/overlay/_base.mjs", "../../handsontable/3rdparty/walkontable/src/overlay/bottomInlineStartCorner.mjs", "../../handsontable/3rdparty/walkontable/src/table/mixin/calculatedColumns.mjs", "../../handsontable/3rdparty/walkontable/src/table/bottom.mjs", "../../handsontable/3rdparty/walkontable/src/overlay/bottom.mjs", "../../handsontable/3rdparty/walkontable/src/table/mixin/calculatedRows.mjs", "../../handsontable/3rdparty/walkontable/src/table/inlineStart.mjs", "../../handsontable/mixins/localHooks.mjs", "../../handsontable/3rdparty/walkontable/src/selection/selection.mjs", "../../handsontable/3rdparty/walkontable/src/selection/constants.mjs", "../../handsontable/3rdparty/walkontable/src/selection/border/constants.mjs", "../../core-js/modules/es.array.unscopables.flat.js", "../../handsontable/3rdparty/walkontable/src/selection/scanner.mjs", "../../handsontable/3rdparty/walkontable/src/selection/border/border.mjs", "../../handsontable/3rdparty/walkontable/src/selection/manager.mjs", "../../handsontable/3rdparty/walkontable/src/overlay/inlineStart.mjs", "../../handsontable/3rdparty/walkontable/src/table/mixin/stickyRowsTop.mjs", "../../handsontable/3rdparty/walkontable/src/table/topInlineStartCorner.mjs", "../../handsontable/3rdparty/walkontable/src/overlay/topInlineStartCorner.mjs", "../../handsontable/3rdparty/walkontable/src/table/top.mjs", "../../handsontable/3rdparty/walkontable/src/overlay/top.mjs", "../../handsontable/3rdparty/walkontable/src/overlays.mjs", "../../handsontable/3rdparty/walkontable/src/settings.mjs", "../../handsontable/3rdparty/walkontable/src/table/master.mjs", "../../handsontable/3rdparty/walkontable/src/viewport.mjs", "../../handsontable/3rdparty/walkontable/src/core/core.mjs", "../../handsontable/3rdparty/walkontable/src/facade/core.mjs", "../../handsontable/selection/utils.mjs"],
  "sourcesContent": ["'use strict';\nvar internalObjectKeys = require('../internals/object-keys-internal');\nvar enumBugKeys = require('../internals/enum-bug-keys');\n\n// `Object.keys` method\n// https://tc39.es/ecma262/#sec-object.keys\n// eslint-disable-next-line es/no-object-keys -- safe\nmodule.exports = Object.keys || function keys(O) {\n  return internalObjectKeys(O, enumBugKeys);\n};\n", "'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar V8_PROTOTYPE_DEFINE_BUG = require('../internals/v8-prototype-define-bug');\nvar definePropertyModule = require('../internals/object-define-property');\nvar anObject = require('../internals/an-object');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar objectKeys = require('../internals/object-keys');\n\n// `Object.defineProperties` method\n// https://tc39.es/ecma262/#sec-object.defineproperties\n// eslint-disable-next-line es/no-object-defineproperties -- safe\nexports.f = DESCRIPTORS && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var props = toIndexedObject(Properties);\n  var keys = objectKeys(Properties);\n  var length = keys.length;\n  var index = 0;\n  var key;\n  while (length > index) definePropertyModule.f(O, key = keys[index++], props[key]);\n  return O;\n};\n", "'use strict';\nvar getBuiltIn = require('../internals/get-built-in');\n\nmodule.exports = getBuiltIn('document', 'documentElement');\n", "'use strict';\n/* global ActiveXObject -- old IE, WSH */\nvar anObject = require('../internals/an-object');\nvar definePropertiesModule = require('../internals/object-define-properties');\nvar enumBugKeys = require('../internals/enum-bug-keys');\nvar hiddenKeys = require('../internals/hidden-keys');\nvar html = require('../internals/html');\nvar documentCreateElement = require('../internals/document-create-element');\nvar sharedKey = require('../internals/shared-key');\n\nvar GT = '>';\nvar LT = '<';\nvar PROTOTYPE = 'prototype';\nvar SCRIPT = 'script';\nvar IE_PROTO = sharedKey('IE_PROTO');\n\nvar EmptyConstructor = function () { /* empty */ };\n\nvar scriptTag = function (content) {\n  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;\n};\n\n// Create object with fake `null` prototype: use ActiveX Object with cleared prototype\nvar NullProtoObjectViaActiveX = function (activeXDocument) {\n  activeXDocument.write(scriptTag(''));\n  activeXDocument.close();\n  var temp = activeXDocument.parentWindow.Object;\n  activeXDocument = null; // avoid memory leak\n  return temp;\n};\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar NullProtoObjectViaIFrame = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = documentCreateElement('iframe');\n  var JS = 'java' + SCRIPT + ':';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  html.appendChild(iframe);\n  // https://github.com/zloirock/core-js/issues/475\n  iframe.src = String(JS);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(scriptTag('document.F=Object'));\n  iframeDocument.close();\n  return iframeDocument.F;\n};\n\n// Check for document.domain and active x support\n// No need to use active x approach when document.domain is not set\n// see https://github.com/es-shims/es5-shim/issues/150\n// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346\n// avoid IE GC bug\nvar activeXDocument;\nvar NullProtoObject = function () {\n  try {\n    activeXDocument = new ActiveXObject('htmlfile');\n  } catch (error) { /* ignore */ }\n  NullProtoObject = typeof document != 'undefined'\n    ? document.domain && activeXDocument\n      ? NullProtoObjectViaActiveX(activeXDocument) // old IE\n      : NullProtoObjectViaIFrame()\n    : NullProtoObjectViaActiveX(activeXDocument); // WSH\n  var length = enumBugKeys.length;\n  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];\n  return NullProtoObject();\n};\n\nhiddenKeys[IE_PROTO] = true;\n\n// `Object.create` method\n// https://tc39.es/ecma262/#sec-object.create\n// eslint-disable-next-line es/no-object-create -- safe\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    EmptyConstructor[PROTOTYPE] = anObject(O);\n    result = new EmptyConstructor();\n    EmptyConstructor[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = NullProtoObject();\n  return Properties === undefined ? result : definePropertiesModule.f(result, Properties);\n};\n", "'use strict';\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar create = require('../internals/object-create');\nvar defineProperty = require('../internals/object-define-property').f;\n\nvar UNSCOPABLES = wellKnownSymbol('unscopables');\nvar ArrayPrototype = Array.prototype;\n\n// Array.prototype[@@unscopables]\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\nif (ArrayPrototype[UNSCOPABLES] === undefined) {\n  defineProperty(ArrayPrototype, UNSCOPABLES, {\n    configurable: true,\n    value: create(null)\n  });\n}\n\n// add a key to Array.prototype[@@unscopables]\nmodule.exports = function (key) {\n  ArrayPrototype[UNSCOPABLES][key] = true;\n};\n", "import \"core-js/modules/es.error.cause.js\";\nimport { isNumeric } from \"../../helpers/number.mjs\";\nimport { isFunction } from \"../../helpers/function.mjs\";\nexport const ASC = 'asc';\nexport const DESC = 'desc';\nconst ORDER_MAP = new Map([[ASC, [-1, 1]], [DESC, [1, -1]]]);\nconst DEFAULT_ERROR_PRIORITY_EXISTS = priority => `The priority '${priority}' is already declared in a map.`;\nconst DEFAULT_ERROR_PRIORITY_NAN = priority => `The priority '${priority}' is not a number.`;\n\n/**\n * @typedef {object} PriorityMap\n * @property {Function} addItem Adds items to the priority map.\n * @property {Function} getItems Gets items from the passed map in a ASC or DESC order of priorities.\n */\n/**\n * Creates a new priority map.\n *\n * @param {object} config The config for priority map.\n * @param {Function} config.errorPriorityExists The function to generate a custom error message if priority is already taken.\n * @param {Function} config.errorPriorityNaN The function to generate a custom error message if priority is not a number.\n * @returns {PriorityMap}\n */\nexport function createPriorityMap() {\n  let {\n    errorPriorityExists,\n    errorPriorityNaN\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const priorityMap = new Map();\n  errorPriorityExists = isFunction(errorPriorityExists) ? errorPriorityExists : DEFAULT_ERROR_PRIORITY_EXISTS;\n  errorPriorityNaN = isFunction(errorPriorityNaN) ? errorPriorityNaN : DEFAULT_ERROR_PRIORITY_NAN;\n\n  /**\n   * Adds items to priority map. Throws an error if `priority` is not a number or if is already added.\n   *\n   * @param {number} priority The priority for adding item.\n   * @param {*} item The adding item.\n   */\n  function addItem(priority, item) {\n    if (!isNumeric(priority)) {\n      throw new Error(errorPriorityNaN(priority));\n    }\n    if (priorityMap.has(priority)) {\n      throw new Error(errorPriorityExists(priority));\n    }\n    priorityMap.set(priority, item);\n  }\n\n  /**\n   * Gets items from the passed map in a ASC or DESC order of priorities.\n   *\n   * @param {string} [order] The order for getting items. ASC is an default.\n   * @returns {*}\n   */\n  function getItems() {\n    let order = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ASC;\n    const [left, right] = ORDER_MAP.get(order) || ORDER_MAP.get(ASC);\n    return [...priorityMap]\n    // we want to be sure we sort over a priority key\n    // if we are sure we can remove custom compare function\n    // then we should replace next line with a default `.sort()`\n    .sort((a, b) => a[0] < b[0] ? left : right).map(item => item[1]);\n  }\n  return {\n    addItem,\n    getItems\n  };\n}", "import \"core-js/modules/es.error.cause.js\";\nimport { isFunction } from \"../../helpers/function.mjs\";\nconst DEFAULT_ERROR_ID_EXISTS = id => `The id '${id}' is already declared in a map.`;\n\n/**\n * @typedef {object} UniqueMap\n * @property {Function} addItem Adds a new item to the unique map.\n * @property {Function} clear Clears the map.\n * @property {Function} getId Returns ID for the passed item.\n * @property {Function} getItem Gets item from the passed ID.\n * @property {Function} getItems Gets all items from the map.\n * @property {Function} hasItem Verifies if the passed ID exists in a map.\n * @property {Function} removeItem Removes item from the passed id if exists.\n */\n/**\n * Creates a new unique map.\n *\n * @param {object} config The config for priority queue.\n * @param {Function} config.errorIdExists The function to generate custom message if ID is already taken.\n * @returns {UniqueMap}\n */\nexport function createUniqueMap() {\n  let {\n    errorIdExists\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const uniqueMap = new Map();\n  errorIdExists = isFunction(errorIdExists) ? errorIdExists : DEFAULT_ERROR_ID_EXISTS;\n\n  /**\n   * Adds a new item to the unique map. Throws error if `id` is already added.\n   *\n   * @param {*} id The ID of the adding item.\n   * @param {*} item The adding item.\n   */\n  function addItem(id, item) {\n    if (hasItem(id)) {\n      throw new Error(errorIdExists(id));\n    }\n    uniqueMap.set(id, item);\n  }\n\n  /**\n   * Removes item from the passed id if exists.\n   *\n   * @param {*} id The ID to remove.\n   * @returns {boolean}\n   */\n  function removeItem(id) {\n    return uniqueMap.delete(id);\n  }\n\n  /**\n   * Clears the map.\n   */\n  function clear() {\n    uniqueMap.clear();\n  }\n\n  /**\n   * Returns ID for the passed item.\n   *\n   * @param {*} item The item of the getting ID.\n   * @returns {*}\n   */\n  function getId(item) {\n    const [itemId] = getItems().find(_ref => {\n      let [id, element] = _ref;\n      if (item === element) {\n        return id;\n      }\n      return false;\n    }) || [null];\n    return itemId;\n  }\n\n  /**\n   * Returns item from the passed ID.\n   *\n   * @param {*} id The ID of the getting item.\n   * @returns {*}\n   */\n  function getItem(id) {\n    return uniqueMap.get(id);\n  }\n\n  /**\n   * Gets all items from the map.\n   *\n   * @returns {Array}\n   */\n  function getItems() {\n    return [...uniqueMap];\n  }\n\n  /**\n   * Verifies if the passed ID exists in a map.\n   *\n   * @param {*} id The ID to check if registered.\n   * @returns {boolean}\n   */\n  function hasItem(id) {\n    return uniqueMap.has(id);\n  }\n  return {\n    addItem,\n    clear,\n    getId,\n    getItem,\n    getItems,\n    hasItem,\n    removeItem\n  };\n}", "import \"core-js/modules/es.error.cause.js\";\nimport { isFunction } from \"../../helpers/function.mjs\";\nconst DEFAULT_ERROR_ITEM_EXISTS = item => `'${item}' value is already declared in a unique set.`;\n\n/**\n * @typedef {object} UniqueSet\n * @property {Function} addItem Adds items to the priority set.\n * @property {Function} getItems Gets items from the set in order of addition.\n */\n/**\n * Creates a new unique set.\n *\n * @param {object} config The config for priority set.\n * @param {Function} config.errorItemExists The function to generate custom error message if item is already in the set.\n * @returns {UniqueSet}\n */\nexport function createUniqueSet() {\n  let {\n    errorItemExists\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const uniqueSet = new Set();\n  errorItemExists = isFunction(errorItemExists) ? errorItemExists : DEFAULT_ERROR_ITEM_EXISTS;\n\n  /**\n   * Adds items to the unique set. Throws an error if `item` is already added.\n   *\n   * @param {*} item The adding item.\n   */\n  function addItem(item) {\n    if (uniqueSet.has(item)) {\n      throw new Error(errorItemExists(item));\n    }\n    uniqueSet.add(item);\n  }\n\n  /**\n   * Gets items from the set in order of addition.\n   *\n   * @returns {*}\n   */\n  function getItems() {\n    return [...uniqueSet];\n  }\n\n  /**\n   * Clears the unique set.\n   */\n  function clear() {\n    uniqueSet.clear();\n  }\n  return {\n    addItem,\n    clear,\n    getItems\n  };\n}", "import \"core-js/modules/es.error.cause.js\";\n/**\n * Utility to register plugins and common namespace for keeping the reference to all plugins classes.\n */\nimport { toUpperCaseFirst } from \"../helpers/string.mjs\";\nimport { createPriorityMap } from \"../utils/dataStructures/priorityMap.mjs\";\nimport { createUniqueMap } from \"../utils/dataStructures/uniqueMap.mjs\";\nimport { createUniqueSet } from \"../utils/dataStructures/uniqueSet.mjs\";\nconst ERROR_PLUGIN_REGISTERED = pluginName => `There is already registered \"${pluginName}\" plugin.`;\nconst ERROR_PRIORITY_REGISTERED = priority => `There is already registered plugin on priority \"${priority}\".`;\nconst ERROR_PRIORITY_NAN = priority => `The priority \"${priority}\" is not a number.`;\n\n/**\n * Stores plugins' names' queue with their priorities.\n */\nconst priorityPluginsQueue = createPriorityMap({\n  errorPriorityExists: ERROR_PRIORITY_REGISTERED,\n  errorPriorityNaN: ERROR_PRIORITY_NAN\n});\n/**\n * Stores plugins names' queue by registration order.\n */\nconst uniquePluginsQueue = createUniqueSet({\n  errorItemExists: ERROR_PLUGIN_REGISTERED\n});\n/**\n * Stores plugins references between their name and class.\n */\nconst uniquePluginsList = createUniqueMap({\n  errorIdExists: ERROR_PLUGIN_REGISTERED\n});\n\n/**\n * Gets registered plugins' names in the following order:\n * 1) Plugins registered with a defined priority attribute, in the ascending order of priority.\n * 2) Plugins registered without a defined priority attribute, in the registration order.\n *\n * @returns {string[]}\n */\nexport function getPluginsNames() {\n  return [...priorityPluginsQueue.getItems(), ...uniquePluginsQueue.getItems()];\n}\n\n/**\n * Gets registered plugin's class based on the given name.\n *\n * @param {string} pluginName Plugin's name.\n * @returns {BasePlugin}\n */\nexport function getPlugin(pluginName) {\n  const unifiedPluginName = toUpperCaseFirst(pluginName);\n  return uniquePluginsList.getItem(unifiedPluginName);\n}\n\n/**\n * Checks if the plugin under the name is already registered.\n *\n * @param {string} pluginName Plugin's name.\n * @returns {boolean}\n */\nexport function hasPlugin(pluginName) {\n  /* eslint-disable no-unneeded-ternary */\n  return getPlugin(pluginName) ? true : false;\n}\n\n/**\n * Registers plugin under the given name only once.\n *\n * @param {string|Function} pluginName The plugin name or plugin class.\n * @param {Function} [pluginClass] The plugin class.\n * @param {number} [priority] The plugin priority.\n */\nexport function registerPlugin(pluginName, pluginClass, priority) {\n  [pluginName, pluginClass, priority] = unifyPluginArguments(pluginName, pluginClass, priority);\n  if (getPlugin(pluginName) === undefined) {\n    _registerPlugin(pluginName, pluginClass, priority);\n  }\n}\n\n/**\n * Registers plugin under the given name.\n *\n * @param {string|Function} pluginName The plugin name or plugin class.\n * @param {Function} [pluginClass] The plugin class.\n * @param {number} [priority] The plugin priority.\n */\nfunction _registerPlugin(pluginName, pluginClass, priority) {\n  const unifiedPluginName = toUpperCaseFirst(pluginName);\n  if (uniquePluginsList.hasItem(unifiedPluginName)) {\n    throw new Error(ERROR_PLUGIN_REGISTERED(unifiedPluginName));\n  }\n  if (priority === undefined) {\n    uniquePluginsQueue.addItem(unifiedPluginName);\n  } else {\n    priorityPluginsQueue.addItem(priority, unifiedPluginName);\n  }\n  uniquePluginsList.addItem(unifiedPluginName, pluginClass);\n}\n\n/**\n * Unifies arguments to register the plugin.\n *\n * @param {string|Function} pluginName The plugin name or plugin class.\n * @param {Function} [pluginClass] The plugin class.\n * @param {number} [priority] The plugin priority.\n * @returns {Array}\n */\nfunction unifyPluginArguments(pluginName, pluginClass, priority) {\n  if (typeof pluginName === 'function') {\n    pluginClass = pluginName;\n    pluginName = pluginClass.PLUGIN_KEY;\n    priority = pluginClass.PLUGIN_PRIORITY;\n  }\n  return [pluginName, pluginClass, priority];\n}", "import \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nvar _isRtl = /*#__PURE__*/new WeakMap();\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * @description\n *\n * The `CellCoords` class holds the coordinates (`row`, `col`) of a single cell.\n *\n * It also contains methods for validating the coordinates\n * and retrieving them as an object.\n *\n * To import the `CellCoords` class:\n *\n * ```js\n * import Handsontable, { CellCoords } from '/handsontable';\n *\n * // or, using modules\n * import Handsontable, { CellCoords } from '/handsontable/base';\n * ```\n */\nclass CellCoords {\n  constructor(row, column) {\n    let isRtl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    /**\n     * A visual row index.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"row\", null);\n    /**\n     * A visual column index.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"col\", null);\n    /**\n     * A flag which determines if the coordinates run in RTL mode.\n     *\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _isRtl, {\n      writable: true,\n      value: false\n    });\n    _classPrivateFieldSet(this, _isRtl, isRtl);\n    if (typeof row !== 'undefined' && typeof column !== 'undefined') {\n      this.row = row;\n      this.col = column;\n    }\n  }\n\n  /**\n   * Checks if the coordinates in your `CellCoords` instance are valid\n   * in the context of given table parameters.\n   *\n   * The `row` index:\n   * - Must be an integer.\n   * - Must be higher than the number of column headers in the table.\n   * - Must be lower than the total number of rows in the table.\n   *\n   * The `col` index:\n   * - Must be an integer.\n   * - Must be higher than the number of row headers in the table.\n   * - Must be lower than the total number of columns in the table.\n   *\n   * @param {object} [tableParams] An object with a defined table size.\n   * @param {number} [tableParams.countRows=0] The total number of rows.\n   * @param {number} [tableParams.countCols=0] The total number of columns.\n   * @param {number} [tableParams.countRowHeaders=0] A number of row headers.\n   * @param {number} [tableParams.countColHeaders=0] A number of column headers.\n   * @returns {boolean} `true`: The coordinates are valid.\n   */\n  isValid(tableParams) {\n    const {\n      countRows,\n      countCols,\n      countRowHeaders,\n      countColHeaders\n    } = {\n      countRows: 0,\n      countCols: 0,\n      countRowHeaders: 0,\n      countColHeaders: 0,\n      ...tableParams\n    };\n    if (!Number.isInteger(this.row) || !Number.isInteger(this.col)) {\n      return false;\n    }\n    if (this.row < -countColHeaders || this.col < -countRowHeaders) {\n      return false;\n    }\n    if (this.row >= countRows || this.col >= countCols) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Checks if another set of coordinates (`coords`)\n   * is equal to the coordinates in your `CellCoords` instance.\n   *\n   * @param {CellCoords} coords Coordinates to check.\n   * @returns {boolean}\n   */\n  isEqual(coords) {\n    if (coords === this) {\n      return true;\n    }\n    return this.row === coords.row && this.col === coords.col;\n  }\n\n  /**\n   * Checks if the coordinates point to the headers range. If one of the axis (row or col) point to\n   * the header (negative value) then method returns `true`.\n   *\n   * @returns {boolean}\n   */\n  isHeader() {\n    return !this.isCell();\n  }\n\n  /**\n   * Checks if the coordinates point to the cells range. If all axis (row and col) point to\n   * the cell (positive value) then method returns `true`.\n   *\n   * @returns {boolean}\n   */\n  isCell() {\n    return this.row >= 0 && this.col >= 0;\n  }\n\n  /**\n   * Checks if the coordinates runs in RTL mode.\n   *\n   * @returns {boolean}\n   */\n  isRtl() {\n    return _classPrivateFieldGet(this, _isRtl);\n  }\n\n  /**\n   * Checks if another set of coordinates (`testedCoords`)\n   * is south-east of the coordinates in your `CellCoords` instance.\n   *\n   * @param {CellCoords} testedCoords Coordinates to check.\n   * @returns {boolean}\n   */\n  isSouthEastOf(testedCoords) {\n    return this.row >= testedCoords.row && (_classPrivateFieldGet(this, _isRtl) ? this.col <= testedCoords.col : this.col >= testedCoords.col);\n  }\n\n  /**\n   * Checks if another set of coordinates (`testedCoords`)\n   * is north-west of the coordinates in your `CellCoords` instance.\n   *\n   * @param {CellCoords} testedCoords Coordinates to check.\n   * @returns {boolean}\n   */\n  isNorthWestOf(testedCoords) {\n    return this.row <= testedCoords.row && (_classPrivateFieldGet(this, _isRtl) ? this.col >= testedCoords.col : this.col <= testedCoords.col);\n  }\n\n  /**\n   * Checks if another set of coordinates (`testedCoords`)\n   * is south-west of the coordinates in your `CellCoords` instance.\n   *\n   * @param {CellCoords} testedCoords Coordinates to check.\n   * @returns {boolean}\n   */\n  isSouthWestOf(testedCoords) {\n    return this.row >= testedCoords.row && (_classPrivateFieldGet(this, _isRtl) ? this.col >= testedCoords.col : this.col <= testedCoords.col);\n  }\n\n  /**\n   * Checks if another set of coordinates (`testedCoords`)\n   * is north-east of the coordinates in your `CellCoords` instance.\n   *\n   * @param {CellCoords} testedCoords Coordinates to check.\n   * @returns {boolean}\n   */\n  isNorthEastOf(testedCoords) {\n    return this.row <= testedCoords.row && (_classPrivateFieldGet(this, _isRtl) ? this.col <= testedCoords.col : this.col >= testedCoords.col);\n  }\n\n  /**\n   * Normalizes the coordinates in your `CellCoords` instance to the nearest valid position.\n   *\n   * Coordinates that point to headers (negative values) are normalized to `0`.\n   *\n   * @returns {CellCoords}\n   */\n  normalize() {\n    this.row = this.row === null ? this.row : Math.max(this.row, 0);\n    this.col = this.col === null ? this.col : Math.max(this.col, 0);\n    return this;\n  }\n\n  /**\n   * Assigns the coordinates from another `CellCoords` instance (or compatible literal object)\n   * to your `CellCoords` instance.\n   *\n   * @param {CellCoords | { row: number | undefined, col: number | undefined }} coords The CellCoords\n   * instance or compatible literal object.\n   * @returns {CellCoords}\n   */\n  assign(coords) {\n    if (Number.isInteger(coords === null || coords === void 0 ? void 0 : coords.row)) {\n      this.row = coords.row;\n    }\n    if (Number.isInteger(coords === null || coords === void 0 ? void 0 : coords.col)) {\n      this.col = coords.col;\n    }\n    if (coords instanceof CellCoords) {\n      _classPrivateFieldSet(this, _isRtl, coords.isRtl());\n    }\n    return this;\n  }\n\n  /**\n   * Clones your `CellCoords` instance.\n   *\n   * @returns {CellCoords}\n   */\n  clone() {\n    return new CellCoords(this.row, this.col, _classPrivateFieldGet(this, _isRtl));\n  }\n\n  /**\n   * Converts your `CellCoords` instance into an object literal with `row` and `col` properties.\n   *\n   * @returns {{row: number, col: number}} An object literal with `row` and `col` properties.\n   */\n  toObject() {\n    return {\n      row: this.row,\n      col: this.col\n    };\n  }\n}\nexport default CellCoords;", "import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport CellCoords from \"./../cell/coords.mjs\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * @description\n *\n * The `CellRange` class holds a set of cell coordinates ([`CellCoords`](@/api/cellCoords.md) instances)\n * that form a [selection range](@/guides/cell-features/selection.md#select-ranges).\n *\n * A single `CellRange` instance represents a single unit of selection\n * that contains either a single cell or multiple adjacent cells.\n *\n * To import the `CellRange` class:\n *\n * ```js\n * import Handsontable, { CellRange } from '/handsontable';\n *\n * // or, using modules\n * import Handsontable, { CellRange } from '/handsontable/base';\n * ```\n */\nvar _isRtl = /*#__PURE__*/new WeakMap();\nclass CellRange {\n  constructor(highlight) {\n    let from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : highlight;\n    let to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : highlight;\n    let isRtl = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    /**\n     * Used to draw bold border around a cell where selection was started and to edit the cell\n     * when you press Enter. The highlight cannot point to headers (negative values) so its\n     * coordinates object is normalized while assigning.\n     *\n     * @private\n     * @type {CellCoords}\n     */\n    _defineProperty(this, \"highlight\", null);\n    /**\n     * Usually the same as highlight, but in Excel there is distinction - one can change\n     * highlight within a selection.\n     *\n     * @private\n     * @type {CellCoords}\n     */\n    _defineProperty(this, \"from\", null);\n    /**\n     * End selection.\n     *\n     * @private\n     * @type {CellCoords}\n     */\n    _defineProperty(this, \"to\", null);\n    /**\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _isRtl, {\n      writable: true,\n      value: false\n    });\n    this.highlight = highlight.clone();\n    this.from = from.clone();\n    this.to = to.clone();\n    _classPrivateFieldSet(this, _isRtl, isRtl);\n  }\n\n  /**\n   * Highlights cell selection at the `coords` coordinates.\n   *\n   * @param {CellCoords} coords Coordinates to use.\n   * @returns {CellRange}\n   */\n  setHighlight(coords) {\n    this.highlight = coords.clone();\n    return this;\n  }\n\n  /**\n   * Sets the `coords` coordinates as the start of your range.\n   *\n   * @param {CellCoords} coords Coordinates to use.\n   * @returns {CellRange}\n   */\n  setFrom(coords) {\n    this.from = coords.clone();\n    return this;\n  }\n\n  /**\n   * Sets the `coords` coordinates as the end of your range.\n   *\n   * @param {CellCoords} coords Coordinates to use.\n   * @returns {CellRange}\n   */\n  setTo(coords) {\n    this.to = coords.clone();\n    return this;\n  }\n\n  /**\n   * Checks if the coordinates in your `CellRange` instance are valid\n   * in the context of given table parameters.\n   *\n   * See the [`isValid()`](@/api/cellCoords.md#isvalid) method of the [`CellCoords`](@/api/cellCoords.md) class.\n   *\n   * @param {object} tableParams An object with a defined table size.\n   * @param {number} tableParams.countRows The total number of rows.\n   * @param {number} tableParams.countCols The total number of columns.\n   * @param {number} tableParams.countRowHeaders A number of row headers.\n   * @param {number} tableParams.countColHeaders A number of column headers.\n   * @returns {boolean}\n   */\n  isValid(tableParams) {\n    return this.from.isValid(tableParams) && this.to.isValid(tableParams);\n  }\n\n  /**\n   * Checks if your range is just a single cell or header.\n   *\n   * @returns {boolean}\n   */\n  isSingle() {\n    return this.isSingleCell() || this.isSingleHeader();\n  }\n\n  /**\n   * Checks if your range is just a single cell.\n   *\n   * @returns {boolean}\n   */\n  isSingleCell() {\n    return this.from.row >= 0 && this.from.row === this.to.row && this.from.col >= 0 && this.from.col === this.to.col;\n  }\n\n  /**\n   * Checks if your range is just a single header.\n   *\n   * @returns {boolean}\n   */\n  isSingleHeader() {\n    return (this.from.row < 0 || this.from.col < 0) && this.from.row === this.to.row && this.from.col === this.to.col;\n  }\n\n  /**\n   * Checks if your range overlaps headers range (negative coordinates).\n   *\n   * @returns {boolean}\n   */\n  containsHeaders() {\n    return this.from.isHeader() || this.to.isHeader();\n  }\n\n  /**\n   * Returns the height of your range (as a number of rows, including row headers).\n   *\n   * @returns {number}\n   */\n  getOuterHeight() {\n    return Math.max(this.from.row, this.to.row) - Math.min(this.from.row, this.to.row) + 1;\n  }\n\n  /**\n   * Returns the width of your range (as a number of columns, including column headers).\n   *\n   * @returns {number}\n   */\n  getOuterWidth() {\n    return Math.max(this.from.col, this.to.col) - Math.min(this.from.col, this.to.col) + 1;\n  }\n\n  /**\n   * Returns the height of your range (as a number of rows, excluding row headers).\n   *\n   * @returns {number}\n   */\n  getHeight() {\n    // if the selection contains only row headers, return 0\n    if (this.from.row < 0 && this.to.row < 0) {\n      return 0;\n    }\n    const fromRow = Math.max(this.from.row, 0);\n    const toRow = Math.max(this.to.row, 0);\n    return Math.max(fromRow, toRow) - Math.min(fromRow, toRow) + 1;\n  }\n\n  /**\n   * Returns the width of your range (as a number of columns, excluding column headers).\n   *\n   * @returns {number}\n   */\n  getWidth() {\n    // if the selection contains only column headers, return 0\n    if (this.from.col < 0 && this.to.col < 0) {\n      return 0;\n    }\n    const fromCol = Math.max(this.from.col, 0);\n    const toCol = Math.max(this.to.col, 0);\n    return Math.max(fromCol, toCol) - Math.min(fromCol, toCol) + 1;\n  }\n\n  /**\n   * Returns the number of cells within your range (excluding column and row headers).\n   *\n   * @returns {number}\n   */\n  getCellsCount() {\n    return this.getWidth() * this.getHeight();\n  }\n\n  /**\n   * Checks if another set of coordinates (`cellCoords`)\n   * is within the `from` and `to` coordinates of your range.\n   *\n   * @param {CellCoords} cellCoords Coordinates to check.\n   * @returns {boolean}\n   */\n  includes(cellCoords) {\n    const {\n      row,\n      col\n    } = cellCoords;\n    const topStart = this.getOuterTopStartCorner();\n    const bottomEnd = this.getOuterBottomEndCorner();\n    return topStart.row <= row && bottomEnd.row >= row && topStart.col <= col && bottomEnd.col >= col;\n  }\n\n  /**\n   * Checks if another range (`cellRange`) is within your range.\n   *\n   * @param {CellRange} cellRange A range to check.\n   * @returns {boolean}\n   */\n  includesRange(cellRange) {\n    return this.includes(cellRange.getOuterTopStartCorner()) && this.includes(cellRange.getOuterBottomEndCorner());\n  }\n\n  /**\n   * Checks if another range (`cellRange`) is equal to your range.\n   *\n   * @param {CellRange} cellRange A range to check.\n   * @returns {boolean}\n   */\n  isEqual(cellRange) {\n    return Math.min(this.from.row, this.to.row) === Math.min(cellRange.from.row, cellRange.to.row) && Math.max(this.from.row, this.to.row) === Math.max(cellRange.from.row, cellRange.to.row) && Math.min(this.from.col, this.to.col) === Math.min(cellRange.from.col, cellRange.to.col) && Math.max(this.from.col, this.to.col) === Math.max(cellRange.from.col, cellRange.to.col);\n  }\n\n  /**\n   * Checks if another range (`cellRange`) overlaps your range.\n   *\n   * Range A overlaps range B if the intersection of A and B (or B and A) is not empty.\n   *\n   * @param {CellRange} cellRange A range to check.\n   * @returns {boolean}\n   */\n  overlaps(cellRange) {\n    return cellRange.isSouthEastOf(this.getOuterTopLeftCorner()) && cellRange.isNorthWestOf(this.getOuterBottomRightCorner());\n  }\n\n  /**\n   * Checks if another range (`cellRange`) is south-east of your range.\n   *\n   * @param {CellRange} cellRange A range to check.\n   * @returns {boolean}\n   */\n  isSouthEastOf(cellRange) {\n    return this.getOuterTopLeftCorner().isSouthEastOf(cellRange) || this.getOuterBottomRightCorner().isSouthEastOf(cellRange);\n  }\n\n  /**\n   * Checks if another range (`cellRange`) is north-west of your range.\n   *\n   * @param {CellRange} cellRange A range to check.\n   * @returns {boolean}\n   */\n  isNorthWestOf(cellRange) {\n    return this.getOuterTopLeftCorner().isNorthWestOf(cellRange) || this.getOuterBottomRightCorner().isNorthWestOf(cellRange);\n  }\n\n  /**\n   * Checks if another range (`cellRange`) overlaps your range horizontally.\n   *\n   * For example: returns `true` if the last column of your range is `5`\n   * and the first column of the `cellRange` range is `3`.\n   *\n   * @param {CellRange} cellRange A range to check.\n   * @returns {boolean}\n   */\n  isOverlappingHorizontally(cellRange) {\n    return this.getOuterTopRightCorner().col >= cellRange.getOuterTopLeftCorner().col && this.getOuterTopRightCorner().col <= cellRange.getOuterTopRightCorner().col || this.getOuterTopLeftCorner().col <= cellRange.getOuterTopRightCorner().col && this.getOuterTopLeftCorner().col >= cellRange.getOuterTopLeftCorner().col;\n  }\n\n  /**\n   * Checks if another range (`cellRange`) overlaps your range vertically.\n   *\n   * For example: returns `true` if the last row of your range is `5`\n   * and the first row of the `cellRange` range is `3`.\n   *\n   * @param {CellRange} cellRange A range to check.\n   * @returns {boolean}\n   */\n  isOverlappingVertically(cellRange) {\n    return this.getOuterBottomRightCorner().row >= cellRange.getOuterTopRightCorner().row && this.getOuterBottomRightCorner().row <= cellRange.getOuterBottomRightCorner().row || this.getOuterTopRightCorner().row <= cellRange.getOuterBottomRightCorner().row && this.getOuterTopRightCorner().row >= cellRange.getOuterTopRightCorner().row;\n  }\n\n  /**\n   * Adds a cell to your range, at `cellCoords` coordinates.\n   *\n   * The `cellCoords` coordinates must exceed a corner of your range.\n   *\n   * @param {CellCoords} cellCoords A new cell's coordinates.\n   * @returns {boolean}\n   */\n  expand(cellCoords) {\n    const topStart = this.getOuterTopStartCorner();\n    const bottomEnd = this.getOuterBottomEndCorner();\n    if (cellCoords.row < topStart.row || cellCoords.col < topStart.col || cellCoords.row > bottomEnd.row || cellCoords.col > bottomEnd.col) {\n      this.from = this._createCellCoords(Math.min(topStart.row, cellCoords.row), Math.min(topStart.col, cellCoords.col));\n      this.to = this._createCellCoords(Math.max(bottomEnd.row, cellCoords.row), Math.max(bottomEnd.col, cellCoords.col));\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Expand your range with another range (`expandingRange`).\n   *\n   * @param {CellRange} expandingRange A new range.\n   * @returns {boolean}\n   */\n  expandByRange(expandingRange) {\n    if (this.includesRange(expandingRange) || !this.overlaps(expandingRange)) {\n      return false;\n    }\n    const topStart = this.getOuterTopStartCorner();\n    const bottomEnd = this.getOuterBottomEndCorner();\n    const initialDirection = this.getDirection();\n    const expandingTopStart = expandingRange.getOuterTopStartCorner();\n    const expandingBottomEnd = expandingRange.getOuterBottomEndCorner();\n    const resultTopRow = Math.min(topStart.row, expandingTopStart.row);\n    const resultTopCol = Math.min(topStart.col, expandingTopStart.col);\n    const resultBottomRow = Math.max(bottomEnd.row, expandingBottomEnd.row);\n    const resultBottomCol = Math.max(bottomEnd.col, expandingBottomEnd.col);\n    const finalFrom = this._createCellCoords(resultTopRow, resultTopCol);\n    const finalTo = this._createCellCoords(resultBottomRow, resultBottomCol);\n    this.from = finalFrom;\n    this.to = finalTo;\n    this.setDirection(initialDirection);\n    if (this.highlight.row === this.getOuterBottomRightCorner().row && this.getVerticalDirection() === 'N-S') {\n      this.flipDirectionVertically();\n    }\n    if (this.highlight.col === this.getOuterTopRightCorner().col && this.getHorizontalDirection() === 'W-E') {\n      this.flipDirectionHorizontally();\n    }\n    return true;\n  }\n\n  /**\n   * Gets the direction of the selection.\n   *\n   * @returns {string} Returns one of the values: `'NW-SE'`, `'NE-SW'`, `'SE-NW'`, `'SW-NE'`.\n   */\n  getDirection() {\n    if (this.from.isNorthWestOf(this.to)) {\n      // NorthWest - SouthEast\n      return 'NW-SE';\n    } else if (this.from.isNorthEastOf(this.to)) {\n      // NorthEast - SouthWest\n      return 'NE-SW';\n    } else if (this.from.isSouthEastOf(this.to)) {\n      // SouthEast - NorthWest\n      return 'SE-NW';\n    } else if (this.from.isSouthWestOf(this.to)) {\n      // SouthWest - NorthEast\n      return 'SW-NE';\n    }\n  }\n\n  /**\n   * Sets the direction of the selection.\n   *\n   * @param {string} direction One of the values: `'NW-SE'`, `'NE-SW'`, `'SE-NW'`, `'SW-NE'`.\n   */\n  setDirection(direction) {\n    switch (direction) {\n      case 'NW-SE':\n        [this.from, this.to] = [this.getOuterTopLeftCorner(), this.getOuterBottomRightCorner()];\n        break;\n      case 'NE-SW':\n        [this.from, this.to] = [this.getOuterTopRightCorner(), this.getOuterBottomLeftCorner()];\n        break;\n      case 'SE-NW':\n        [this.from, this.to] = [this.getOuterBottomRightCorner(), this.getOuterTopLeftCorner()];\n        break;\n      case 'SW-NE':\n        [this.from, this.to] = [this.getOuterBottomLeftCorner(), this.getOuterTopRightCorner()];\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Gets the vertical direction of the selection.\n   *\n   * @returns {string} Returns one of the values: `N-S` (north->south), `S-N` (south->north).\n   */\n  getVerticalDirection() {\n    return ['NE-SW', 'NW-SE'].indexOf(this.getDirection()) > -1 ? 'N-S' : 'S-N';\n  }\n\n  /**\n   * Gets the horizontal direction of the selection.\n   *\n   * @returns {string} Returns one of the values: `W-E` (west->east), `E-W` (east->west).\n   */\n  getHorizontalDirection() {\n    return ['NW-SE', 'SW-NE'].indexOf(this.getDirection()) > -1 ? 'W-E' : 'E-W';\n  }\n\n  /**\n   * Flips the direction of your range vertically (e.g., `NW-SE` changes to `SW-NE`).\n   */\n  flipDirectionVertically() {\n    const direction = this.getDirection();\n    switch (direction) {\n      case 'NW-SE':\n        this.setDirection('SW-NE');\n        break;\n      case 'NE-SW':\n        this.setDirection('SE-NW');\n        break;\n      case 'SE-NW':\n        this.setDirection('NE-SW');\n        break;\n      case 'SW-NE':\n        this.setDirection('NW-SE');\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Flips the direction of your range horizontally (e.g., `NW-SE` changes to `NE-SW`).\n   */\n  flipDirectionHorizontally() {\n    const direction = this.getDirection();\n    switch (direction) {\n      case 'NW-SE':\n        this.setDirection('NE-SW');\n        break;\n      case 'NE-SW':\n        this.setDirection('NW-SE');\n        break;\n      case 'SE-NW':\n        this.setDirection('SW-NE');\n        break;\n      case 'SW-NE':\n        this.setDirection('SE-NW');\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Gets the top-left (in LTR) or top-right (in RTL) corner coordinates of your range.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the corner coordinates are normalized to `0`.\n   *\n   * @returns {CellCoords}\n   */\n  getTopStartCorner() {\n    return this._createCellCoords(Math.min(this.from.row, this.to.row), Math.min(this.from.col, this.to.col)).normalize();\n  }\n\n  /**\n   * Gets the top-left corner coordinates of your range,\n   * both in the LTR and RTL layout direction.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the corner coordinates are normalized to `0`.\n   *\n   * @returns {CellCoords}\n   */\n  getTopLeftCorner() {\n    return _classPrivateFieldGet(this, _isRtl) ? this.getTopEndCorner() : this.getTopStartCorner();\n  }\n\n  /**\n   * Gets the bottom right (in LTR) or bottom left (in RTL) corner coordinates of your range.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the corner coordinates are normalized to `0`.\n   *\n   * @returns {CellCoords}\n   */\n  getBottomEndCorner() {\n    return this._createCellCoords(Math.max(this.from.row, this.to.row), Math.max(this.from.col, this.to.col)).normalize();\n  }\n\n  /**\n   * Gets the bottom right corner coordinates of your range,\n   * both in the LTR and RTL layout direction.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the corner coordinates are normalized to `0`.\n   *\n   * @returns {CellCoords}\n   */\n  getBottomRightCorner() {\n    return _classPrivateFieldGet(this, _isRtl) ? this.getBottomStartCorner() : this.getBottomEndCorner();\n  }\n\n  /**\n   * Gets the top right (in LTR) or top left (in RTL) corner coordinates of your range.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the corner coordinates are normalized to `0`.\n   *\n   * @returns {CellCoords}\n   */\n  getTopEndCorner() {\n    return this._createCellCoords(Math.min(this.from.row, this.to.row), Math.max(this.from.col, this.to.col)).normalize();\n  }\n\n  /**\n   * Gets the top right corner coordinates of your range,\n   * both in the LTR and RTL layout direction.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the corner coordinates are normalized to `0`.\n   *\n   * @returns {CellCoords}\n   */\n  getTopRightCorner() {\n    return _classPrivateFieldGet(this, _isRtl) ? this.getTopStartCorner() : this.getTopEndCorner();\n  }\n\n  /**\n   * Gets the bottom left (in LTR) or bottom right (in RTL) corner coordinates of your range.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the corner coordinates are normalized to `0`.\n   *\n   * @returns {CellCoords}\n   */\n  getBottomStartCorner() {\n    return this._createCellCoords(Math.max(this.from.row, this.to.row), Math.min(this.from.col, this.to.col)).normalize();\n  }\n\n  /**\n   * Gets the bottom left corner coordinates of your range,\n   * both in the LTR and RTL layout direction.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the corner coordinates are normalized to `0`.\n   *\n   * @returns {CellCoords}\n   */\n  getBottomLeftCorner() {\n    return _classPrivateFieldGet(this, _isRtl) ? this.getBottomEndCorner() : this.getBottomStartCorner();\n  }\n\n  /**\n   * Gets the top left (in LTR) or top right (in RTL) corner coordinates of your range.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the top and start coordinates are pointed to that header.\n   *\n   * @returns {CellCoords}\n   */\n  getOuterTopStartCorner() {\n    return this._createCellCoords(Math.min(this.from.row, this.to.row), Math.min(this.from.col, this.to.col));\n  }\n\n  /**\n   * Gets the top left corner coordinates of your range,\n   * both in the LTR and RTL layout direction.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the top and left coordinates are pointed to that header.\n   *\n   * @returns {CellCoords}\n   */\n  getOuterTopLeftCorner() {\n    return _classPrivateFieldGet(this, _isRtl) ? this.getOuterTopEndCorner() : this.getOuterTopStartCorner();\n  }\n\n  /**\n   * Gets the bottom right (in LTR) or bottom left (in RTL) corner coordinates of your range.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the top and start coordinates are pointed to that header.\n   *\n   * @returns {CellCoords}\n   */\n  getOuterBottomEndCorner() {\n    return this._createCellCoords(Math.max(this.from.row, this.to.row), Math.max(this.from.col, this.to.col));\n  }\n\n  /**\n   * Gets the bottom right corner coordinates of your range,\n   * both in the LTR and RTL layout direction.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the top and left coordinates are pointed to that header.\n   *\n   * @returns {CellCoords}\n   */\n  getOuterBottomRightCorner() {\n    return _classPrivateFieldGet(this, _isRtl) ? this.getOuterBottomStartCorner() : this.getOuterBottomEndCorner();\n  }\n\n  /**\n   * Gets the top right (in LTR) or top left (in RTL) corner coordinates of your range.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the top and start coordinates are pointed to that header.\n   *\n   * @returns {CellCoords}\n   */\n  getOuterTopEndCorner() {\n    return this._createCellCoords(Math.min(this.from.row, this.to.row), Math.max(this.from.col, this.to.col));\n  }\n\n  /**\n   * Gets the top right corner coordinates of your range,\n   * both in the LTR and RTL layout direction.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the top and left coordinates are pointed to that header.\n   *\n   * @returns {CellCoords}\n   */\n  getOuterTopRightCorner() {\n    return _classPrivateFieldGet(this, _isRtl) ? this.getOuterTopStartCorner() : this.getOuterTopEndCorner();\n  }\n\n  /**\n   * Gets the bottom left (in LTR) or bottom right (in RTL) corner coordinates of your range.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the top and start coordinates are pointed to that header.\n   *\n   * @returns {CellCoords}\n   */\n  getOuterBottomStartCorner() {\n    return this._createCellCoords(Math.max(this.from.row, this.to.row), Math.min(this.from.col, this.to.col));\n  }\n\n  /**\n   * Gets the bottom left corner coordinates of your range,\n   * both in the LTR and RTL layout direction.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the top and left coordinates are pointed to that header.\n   *\n   * @returns {CellCoords}\n   */\n  getOuterBottomLeftCorner() {\n    return _classPrivateFieldGet(this, _isRtl) ? this.getOuterBottomEndCorner() : this.getOuterBottomStartCorner();\n  }\n\n  /**\n   * Checks if a set of coordinates (`coords`) matches one of the 4 corners of your range.\n   *\n   * @param {CellCoords} coords Coordinates to check.\n   * @param {CellRange} [expandedRange] A range to compare with.\n   * @returns {boolean}\n   */\n  isCorner(coords, expandedRange) {\n    if (expandedRange && expandedRange.includes(coords) && (this.getOuterTopLeftCorner().isEqual(this._createCellCoords(expandedRange.from.row, expandedRange.from.col)) || this.getOuterTopRightCorner().isEqual(this._createCellCoords(expandedRange.from.row, expandedRange.to.col)) || this.getOuterBottomLeftCorner().isEqual(this._createCellCoords(expandedRange.to.row, expandedRange.from.col)) || this.getOuterBottomRightCorner().isEqual(this._createCellCoords(expandedRange.to.row, expandedRange.to.col)))) {\n      return true;\n    }\n    return coords.isEqual(this.getOuterTopLeftCorner()) || coords.isEqual(this.getOuterTopRightCorner()) || coords.isEqual(this.getOuterBottomLeftCorner()) || coords.isEqual(this.getOuterBottomRightCorner());\n  }\n\n  /**\n   * Gets the coordinates of a range corner opposite to the provided `coords`.\n   *\n   * For example: if the `coords` coordinates match the bottom-right corner of your range,\n   * the coordinates of the top-left corner of your range are returned.\n   *\n   * @param {CellCoords} coords Coordinates to check.\n   * @param {CellRange} [expandedRange] A range to compare with.\n   * @returns {CellCoords}\n   */\n  getOppositeCorner(coords, expandedRange) {\n    if (!(coords instanceof CellCoords)) {\n      return false;\n    }\n    if (expandedRange) {\n      const {\n        from,\n        to\n      } = expandedRange;\n      if (expandedRange.includes(coords)) {\n        if (this.getOuterTopStartCorner().isEqual(this._createCellCoords(from.row, from.col))) {\n          return this.getOuterBottomEndCorner();\n        }\n        if (this.getOuterTopEndCorner().isEqual(this._createCellCoords(from.row, to.col))) {\n          return this.getOuterBottomStartCorner();\n        }\n        if (this.getOuterBottomStartCorner().isEqual(this._createCellCoords(to.row, from.col))) {\n          return this.getOuterTopEndCorner();\n        }\n        if (this.getOuterBottomEndCorner().isEqual(this._createCellCoords(to.row, to.col))) {\n          return this.getOuterTopStartCorner();\n        }\n      }\n    }\n    if (coords.isEqual(this.getOuterBottomEndCorner())) {\n      return this.getOuterTopStartCorner();\n    } else if (coords.isEqual(this.getOuterTopStartCorner())) {\n      return this.getOuterBottomEndCorner();\n    } else if (coords.isEqual(this.getOuterTopEndCorner())) {\n      return this.getOuterBottomStartCorner();\n    } else if (coords.isEqual(this.getOuterBottomStartCorner())) {\n      return this.getOuterTopEndCorner();\n    }\n  }\n\n  /**\n   * Indicates which borders (top, right, bottom, left) are shared between\n   * your `CellRange`instance and another `range` that's within your range.\n   *\n   * @param {CellRange} range A range to compare with.\n   * @returns {Array<'top' | 'right' | 'bottom' | 'left'>}\n   */\n  getBordersSharedWith(range) {\n    if (!this.includesRange(range)) {\n      return [];\n    }\n    const thisBorders = {\n      top: Math.min(this.from.row, this.to.row),\n      bottom: Math.max(this.from.row, this.to.row),\n      left: Math.min(this.from.col, this.to.col),\n      right: Math.max(this.from.col, this.to.col)\n    };\n    const rangeBorders = {\n      top: Math.min(range.from.row, range.to.row),\n      bottom: Math.max(range.from.row, range.to.row),\n      left: Math.min(range.from.col, range.to.col),\n      right: Math.max(range.from.col, range.to.col)\n    };\n    const result = [];\n    if (thisBorders.top === rangeBorders.top) {\n      result.push('top');\n    }\n    if (thisBorders.right === rangeBorders.right) {\n      result.push('right');\n    }\n    if (thisBorders.bottom === rangeBorders.bottom) {\n      result.push('bottom');\n    }\n    if (thisBorders.left === rangeBorders.left) {\n      result.push('left');\n    }\n    return result;\n  }\n\n  /**\n   * Gets the coordinates of the inner cells of your range.\n   *\n   * @returns {CellCoords[]}\n   */\n  getInner() {\n    const topStart = this.getOuterTopStartCorner();\n    const bottomEnd = this.getOuterBottomEndCorner();\n    const out = [];\n    for (let r = topStart.row; r <= bottomEnd.row; r++) {\n      for (let c = topStart.col; c <= bottomEnd.col; c++) {\n        if (!(this.from.row === r && this.from.col === c) && !(this.to.row === r && this.to.col === c)) {\n          out.push(this._createCellCoords(r, c));\n        }\n      }\n    }\n    return out;\n  }\n\n  /**\n   * Gets the coordinates of all cells of your range.\n   *\n   * @returns {CellCoords[]}\n   */\n  getAll() {\n    const topStart = this.getOuterTopStartCorner();\n    const bottomEnd = this.getOuterBottomEndCorner();\n    const out = [];\n    for (let r = topStart.row; r <= bottomEnd.row; r++) {\n      for (let c = topStart.col; c <= bottomEnd.col; c++) {\n        if (topStart.row === r && topStart.col === c) {\n          out.push(topStart);\n        } else if (bottomEnd.row === r && bottomEnd.col === c) {\n          out.push(bottomEnd);\n        } else {\n          out.push(this._createCellCoords(r, c));\n        }\n      }\n    }\n    return out;\n  }\n\n  /**\n   * Runs a callback function on all cells within your range.\n   *\n   * You can break the iteration by returning `false` in the callback function.\n   *\n   * @param {function(number, number): boolean} callback A callback function.\n   */\n  forAll(callback) {\n    const topStart = this.getOuterTopStartCorner();\n    const bottomEnd = this.getOuterBottomEndCorner();\n    for (let r = topStart.row; r <= bottomEnd.row; r++) {\n      for (let c = topStart.col; c <= bottomEnd.col; c++) {\n        const breakIteration = callback(r, c);\n        if (breakIteration === false) {\n          return;\n        }\n      }\n    }\n  }\n\n  /**\n   * Clones your `CellRange` instance.\n   *\n   * @returns {CellRange}\n   */\n  clone() {\n    return new CellRange(this.highlight, this.from, this.to, _classPrivateFieldGet(this, _isRtl));\n  }\n\n  /**\n   * Converts your `CellRange` instance into an object literal with the following properties:\n   *\n   * - `from`\n   *    - `row`\n   *    - `col`\n   * - `to`\n   *    - `row`\n   *    - `col`\n   *\n   * @returns {{from: {row: number, col: number}, to: {row: number, col: number}}} An object literal with `from` and `to` properties.\n   */\n  toObject() {\n    return {\n      from: this.from.toObject(),\n      to: this.to.toObject()\n    };\n  }\n\n  /**\n   * Creates and returns a new instance of the `CellCoords` class.\n   *\n   * The new `CellCoords` instance automatically inherits the LTR/RTL flag\n   * from your `CellRange` instance.\n   *\n   * @private\n   * @param {number} row A row index.\n   * @param {number} column A column index.\n   * @returns {CellCoords}\n   */\n  _createCellCoords(row, column) {\n    return new CellCoords(row, column, _classPrivateFieldGet(this, _isRtl));\n  }\n}\nexport default CellRange;", "'use strict';\nvar $ = require('../internals/export');\nvar toObject = require('../internals/to-object');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\n// `Array.prototype.at` method\n// https://tc39.es/ecma262/#sec-array.prototype.at\n$({ target: 'Array', proto: true }, {\n  at: function at(index) {\n    var O = toObject(this);\n    var len = lengthOfArrayLike(O);\n    var relativeIndex = toIntegerOrInfinity(index);\n    var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;\n    return (k < 0 || k >= len) ? undefined : O[k];\n  }\n});\n\naddToUnscopables('at');\n", "/**\n * Render type calculation calculates how many DOM nodes should be created and where placed\n * based on `startRow` and `endRow` properties.\n *\n * @type {number}\n */\nexport const RENDER_TYPE = 1;\n/**\n * Fully visible type calculation calculates rows that are fully visible in the viewport.\n * This type of calculation is used in scrolling by arrow keys navigation.\n *\n * @type {number}\n */\nexport const FULLY_VISIBLE_TYPE = 2;\n/**\n * Partially visible type calculation calculates rows that are fully and partially visible in\n * the viewport. This type of calculation is used to check `endRow` (or `startRow`) with properties\n * calculated in render calculator. If checking met the criteria slow render is\n * performed (which render calculator with new data).\n *\n * @type {number}\n */\nexport const PARTIALLY_VISIBLE_TYPE = 3;", "import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.at.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { RENDER_TYPE, FULLY_VISIBLE_TYPE } from \"./constants.mjs\";\n/**\n * @typedef {object} ViewportColumnsCalculatorOptions\n * @property {number} viewportWidth Width of the viewport.\n * @property {number} scrollOffset Current horizontal scroll position of the viewport.\n * @property {number} totalColumns Total number of columns.\n * @property {Function} columnWidthFn Function that returns the width of the column at a given index (in px).\n * @property {Function} overrideFn Function that changes calculated this.startRow, this.endRow (used by\n *   MergeCells plugin).\n * @property {string} calculationType String which describes types of calculation which will be performed.\n * @property {string} inlineStartOffset Inline-start offset of the parent container.\n * @property {string} stretchMode Stretch mode 'all' or 'last'.\n * @property {Function} stretchingColumnWidthFn Function that returns the new width of the stretched column.\n */\n/**\n * Calculates indexes of columns to render OR columns that are visible.\n * To redo the calculation, you need to create a new calculator.\n *\n * @class ViewportColumnsCalculator\n */\nvar _totalTargetWidth = /*#__PURE__*/new WeakMap();\nvar _options = /*#__PURE__*/new WeakMap();\nclass ViewportColumnsCalculator {\n  /**\n   * Default column width.\n   *\n   * @type {number}\n   */\n  static get DEFAULT_WIDTH() {\n    return 50;\n  }\n\n  /**\n   * Number of rendered/visible columns.\n   *\n   * @type {number}\n   */\n\n  /**\n   * @param {ViewportColumnsCalculatorOptions} options Object with all options specified for column viewport calculation.\n   */\n  constructor(options) {\n    _defineProperty(this, \"count\", 0);\n    /**\n     * Index of the first rendered/visible column (can be overwritten using overrideFn).\n     *\n     * @type {number|null}\n     */\n    _defineProperty(this, \"startColumn\", null);\n    /**\n     * Index of the last rendered/visible column (can be overwritten using overrideFn).\n     *\n     * @type {null}\n     */\n    _defineProperty(this, \"endColumn\", null);\n    /**\n     * Position of the first rendered/visible column (in px).\n     *\n     * @type {number|null}\n     */\n    _defineProperty(this, \"startPosition\", null);\n    /**\n     * Determines if the viewport is visible in the trimming container.\n     *\n     * @type {boolean}\n     */\n    _defineProperty(this, \"isVisibleInTrimmingContainer\", false);\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"stretchAllRatio\", 0);\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"stretchLastWidth\", 0);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _totalTargetWidth, {\n      writable: true,\n      value: 0\n    });\n    /**\n     * @type {boolean}\n     */\n    _defineProperty(this, \"needVerifyLastColumnWidth\", true);\n    /**\n     * @type {number[]}\n     */\n    _defineProperty(this, \"stretchAllColumnsWidth\", []);\n    /**\n     * The calculator options.\n     *\n     * @type {ViewportColumnsCalculatorOptions}\n     */\n    _classPrivateFieldInitSpec(this, _options, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _options, options);\n    if (typeof _classPrivateFieldGet(this, _options).stretchingColumnWidthFn !== 'function') {\n      _classPrivateFieldGet(this, _options).stretchingColumnWidthFn = width => width;\n    }\n    this.calculate();\n  }\n\n  /**\n   * Calculates viewport.\n   */\n  calculate() {\n    const {\n      calculationType,\n      overrideFn,\n      scrollOffset,\n      totalColumns,\n      viewportWidth\n    } = _classPrivateFieldGet(this, _options);\n    const zeroBasedScrollOffset = Math.max(_classPrivateFieldGet(this, _options).scrollOffset, 0);\n    // +1 pixel for row header width compensation for horizontal scroll > 0\n    const compensatedViewportWidth = zeroBasedScrollOffset > 0 ? viewportWidth + 1 : viewportWidth;\n    let sum = 0;\n    let needReverse = true;\n    const startPositions = [];\n    let columnWidth;\n    let firstVisibleColumnWidth = 0;\n    let lastVisibleColumnWidth = 0;\n    for (let i = 0; i < totalColumns; i++) {\n      columnWidth = this._getColumnWidth(i);\n      if (sum <= zeroBasedScrollOffset && calculationType !== FULLY_VISIBLE_TYPE) {\n        this.startColumn = i;\n        firstVisibleColumnWidth = columnWidth;\n      }\n      if (sum >= zeroBasedScrollOffset && sum + (calculationType === FULLY_VISIBLE_TYPE ? columnWidth : 0) <= zeroBasedScrollOffset + compensatedViewportWidth) {\n        if (this.startColumn === null || this.startColumn === undefined) {\n          this.startColumn = i;\n          firstVisibleColumnWidth = columnWidth;\n        }\n        this.endColumn = i;\n      }\n      startPositions.push(sum);\n      sum += columnWidth;\n      lastVisibleColumnWidth = columnWidth;\n      if (calculationType !== FULLY_VISIBLE_TYPE) {\n        this.endColumn = i;\n      }\n      if (sum >= zeroBasedScrollOffset + viewportWidth) {\n        needReverse = false;\n        break;\n      }\n    }\n    const mostRightScrollOffset = scrollOffset + viewportWidth - compensatedViewportWidth;\n    const inlineEndColumnOffset = calculationType === FULLY_VISIBLE_TYPE ? 0 : lastVisibleColumnWidth;\n    const inlineStartColumnOffset = calculationType === FULLY_VISIBLE_TYPE ? firstVisibleColumnWidth : 0;\n    if (\n    // the table is to the left of the viewport\n    mostRightScrollOffset < -1 * _classPrivateFieldGet(this, _options).inlineStartOffset || scrollOffset > startPositions.at(-1) + inlineEndColumnOffset ||\n    // the table is to the right of the viewport\n    -1 * _classPrivateFieldGet(this, _options).scrollOffset - _classPrivateFieldGet(this, _options).viewportWidth > -1 * inlineStartColumnOffset) {\n      this.isVisibleInTrimmingContainer = false;\n    } else {\n      this.isVisibleInTrimmingContainer = true;\n    }\n    if (this.endColumn === totalColumns - 1 && needReverse) {\n      this.startColumn = this.endColumn;\n      while (this.startColumn > 0) {\n        const viewportSum = startPositions[this.endColumn] + columnWidth - startPositions[this.startColumn - 1];\n        if (viewportSum <= viewportWidth || calculationType !== FULLY_VISIBLE_TYPE) {\n          this.startColumn -= 1;\n        }\n        if (viewportSum > viewportWidth) {\n          break;\n        }\n      }\n    }\n    if (calculationType === RENDER_TYPE && this.startColumn !== null && overrideFn) {\n      overrideFn(this);\n    }\n    this.startPosition = startPositions[this.startColumn];\n    if (this.startPosition === undefined) {\n      this.startPosition = null;\n    }\n\n    // If totalColumns exceeded its total columns size set endColumn to the latest item\n    if (totalColumns < this.endColumn) {\n      this.endColumn = totalColumns - 1;\n    }\n    if (this.startColumn !== null) {\n      this.count = this.endColumn - this.startColumn + 1;\n    }\n  }\n\n  /**\n   * Recalculate columns stretching.\n   *\n   * @param {number} totalWidth The total width of the table.\n   */\n  refreshStretching(totalWidth) {\n    if (_classPrivateFieldGet(this, _options).stretchMode === 'none') {\n      return;\n    }\n    let totalColumnsWidth = totalWidth;\n    _classPrivateFieldSet(this, _totalTargetWidth, totalColumnsWidth);\n    const totalColumns = _classPrivateFieldGet(this, _options).totalColumns;\n    let sumAll = 0;\n    for (let i = 0; i < totalColumns; i++) {\n      const columnWidth = this._getColumnWidth(i);\n      const permanentColumnWidth = _classPrivateFieldGet(this, _options).stretchingColumnWidthFn(undefined, i);\n      if (typeof permanentColumnWidth === 'number') {\n        totalColumnsWidth -= permanentColumnWidth;\n      } else {\n        sumAll += columnWidth;\n      }\n    }\n    const remainingSize = totalColumnsWidth - sumAll;\n    if (_classPrivateFieldGet(this, _options).stretchMode === 'all' && remainingSize > 0) {\n      this.stretchAllRatio = totalColumnsWidth / sumAll;\n      this.stretchAllColumnsWidth = [];\n      this.needVerifyLastColumnWidth = true;\n    } else if (_classPrivateFieldGet(this, _options).stretchMode === 'last' && totalColumnsWidth !== Infinity) {\n      const columnWidth = this._getColumnWidth(totalColumns - 1);\n      const lastColumnWidth = remainingSize + columnWidth;\n      this.stretchLastWidth = lastColumnWidth >= 0 ? lastColumnWidth : columnWidth;\n    }\n  }\n\n  /**\n   * Get stretched column width based on stretchH (all or last) setting passed in handsontable instance.\n   *\n   * @param {number} column The visual column index.\n   * @param {number} baseWidth The default column width.\n   * @returns {number|null}\n   */\n  getStretchedColumnWidth(column, baseWidth) {\n    let result = null;\n    if (_classPrivateFieldGet(this, _options).stretchMode === 'all' && this.stretchAllRatio !== 0) {\n      result = this._getStretchedAllColumnWidth(column, baseWidth);\n    } else if (_classPrivateFieldGet(this, _options).stretchMode === 'last' && this.stretchLastWidth !== 0) {\n      result = this._getStretchedLastColumnWidth(column);\n    }\n    return result;\n  }\n\n  /**\n   * @param {number} column The visual column index.\n   * @param {number} baseWidth The default column width.\n   * @returns {number}\n   * @private\n   */\n  _getStretchedAllColumnWidth(column, baseWidth) {\n    let sumRatioWidth = 0;\n    const totalColumns = _classPrivateFieldGet(this, _options).totalColumns;\n    if (!this.stretchAllColumnsWidth[column]) {\n      const stretchedWidth = Math.round(baseWidth * this.stretchAllRatio);\n      const newStretchedWidth = _classPrivateFieldGet(this, _options).stretchingColumnWidthFn(stretchedWidth, column);\n      if (newStretchedWidth === undefined) {\n        this.stretchAllColumnsWidth[column] = stretchedWidth;\n      } else {\n        this.stretchAllColumnsWidth[column] = isNaN(newStretchedWidth) ? this._getColumnWidth(column) : newStretchedWidth;\n      }\n    }\n    if (this.stretchAllColumnsWidth.length === totalColumns && this.needVerifyLastColumnWidth) {\n      this.needVerifyLastColumnWidth = false;\n      for (let i = 0; i < this.stretchAllColumnsWidth.length; i++) {\n        sumRatioWidth += this.stretchAllColumnsWidth[i];\n      }\n      if (sumRatioWidth !== _classPrivateFieldGet(this, _totalTargetWidth)) {\n        this.stretchAllColumnsWidth[this.stretchAllColumnsWidth.length - 1] += _classPrivateFieldGet(this, _totalTargetWidth) - sumRatioWidth;\n      }\n    }\n    return this.stretchAllColumnsWidth[column];\n  }\n\n  /**\n   * @param {number} column The visual column index.\n   * @returns {number|null}\n   * @private\n   */\n  _getStretchedLastColumnWidth(column) {\n    const totalColumns = _classPrivateFieldGet(this, _options).totalColumns;\n    if (column === totalColumns - 1) {\n      return this.stretchLastWidth;\n    }\n    return null;\n  }\n\n  /**\n   * @param {number} column The visual column index.\n   * @returns {number}\n   * @private\n   */\n  _getColumnWidth(column) {\n    let width = _classPrivateFieldGet(this, _options).columnWidthFn(column);\n    if (isNaN(width)) {\n      width = ViewportColumnsCalculator.DEFAULT_WIDTH;\n    }\n    return width;\n  }\n}\nexport default ViewportColumnsCalculator;", "import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.at.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { RENDER_TYPE, FULLY_VISIBLE_TYPE } from \"./constants.mjs\";\n/**\n * @typedef {object} ViewportRowsCalculatorOptions\n * @property {number} viewportHeight Height of the viewport.\n * @property {number} scrollOffset Current vertical scroll position of the viewport.\n * @property {number} totalRows Total number of rows.\n * @property {Function} rowHeightFn Function that returns the height of the row at a given index (in px).\n * @property {Function} overrideFn Function that changes calculated this.startRow, this.endRow (used by MergeCells plugin).\n * @property {string} calculationType String which describes types of calculation which will be performed.\n * @property {number} horizontalScrollbarHeight The scrollbar height.\n */\n/**\n * Calculates indexes of rows to render OR rows that are visible.\n * To redo the calculation, you need to create a new calculator.\n *\n * @class ViewportRowsCalculator\n */\nvar _options = /*#__PURE__*/new WeakMap();\nclass ViewportRowsCalculator {\n  /**\n   * Default row height.\n   *\n   * @type {number}\n   */\n  static get DEFAULT_HEIGHT() {\n    return 23;\n  }\n\n  /**\n   * Number of rendered/visible rows.\n   *\n   * @type {number}\n   */\n\n  /**\n   * @param {ViewportRowsCalculatorOptions} options Object with all options specified for row viewport calculation.\n   */\n  constructor(options) {\n    _defineProperty(this, \"count\", 0);\n    /**\n     * Index of the first rendered/visible row (can be overwritten using overrideFn).\n     *\n     * @type {number|null}\n     */\n    _defineProperty(this, \"startRow\", null);\n    /**\n     * Index of the last rendered/visible row (can be overwritten using overrideFn).\n     *\n     * @type {null}\n     */\n    _defineProperty(this, \"endRow\", null);\n    /**\n     * Position of the first rendered/visible row (in px).\n     *\n     * @type {number|null}\n     */\n    _defineProperty(this, \"startPosition\", null);\n    /**\n     * Determines if the viewport is visible in the trimming container.\n     *\n     * @type {boolean}\n     */\n    _defineProperty(this, \"isVisibleInTrimmingContainer\", false);\n    /**\n     * The calculator options.\n     *\n     * @type {ViewportRowsCalculatorOptions}\n     */\n    _classPrivateFieldInitSpec(this, _options, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _options, options);\n    this.calculate();\n  }\n\n  /**\n   * Calculates viewport.\n   */\n  calculate() {\n    const {\n      calculationType,\n      overrideFn,\n      rowHeightFn,\n      scrollOffset,\n      totalRows,\n      viewportHeight\n    } = _classPrivateFieldGet(this, _options);\n    const zeroBasedScrollOffset = Math.max(_classPrivateFieldGet(this, _options).scrollOffset, 0);\n    const horizontalScrollbarHeight = _classPrivateFieldGet(this, _options).horizontalScrollbarHeight || 0;\n    let sum = 0;\n    let needReverse = true;\n    const startPositions = [];\n    let rowHeight;\n    let firstVisibleRowHeight = 0;\n    let lastVisibleRowHeight = 0;\n\n    // Calculate the number (start and end index) of rows needed\n    for (let i = 0; i < totalRows; i++) {\n      rowHeight = rowHeightFn(i);\n      if (isNaN(rowHeight)) {\n        rowHeight = ViewportRowsCalculator.DEFAULT_HEIGHT;\n      }\n      if (sum <= zeroBasedScrollOffset && calculationType !== FULLY_VISIBLE_TYPE) {\n        this.startRow = i;\n        firstVisibleRowHeight = rowHeight;\n      }\n      if (sum >= zeroBasedScrollOffset && sum + (calculationType === FULLY_VISIBLE_TYPE ? rowHeight : 0) <= zeroBasedScrollOffset + viewportHeight - horizontalScrollbarHeight) {\n        // eslint-disable-line max-len\n        if (this.startRow === null) {\n          this.startRow = i;\n          firstVisibleRowHeight = rowHeight;\n        }\n        this.endRow = i;\n      }\n      startPositions.push(sum);\n      sum += rowHeight;\n      lastVisibleRowHeight = rowHeight;\n      if (calculationType !== FULLY_VISIBLE_TYPE) {\n        this.endRow = i;\n      }\n      if (sum >= zeroBasedScrollOffset + viewportHeight - horizontalScrollbarHeight) {\n        needReverse = false;\n        break;\n      }\n    }\n    const mostBottomScrollOffset = scrollOffset + viewportHeight - horizontalScrollbarHeight;\n    const topRowOffset = calculationType === FULLY_VISIBLE_TYPE ? firstVisibleRowHeight : 0;\n    const bottomRowOffset = calculationType === FULLY_VISIBLE_TYPE ? 0 : lastVisibleRowHeight;\n    if (mostBottomScrollOffset < topRowOffset || scrollOffset > startPositions.at(-1) + bottomRowOffset) {\n      this.isVisibleInTrimmingContainer = false;\n    } else {\n      this.isVisibleInTrimmingContainer = true;\n    }\n\n    // If the estimation has reached the last row and there is still some space available in the viewport,\n    // we need to render in reverse in order to fill the whole viewport with rows\n    if (this.endRow === totalRows - 1 && needReverse) {\n      this.startRow = this.endRow;\n      while (this.startRow > 0) {\n        // rowHeight is the height of the last row\n        const viewportSum = startPositions[this.endRow] + rowHeight - startPositions[this.startRow - 1];\n        if (viewportSum <= viewportHeight - horizontalScrollbarHeight || calculationType !== FULLY_VISIBLE_TYPE) {\n          this.startRow -= 1;\n        }\n        if (viewportSum >= viewportHeight - horizontalScrollbarHeight) {\n          break;\n        }\n      }\n    }\n    if (calculationType === RENDER_TYPE && this.startRow !== null && overrideFn) {\n      overrideFn(this);\n    }\n    this.startPosition = startPositions[this.startRow];\n    if (this.startPosition === undefined) {\n      this.startPosition = null;\n    }\n\n    // If totalRows exceeded its total rows size set endRow to the latest item\n    if (totalRows < this.endRow) {\n      this.endRow = totalRows - 1;\n    }\n    if (this.startRow !== null) {\n      this.count = this.endRow - this.startRow + 1;\n    }\n  }\n}\nexport default ViewportRowsCalculator;", "/* eslint-disable no-restricted-globals */\n/**\n * Polyfill for requestAnimationFrame.\n *\n * @param {Function} callback The function to call when it's time.\n * @returns {number}\n */\nexport function requestAnimationFrame(callback) {\n  return window.requestAnimationFrame(callback);\n}\n\n/**\n * Polyfill for cancelAnimationFrame.\n *\n * @param {number} id The request Id, generated by `requestAnimationFrame`.\n */\nexport function cancelAnimationFrame(id) {\n  window.cancelAnimationFrame(id);\n}\n\n/**\n * @returns {boolean}\n */\nexport function isTouchSupported() {\n  return 'ontouchstart' in window;\n}\nlet comparisonFunction;\n\n/**\n * Get string comparison function for sorting purposes. It supports multilingual string comparison base on Internationalization API.\n *\n * @param {string} [language] The language code used for phrases sorting.\n * @param {object} [options] Additional options for sort comparator.\n * @returns {*}\n */\nexport function getComparisonFunction(language) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (comparisonFunction) {\n    return comparisonFunction;\n  }\n  if (typeof Intl === 'object') {\n    comparisonFunction = new Intl.Collator(language, options).compare;\n  } else if (typeof String.prototype.localeCompare === 'function') {\n    comparisonFunction = (a, b) => `${a}`.localeCompare(b);\n  } else {\n    comparisonFunction = (a, b) => {\n      if (a === b) {\n        return 0;\n      }\n      return a > b ? -1 : 1;\n    };\n  }\n  return comparisonFunction;\n}", "import \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { closestDown, hasClass, isChildOf, getParent } from \"../../../helpers/dom/element.mjs\";\nimport { partial } from \"../../../helpers/function.mjs\";\nimport { isTouchSupported } from \"../../../helpers/feature.mjs\";\nimport { isMobileBrowser, isChromeWebKit, isFirefoxWebKit, isIOS } from \"../../../helpers/browser.mjs\";\nimport { isDefined } from \"../../../helpers/mixed.mjs\";\n/**\n * @class Event\n */\nvar _wtSettings = /*#__PURE__*/new WeakMap();\nvar _domBindings = /*#__PURE__*/new WeakMap();\nvar _wtTable = /*#__PURE__*/new WeakMap();\nvar _selectionManager = /*#__PURE__*/new WeakMap();\nvar _parent = /*#__PURE__*/new WeakMap();\nvar _eventManager = /*#__PURE__*/new WeakMap();\nvar _facadeGetter = /*#__PURE__*/new WeakMap();\nvar _selectedCellBeforeTouchEnd = /*#__PURE__*/new WeakMap();\nvar _dblClickTimeout = /*#__PURE__*/new WeakMap();\nvar _dblClickOrigin = /*#__PURE__*/new WeakMap();\nclass Event {\n  /**\n   * @param {FacadeGetter} facadeGetter Gets an instance facade.\n   * @param {DomBindings} domBindings Bindings into dom.\n   * @param {Settings} wtSettings The walkontable settings.\n   * @param {EventManager} eventManager The walkontable event manager.\n   * @param {Table} wtTable The table.\n   * @param {SelectionManager} selectionManager Selections.\n   * @param {Event} [parent=null] The main Event instance.\n   */\n  constructor(facadeGetter, domBindings, wtSettings, eventManager, wtTable, selectionManager) {\n    let parent = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n    _classPrivateFieldInitSpec(this, _wtSettings, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _domBindings, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _wtTable, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _selectionManager, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _parent, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * Instance of {@link EventManager}.\n     *\n     * @type {EventManager}\n     */\n    _classPrivateFieldInitSpec(this, _eventManager, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * Should be use only for passing face called external origin methods, like registered event listeners.\n     * It provides backward compatibility by getting instance facade.\n     *\n     * @todo Consider about removing this from Event class, because it make relationship into facade (implicit circular\n     *   dependency).\n     * @todo Con. Maybe passing listener caller as an ioc from faced resolves this issue. To rethink later.\n     *\n     * @type {FacadeGetter}\n     */\n    _classPrivateFieldInitSpec(this, _facadeGetter, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _selectedCellBeforeTouchEnd, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * @type {number[]}\n     */\n    _classPrivateFieldInitSpec(this, _dblClickTimeout, {\n      writable: true,\n      value: [null, null]\n    });\n    /**\n     * @type {number[]}\n     */\n    _classPrivateFieldInitSpec(this, _dblClickOrigin, {\n      writable: true,\n      value: [null, null]\n    });\n    _classPrivateFieldSet(this, _wtSettings, wtSettings);\n    _classPrivateFieldSet(this, _domBindings, domBindings);\n    _classPrivateFieldSet(this, _wtTable, wtTable);\n    _classPrivateFieldSet(this, _selectionManager, selectionManager);\n    _classPrivateFieldSet(this, _parent, parent);\n    _classPrivateFieldSet(this, _eventManager, eventManager);\n    _classPrivateFieldSet(this, _facadeGetter, facadeGetter);\n    this.registerEvents();\n  }\n\n  /**\n   * Adds listeners for mouse and touch events.\n   *\n   * @private\n   */\n  registerEvents() {\n    _classPrivateFieldGet(this, _eventManager).addEventListener(_classPrivateFieldGet(this, _wtTable).holder, 'contextmenu', event => this.onContextMenu(event));\n    _classPrivateFieldGet(this, _eventManager).addEventListener(_classPrivateFieldGet(this, _wtTable).TABLE, 'mouseover', event => this.onMouseOver(event));\n    _classPrivateFieldGet(this, _eventManager).addEventListener(_classPrivateFieldGet(this, _wtTable).TABLE, 'mouseout', event => this.onMouseOut(event));\n    const initTouchEvents = () => {\n      _classPrivateFieldGet(this, _eventManager).addEventListener(_classPrivateFieldGet(this, _wtTable).holder, 'touchstart', event => this.onTouchStart(event));\n      _classPrivateFieldGet(this, _eventManager).addEventListener(_classPrivateFieldGet(this, _wtTable).holder, 'touchend', event => this.onTouchEnd(event));\n      if (!this.momentumScrolling) {\n        this.momentumScrolling = {};\n      }\n      _classPrivateFieldGet(this, _eventManager).addEventListener(_classPrivateFieldGet(this, _wtTable).holder, 'scroll', () => {\n        clearTimeout(this.momentumScrolling._timeout);\n        if (!this.momentumScrolling.ongoing) {\n          _classPrivateFieldGet(this, _wtSettings).getSetting('onBeforeTouchScroll');\n        }\n        this.momentumScrolling.ongoing = true;\n        this.momentumScrolling._timeout = setTimeout(() => {\n          if (!this.touchApplied) {\n            this.momentumScrolling.ongoing = false;\n            _classPrivateFieldGet(this, _wtSettings).getSetting('onAfterMomentumScroll');\n          }\n        }, 200);\n      });\n    };\n    const initMouseEvents = () => {\n      _classPrivateFieldGet(this, _eventManager).addEventListener(_classPrivateFieldGet(this, _wtTable).holder, 'mouseup', event => this.onMouseUp(event));\n      _classPrivateFieldGet(this, _eventManager).addEventListener(_classPrivateFieldGet(this, _wtTable).holder, 'mousedown', event => this.onMouseDown(event));\n    };\n    if (isMobileBrowser()) {\n      initTouchEvents();\n    } else {\n      // PC like devices which support both methods (touchscreen and ability to plug-in mouse).\n      if (isTouchSupported()) {\n        initTouchEvents();\n      }\n      initMouseEvents();\n    }\n  }\n\n  /**\n   * Checks if an element is already selected.\n   *\n   * @private\n   * @param {Element} touchTarget An element to check.\n   * @returns {boolean}\n   */\n  selectedCellWasTouched(touchTarget) {\n    const cellUnderFinger = this.parentCell(touchTarget);\n    const coordsOfCellUnderFinger = cellUnderFinger.coords;\n    if (_classPrivateFieldGet(this, _selectedCellBeforeTouchEnd) && coordsOfCellUnderFinger) {\n      const [rowTouched, rowSelected] = [coordsOfCellUnderFinger.row, _classPrivateFieldGet(this, _selectedCellBeforeTouchEnd).from.row];\n      const [colTouched, colSelected] = [coordsOfCellUnderFinger.col, _classPrivateFieldGet(this, _selectedCellBeforeTouchEnd).from.col];\n      return rowTouched === rowSelected && colTouched === colSelected;\n    }\n    return false;\n  }\n\n  /**\n   * Gets closest TD or TH element.\n   *\n   * @private\n   * @param {Element} elem An element from the traversing starts.\n   * @returns {object} Contains coordinates and reference to TD or TH if it exists. Otherwise it's empty object.\n   */\n  parentCell(elem) {\n    const cell = {};\n    const TABLE = _classPrivateFieldGet(this, _wtTable).TABLE;\n    const TD = closestDown(elem, ['TD', 'TH'], TABLE);\n    if (TD) {\n      cell.coords = _classPrivateFieldGet(this, _wtTable).getCoords(TD);\n      cell.TD = TD;\n    } else if (hasClass(elem, 'wtBorder') && hasClass(elem, 'current')) {\n      cell.coords = _classPrivateFieldGet(this, _selectionManager).getFocusSelection().cellRange.highlight;\n      cell.TD = _classPrivateFieldGet(this, _wtTable).getCell(cell.coords);\n    } else if (hasClass(elem, 'wtBorder') && hasClass(elem, 'area')) {\n      if (_classPrivateFieldGet(this, _selectionManager).getAreaSelection().cellRange) {\n        cell.coords = _classPrivateFieldGet(this, _selectionManager).getAreaSelection().cellRange.to;\n        cell.TD = _classPrivateFieldGet(this, _wtTable).getCell(cell.coords);\n      }\n    }\n    return cell;\n  }\n\n  /**\n   * OnMouseDown callback.\n   *\n   * @private\n   * @param {MouseEvent} event The mouse event object.\n   */\n  onMouseDown(event) {\n    const activeElement = _classPrivateFieldGet(this, _domBindings).rootDocument.activeElement;\n    const getParentNode = partial(getParent, event.target);\n    const realTarget = event.target;\n\n    // ignore non-TD focusable elements from mouse down processing\n    // (https://github.com/handsontable/handsontable/issues/3555)\n    if (!['TD', 'TH'].includes(activeElement.nodeName) && (realTarget === activeElement || getParentNode(0) === activeElement || getParentNode(1) === activeElement)) {\n      return;\n    }\n    const cell = this.parentCell(realTarget);\n    if (hasClass(realTarget, 'corner')) {\n      _classPrivateFieldGet(this, _wtSettings).getSetting('onCellCornerMouseDown', event, realTarget);\n    } else if (cell.TD && _classPrivateFieldGet(this, _wtSettings).has('onCellMouseDown')) {\n      this.callListener('onCellMouseDown', event, cell.coords, cell.TD);\n    }\n\n    // doubleclick reacts only for left mouse button or from touch events\n    if ((event.button === 0 || this.touchApplied) && cell.TD) {\n      _classPrivateFieldGet(this, _dblClickOrigin)[0] = cell.TD;\n      clearTimeout(_classPrivateFieldGet(this, _dblClickTimeout)[0]);\n      _classPrivateFieldGet(this, _dblClickTimeout)[0] = setTimeout(() => {\n        _classPrivateFieldGet(this, _dblClickOrigin)[0] = null;\n      }, 1000);\n    }\n  }\n\n  /**\n   * OnContextMenu callback.\n   *\n   * @private\n   * @param {MouseEvent} event The mouse event object.\n   */\n  onContextMenu(event) {\n    if (_classPrivateFieldGet(this, _wtSettings).has('onCellContextMenu')) {\n      const cell = this.parentCell(event.target);\n      if (cell.TD) {\n        this.callListener('onCellContextMenu', event, cell.coords, cell.TD);\n      }\n    }\n  }\n\n  /**\n   * OnMouseOver callback.\n   *\n   * @private\n   * @param {MouseEvent} event The mouse event object.\n   */\n  onMouseOver(event) {\n    if (!_classPrivateFieldGet(this, _wtSettings).has('onCellMouseOver')) {\n      return;\n    }\n    const table = _classPrivateFieldGet(this, _wtTable).TABLE;\n    const td = closestDown(event.target, ['TD', 'TH'], table);\n    const parent = _classPrivateFieldGet(this, _parent) || this;\n    if (td && td !== parent.lastMouseOver && isChildOf(td, table)) {\n      parent.lastMouseOver = td;\n      this.callListener('onCellMouseOver', event, _classPrivateFieldGet(this, _wtTable).getCoords(td), td);\n    }\n  }\n\n  /**\n   * OnMouseOut callback.\n   *\n   * @private\n   * @param {MouseEvent} event The mouse event object.\n   */\n  onMouseOut(event) {\n    if (!_classPrivateFieldGet(this, _wtSettings).has('onCellMouseOut')) {\n      return;\n    }\n    const table = _classPrivateFieldGet(this, _wtTable).TABLE;\n    const lastTD = closestDown(event.target, ['TD', 'TH'], table);\n    const nextTD = closestDown(event.relatedTarget, ['TD', 'TH'], table);\n    const parent = _classPrivateFieldGet(this, _parent) || this;\n    if (lastTD && lastTD !== nextTD && isChildOf(lastTD, table)) {\n      this.callListener('onCellMouseOut', event, _classPrivateFieldGet(this, _wtTable).getCoords(lastTD), lastTD);\n      if (nextTD === null) {\n        parent.lastMouseOver = null;\n      }\n    }\n  }\n\n  /**\n   * OnMouseUp callback.\n   *\n   * @private\n   * @param {MouseEvent} event The mouse event object.\n   */\n  onMouseUp(event) {\n    const cell = this.parentCell(event.target);\n    if (cell.TD && _classPrivateFieldGet(this, _wtSettings).has('onCellMouseUp')) {\n      this.callListener('onCellMouseUp', event, cell.coords, cell.TD);\n    }\n\n    // if not left mouse button, and the origin event is not comes from touch\n    if (event.button !== 0 && !this.touchApplied) {\n      return;\n    }\n    if (cell.TD === _classPrivateFieldGet(this, _dblClickOrigin)[0] && cell.TD === _classPrivateFieldGet(this, _dblClickOrigin)[1]) {\n      if (hasClass(event.target, 'corner')) {\n        this.callListener('onCellCornerDblClick', event, cell.coords, cell.TD);\n      } else {\n        this.callListener('onCellDblClick', event, cell.coords, cell.TD);\n      }\n      _classPrivateFieldGet(this, _dblClickOrigin)[0] = null;\n      _classPrivateFieldGet(this, _dblClickOrigin)[1] = null;\n    } else if (cell.TD === _classPrivateFieldGet(this, _dblClickOrigin)[0]) {\n      _classPrivateFieldGet(this, _dblClickOrigin)[1] = cell.TD;\n      clearTimeout(_classPrivateFieldGet(this, _dblClickTimeout)[1]);\n      _classPrivateFieldGet(this, _dblClickTimeout)[1] = setTimeout(() => {\n        _classPrivateFieldGet(this, _dblClickOrigin)[1] = null;\n      }, 500);\n    }\n  }\n\n  /**\n   * OnTouchStart callback. Simulates mousedown event.\n   *\n   * @private\n   * @param {MouseEvent} event The mouse event object.\n   */\n  onTouchStart(event) {\n    _classPrivateFieldSet(this, _selectedCellBeforeTouchEnd, _classPrivateFieldGet(this, _selectionManager).getFocusSelection().cellRange);\n    this.touchApplied = true;\n    this.onMouseDown(event);\n  }\n\n  /**\n   * OnTouchEnd callback. Simulates mouseup event.\n   *\n   * @private\n   * @param {MouseEvent} event The mouse event object.\n   */\n  onTouchEnd(event) {\n    var _this$parentCell;\n    const target = event.target;\n    const parentCellCoords = (_this$parentCell = this.parentCell(target)) === null || _this$parentCell === void 0 ? void 0 : _this$parentCell.coords;\n    const isCellsRange = isDefined(parentCellCoords) && parentCellCoords.row >= 0 && parentCellCoords.col >= 0;\n    const isEventCancelable = event.cancelable && isCellsRange && _classPrivateFieldGet(this, _wtSettings).getSetting('isDataViewInstance');\n\n    // To prevent accidental redirects or other actions that the interactive elements (e.q \"A\" link) do\n    // while the cell is highlighted, all touch events that are triggered on different cells are\n    // \"preventDefault\"'ed. The user can interact with the element (e.q. click on the link that opens\n    // a new page) only when the same cell was previously selected (see related PR #7980).\n    if (isEventCancelable) {\n      const interactiveElements = ['A', 'BUTTON', 'INPUT'];\n\n      // For browsers that use the WebKit as an engine (excluding Safari), there is a bug. The prevent\n      // default has to be called all the time. Otherwise, the second tap won't be triggered (probably\n      // caused by the native ~300ms delay - https://webkit.org/blog/5610/more-responsive-tapping-on-ios/).\n      // To make the interactive elements work, the event target element has to be check. If the element\n      // matches the allow-list, the event is not prevented.\n      if (isIOS() && (isChromeWebKit() || isFirefoxWebKit()) && this.selectedCellWasTouched(target) && !interactiveElements.includes(target.tagName)) {\n        event.preventDefault();\n      } else if (!this.selectedCellWasTouched(target)) {\n        // For other browsers, prevent default is fired only for the first tap and only when the previous\n        // highlighted cell was different.\n        event.preventDefault();\n      }\n    }\n    this.onMouseUp(event);\n    this.touchApplied = false;\n  }\n\n  /**\n   * Call listener with backward compatibility.\n   *\n   * @private\n   * @param {string} name Name of listener.\n   * @param {MouseEvent} event The event object.\n   * @param {CellCoords} coords Coordinates.\n   * @param {HTMLElement} target Event target.\n   */\n  callListener(name, event, coords, target) {\n    const listener = _classPrivateFieldGet(this, _wtSettings).getSettingPure(name);\n    if (listener) {\n      listener(event, coords, target, _classPrivateFieldGet(this, _facadeGetter).call(this));\n    }\n  }\n\n  /**\n   * Clears double-click timeouts and destroys the internal eventManager instance.\n   */\n  destroy() {\n    clearTimeout(_classPrivateFieldGet(this, _dblClickTimeout)[0]);\n    clearTimeout(_classPrivateFieldGet(this, _dblClickTimeout)[1]);\n    _classPrivateFieldGet(this, _eventManager).destroy();\n  }\n}\nexport default Event;", "import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/**\n * @class ColumnFilter\n */\nclass ColumnFilter {\n  /**\n   * @param {number} offset The scroll horizontal offset.\n   * @param {number} total The total width of the table.\n   * @param {number} countTH The number of rendered row headers.\n   */\n  constructor(offset, total, countTH) {\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"offset\", void 0);\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"total\", void 0);\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"countTH\", void 0);\n    this.offset = offset;\n    this.total = total;\n    this.countTH = countTH;\n  }\n\n  /**\n   * @param {number} index The visual column index.\n   * @returns {number}\n   */\n  offsetted(index) {\n    return index + this.offset;\n  }\n\n  /**\n   * @param {number} index The visual column index.\n   * @returns {number}\n   */\n  unOffsetted(index) {\n    return index - this.offset;\n  }\n\n  /**\n   * @param {number} index The visual column index.\n   * @returns {number}\n   */\n  renderedToSource(index) {\n    return this.offsetted(index);\n  }\n\n  /**\n   * @param {number} index The visual column index.\n   * @returns {number}\n   */\n  sourceToRendered(index) {\n    return this.unOffsetted(index);\n  }\n\n  /**\n   * @param {number} index The visual column index.\n   * @returns {number}\n   */\n  offsettedTH(index) {\n    return index - this.countTH;\n  }\n\n  /**\n   * @param {number} index The visual column index.\n   * @returns {number}\n   */\n  unOffsettedTH(index) {\n    return index + this.countTH;\n  }\n\n  /**\n   * @param {number} index The visual column index.\n   * @returns {number}\n   */\n  visibleRowHeadedColumnToSourceColumn(index) {\n    return this.renderedToSource(this.offsettedTH(index));\n  }\n\n  /**\n   * @param {number} index The visual column index.\n   * @returns {number}\n   */\n  sourceColumnToVisibleRowHeadedColumn(index) {\n    return this.unOffsettedTH(this.sourceToRendered(index));\n  }\n}\nexport default ColumnFilter;", "import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/**\n * @class RowFilter\n */\nclass RowFilter {\n  /**\n   * @param {number} offset The scroll vertical offset.\n   * @param {number} total The total height of the table.\n   * @param {number} countTH The number of rendered column headers.\n   */\n  constructor(offset, total, countTH) {\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"offset\", void 0);\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"total\", void 0);\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"countTH\", void 0);\n    this.offset = offset;\n    this.total = total;\n    this.countTH = countTH;\n  }\n\n  /**\n   * @param {number} index The visual row index.\n   * @returns {number}\n   */\n  offsetted(index) {\n    return index + this.offset;\n  }\n\n  /**\n   * @param {number} index The visual row index.\n   * @returns {number}\n   */\n  unOffsetted(index) {\n    return index - this.offset;\n  }\n\n  /**\n   * @param {number} index The visual row index.\n   * @returns {number}\n   */\n  renderedToSource(index) {\n    return this.offsetted(index);\n  }\n\n  /**\n   * @param {number} index The visual row index.\n   * @returns {number}\n   */\n  sourceToRendered(index) {\n    return this.unOffsetted(index);\n  }\n\n  /**\n   * @param {number} index The visual row index.\n   * @returns {number}\n   */\n  offsettedTH(index) {\n    return index - this.countTH;\n  }\n\n  /**\n   * @param {number} index The visual row index.\n   * @returns {number}\n   */\n  unOffsettedTH(index) {\n    return index + this.countTH;\n  }\n\n  /**\n   * @param {number} index The visual row index.\n   * @returns {number}\n   */\n  visibleColHeadedRowToSourceRow(index) {\n    return this.renderedToSource(this.offsettedTH(index));\n  }\n\n  /**\n   * @param {number} index The visual row index.\n   * @returns {number}\n   */\n  sourceRowToVisibleColHeadedRow(index) {\n    return this.unOffsettedTH(this.sourceToRendered(index));\n  }\n}\nexport default RowFilter;", "/**\n * Describes that ViewSizeSet instance doesn't share sizes with another\n * instance (root node can contain only one type of children nodes).\n *\n * @type {number}\n */\nexport const WORKING_SPACE_ALL = 0;\n/**\n * Describes that ViewSizeSet instance share sizes with another instance and\n * set working space for this instance to 'top' (root node can contain multiple\n * types of children and this instance will be occupied top space of the root node).\n *\n * @type {number}\n */\nexport const WORKING_SPACE_TOP = 1;\n/**\n * Describes that ViewSizeSet instance share sizes with another instance and\n * set working space for this instance to 'bottom' (root node can contain multiple\n * types of children and this instance will be occupied bottom space of the root node).\n *\n * @type {number}\n */\nexport const WORKING_SPACE_BOTTOM = 2;", "import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/**\n * Holder for current and next size (count of rendered and to render DOM elements) and offset.\n *\n * @class {ViewSize}\n */\nexport default class ViewSize {\n  constructor() {\n    /**\n     * Current size of the rendered DOM elements.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"currentSize\", 0);\n    /**\n     * Next size of the rendered DOM elements which should be fulfilled.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"nextSize\", 0);\n    /**\n     * Current offset.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"currentOffset\", 0);\n    /**\n     * Next offset.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"nextOffset\", 0);\n  }\n  /**\n   * Sets new size of the rendered DOM elements.\n   *\n   * @param {number} size The size.\n   */\n  setSize(size) {\n    this.currentSize = this.nextSize;\n    this.nextSize = size;\n  }\n\n  /**\n   * Sets new offset.\n   *\n   * @param {number} offset The offset.\n   */\n  setOffset(offset) {\n    this.currentOffset = this.nextOffset;\n    this.nextOffset = offset;\n  }\n}", "import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport ViewSize from \"./viewSize.mjs\";\nimport { WORKING_SPACE_ALL, WORKING_SPACE_TOP, WORKING_SPACE_BOTTOM } from \"./constants.mjs\";\n/**\n * The class is a source of the truth of information about the current and\n * next size of the rendered DOM elements and current and next offset of\n * the view. That information allows us to calculate diff between current\n * DOM order and this which should be rendered without touching the DOM API at all.\n *\n * Mostly the ViewSizeSet is created for each individual renderer. But in\n * the table, there is one case where this size information should be shared\n * between two different instances (different table renderers). This is a TR\n * element which can contain TH elements - managed by own renderer and\n * TD elements - managed by another renderer. To generate correct DOM order\n * for them it is required to connect these two instances by reference\n * through `sharedSize`.\n *\n * @class {ViewSizeSet}\n */\nexport default class ViewSizeSet {\n  constructor() {\n    /**\n     * Holder for current and next view size and offset.\n     *\n     * @type {ViewSize}\n     */\n    _defineProperty(this, \"size\", new ViewSize());\n    /**\n     * Defines if this instance shares its size with another instance. If it's in the shared\n     * mode it defines what space it occupies ('top' or 'bottom').\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"workingSpace\", WORKING_SPACE_ALL);\n    /**\n     * Shared Size instance.\n     *\n     * @type {ViewSize}\n     */\n    _defineProperty(this, \"sharedSize\", null);\n  }\n  /**\n   * Sets the size for rendered elements. It can be a size for rows, cells or size for row\n   * headers etc.\n   *\n   * @param {number} size The size.\n   */\n  setSize(size) {\n    this.size.setSize(size);\n  }\n\n  /**\n   * Sets the offset for rendered elements. The offset describes the shift between 0 and\n   * the first rendered element according to the scroll position.\n   *\n   * @param {number} offset The offset.\n   */\n  setOffset(offset) {\n    this.size.setOffset(offset);\n  }\n\n  /**\n   * Returns ViewSize instance.\n   *\n   * @returns {ViewSize}\n   */\n  getViewSize() {\n    return this.size;\n  }\n\n  /**\n   * Checks if this ViewSizeSet is sharing the size with another instance.\n   *\n   * @returns {boolean}\n   */\n  isShared() {\n    return this.sharedSize instanceof ViewSize;\n  }\n\n  /**\n   * Checks what working space describes this size instance.\n   *\n   * @param {number} workingSpace The number which describes the type of the working space (see constants.js).\n   * @returns {boolean}\n   */\n  isPlaceOn(workingSpace) {\n    return this.workingSpace === workingSpace;\n  }\n\n  /**\n   * Appends the ViewSizeSet instance to this instance that turns it into a shared mode.\n   *\n   * @param {ViewSizeSet} viewSize The instance of the ViewSizeSet class.\n   */\n  append(viewSize) {\n    this.workingSpace = WORKING_SPACE_TOP;\n    viewSize.workingSpace = WORKING_SPACE_BOTTOM;\n    this.sharedSize = viewSize.getViewSize();\n  }\n\n  /**\n   * Prepends the ViewSize instance to this instance that turns it into a shared mode.\n   *\n   * @param {ViewSizeSet} viewSize The instance of the ViewSizeSet class.\n   */\n  prepend(viewSize) {\n    this.workingSpace = WORKING_SPACE_BOTTOM;\n    viewSize.workingSpace = WORKING_SPACE_TOP;\n    this.sharedSize = viewSize.getViewSize();\n  }\n}", "import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { WORKING_SPACE_TOP, WORKING_SPACE_BOTTOM } from \"./constants.mjs\";\nimport ViewSizeSet from \"./viewSizeSet.mjs\";\n/**\n * Executive model for each table renderer. It's responsible for injecting DOM nodes in a\n * specified order and adjusting the number of elements in the root node.\n *\n * Only this class have rights to juggling DOM elements within the root node (see render method).\n *\n * @class {OrderView}\n */\nexport default class OrderView {\n  constructor(rootNode, nodesPool, childNodeType) {\n    /**\n     * The root node to manage with.\n     *\n     * @type {HTMLElement}\n     */\n    _defineProperty(this, \"rootNode\", void 0);\n    /**\n     * Factory for newly created DOM elements.\n     *\n     * @type {Function}\n     */\n    _defineProperty(this, \"nodesPool\", void 0);\n    /**\n     * Holder for sizing and positioning of the view.\n     *\n     * @type {ViewSizeSet}\n     */\n    _defineProperty(this, \"sizeSet\", new ViewSizeSet());\n    /**\n     * Node type which the order view will manage while rendering the DOM elements.\n     *\n     * @type {string}\n     */\n    _defineProperty(this, \"childNodeType\", void 0);\n    /**\n     * The visual index of currently processed row.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"visualIndex\", 0);\n    /**\n     * The list of DOM elements which are rendered for this render cycle.\n     *\n     * @type {HTMLElement[]}\n     */\n    _defineProperty(this, \"collectedNodes\", []);\n    this.rootNode = rootNode;\n    this.nodesPool = nodesPool;\n    this.childNodeType = childNodeType.toUpperCase();\n  }\n\n  /**\n   * Sets the size for rendered elements. It can be a size for rows, cells or size for row\n   * headers etc. It depends for what table renderer this instance was created.\n   *\n   * @param {number} size The size.\n   * @returns {OrderView}\n   */\n  setSize(size) {\n    this.sizeSet.setSize(size);\n    return this;\n  }\n\n  /**\n   * Sets the offset for rendered elements. The offset describes the shift between 0 and\n   * the first rendered element according to the scroll position.\n   *\n   * @param {number} offset The offset.\n   * @returns {OrderView}\n   */\n  setOffset(offset) {\n    this.sizeSet.setOffset(offset);\n    return this;\n  }\n\n  /**\n   * Checks if this instance of the view shares the root node with another instance. This happens only once when\n   * a row (TR) as a root node is managed by two OrderView instances. If this happens another DOM injection\n   * algorithm is performed to achieve consistent order.\n   *\n   * @returns {boolean}\n   */\n  isSharedViewSet() {\n    return this.sizeSet.isShared();\n  }\n\n  /**\n   * Returns rendered DOM element based on visual index.\n   *\n   * @param {number} visualIndex The visual index.\n   * @returns {HTMLElement}\n   */\n  getNode(visualIndex) {\n    return visualIndex < this.collectedNodes.length ? this.collectedNodes[visualIndex] : null;\n  }\n\n  /**\n   * Returns currently processed DOM element.\n   *\n   * @returns {HTMLElement}\n   */\n  getCurrentNode() {\n    const length = this.collectedNodes.length;\n    return length > 0 ? this.collectedNodes[length - 1] : null;\n  }\n\n  /**\n   * Returns rendered child count for this instance.\n   *\n   * @returns {number}\n   */\n  getRenderedChildCount() {\n    const {\n      rootNode,\n      sizeSet\n    } = this;\n    let childElementCount = 0;\n    if (this.isSharedViewSet()) {\n      let element = rootNode.firstElementChild;\n      while (element) {\n        if (element.tagName === this.childNodeType) {\n          childElementCount += 1;\n        } else if (sizeSet.isPlaceOn(WORKING_SPACE_TOP)) {\n          break;\n        }\n        element = element.nextElementSibling;\n      }\n    } else {\n      childElementCount = rootNode.childElementCount;\n    }\n    return childElementCount;\n  }\n\n  /**\n   * Setups and prepares all necessary properties and start the rendering process.\n   * This method has to be called only once (at the start) for the render cycle.\n   */\n  start() {\n    this.collectedNodes.length = 0;\n    this.visualIndex = 0;\n    const {\n      rootNode,\n      sizeSet\n    } = this;\n    const isShared = this.isSharedViewSet();\n    const {\n      nextSize\n    } = sizeSet.getViewSize();\n    let childElementCount = this.getRenderedChildCount();\n    while (childElementCount < nextSize) {\n      const newNode = this.nodesPool();\n      if (!isShared || isShared && sizeSet.isPlaceOn(WORKING_SPACE_BOTTOM)) {\n        rootNode.appendChild(newNode);\n      } else {\n        rootNode.insertBefore(newNode, rootNode.firstChild);\n      }\n      childElementCount += 1;\n    }\n    const isSharedPlacedOnTop = isShared && sizeSet.isPlaceOn(WORKING_SPACE_TOP);\n    while (childElementCount > nextSize) {\n      rootNode.removeChild(isSharedPlacedOnTop ? rootNode.firstChild : rootNode.lastChild);\n      childElementCount -= 1;\n    }\n  }\n\n  /**\n   * Renders the DOM element based on visual index (which is calculated internally).\n   * This method has to be called as many times as the size count is met (to cover all previously rendered DOM elements).\n   */\n  render() {\n    const {\n      rootNode,\n      sizeSet\n    } = this;\n    let visualIndex = this.visualIndex;\n    if (this.isSharedViewSet() && sizeSet.isPlaceOn(WORKING_SPACE_BOTTOM)) {\n      visualIndex += sizeSet.sharedSize.nextSize;\n    }\n    let node = rootNode.childNodes[visualIndex];\n    if (node.tagName !== this.childNodeType) {\n      const newNode = this.nodesPool();\n      rootNode.replaceChild(newNode, node);\n      node = newNode;\n    }\n    this.collectedNodes.push(node);\n    this.visualIndex += 1;\n  }\n\n  /**\n   * Ends the render process.\n   * This method has to be called only once (at the end) for the render cycle.\n   */\n  end() {}\n}", "import OrderView from \"./view.mjs\";\n/**\n * Executive model for TR root nodes.\n *\n * @class {SharedOrderView}\n */\nexport default class SharedOrderView extends OrderView {\n  /**\n   * The method results in merging external order view into the current order. This happens only for order views which\n   * operate on the same root node.\n   *\n   * In the table, there is only one scenario when this happens. TR root element\n   * has a common root node with cells order view and row headers order view. Both classes have to share\n   * information about their order sizes to make proper diff calculations.\n   *\n   * @param {OrderView} orderView The order view to merging with. The view will be added at the beginning of the list.\n   * @returns {SharedOrderView}\n   */\n  prependView(orderView) {\n    this.sizeSet.prepend(orderView.sizeSet);\n    orderView.sizeSet.append(this.sizeSet);\n    return this;\n  }\n\n  /**\n   * The method results in merging external order view into the current order. This happens only for order views which\n   * operate on the same root node.\n   *\n   * In the table, there is only one scenario when this happens. TR root element\n   * has a common root node with cells order view and row headers order view. Both classes have to share\n   * information about their order sizes to make proper diff calculations.\n   *\n   * @param {OrderView} orderView The order view to merging with. The view will be added at the end of the list.\n   * @returns {SharedOrderView}\n   */\n  appendView(orderView) {\n    this.sizeSet.append(orderView.sizeSet);\n    orderView.sizeSet.prepend(this.sizeSet);\n    return this;\n  }\n}", "import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/**\n * Factory for newly created DOM elements.\n *\n * @class {NodesPool}\n */\nexport default class NodesPool {\n  constructor(nodeType) {\n    /**\n     * Node type to generate (ew 'th', 'td').\n     *\n     * @type {string}\n     */\n    _defineProperty(this, \"nodeType\", void 0);\n    this.nodeType = nodeType.toUpperCase();\n  }\n\n  /**\n   * Set document owner for this instance.\n   *\n   * @param {HTMLDocument} rootDocument The document window owner.\n   */\n  setRootDocument(rootDocument) {\n    this.rootDocument = rootDocument;\n  }\n\n  /**\n   * Obtains an element. The returned elements in the feature can be cached.\n   *\n   * @returns {HTMLElement}\n   */\n  obtain() {\n    return this.rootDocument.createElement(this.nodeType);\n  }\n}", "import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport NodesPool from \"./../utils/nodesPool.mjs\";\n/**\n * Base renderer class, abstract logic for specialized renderers.\n *\n * @class BaseRenderer\n */\nexport default class BaseRenderer {\n  constructor(nodeType, rootNode) {\n    /**\n     * Factory for newly created DOM elements.\n     *\n     * NodePool should be used for each renderer. For the first stage of the refactoring\n     * process, only some of the renderers are implemented a new approach.\n     *\n     * @type {NodesPool|null}\n     */\n    _defineProperty(this, \"nodesPool\", null);\n    /**\n     * Node type which the renderer will manage while building the table (eg. 'TD', 'TR', 'TH').\n     *\n     * @type {string}\n     */\n    _defineProperty(this, \"nodeType\", void 0);\n    /**\n     * The root node to which newly created elements will be inserted.\n     *\n     * @type {HTMLElement}\n     */\n    _defineProperty(this, \"rootNode\", void 0);\n    /**\n     * The instance of the Table class, a wrapper for all renderers and holder for properties describe table state.\n     *\n     * @type {TableRenderer}\n     */\n    _defineProperty(this, \"table\", null);\n    /**\n     * Counter of nodes already added.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"renderedNodes\", 0);\n    this.nodesPool = typeof nodeType === 'string' ? new NodesPool(nodeType) : null;\n    this.nodeType = nodeType;\n    this.rootNode = rootNode;\n  }\n\n  /**\n   * Sets the table renderer instance to the current renderer.\n   *\n   * @param {TableRenderer} table The TableRenderer instance.\n   */\n  setTable(table) {\n    if (this.nodesPool) {\n      this.nodesPool.setRootDocument(table.rootDocument);\n    }\n    this.table = table;\n  }\n\n  /**\n   * Adjusts the number of rendered nodes.\n   */\n  adjust() {}\n\n  /**\n   * Renders the contents to the elements.\n   */\n  render() {}\n}", "import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { SharedOrderView } from \"./../utils/orderView/index.mjs\";\nimport BaseRenderer from \"./_base.mjs\";\nimport { setAttribute, removeAttribute } from \"../../../../helpers/dom/element.mjs\";\nimport { A11Y_COLINDEX, A11Y_ROWHEADER, A11Y_SCOPE_ROW, A11Y_TABINDEX } from \"../../../../helpers/a11y.mjs\";\n/**\n * Row headers renderer responsible for managing (inserting, tracking, rendering) TR elements belongs to TR.\n *\n *   <tr> (root node)\n *     ├ <th>   --- RowHeadersRenderer\n *     ├ <td>   \\\n *     ├ <td>    \\\n *     ├ <td>     - CellsRenderer\n *     ├ <td>    /\n *     └ <td>   /.\n *\n * @class {CellsRenderer}\n */\nexport default class RowHeadersRenderer extends BaseRenderer {\n  constructor() {\n    super('TH');\n    /**\n     * Cache for OrderView classes connected to specified node.\n     *\n     * @type {WeakMap}\n     */\n    _defineProperty(this, \"orderViews\", new WeakMap());\n    /**\n     * Row index which specifies the row position of the processed row header.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"sourceRowIndex\", 0);\n  }\n\n  /**\n   * Obtains the instance of the SharedOrderView class which is responsible for rendering the nodes to the root node.\n   *\n   * @param {HTMLTableRowElement} rootNode The TR element, which is root element for row headers (TH).\n   * @returns {SharedOrderView}\n   */\n  obtainOrderView(rootNode) {\n    let orderView;\n    if (this.orderViews.has(rootNode)) {\n      orderView = this.orderViews.get(rootNode);\n    } else {\n      orderView = new SharedOrderView(rootNode, sourceColumnIndex => this.nodesPool.obtain(this.sourceRowIndex, sourceColumnIndex), this.nodeType);\n      this.orderViews.set(rootNode, orderView);\n    }\n    return orderView;\n  }\n\n  /**\n   * Renders the cells.\n   */\n  render() {\n    const {\n      rowsToRender,\n      rowHeaderFunctions,\n      rowHeadersCount,\n      rows,\n      cells\n    } = this.table;\n    for (let visibleRowIndex = 0; visibleRowIndex < rowsToRender; visibleRowIndex++) {\n      const sourceRowIndex = this.table.renderedRowToSource(visibleRowIndex);\n      const TR = rows.getRenderedNode(visibleRowIndex);\n      this.sourceRowIndex = sourceRowIndex;\n      const orderView = this.obtainOrderView(TR);\n      const cellsView = cells.obtainOrderView(TR);\n      orderView.appendView(cellsView).setSize(rowHeadersCount).setOffset(this.table.renderedColumnToSource(0)).start();\n      for (let visibleColumnIndex = 0; visibleColumnIndex < rowHeadersCount; visibleColumnIndex++) {\n        orderView.render();\n        const TH = orderView.getCurrentNode();\n        TH.className = '';\n        TH.removeAttribute('style');\n\n        // Remove all accessibility-related attributes for the header to start fresh.\n        removeAttribute(TH, [new RegExp('aria-(.*)'), new RegExp('role')]);\n        if (this.table.isAriaEnabled()) {\n          setAttribute(TH, [A11Y_ROWHEADER(), A11Y_SCOPE_ROW(), A11Y_COLINDEX(visibleColumnIndex + 1), A11Y_TABINDEX(-1)]);\n        }\n        rowHeaderFunctions[visibleColumnIndex](sourceRowIndex, TH, visibleColumnIndex);\n      }\n      orderView.end();\n    }\n  }\n}", "import { empty, setAttribute, removeAttribute } from \"./../../../../helpers/dom/element.mjs\";\nimport BaseRenderer from \"./_base.mjs\";\nimport { A11Y_COLINDEX, A11Y_COLUMNHEADER, A11Y_ROW, A11Y_ROWGROUP, A11Y_ROWINDEX, A11Y_SCOPE_COL, A11Y_TABINDEX } from \"../../../../helpers/a11y.mjs\";\n/**\n * Column headers renderer responsible for managing (inserting, tracking, rendering) TR and TH elements.\n *\n *   <thead> (root node)\n *     ├ <tr>   \\\n *     ├ <tr>    \\\n *     ├ <tr>     - ColumnHeadersRenderer\n *     ├ <tr>    /\n *     └ <tr>   /.\n *\n * @class {ColumnHeadersRenderer}\n */\nexport default class ColumnHeadersRenderer extends BaseRenderer {\n  constructor(rootNode) {\n    super(null, rootNode); // NodePool is not implemented for this renderer yet\n  }\n\n  /**\n   * Adjusts the number of the rendered elements.\n   */\n  adjust() {\n    const {\n      columnHeadersCount,\n      rowHeadersCount\n    } = this.table;\n    let TR = this.rootNode.firstChild;\n    if (columnHeadersCount) {\n      const {\n        columnsToRender\n      } = this.table;\n      const allColumnsToRender = columnsToRender + rowHeadersCount;\n      for (let i = 0, len = columnHeadersCount; i < len; i++) {\n        TR = this.rootNode.childNodes[i];\n        if (!TR) {\n          TR = this.table.rootDocument.createElement('tr');\n          this.rootNode.appendChild(TR);\n        }\n        this.renderedNodes = TR.childNodes.length;\n        while (this.renderedNodes < allColumnsToRender) {\n          TR.appendChild(this.table.rootDocument.createElement('th'));\n          this.renderedNodes += 1;\n        }\n        while (this.renderedNodes > allColumnsToRender) {\n          TR.removeChild(TR.lastChild);\n          this.renderedNodes -= 1;\n        }\n      }\n      const theadChildrenLength = this.rootNode.childNodes.length;\n      if (theadChildrenLength > columnHeadersCount) {\n        for (let i = columnHeadersCount; i < theadChildrenLength; i++) {\n          this.rootNode.removeChild(this.rootNode.lastChild);\n        }\n      }\n    } else if (TR) {\n      empty(TR);\n    }\n  }\n\n  /**\n   * Renders the TH elements.\n   */\n  render() {\n    const {\n      columnHeadersCount\n    } = this.table;\n    if (this.table.isAriaEnabled()) {\n      setAttribute(this.rootNode, [A11Y_ROWGROUP()]);\n    }\n    for (let rowHeaderIndex = 0; rowHeaderIndex < columnHeadersCount; rowHeaderIndex += 1) {\n      const {\n        columnHeaderFunctions,\n        columnsToRender,\n        rowHeadersCount\n      } = this.table;\n      const TR = this.rootNode.childNodes[rowHeaderIndex];\n      if (this.table.isAriaEnabled()) {\n        setAttribute(TR, [A11Y_ROW(), A11Y_ROWINDEX(rowHeaderIndex + 1)]);\n      }\n      for (let renderedColumnIndex = -1 * rowHeadersCount; renderedColumnIndex < columnsToRender; renderedColumnIndex += 1) {\n        // eslint-disable-line max-len\n        const sourceColumnIndex = this.table.renderedColumnToSource(renderedColumnIndex);\n        const TH = TR.childNodes[renderedColumnIndex + rowHeadersCount];\n        TH.className = '';\n        TH.removeAttribute('style');\n\n        // Remove all accessibility-related attributes for the header to start fresh.\n        removeAttribute(TH, [new RegExp('aria-(.*)'), new RegExp('role')]);\n        if (this.table.isAriaEnabled()) {\n          setAttribute(TH, [A11Y_COLINDEX(renderedColumnIndex + 1 + this.table.rowHeadersCount), A11Y_TABINDEX(-1), A11Y_COLUMNHEADER(), ...(renderedColumnIndex >= 0 ? [A11Y_SCOPE_COL()] : [\n          // Adding `role=row` to the corner headers to prevent\n          // https://github.com/handsontable/dev-handsontable/issues/1574\n          A11Y_ROW()])]);\n        }\n        columnHeaderFunctions[rowHeaderIndex](sourceColumnIndex, TH, rowHeaderIndex);\n      }\n    }\n  }\n}", "import BaseRenderer from \"./_base.mjs\";\nimport { addClass } from \"./../../../../helpers/dom/element.mjs\";\n/**\n * Colgroup renderer responsible for managing (inserting, tracking, rendering) COL elements.\n *\n *   <colgroup> (root node)\n *     ├ <col>   \\\n *     ├ <col>    \\\n *     ├ <col>     - ColGroupRenderer\n *     ├ <col>    /\n *     └ <col>   /.\n *\n * @class {ColGroupRenderer}\n */\nexport default class ColGroupRenderer extends BaseRenderer {\n  constructor(rootNode) {\n    super(null, rootNode); // NodePool is not implemented for this renderer yet\n  }\n\n  /**\n   * Adjusts the number of the rendered elements.\n   */\n  adjust() {\n    const {\n      columnsToRender,\n      rowHeadersCount\n    } = this.table;\n    const allColumnsToRender = columnsToRender + rowHeadersCount;\n    while (this.renderedNodes < allColumnsToRender) {\n      this.rootNode.appendChild(this.table.rootDocument.createElement('col'));\n      this.renderedNodes += 1;\n    }\n    while (this.renderedNodes > allColumnsToRender) {\n      this.rootNode.removeChild(this.rootNode.lastChild);\n      this.renderedNodes -= 1;\n    }\n  }\n\n  /**\n   * Renders the col group elements.\n   */\n  render() {\n    this.adjust();\n    const {\n      columnsToRender,\n      rowHeadersCount\n    } = this.table;\n\n    // Render column nodes for row headers\n    for (let visibleColumnIndex = 0; visibleColumnIndex < rowHeadersCount; visibleColumnIndex++) {\n      const sourceColumnIndex = this.table.renderedColumnToSource(visibleColumnIndex);\n      const width = this.table.columnUtils.getHeaderWidth(sourceColumnIndex);\n      this.rootNode.childNodes[visibleColumnIndex].style.width = `${width}px`;\n    }\n\n    // Render column nodes for cells\n    for (let visibleColumnIndex = 0; visibleColumnIndex < columnsToRender; visibleColumnIndex++) {\n      const sourceColumnIndex = this.table.renderedColumnToSource(visibleColumnIndex);\n      const width = this.table.columnUtils.getStretchedColumnWidth(sourceColumnIndex);\n      this.rootNode.childNodes[visibleColumnIndex + rowHeadersCount].style.width = `${width}px`;\n    }\n    const firstChild = this.rootNode.firstChild;\n    if (firstChild) {\n      addClass(firstChild, 'rowHeader');\n    }\n  }\n}", "import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { warn } from \"./../../../../helpers/console.mjs\";\nimport { toSingleLine } from \"./../../../../helpers/templateLiteralTag.mjs\";\nimport { OrderView } from \"./../utils/orderView/index.mjs\";\nimport BaseRenderer from \"./_base.mjs\";\nimport { setAttribute } from \"../../../../helpers/dom/element.mjs\";\nimport { A11Y_ROW, A11Y_ROWGROUP, A11Y_ROWINDEX } from \"../../../../helpers/a11y.mjs\";\nlet performanceWarningAppeared = false;\n\n/**\n * Rows renderer responsible for managing (inserting, tracking, rendering) TR elements belongs to TBODY.\n *\n *   <tbody> (root node)\n *     ├ <tr>   \\\n *     ├ <tr>    \\\n *     ├ <tr>     - RowsRenderer\n *     ├ <tr>    /\n *     └ <tr>   /.\n *\n * @class {RowsRenderer}\n */\nexport default class RowsRenderer extends BaseRenderer {\n  constructor(rootNode) {\n    super('TR', rootNode);\n    /**\n     * Cache for OrderView classes connected to specified node.\n     *\n     * @type {WeakMap}\n     */\n    _defineProperty(this, \"orderView\", void 0);\n    this.orderView = new OrderView(rootNode, sourceRowIndex => this.nodesPool.obtain(sourceRowIndex), this.nodeType);\n  }\n\n  /**\n   * Returns currently rendered node.\n   *\n   * @param {string} visualIndex Visual index of the rendered node (it always goeas from 0 to N).\n   * @returns {HTMLTableRowElement}\n   */\n  getRenderedNode(visualIndex) {\n    return this.orderView.getNode(visualIndex);\n  }\n\n  /**\n   * Renders the cells.\n   */\n  render() {\n    const {\n      rowsToRender\n    } = this.table;\n    if (!performanceWarningAppeared && rowsToRender > 1000) {\n      performanceWarningAppeared = true;\n      warn(toSingleLine`Performance tip: Handsontable rendered more than 1000 visible rows. Consider limiting\\x20\n        the number of rendered rows by specifying the table height and/or turning off the \"renderAllRows\" option.`);\n    }\n    if (this.table.isAriaEnabled()) {\n      setAttribute(this.rootNode, [A11Y_ROWGROUP()]);\n    }\n    this.orderView.setSize(rowsToRender).setOffset(this.table.renderedRowToSource(0)).start();\n    for (let visibleRowIndex = 0; visibleRowIndex < rowsToRender; visibleRowIndex++) {\n      this.orderView.render();\n      const TR = this.orderView.getCurrentNode();\n      const sourceRowIndex = this.table.renderedRowToSource(visibleRowIndex);\n      if (this.table.isAriaEnabled()) {\n        var _this$table$rowUtils$, _this$table$rowUtils;\n        setAttribute(TR, [A11Y_ROW(),\n        // `aria-rowindex` is incremented by both tbody and thead rows.\n        A11Y_ROWINDEX(sourceRowIndex + ((_this$table$rowUtils$ = (_this$table$rowUtils = this.table.rowUtils) === null || _this$table$rowUtils === void 0 || (_this$table$rowUtils = _this$table$rowUtils.dataAccessObject) === null || _this$table$rowUtils === void 0 ? void 0 : _this$table$rowUtils.columnHeaders.length) !== null && _this$table$rowUtils$ !== void 0 ? _this$table$rowUtils$ : 0) + 1)]);\n      }\n    }\n    this.orderView.end();\n  }\n}", "import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { hasClass, removeAttribute, setAttribute } from \"./../../../../helpers/dom/element.mjs\";\nimport { SharedOrderView } from \"./../utils/orderView/index.mjs\";\nimport BaseRenderer from \"./_base.mjs\";\nimport { A11Y_COLINDEX, A11Y_GRIDCELL, A11Y_TABINDEX } from \"../../../../helpers/a11y.mjs\";\n/**\n * Cell renderer responsible for managing (inserting, tracking, rendering) TD elements.\n *\n *   <tr> (root node)\n *     ├ <th>   --- RowHeadersRenderer\n *     ├ <td>   \\\n *     ├ <td>    \\\n *     ├ <td>     - CellsRenderer\n *     ├ <td>    /\n *     └ <td>   /.\n *\n * @class {CellsRenderer}\n */\nexport default class CellsRenderer extends BaseRenderer {\n  constructor() {\n    super('TD');\n    /**\n     * Cache for OrderView classes connected to specified node.\n     *\n     * @type {WeakMap}\n     */\n    _defineProperty(this, \"orderViews\", new WeakMap());\n    /**\n     * Row index which specifies the row position of the processed cell.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"sourceRowIndex\", 0);\n  }\n\n  /**\n   * Obtains the instance of the SharedOrderView class which is responsible for rendering the nodes to the root node.\n   *\n   * @param {HTMLTableRowElement} rootNode The TR element, which is root element for cells (TD).\n   * @returns {SharedOrderView}\n   */\n  obtainOrderView(rootNode) {\n    let orderView;\n    if (this.orderViews.has(rootNode)) {\n      orderView = this.orderViews.get(rootNode);\n    } else {\n      orderView = new SharedOrderView(rootNode, sourceColumnIndex => this.nodesPool.obtain(this.sourceRowIndex, sourceColumnIndex), this.nodeType);\n      this.orderViews.set(rootNode, orderView);\n    }\n    return orderView;\n  }\n\n  /**\n   * Renders the cells.\n   */\n  render() {\n    const {\n      rowsToRender,\n      columnsToRender,\n      rows,\n      rowHeaders\n    } = this.table;\n    for (let visibleRowIndex = 0; visibleRowIndex < rowsToRender; visibleRowIndex++) {\n      const sourceRowIndex = this.table.renderedRowToSource(visibleRowIndex);\n      const TR = rows.getRenderedNode(visibleRowIndex);\n      this.sourceRowIndex = sourceRowIndex;\n      const orderView = this.obtainOrderView(TR);\n      const rowHeadersView = rowHeaders.obtainOrderView(TR);\n\n      // @TODO(perf-tip): For cells other than \"visual 0\" generating diff leads/commands can be skipped. New order view\n      // should share state between next orderViews.\n      orderView.prependView(rowHeadersView).setSize(columnsToRender).setOffset(this.table.renderedColumnToSource(0)).start();\n      for (let visibleColumnIndex = 0; visibleColumnIndex < columnsToRender; visibleColumnIndex++) {\n        orderView.render();\n        const TD = orderView.getCurrentNode();\n        const sourceColumnIndex = this.table.renderedColumnToSource(visibleColumnIndex);\n        if (!hasClass(TD, 'hide')) {\n          // Workaround for hidden columns plugin\n          TD.className = '';\n        }\n        TD.removeAttribute('style');\n        TD.removeAttribute('dir');\n\n        // Remove all accessibility-related attributes for the cell to start fresh.\n        removeAttribute(TD, [new RegExp('aria-(.*)'), new RegExp('role')]);\n        this.table.cellRenderer(sourceRowIndex, sourceColumnIndex, TD);\n        if (this.table.isAriaEnabled()) {\n          var _this$table$rowUtils$, _this$table$rowUtils;\n          setAttribute(TD, [...(TD.hasAttribute('role') ? [] : [A11Y_GRIDCELL()]), A11Y_TABINDEX(-1),\n          // `aria-colindex` is incremented by both tbody and thead rows.\n          A11Y_COLINDEX(sourceColumnIndex + ((_this$table$rowUtils$ = (_this$table$rowUtils = this.table.rowUtils) === null || _this$table$rowUtils === void 0 || (_this$table$rowUtils = _this$table$rowUtils.dataAccessObject) === null || _this$table$rowUtils === void 0 ? void 0 : _this$table$rowUtils.rowHeaders.length) !== null && _this$table$rowUtils$ !== void 0 ? _this$table$rowUtils$ : 0) + 1)]);\n        }\n      }\n      orderView.end();\n    }\n  }\n}", "import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/**\n * TableRenderer class collects all renderers and properties necessary for table creation. It's\n * responsible for adjusting and rendering each renderer.\n *\n * Below is a diagram of the renderers together with an indication of what they are responisble for.\n *   <table>\n *     <colgroup>  \\ (root node)\n *       <col>      \\\n *       <col>       \\___ ColGroupRenderer\n *       <col>       /\n *       <col>      /\n *     </colgroup> /\n *     <thead>     \\ (root node)\n *       <tr>       \\\n *         <th>      \\\n *         <th>       \\____ ColumnHeadersRenderer\n *         <th>       /\n *         <th>      /\n *       </tr>      /\n *     </thead>    /\n *     <tbody>   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\ (root node)\n *       <tr>   (root node)          \\\n *         <th>  --- RowHeadersRenderer\n *         <td>  \\                     \\\n *         <td>   -- CellsRenderer      \\\n *         <td>  /                       \\\n *       </tr>                            \\\n *       <tr>   (root node)                \\\n *         <th>  --- RowHeadersRenderer     \\\n *         <td>  \\                           \\___ RowsRenderer\n *         <td>   -- CellsRenderer           /\n *         <td>  /                          /\n *       </tr>                             /\n *       <tr>   (root node)               /\n *         <th>  --- RowHeadersRenderer  /\n *         <td>  \\                      /\n *         <td>   -- CellsRenderer     /\n *         <td>  /                    /\n *       </tr>                       /\n *     </tbody>  ___________________/\n *   </table>.\n *\n * @class {RowsRenderer}\n */\nexport default class TableRenderer {\n  constructor(rootNode) {\n    let {\n      cellRenderer\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    /**\n     * Table element which will be used to render the children element.\n     *\n     * @type {HTMLTableElement}\n     */\n    _defineProperty(this, \"rootNode\", void 0);\n    /**\n     * Document owner of the root node.\n     *\n     * @type {HTMLDocument}\n     */\n    _defineProperty(this, \"rootDocument\", void 0);\n    /**\n     * Renderer class responsible for rendering row headers.\n     *\n     * @type {RowsRenderer}\n     */\n    _defineProperty(this, \"rowHeaders\", null);\n    /**\n     * Renderer class responsible for rendering column headers.\n     *\n     * @type {ColumnHeadersRenderer}\n     */\n    _defineProperty(this, \"columnHeaders\", null);\n    /**\n     * Renderer class responsible for rendering col in colgroup.\n     *\n     * @type {ColGroupRenderer}\n     */\n    _defineProperty(this, \"colGroup\", null);\n    /**\n     * Renderer class responsible for rendering rows in tbody.\n     *\n     * @type {RowsRenderer}\n     */\n    _defineProperty(this, \"rows\", null);\n    /**\n     * Renderer class responsible for rendering cells.\n     *\n     * @type {CellsRenderer}\n     */\n    _defineProperty(this, \"cells\", null);\n    /**\n     * Row filter which contains all necessary information about row index transformation.\n     *\n     * @type {RowFilter}\n     */\n    _defineProperty(this, \"rowFilter\", null);\n    /**\n     * Column filter which contains all necessary information about column index transformation.\n     *\n     * @type {ColumnFilter}\n     */\n    _defineProperty(this, \"columnFilter\", null);\n    /**\n     * Row utils class which contains all necessary information about sizes of the rows.\n     *\n     * @type {RowUtils}\n     */\n    _defineProperty(this, \"rowUtils\", null);\n    /**\n     * Column utils class which contains all necessary information about sizes of the columns.\n     *\n     * @type {ColumnUtils}\n     */\n    _defineProperty(this, \"columnUtils\", null);\n    /**\n     * Indicates how much rows should be rendered to fill whole table viewport.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"rowsToRender\", 0);\n    /**\n     * Indicates how much columns should be rendered to fill whole table viewport.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"columnsToRender\", 0);\n    /**\n     * An array of functions to be used as a content factory to row headers.\n     *\n     * @type {Function[]}\n     */\n    _defineProperty(this, \"rowHeaderFunctions\", []);\n    /**\n     * Count of the function used to render row headers.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"rowHeadersCount\", 0);\n    /**\n     * An array of functions to be used as a content factory to column headers.\n     *\n     * @type {Function[]}\n     */\n    _defineProperty(this, \"columnHeaderFunctions\", []);\n    /**\n     * Count of the function used to render column headers.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"columnHeadersCount\", 0);\n    /**\n     * Cell renderer used to render cells content.\n     *\n     * @type {Function}\n     */\n    _defineProperty(this, \"cellRenderer\", void 0);\n    this.rootNode = rootNode;\n    this.rootDocument = this.rootNode.ownerDocument;\n    this.cellRenderer = cellRenderer;\n  }\n\n  /**\n   * Set row and column util classes.\n   *\n   * @param {RowUtils} rowUtils RowUtils instance which provides useful methods related to row sizes.\n   * @param {ColumnUtils} columnUtils ColumnUtils instance which provides useful methods related to row sizes.\n   */\n  setAxisUtils(rowUtils, columnUtils) {\n    this.rowUtils = rowUtils;\n    this.columnUtils = columnUtils;\n  }\n\n  /**\n   * Sets viewport size of the table.\n   *\n   * @param {number} rowsCount An amount of rows to render.\n   * @param {number} columnsCount An amount of columns to render.\n   */\n  setViewportSize(rowsCount, columnsCount) {\n    this.rowsToRender = rowsCount;\n    this.columnsToRender = columnsCount;\n  }\n\n  /**\n   * Sets row and column filter instances.\n   *\n   * @param {RowFilter} rowFilter Row filter instance which contains all necessary information about row index transformation.\n   * @param {ColumnFilter} columnFilter Column filter instance which contains all necessary information about row\n   * index transformation.\n   */\n  setFilters(rowFilter, columnFilter) {\n    this.rowFilter = rowFilter;\n    this.columnFilter = columnFilter;\n  }\n\n  /**\n   * Sets row and column header functions.\n   *\n   * @param {Function[]} rowHeaders Row header functions. Factories for creating content for row headers.\n   * @param {Function[]} columnHeaders Column header functions. Factories for creating content for column headers.\n   */\n  setHeaderContentRenderers(rowHeaders, columnHeaders) {\n    this.rowHeaderFunctions = rowHeaders;\n    this.rowHeadersCount = rowHeaders.length;\n    this.columnHeaderFunctions = columnHeaders;\n    this.columnHeadersCount = columnHeaders.length;\n  }\n\n  /**\n   * Sets table renderers.\n   *\n   * @param {renderers} renderers The renderer units.\n   * @param {RowHeadersRenderer} renderers.rowHeaders Row headers renderer.\n   * @param {ColumnHeadersRenderer} renderers.columnHeaders Column headers renderer.\n   * @param {ColGroupRenderer} renderers.colGroup Col group renderer.\n   * @param {RowsRenderer} renderers.rows Rows renderer.\n   * @param {CellsRenderer} renderers.cells Cells renderer.\n   */\n  setRenderers() {\n    let {\n      rowHeaders,\n      columnHeaders,\n      colGroup,\n      rows,\n      cells\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    rowHeaders.setTable(this);\n    columnHeaders.setTable(this);\n    colGroup.setTable(this);\n    rows.setTable(this);\n    cells.setTable(this);\n    this.rowHeaders = rowHeaders;\n    this.columnHeaders = columnHeaders;\n    this.colGroup = colGroup;\n    this.rows = rows;\n    this.cells = cells;\n  }\n\n  /**\n   * Transforms visual/rendered row index to source index.\n   *\n   * @param {number} rowIndex Rendered index.\n   * @returns {number}\n   */\n  renderedRowToSource(rowIndex) {\n    return this.rowFilter.renderedToSource(rowIndex);\n  }\n\n  /**\n   * Transforms visual/rendered column index to source index.\n   *\n   * @param {number} columnIndex Rendered index.\n   * @returns {number}\n   */\n  renderedColumnToSource(columnIndex) {\n    return this.columnFilter.renderedToSource(columnIndex);\n  }\n\n  /**\n   * Returns `true` if the accessibility-related ARIA tags should be added to the table, `false` otherwise.\n   *\n   * @returns {boolean}\n   */\n  isAriaEnabled() {\n    return this.rowUtils.wtSettings.getSetting('ariaTags');\n  }\n\n  /**\n   * Renders the table.\n   */\n  render() {\n    this.colGroup.adjust();\n    this.columnHeaders.adjust();\n    this.rows.adjust();\n    this.rowHeaders.adjust();\n    this.columnHeaders.render();\n    this.rows.render();\n    this.rowHeaders.render();\n    this.cells.render();\n\n    // After the cells are rendered calculate columns width (or columns stretch width) to prepare proper values\n    // for colGroup renderer (which renders COL elements).\n    this.columnUtils.calculateWidths();\n    this.colGroup.render();\n    const {\n      rowsToRender,\n      rows\n    } = this;\n\n    // Fix for multi-line content and for supporting `rowHeights` option.\n    for (let visibleRowIndex = 0; visibleRowIndex < rowsToRender; visibleRowIndex++) {\n      const TR = rows.getRenderedNode(visibleRowIndex);\n      if (TR.firstChild) {\n        const sourceRowIndex = this.renderedRowToSource(visibleRowIndex);\n        const rowHeight = this.rowUtils.getHeight(sourceRowIndex);\n        if (rowHeight) {\n          // Decrease height. 1 pixel will be \"replaced\" by 1px border top\n          TR.firstChild.style.height = `${rowHeight - 1}px`;\n        } else {\n          TR.firstChild.style.height = '';\n        }\n      }\n    }\n  }\n}", "import RowHeadersRenderer from \"./rowHeaders.mjs\";\nimport ColumnHeadersRenderer from \"./columnHeaders.mjs\";\nimport ColGroupRenderer from \"./colGroup.mjs\";\nimport RowsRenderer from \"./rows.mjs\";\nimport CellsRenderer from \"./cells.mjs\";\nimport TableRenderer from \"./table.mjs\";\n/**\n * Content renderer.\n *\n * @class Renderer\n */\nclass Renderer {\n  constructor() {\n    let {\n      TABLE,\n      THEAD,\n      COLGROUP,\n      TBODY,\n      rowUtils,\n      columnUtils,\n      cellRenderer\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    /**\n     * General renderer class used to render Walkontable content on screen.\n     *\n     * @type {TableRenderer}\n     */\n    this.renderer = new TableRenderer(TABLE, {\n      cellRenderer\n    });\n    this.renderer.setRenderers({\n      rowHeaders: new RowHeadersRenderer(),\n      columnHeaders: new ColumnHeadersRenderer(THEAD),\n      colGroup: new ColGroupRenderer(COLGROUP),\n      rows: new RowsRenderer(TBODY),\n      cells: new CellsRenderer()\n    });\n    this.renderer.setAxisUtils(rowUtils, columnUtils);\n  }\n\n  /**\n   * Sets filter calculators for newly calculated row and column position. The filters are used to transform visual\n   * indexes (0 to N) to source indexes provided by Handsontable.\n   *\n   * @param {RowFilter} rowFilter The row filter instance.\n   * @param {ColumnFilter} columnFilter The column filter instance.\n   * @returns {Renderer}\n   */\n  setFilters(rowFilter, columnFilter) {\n    this.renderer.setFilters(rowFilter, columnFilter);\n    return this;\n  }\n\n  /**\n   * Sets the viewport size of the rendered table.\n   *\n   * @param {number} rowsCount An amount of rows to render.\n   * @param {number} columnsCount An amount of columns to render.\n   * @returns {Renderer}\n   */\n  setViewportSize(rowsCount, columnsCount) {\n    this.renderer.setViewportSize(rowsCount, columnsCount);\n    return this;\n  }\n\n  /**\n   * Sets row and column header functions.\n   *\n   * @param {Function[]} rowHeaders Row header functions. Factories for creating content for row headers.\n   * @param {Function[]} columnHeaders Column header functions. Factories for creating content for column headers.\n   * @returns {Renderer}\n   */\n  setHeaderContentRenderers(rowHeaders, columnHeaders) {\n    this.renderer.setHeaderContentRenderers(rowHeaders, columnHeaders);\n    return this;\n  }\n\n  /**\n   * Adjusts the table (preparing for render).\n   */\n  adjust() {\n    this.renderer.adjust();\n  }\n\n  /**\n   * Renders the table.\n   */\n  render() {\n    this.renderer.render();\n  }\n}\nexport { RowHeadersRenderer, ColumnHeadersRenderer, ColGroupRenderer, RowsRenderer, CellsRenderer, TableRenderer, Renderer };", "import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { getScrollbarWidth } from \"./../../../../helpers/dom/element.mjs\";\n/**\n * Column utils class contains all necessary information about sizes of the columns.\n *\n * @class {ColumnUtils}\n */\nexport default class ColumnUtils {\n  /**\n   * @param {TableDao} dataAccessObject The table Data Access Object.\n   * @param {Settings} wtSettings The walkontable settings.\n   */\n  constructor(dataAccessObject, wtSettings) {\n    /**\n     * @type {TableDao}\n     */\n    _defineProperty(this, \"dataAccessObject\", void 0);\n    /**\n     * @type {Settings}\n     */\n    _defineProperty(this, \"wtSettings\", void 0);\n    /**\n     * @type {Map<number, number>}\n     */\n    _defineProperty(this, \"headerWidths\", new Map());\n    this.dataAccessObject = dataAccessObject;\n    this.wtSettings = wtSettings;\n  }\n\n  /**\n   * Returns column width based on passed source index.\n   *\n   * @param {number} sourceIndex Column source index.\n   * @returns {number}\n   */\n  getWidth(sourceIndex) {\n    return this.wtSettings.getSetting('columnWidth', sourceIndex) || this.wtSettings.getSetting('defaultColumnWidth');\n  }\n\n  /**\n   * Returns stretched column width based on passed source index.\n   *\n   * @param {number} sourceIndex Column source index.\n   * @returns {number}\n   */\n  getStretchedColumnWidth(sourceIndex) {\n    const calculator = this.dataAccessObject.wtViewport.columnsRenderCalculator;\n    let width = this.getWidth(sourceIndex);\n    if (calculator) {\n      const stretchedWidth = calculator.getStretchedColumnWidth(sourceIndex, width);\n      if (stretchedWidth) {\n        width = stretchedWidth;\n      }\n    }\n    return width;\n  }\n\n  /**\n   * Returns column header height based on passed header level.\n   *\n   * @param {number} level Column header level.\n   * @returns {number}\n   */\n  getHeaderHeight(level) {\n    let height = this.wtSettings.getSetting('defaultRowHeight');\n    const oversizedHeight = this.dataAccessObject.wtViewport.oversizedColumnHeaders[level];\n    if (oversizedHeight !== undefined) {\n      height = height ? Math.max(height, oversizedHeight) : oversizedHeight;\n    }\n    return height;\n  }\n\n  /**\n   * Returns column header width based on passed source index.\n   *\n   * @param {number} sourceIndex Column source index.\n   * @returns {number}\n   */\n  getHeaderWidth(sourceIndex) {\n    return this.headerWidths.get(this.dataAccessObject.wtTable.columnFilter.sourceToRendered(sourceIndex));\n  }\n\n  /**\n   * Calculates column header widths that can be retrieved from the cache.\n   */\n  calculateWidths() {\n    const {\n      wtSettings\n    } = this;\n    const {\n      wtTable,\n      wtViewport,\n      cloneSource\n    } = this.dataAccessObject;\n    const mainHolder = cloneSource ? cloneSource.wtTable.holder : wtTable.holder;\n    const scrollbarCompensation = mainHolder.offsetHeight < mainHolder.scrollHeight ? getScrollbarWidth() : 0;\n    let rowHeaderWidthSetting = wtSettings.getSetting('rowHeaderWidth');\n    wtViewport.columnsRenderCalculator.refreshStretching(wtViewport.getViewportWidth() - scrollbarCompensation);\n    rowHeaderWidthSetting = wtSettings.getSetting('onModifyRowHeaderWidth', rowHeaderWidthSetting);\n    if (rowHeaderWidthSetting !== null && rowHeaderWidthSetting !== undefined) {\n      const rowHeadersCount = wtSettings.getSetting('rowHeaders').length;\n      const defaultColumnWidth = wtSettings.getSetting('defaultColumnWidth');\n      for (let visibleColumnIndex = 0; visibleColumnIndex < rowHeadersCount; visibleColumnIndex++) {\n        let width = Array.isArray(rowHeaderWidthSetting) ? rowHeaderWidthSetting[visibleColumnIndex] : rowHeaderWidthSetting;\n        width = width === null || width === undefined ? defaultColumnWidth : width;\n        this.headerWidths.set(visibleColumnIndex, width);\n      }\n    }\n  }\n}", "import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/**\n * Row utils class contains all necessary information about sizes of the rows.\n *\n * @class {RowUtils}\n */\nexport default class RowUtils {\n  /**\n   * @param {TableDao} dataAccessObject The table Data Access Object.\n   * @param {Settings} wtSettings The walkontable settings.\n   */\n  constructor(dataAccessObject, wtSettings) {\n    /**\n     * @type {TableDao}\n     */\n    _defineProperty(this, \"dataAccessObject\", void 0);\n    /**\n     * @type {Settings}\n     */\n    _defineProperty(this, \"wtSettings\", void 0);\n    this.dataAccessObject = dataAccessObject;\n    this.wtSettings = wtSettings;\n  }\n\n  /**\n   * Returns row height based on passed source index.\n   *\n   * @param {number} sourceIndex Row source index.\n   * @returns {number}\n   */\n  getHeight(sourceIndex) {\n    let height = this.wtSettings.getSetting('rowHeight', sourceIndex);\n    const oversizedHeight = this.dataAccessObject.wtViewport.oversizedRows[sourceIndex];\n    if (oversizedHeight !== undefined) {\n      height = height === undefined ? oversizedHeight : Math.max(height, oversizedHeight);\n    }\n    return height;\n  }\n}", "import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { hasClass, index, offset, removeTextNodes, overlayContainsElement, closest, outerHeight, outerWidth, innerHeight, isVisible, setAttribute } from \"../../../helpers/dom/element.mjs\";\nimport { isFunction } from \"../../../helpers/function.mjs\";\nimport ColumnFilter from \"./filter/column.mjs\";\nimport RowFilter from \"./filter/row.mjs\";\nimport { Renderer } from \"./renderer/index.mjs\";\nimport ColumnUtils from \"./utils/column.mjs\";\nimport RowUtils from \"./utils/row.mjs\";\nimport { CLONE_TOP, CLONE_BOTTOM, CLONE_INLINE_START, CLONE_TOP_INLINE_START_CORNER, CLONE_BOTTOM_INLINE_START_CORNER } from \"./overlay/index.mjs\";\nimport { A11Y_PRESENTATION } from \"../../../helpers/a11y.mjs\";\n/**\n * @todo These mixes are never added to the class Table, however their members are used here.\n * @todo Continue: Potentially it works only, because some of these mixes are added to every inherited class.\n * @todo Refactoring, move code from `if(this.isMaster)` into MasterTable, and others like that.\n * @mixes stickyColumnsStart\n * @mixes stickyRowsBottom\n * @mixes stickyRowsTop\n * @mixes calculatedRows\n * @mixes calculatedColumns\n * @abstract\n */\nclass Table {\n  /**\n   *\n   * @abstract\n   * @param {TableDao} dataAccessObject The data access object.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {DomBindings} domBindings Bindings into DOM.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {'master'|CLONE_TYPES_ENUM} name Overlay name.\n   */\n  constructor(dataAccessObject, facadeGetter, domBindings, wtSettings, name) {\n    /**\n     * The walkontable settings.\n     *\n     * @protected\n     * @type {Settings}\n     */\n    _defineProperty(this, \"wtSettings\", null);\n    _defineProperty(this, \"domBindings\", void 0);\n    _defineProperty(this, \"TBODY\", null);\n    _defineProperty(this, \"THEAD\", null);\n    _defineProperty(this, \"COLGROUP\", null);\n    /**\n     * Indicates if the table has height bigger than 0px.\n     *\n     * @type {boolean}\n     */\n    _defineProperty(this, \"hasTableHeight\", true);\n    /**\n     * Indicates if the table has width bigger than 0px.\n     *\n     * @type {boolean}\n     */\n    _defineProperty(this, \"hasTableWidth\", true);\n    /**\n     * Indicates if the table is visible. By visible, it means that the holder\n     * element has CSS 'display' property different than 'none'.\n     *\n     * @type {boolean}\n     */\n    _defineProperty(this, \"isTableVisible\", false);\n    _defineProperty(this, \"tableOffset\", 0);\n    _defineProperty(this, \"holderOffset\", 0);\n    this.domBindings = domBindings;\n    /**\n     * Indicates if this instance is of type `MasterTable` (i.e. It is NOT an overlay).\n     *\n     * @type {boolean}\n     */\n    this.isMaster = name === 'master';\n    this.name = name;\n    this.dataAccessObject = dataAccessObject;\n    this.facadeGetter = facadeGetter;\n    this.wtSettings = wtSettings;\n\n    // legacy support\n    this.instance = this.dataAccessObject.wot; // TODO refactoring: it might be removed here, and provides legacy support through facade.\n    this.wot = this.dataAccessObject.wot;\n    this.TABLE = domBindings.rootTable;\n    removeTextNodes(this.TABLE);\n\n    // TODO refactoring, to recognize the legitimacy of moving them into domBidings\n    this.spreader = this.createSpreader(this.TABLE);\n    this.hider = this.createHider(this.spreader);\n    this.holder = this.createHolder(this.hider);\n    this.wtRootElement = this.holder.parentNode;\n    if (this.isMaster) {\n      this.alignOverlaysWithTrimmingContainer(); // todo wow, It calls method from child class (MasterTable).\n    }\n\n    this.fixTableDomTree();\n    this.rowFilter = null; // TODO refactoring, eliminate all (re)creations of this object, then updates state when needed.\n    this.columnFilter = null; // TODO refactoring, eliminate all (re)creations of this object, then updates state when needed.\n    this.correctHeaderWidth = false;\n    const origRowHeaderWidth = this.wtSettings.getSettingPure('rowHeaderWidth');\n\n    // Fix for jumping row headers (https://github.com/handsontable/handsontable/issues/3850)\n    this.wtSettings.update('rowHeaderWidth', () => this._modifyRowHeaderWidth(origRowHeaderWidth));\n    this.rowUtils = new RowUtils(this.dataAccessObject, this.wtSettings); // TODO refactoring, It can be passed through IOC.\n    this.columnUtils = new ColumnUtils(this.dataAccessObject, this.wtSettings); // TODO refactoring, It can be passed through IOC.\n\n    this.tableRenderer = new Renderer({\n      // TODO refactoring, It can be passed through IOC.\n      TABLE: this.TABLE,\n      THEAD: this.THEAD,\n      COLGROUP: this.COLGROUP,\n      TBODY: this.TBODY,\n      rowUtils: this.rowUtils,\n      columnUtils: this.columnUtils,\n      cellRenderer: this.wtSettings.getSettingPure('cellRenderer')\n    });\n  }\n\n  /**\n   * Returns a boolean that is true if this Table represents a specific overlay, identified by the overlay name.\n   * For MasterTable, it returns false.\n   *\n   * @param {string} overlayTypeName The overlay type.\n   * @returns {boolean}\n   */\n  is(overlayTypeName) {\n    // todo refactoring: eliminate all protected and private usages\n    return this.name === overlayTypeName;\n  }\n\n  /**\n   *\n   */\n  fixTableDomTree() {\n    const rootDocument = this.domBindings.rootDocument;\n    this.TBODY = this.TABLE.querySelector('tbody');\n    if (!this.TBODY) {\n      this.TBODY = rootDocument.createElement('tbody');\n      this.TABLE.appendChild(this.TBODY);\n    }\n    this.THEAD = this.TABLE.querySelector('thead');\n    if (!this.THEAD) {\n      this.THEAD = rootDocument.createElement('thead');\n      this.TABLE.insertBefore(this.THEAD, this.TBODY);\n    }\n    this.COLGROUP = this.TABLE.querySelector('colgroup');\n    if (!this.COLGROUP) {\n      this.COLGROUP = rootDocument.createElement('colgroup');\n      this.TABLE.insertBefore(this.COLGROUP, this.THEAD);\n    }\n  }\n\n  /**\n   * @param {HTMLTableElement} table An element to process.\n   * @returns {HTMLElement}\n   */\n  createSpreader(table) {\n    const parent = table.parentNode;\n    let spreader;\n    if (!parent || parent.nodeType !== Node.ELEMENT_NODE || !hasClass(parent, 'wtHolder')) {\n      spreader = this.domBindings.rootDocument.createElement('div');\n      spreader.className = 'wtSpreader';\n      if (parent) {\n        // if TABLE is detached (e.g. in Jasmine test), it has no parentNode so we cannot attach holder to it\n        parent.insertBefore(spreader, table);\n      }\n      spreader.appendChild(table);\n    }\n    spreader.style.position = 'relative';\n    if (this.wtSettings.getSetting('ariaTags')) {\n      setAttribute(spreader, [A11Y_PRESENTATION()]);\n    }\n    return spreader;\n  }\n\n  /**\n   * @param {HTMLElement} spreader An element to the hider element is injected.\n   * @returns {HTMLElement}\n   */\n  createHider(spreader) {\n    const parent = spreader.parentNode;\n    let hider;\n    if (!parent || parent.nodeType !== Node.ELEMENT_NODE || !hasClass(parent, 'wtHolder')) {\n      hider = this.domBindings.rootDocument.createElement('div');\n      hider.className = 'wtHider';\n      if (parent) {\n        // if TABLE is detached (e.g. in Jasmine test), it has no parentNode so we cannot attach holder to it\n        parent.insertBefore(hider, spreader);\n      }\n      hider.appendChild(spreader);\n    }\n    if (this.wtSettings.getSetting('ariaTags')) {\n      setAttribute(hider, [A11Y_PRESENTATION()]);\n    }\n    return hider;\n  }\n\n  /**\n   *\n   * @param {HTMLElement} hider An element to the holder element is injected.\n   * @returns {HTMLElement}\n   */\n  createHolder(hider) {\n    const parent = hider.parentNode;\n    let holder;\n    if (!parent || parent.nodeType !== Node.ELEMENT_NODE || !hasClass(parent, 'wtHolder')) {\n      holder = this.domBindings.rootDocument.createElement('div');\n      holder.style.position = 'relative';\n      holder.className = 'wtHolder';\n      if (parent) {\n        // if TABLE is detached (e.g. in Jasmine test), it has no parentNode so we cannot attach holder to it\n        parent.insertBefore(holder, hider);\n      }\n      if (this.isMaster) {\n        holder.parentNode.className += 'ht_master handsontable';\n        holder.parentNode.setAttribute('dir', this.wtSettings.getSettingPure('rtlMode') ? 'rtl' : 'ltr');\n        if (this.wtSettings.getSetting('ariaTags')) {\n          setAttribute(holder.parentNode, [A11Y_PRESENTATION()]);\n        }\n      }\n      holder.appendChild(hider);\n    }\n    if (this.wtSettings.getSetting('ariaTags')) {\n      setAttribute(holder, [A11Y_PRESENTATION()]);\n    }\n    return holder;\n  }\n\n  /**\n   * Redraws the table.\n   *\n   * @param {boolean} [fastDraw=false] If TRUE, will try to avoid full redraw and only update the border positions.\n   *                                   If FALSE or UNDEFINED, will perform a full redraw.\n   * @returns {Table}\n   */\n  draw() {\n    let fastDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const {\n      wtSettings\n    } = this;\n    const {\n      wtOverlays,\n      wtViewport\n    } = this.dataAccessObject;\n    const totalRows = wtSettings.getSetting('totalRows');\n    const totalColumns = wtSettings.getSetting('totalColumns');\n    const rowHeaders = wtSettings.getSetting('rowHeaders');\n    const rowHeadersCount = rowHeaders.length;\n    const columnHeaders = wtSettings.getSetting('columnHeaders');\n    const columnHeadersCount = columnHeaders.length;\n    let syncScroll = false;\n    let runFastDraw = fastDraw;\n    if (this.isMaster) {\n      this.holderOffset = offset(this.holder);\n      runFastDraw = wtViewport.createRenderCalculators(runFastDraw);\n      if (rowHeadersCount && !wtSettings.getSetting('fixedColumnsStart')) {\n        const leftScrollPos = wtOverlays.inlineStartOverlay.getScrollPosition();\n        const previousState = this.correctHeaderWidth;\n        this.correctHeaderWidth = leftScrollPos !== 0;\n        if (previousState !== this.correctHeaderWidth) {\n          runFastDraw = false;\n        }\n      }\n    }\n    if (this.isMaster) {\n      syncScroll = wtOverlays.updateStateOfRendering();\n    }\n    if (runFastDraw) {\n      if (this.isMaster) {\n        // in case we only scrolled without redraw, update visible rows information in oldRowsCalculator\n        wtViewport.createVisibleCalculators();\n      }\n      if (wtOverlays) {\n        wtOverlays.refresh(true);\n      }\n    } else {\n      if (this.isMaster) {\n        this.tableOffset = offset(this.TABLE);\n      } else {\n        this.tableOffset = this.dataAccessObject.parentTableOffset;\n      }\n      const startRow = totalRows > 0 ? this.getFirstRenderedRow() : 0;\n      const startColumn = totalColumns > 0 ? this.getFirstRenderedColumn() : 0;\n      this.rowFilter = new RowFilter(startRow, totalRows, columnHeadersCount);\n      this.columnFilter = new ColumnFilter(startColumn, totalColumns, rowHeadersCount);\n      let performRedraw = true;\n\n      // Only master table rendering can be skipped\n      if (this.isMaster) {\n        this.alignOverlaysWithTrimmingContainer(); // todo It calls method from child class (MasterTable).\n        const skipRender = {};\n        this.wtSettings.getSetting('beforeDraw', true, skipRender);\n        performRedraw = skipRender.skipRender !== true;\n      }\n      if (performRedraw) {\n        this.tableRenderer.setHeaderContentRenderers(rowHeaders, columnHeaders);\n        if (this.is(CLONE_BOTTOM) || this.is(CLONE_BOTTOM_INLINE_START_CORNER)) {\n          // do NOT render headers on the bottom or bottom-left corner overlay\n          this.tableRenderer.setHeaderContentRenderers(rowHeaders, []);\n        }\n        this.resetOversizedRows();\n        this.tableRenderer.setViewportSize(this.getRenderedRowsCount(), this.getRenderedColumnsCount()).setFilters(this.rowFilter, this.columnFilter).render();\n        let workspaceWidth;\n        if (this.isMaster) {\n          workspaceWidth = this.dataAccessObject.workspaceWidth;\n          this.dataAccessObject.wtViewport.containerWidth = null;\n          this.markOversizedColumnHeaders();\n        }\n        this.adjustColumnHeaderHeights();\n        if (this.isMaster || this.is(CLONE_BOTTOM)) {\n          this.markOversizedRows();\n        }\n        if (this.isMaster) {\n          this.dataAccessObject.wtViewport.createVisibleCalculators();\n          this.dataAccessObject.wtOverlays.refresh(false);\n          this.dataAccessObject.wtOverlays.applyToDOM();\n          const hiderWidth = outerWidth(this.hider);\n          const tableWidth = outerWidth(this.TABLE);\n          if (hiderWidth !== 0 && tableWidth !== hiderWidth) {\n            // Recalculate the column widths, if width changes made in the overlays removed the scrollbar, thus changing the viewport width.\n            this.columnUtils.calculateWidths();\n            this.tableRenderer.renderer.colGroup.render();\n          }\n          if (workspaceWidth !== this.dataAccessObject.wtViewport.getWorkspaceWidth()) {\n            // workspace width changed though to shown/hidden vertical scrollbar. Let's reapply stretching\n            this.dataAccessObject.wtViewport.containerWidth = null;\n            this.columnUtils.calculateWidths();\n            this.tableRenderer.renderer.colGroup.render();\n          }\n          this.wtSettings.getSetting('onDraw', true);\n        } else if (this.is(CLONE_BOTTOM)) {\n          this.dataAccessObject.cloneSource.wtOverlays.adjustElementsSize();\n        }\n      }\n    }\n    let positionChanged = false;\n    if (this.isMaster) {\n      positionChanged = wtOverlays.topOverlay.resetFixedPosition();\n      if (wtOverlays.bottomOverlay.clone) {\n        positionChanged = wtOverlays.bottomOverlay.resetFixedPosition() || positionChanged;\n      }\n      positionChanged = wtOverlays.inlineStartOverlay.resetFixedPosition() || positionChanged;\n      if (wtOverlays.topInlineStartCornerOverlay) {\n        wtOverlays.topInlineStartCornerOverlay.resetFixedPosition();\n      }\n      if (wtOverlays.bottomInlineStartCornerOverlay && wtOverlays.bottomInlineStartCornerOverlay.clone) {\n        wtOverlays.bottomInlineStartCornerOverlay.resetFixedPosition();\n      }\n    }\n    if (positionChanged) {\n      // It refreshes the cells borders caused by a 1px shift (introduced by overlays which add or\n      // remove `innerBorderTop` and `innerBorderInlineStart` CSS classes to the DOM element. This happens\n      // when there is a switch between rendering from 0 to N rows/columns and vice versa).\n      wtOverlays.refreshAll(); // `refreshAll()` internally already calls `refreshSelections()` method\n      wtOverlays.adjustElementsSize();\n    } else {\n      this.dataAccessObject.selectionManager.setActiveOverlay(this.facadeGetter()).render(runFastDraw);\n    }\n    if (syncScroll) {\n      wtOverlays.syncScrollWithMaster();\n    }\n    this.dataAccessObject.drawn = true;\n    return this;\n  }\n\n  /**\n   * @param {number} col The visual column index.\n   */\n  markIfOversizedColumnHeader(col) {\n    const sourceColIndex = this.columnFilter.renderedToSource(col);\n    let level = this.wtSettings.getSetting('columnHeaders').length;\n    const defaultRowHeight = this.wtSettings.getSetting('defaultRowHeight');\n    let previousColHeaderHeight;\n    let currentHeader;\n    let currentHeaderHeight;\n    const columnHeaderHeightSetting = this.wtSettings.getSetting('columnHeaderHeight') || [];\n    while (level) {\n      level -= 1;\n      previousColHeaderHeight = this.getColumnHeaderHeight(level);\n      currentHeader = this.getColumnHeader(sourceColIndex, level);\n      if (!currentHeader) {\n        /* eslint-disable no-continue */\n        continue;\n      }\n      currentHeaderHeight = innerHeight(currentHeader);\n      if (!previousColHeaderHeight && defaultRowHeight < currentHeaderHeight || previousColHeaderHeight < currentHeaderHeight) {\n        this.dataAccessObject.wtViewport.oversizedColumnHeaders[level] = currentHeaderHeight;\n      }\n      if (Array.isArray(columnHeaderHeightSetting)) {\n        if (columnHeaderHeightSetting[level] !== null && columnHeaderHeightSetting[level] !== undefined) {\n          this.dataAccessObject.wtViewport.oversizedColumnHeaders[level] = columnHeaderHeightSetting[level];\n        }\n      } else if (!isNaN(columnHeaderHeightSetting)) {\n        this.dataAccessObject.wtViewport.oversizedColumnHeaders[level] = columnHeaderHeightSetting;\n      }\n      if (this.dataAccessObject.wtViewport.oversizedColumnHeaders[level] < (columnHeaderHeightSetting[level] || columnHeaderHeightSetting)) {\n        this.dataAccessObject.wtViewport.oversizedColumnHeaders[level] = columnHeaderHeightSetting[level] || columnHeaderHeightSetting; // eslint-disable-line max-len\n      }\n    }\n  }\n\n  /**\n   *\n   */\n  adjustColumnHeaderHeights() {\n    const {\n      wtSettings\n    } = this;\n    const children = this.THEAD.childNodes;\n    const oversizedColumnHeaders = this.dataAccessObject.wtViewport.oversizedColumnHeaders;\n    const columnHeaders = wtSettings.getSetting('columnHeaders');\n    for (let i = 0, len = columnHeaders.length; i < len; i++) {\n      if (oversizedColumnHeaders[i]) {\n        if (!children[i] || children[i].childNodes.length === 0) {\n          return;\n        }\n        children[i].childNodes[0].style.height = `${oversizedColumnHeaders[i]}px`;\n      }\n    }\n  }\n\n  /**\n   * Resets cache of row heights. The cache should be cached for each render cycle in a case\n   * when new cell values have content which increases/decreases cell height.\n   */\n  resetOversizedRows() {\n    const {\n      wtSettings\n    } = this;\n    const {\n      wtViewport\n    } = this.dataAccessObject;\n    if (!this.isMaster && !this.is(CLONE_BOTTOM)) {\n      return;\n    }\n    if (!wtSettings.getSetting('externalRowCalculator')) {\n      const rowsToRender = this.getRenderedRowsCount();\n\n      // Reset the oversized row cache for rendered rows\n      for (let visibleRowIndex = 0; visibleRowIndex < rowsToRender; visibleRowIndex++) {\n        const sourceRow = this.rowFilter.renderedToSource(visibleRowIndex);\n        if (wtViewport.oversizedRows && wtViewport.oversizedRows[sourceRow]) {\n          wtViewport.oversizedRows[sourceRow] = undefined;\n        }\n      }\n    }\n  }\n\n  /**\n   * Get cell element at coords.\n   * Negative coords.row or coords.col are used to retrieve header cells. If there are multiple header levels, the\n   * negative value corresponds to the distance from the working area. For example, when there are 3 levels of column\n   * headers, coords.col=-1 corresponds to the most inner header element, while coords.col=-3 corresponds to the\n   * outmost header element.\n   *\n   * In case an element for the coords is not rendered, the method returns an error code.\n   * To produce the error code, the input parameters are validated in the order in which they\n   * are given. Thus, if both the row and the column coords are out of the rendered bounds,\n   * the method returns the error code for the row.\n   *\n   * @param {CellCoords} coords The cell coordinates.\n   * @returns {HTMLElement|number} HTMLElement on success or Number one of the exit codes on error:\n   *  -1 row before viewport\n   *  -2 row after viewport\n   *  -3 column before viewport\n   *  -4 column after viewport.\n   */\n  getCell(coords) {\n    let row = coords.row;\n    let column = coords.col;\n    const hookResult = this.wtSettings.getSetting('onModifyGetCellCoords', row, column);\n    if (hookResult && Array.isArray(hookResult)) {\n      [row, column] = hookResult;\n    }\n    if (this.isRowBeforeRenderedRows(row)) {\n      // row before rendered rows\n      return -1;\n    } else if (this.isRowAfterRenderedRows(row)) {\n      // row after rendered rows\n      return -2;\n    } else if (this.isColumnBeforeRenderedColumns(column)) {\n      // column before rendered columns\n      return -3;\n    } else if (this.isColumnAfterRenderedColumns(column)) {\n      // column after rendered columns\n      return -4;\n    }\n    const TR = this.getRow(row);\n    if (!TR && row >= 0) {\n      throw new Error('TR was expected to be rendered but is not');\n    }\n    const TD = TR.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(column)];\n    if (!TD && column >= 0) {\n      throw new Error('TD or TH was expected to be rendered but is not');\n    }\n    return TD;\n  }\n\n  /**\n   * Get the DOM element of the row with the provided index.\n   *\n   * @param {number} rowIndex Row index.\n   * @returns {HTMLTableRowElement|boolean} Return the row's DOM element or `false` if the row with the provided\n   * index doesn't exist.\n   */\n  getRow(rowIndex) {\n    let renderedRowIndex = null;\n    let parentElement = null;\n    if (rowIndex < 0) {\n      var _this$rowFilter;\n      renderedRowIndex = (_this$rowFilter = this.rowFilter) === null || _this$rowFilter === void 0 ? void 0 : _this$rowFilter.sourceRowToVisibleColHeadedRow(rowIndex);\n      parentElement = this.THEAD;\n    } else {\n      var _this$rowFilter2;\n      renderedRowIndex = (_this$rowFilter2 = this.rowFilter) === null || _this$rowFilter2 === void 0 ? void 0 : _this$rowFilter2.sourceToRendered(rowIndex);\n      parentElement = this.TBODY;\n    }\n    if (renderedRowIndex !== undefined && parentElement !== undefined) {\n      if (parentElement.childNodes.length < renderedRowIndex + 1) {\n        return false;\n      } else {\n        return parentElement.childNodes[renderedRowIndex];\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * GetColumnHeader.\n   *\n   * @param {number} col Column index.\n   * @param {number} [level=0] Header level (0 = most distant to the table).\n   * @returns {object} HTMLElement on success or undefined on error.\n   */\n  getColumnHeader(col) {\n    let level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const TR = this.THEAD.childNodes[level];\n    return TR === null || TR === void 0 ? void 0 : TR.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(col)];\n  }\n\n  /**\n   * Gets all columns headers (TH elements) from the table.\n   *\n   * @param {number} column A source column index.\n   * @returns {HTMLTableCellElement[]}\n   */\n  getColumnHeaders(column) {\n    const THs = [];\n    const visibleColumn = this.columnFilter.sourceColumnToVisibleRowHeadedColumn(column);\n    this.THEAD.childNodes.forEach(TR => {\n      const TH = TR.childNodes[visibleColumn];\n      if (TH) {\n        THs.push(TH);\n      }\n    });\n    return THs;\n  }\n\n  /**\n   * GetRowHeader.\n   *\n   * @param {number} row Row index.\n   * @param {number} [level=0] Header level (0 = most distant to the table).\n   * @returns {HTMLElement} HTMLElement on success or Number one of the exit codes on error: `null table doesn't have\n   *   row headers`.\n   */\n  getRowHeader(row) {\n    let level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const rowHeadersCount = this.wtSettings.getSetting('rowHeaders').length;\n    if (level >= rowHeadersCount) {\n      return;\n    }\n    const renderedRow = this.rowFilter.sourceToRendered(row);\n    const visibleRow = renderedRow < 0 ? this.rowFilter.sourceRowToVisibleColHeadedRow(row) : renderedRow;\n    const parentElement = renderedRow < 0 ? this.THEAD : this.TBODY;\n    const TR = parentElement.childNodes[visibleRow];\n    return TR === null || TR === void 0 ? void 0 : TR.childNodes[level];\n  }\n\n  /**\n   * Gets all rows headers (TH elements) from the table.\n   *\n   * @param {number} row A source row index.\n   * @returns {HTMLTableCellElement[]}\n   */\n  getRowHeaders(row) {\n    const THs = [];\n    const rowHeadersCount = this.wtSettings.getSetting('rowHeaders').length;\n    for (let renderedRowIndex = 0; renderedRowIndex < rowHeadersCount; renderedRowIndex++) {\n      const TR = this.TBODY.childNodes[this.rowFilter.sourceToRendered(row)];\n      const TH = TR === null || TR === void 0 ? void 0 : TR.childNodes[renderedRowIndex];\n      if (TH) {\n        THs.push(TH);\n      }\n    }\n    return THs;\n  }\n\n  /**\n   * Returns cell coords object for a given TD (or a child element of a TD element).\n   *\n   * @param {HTMLTableCellElement} TD A cell DOM element (or a child of one).\n   * @returns {CellCoords|null} The coordinates of the provided TD element (or the closest TD element) or null, if the\n   *   provided element is not applicable.\n   */\n  getCoords(TD) {\n    let cellElement = TD;\n    if (cellElement.nodeName !== 'TD' && cellElement.nodeName !== 'TH') {\n      cellElement = closest(cellElement, ['TD', 'TH']);\n    }\n    if (cellElement === null) {\n      return null;\n    }\n    const TR = cellElement.parentNode;\n    const CONTAINER = TR.parentNode;\n    let row = index(TR);\n    let col = cellElement.cellIndex;\n    if (overlayContainsElement(CLONE_TOP_INLINE_START_CORNER, cellElement, this.wtRootElement) || overlayContainsElement(CLONE_TOP, cellElement, this.wtRootElement)) {\n      if (CONTAINER.nodeName === 'THEAD') {\n        row -= CONTAINER.childNodes.length;\n      }\n    } else if (overlayContainsElement(CLONE_BOTTOM_INLINE_START_CORNER, cellElement, this.wtRootElement) || overlayContainsElement(CLONE_BOTTOM, cellElement, this.wtRootElement)) {\n      const totalRows = this.wtSettings.getSetting('totalRows');\n      row = totalRows - CONTAINER.childNodes.length + row;\n    } else if (CONTAINER === this.THEAD) {\n      row = this.rowFilter.visibleColHeadedRowToSourceRow(row);\n    } else {\n      row = this.rowFilter.renderedToSource(row);\n    }\n    if (overlayContainsElement(CLONE_TOP_INLINE_START_CORNER, cellElement, this.wtRootElement) || overlayContainsElement(CLONE_INLINE_START, cellElement, this.wtRootElement) || overlayContainsElement(CLONE_BOTTOM_INLINE_START_CORNER, cellElement, this.wtRootElement)) {\n      col = this.columnFilter.offsettedTH(col);\n    } else {\n      col = this.columnFilter.visibleRowHeadedColumnToSourceColumn(col);\n    }\n    return this.wot.createCellCoords(row, col);\n  }\n\n  /**\n   * Check if any of the rendered rows is higher than expected, and if so, cache them.\n   */\n  markOversizedRows() {\n    if (this.wtSettings.getSetting('externalRowCalculator')) {\n      return;\n    }\n    let rowCount = this.TBODY.childNodes.length;\n    const expectedTableHeight = rowCount * this.wtSettings.getSetting('defaultRowHeight');\n    const actualTableHeight = innerHeight(this.TBODY) - 1;\n    let previousRowHeight;\n    let rowInnerHeight;\n    let sourceRowIndex;\n    let currentTr;\n    let rowHeader;\n    if (expectedTableHeight === actualTableHeight && !this.wtSettings.getSetting('fixedRowsBottom')) {\n      // If the actual table height equals rowCount * default single row height, no row is oversized -> no need to iterate over them\n      return;\n    }\n    while (rowCount) {\n      rowCount -= 1;\n      sourceRowIndex = this.rowFilter.renderedToSource(rowCount);\n      previousRowHeight = this.getRowHeight(sourceRowIndex);\n      currentTr = this.getTrForRow(sourceRowIndex);\n      rowHeader = currentTr.querySelector('th');\n      if (rowHeader) {\n        rowInnerHeight = innerHeight(rowHeader);\n      } else {\n        rowInnerHeight = innerHeight(currentTr) - 1;\n      }\n      if (!previousRowHeight && this.wtSettings.getSetting('defaultRowHeight') < rowInnerHeight || previousRowHeight < rowInnerHeight) {\n        rowInnerHeight += 1;\n        this.dataAccessObject.wtViewport.oversizedRows[sourceRowIndex] = rowInnerHeight;\n      }\n    }\n  }\n\n  /**\n   * @param {number} row The visual row index.\n   * @returns {HTMLTableElement}\n   */\n  getTrForRow(row) {\n    return this.TBODY.childNodes[this.rowFilter.sourceToRendered(row)];\n  }\n\n  /**\n   * Checks if the column index (negative value from -1 to N) is rendered.\n   *\n   * @param {number} column The column index (negative value from -1 to N).\n   * @returns {boolean}\n   */\n  isColumnHeaderRendered(column) {\n    if (column >= 0) {\n      return false;\n    }\n    const rowHeaders = this.wtSettings.getSetting('rowHeaders');\n    const rowHeadersCount = rowHeaders.length;\n    return Math.abs(column) <= rowHeadersCount;\n  }\n\n  /**\n   * Checks if the row index (negative value from -1 to N) is rendered.\n   *\n   * @param {number} row The row index (negative value from -1 to N).\n   * @returns {boolean}\n   */\n  isRowHeaderRendered(row) {\n    if (row >= 0) {\n      return false;\n    }\n    const columnHeaders = this.wtSettings.getSetting('columnHeaders');\n    const columnHeadersCount = columnHeaders.length;\n    return Math.abs(row) <= columnHeadersCount;\n  }\n\n  /* eslint-disable jsdoc/require-description-complete-sentence */\n  /**\n   * Check if the given row index is lower than the index of the first row that\n   * is currently rendered and return TRUE in that case, or FALSE otherwise.\n   *\n   * Negative row index is used to check the columns' headers.\n   *\n   *  Headers\n   *           +--------------+                                     │\n   *       -3  │    │    │    │                                     │\n   *           +--------------+                                     │\n   *       -2  │    │    │    │                                     │ TRUE\n   *           +--------------+                                     │\n   *       -1  │    │    │    │                                     │\n   *  Cells  +==================+                                   │\n   *        0  ┇    ┇    ┇    ┇ <--- For fixedRowsTop: 1            │\n   *           +--------------+      the master overlay do       ---+ first rendered row (index 1)\n   *        1  │ A2 │ B2 │ C2 │      not render the first row.      │\n   *           +--------------+                                     │ FALSE\n   *        2  │ A3 │ B3 │ C3 │                                     │\n   *           +--------------+                                  ---+ last rendered row\n   *                                                                │\n   *                                                                │ FALSE\n   *\n   * @param {number} row The visual row index.\n   * @memberof Table#\n   * @function isRowBeforeRenderedRows\n   * @returns {boolean}\n   */\n  /* eslint-enable jsdoc/require-description-complete-sentence */\n  isRowBeforeRenderedRows(row) {\n    const first = this.getFirstRenderedRow();\n\n    // Check the headers only in case when the first rendered row is -1 or 0.\n    // This is an indication that the overlay is placed on the most top position.\n    if (row < 0 && first <= 0) {\n      return !this.isRowHeaderRendered(row);\n    }\n    return row < first;\n  }\n\n  /* eslint-disable jsdoc/require-description-complete-sentence */\n  /**\n   * Check if the given column index is greater than the index of the last column that\n   * is currently rendered and return TRUE in that case, or FALSE otherwise.\n   *\n   * The negative row index is used to check the columns' headers. However,\n   * keep in mind that for negative indexes, the method always returns FALSE as\n   * it is not possible to render headers partially. The \"after\" index can not be\n   * lower than -1.\n   *\n   *  Headers\n   *           +--------------+                                     │\n   *       -3  │    │    │    │                                     │\n   *           +--------------+                                     │\n   *       -2  │    │    │    │                                     │ FALSE\n   *           +--------------+                                     │\n   *       -1  │    │    │    │                                     │\n   *  Cells  +==================+                                   │\n   *        0  ┇    ┇    ┇    ┇ <--- For fixedRowsTop: 1            │\n   *           +--------------+      the master overlay do       ---+ first rendered row (index 1)\n   *        1  │ A2 │ B2 │ C2 │      not render the first rows      │\n   *           +--------------+                                     │ FALSE\n   *        2  │ A3 │ B3 │ C3 │                                     │\n   *           +--------------+                                  ---+ last rendered row\n   *                                                                │\n   *                                                                │ TRUE\n   *\n   * @param {number} row The visual row index.\n   * @memberof Table#\n   * @function isRowAfterRenderedRows\n   * @returns {boolean}\n   */\n  /* eslint-enable jsdoc/require-description-complete-sentence */\n  isRowAfterRenderedRows(row) {\n    return row > this.getLastRenderedRow();\n  }\n\n  /* eslint-disable jsdoc/require-description-complete-sentence */\n  /**\n   * Check if the given column index is lower than the index of the first column that\n   * is currently rendered and return TRUE in that case, or FALSE otherwise.\n   *\n   * Negative column index is used to check the rows' headers.\n   *\n   *                            For fixedColumnsStart: 1 the master overlay\n   *                            do not render this first columns.\n   *  Headers    -3   -2   -1    |\n   *           +----+----+----║┄ ┄ +------+------+\n   *           │    │    │    ║    │  B1  │  C1  │\n   *           +--------------║┄ ┄ --------------│\n   *           │    │    │    ║    │  B2  │  C2  │\n   *           +--------------║┄ ┄ --------------│\n   *           │    │    │    ║    │  B3  │  C3  │\n   *           +----+----+----║┄ ┄ +------+------+\n   *                               ╷             ╷\n   *      -------------------------+-------------+---------------->\n   *          TRUE             first    FALSE   last         FALSE\n   *                           rendered         rendered\n   *                           column           column\n   *\n   * @param {number} column The visual column index.\n   * @memberof Table#\n   * @function isColumnBeforeRenderedColumns\n   * @returns {boolean}\n   */\n  /* eslint-enable jsdoc/require-description-complete-sentence */\n  isColumnBeforeRenderedColumns(column) {\n    const first = this.getFirstRenderedColumn();\n\n    // Check the headers only in case when the first rendered column is -1 or 0.\n    // This is an indication that the overlay is placed on the most left position.\n    if (column < 0 && first <= 0) {\n      return !this.isColumnHeaderRendered(column);\n    }\n    return column < first;\n  }\n\n  /* eslint-disable jsdoc/require-description-complete-sentence */\n  /**\n   * Check if the given column index is greater than the index of the last column that\n   * is currently rendered and return TRUE in that case, or FALSE otherwise.\n   *\n   * The negative column index is used to check the rows' headers. However,\n   * keep in mind that for negative indexes, the method always returns FALSE as\n   * it is not possible to render headers partially. The \"after\" index can not be\n   * lower than -1.\n   *\n   *                            For fixedColumnsStart: 1 the master overlay\n   *                            do not render this first columns.\n   *  Headers    -3   -2   -1    |\n   *           +----+----+----║┄ ┄ +------+------+\n   *           │    │    │    ║    │  B1  │  C1  │\n   *           +--------------║┄ ┄ --------------│\n   *           │    │    │    ║    │  B2  │  C2  │\n   *           +--------------║┄ ┄ --------------│\n   *           │    │    │    ║    │  B3  │  C3  │\n   *           +----+----+----║┄ ┄ +------+------+\n   *                               ╷             ╷\n   *      -------------------------+-------------+---------------->\n   *          FALSE             first    FALSE   last         TRUE\n   *                           rendered         rendered\n   *                           column           column\n   *\n   * @param {number} column The visual column index.\n   * @memberof Table#\n   * @function isColumnAfterRenderedColumns\n   * @returns {boolean}\n   */\n  /* eslint-enable jsdoc/require-description-complete-sentence */\n  isColumnAfterRenderedColumns(column) {\n    return this.columnFilter && column > this.getLastRenderedColumn();\n  }\n  isColumnAfterViewport(column) {\n    return this.columnFilter && column > this.getLastVisibleColumn();\n  }\n  isRowAfterViewport(row) {\n    return this.rowFilter && row > this.getLastVisibleRow();\n  }\n  isColumnBeforeViewport(column) {\n    return this.columnFilter && this.columnFilter.sourceToRendered(column) < 0 && column >= 0;\n  }\n  isLastRowFullyVisible() {\n    return this.getLastVisibleRow() === this.getLastRenderedRow();\n  }\n  isLastColumnFullyVisible() {\n    return this.getLastVisibleColumn() === this.getLastRenderedColumn();\n  }\n  allRowsInViewport() {\n    return this.wtSettings.getSetting('totalRows') === this.getVisibleRowsCount();\n  }\n  allColumnsInViewport() {\n    return this.wtSettings.getSetting('totalColumns') === this.getVisibleColumnsCount();\n  }\n\n  /**\n   * Checks if any of the row's cells content exceeds its initial height, and if so, returns the oversized height.\n   *\n   * @param {number} sourceRow The physical row index.\n   * @returns {number}\n   */\n  getRowHeight(sourceRow) {\n    return this.rowUtils.getHeight(sourceRow);\n  }\n\n  /**\n   * @param {number} level The column level.\n   * @returns {number}\n   */\n  getColumnHeaderHeight(level) {\n    return this.columnUtils.getHeaderHeight(level);\n  }\n\n  /**\n   * @param {number} sourceColumn The physical column index.\n   * @returns {number}\n   */\n  getColumnWidth(sourceColumn) {\n    return this.columnUtils.getWidth(sourceColumn);\n  }\n\n  /**\n   * @param {number} sourceColumn The physical column index.\n   * @returns {number}\n   */\n  getStretchedColumnWidth(sourceColumn) {\n    return this.columnUtils.getStretchedColumnWidth(sourceColumn);\n  }\n\n  /**\n   * Checks if the table has defined size. It returns `true` when the table has width and height\n   * set bigger than `0px`.\n   *\n   * @returns {boolean}\n   */\n  hasDefinedSize() {\n    return this.hasTableHeight && this.hasTableWidth;\n  }\n\n  /**\n   * Gets table's width. The returned width is the width of the rendered cells that fit in the\n   * current viewport. The value may change depends on the viewport position (scroll position).\n   *\n   * @returns {number}\n   */\n  getWidth() {\n    return outerWidth(this.TABLE);\n  }\n\n  /**\n   * Gets table's height. The returned height is the height of the rendered cells that fit in the\n   * current viewport. The value may change depends on the viewport position (scroll position).\n   *\n   * @returns {number}\n   */\n  getHeight() {\n    return outerHeight(this.TABLE);\n  }\n\n  /**\n   * Gets table's total width. The returned width is the width of all rendered cells (including headers)\n   * that can be displayed in the table.\n   *\n   * @returns {number}\n   */\n  getTotalWidth() {\n    const width = outerWidth(this.hider);\n\n    // when the overlay's table does not have any cells the hider returns 0, get then width from the table element\n    return width !== 0 ? width : this.getWidth();\n  }\n\n  /**\n   * Gets table's total height. The returned height is the height of all rendered cells (including headers)\n   * that can be displayed in the table.\n   *\n   * @returns {number}\n   */\n  getTotalHeight() {\n    const height = outerHeight(this.hider);\n\n    // when the overlay's table does not have any cells the hider returns 0, get then height from the table element\n    return height !== 0 ? height : this.getHeight();\n  }\n\n  /**\n   * Checks if the table is visible. It returns `true` when the holder element (or its parents)\n   * has CSS 'display' property different than 'none'.\n   *\n   * @returns {boolean}\n   */\n  isVisible() {\n    return isVisible(this.TABLE);\n  }\n\n  /**\n   * Modify row header widths provided by user in class contructor.\n   *\n   * @private\n   * @param {Function} rowHeaderWidthFactory The function which can provide default width values for rows..\n   * @returns {number}\n   */\n  _modifyRowHeaderWidth(rowHeaderWidthFactory) {\n    let widths = isFunction(rowHeaderWidthFactory) ? rowHeaderWidthFactory() : null;\n    if (Array.isArray(widths)) {\n      widths = [...widths];\n      widths[widths.length - 1] = this._correctRowHeaderWidth(widths[widths.length - 1]);\n    } else {\n      widths = this._correctRowHeaderWidth(widths);\n    }\n    return widths;\n  }\n\n  /**\n   * Correct row header width if necessary.\n   *\n   * @private\n   * @param {number} width The width to process.\n   * @returns {number}\n   */\n  _correctRowHeaderWidth(width) {\n    let rowHeaderWidth = width;\n    if (typeof width !== 'number') {\n      rowHeaderWidth = this.wtSettings.getSetting('defaultColumnWidth');\n    }\n    if (this.correctHeaderWidth) {\n      rowHeaderWidth += 1;\n    }\n    return rowHeaderWidth;\n  }\n}\nexport default Table;", "import { defineGetter } from \"../../../../../helpers/object.mjs\";\nconst MIXIN_NAME = 'stickyRowsBottom';\n\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to rows.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use sticky rendering of the bottom rows in the vertical axis.\n *\n * @type {object}\n */\nconst stickyRowsBottom = {\n  /**\n   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstRenderedRow() {\n    const totalRows = this.wtSettings.getSetting('totalRows');\n    const fixedRowsBottom = this.wtSettings.getSetting('fixedRowsBottom');\n    const index = totalRows - fixedRowsBottom;\n    if (totalRows === 0 || fixedRowsBottom === 0) {\n      return -1;\n    }\n    if (index < 0) {\n      return 0;\n    }\n    return index;\n  },\n  /**\n   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstVisibleRow() {\n    return this.getFirstRenderedRow();\n  },\n  /**\n   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastRenderedRow() {\n    return this.wtSettings.getSetting('totalRows') - 1;\n  },\n  /**\n   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastVisibleRow() {\n    return this.getLastRenderedRow();\n  },\n  /**\n   * Get the number of rendered rows.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRenderedRowsCount() {\n    const totalRows = this.wtSettings.getSetting('totalRows');\n    return Math.min(this.wtSettings.getSetting('fixedRowsBottom'), totalRows);\n  },\n  /**\n   * Get the number of fully visible rows in the viewport.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getVisibleRowsCount() {\n    return this.getRenderedRowsCount();\n  },\n  /**\n   * Get the number of rendered column headers.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getColumnHeadersCount() {\n    return 0;\n  }\n};\ndefineGetter(stickyRowsBottom, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default stickyRowsBottom;", "import { defineGetter } from \"../../../../../helpers/object.mjs\";\nconst MIXIN_NAME = 'stickyColumnsStart';\n\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to columns.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use sticky rendering of the first columns in the horizontal axis.\n *\n * @type {object}\n */\nconst stickyColumnsStart = {\n  /**\n   * Get the source index of the first rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstRenderedColumn() {\n    const totalColumns = this.wtSettings.getSetting('totalColumns');\n    if (totalColumns === 0) {\n      return -1;\n    }\n    return 0;\n  },\n  /**\n   * Get the source index of the first column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstVisibleColumn() {\n    return this.getFirstRenderedColumn();\n  },\n  /**\n   * Get the source index of the last rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastRenderedColumn() {\n    return this.getRenderedColumnsCount() - 1;\n  },\n  /**\n   * Get the source index of the last column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastVisibleColumn() {\n    return this.getLastRenderedColumn();\n  },\n  /**\n   * Get the number of rendered columns.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRenderedColumnsCount() {\n    const totalColumns = this.wtSettings.getSetting('totalColumns');\n    return Math.min(this.wtSettings.getSetting('fixedColumnsStart'), totalColumns);\n  },\n  /**\n   * Get the number of fully visible columns in the viewport.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getVisibleColumnsCount() {\n    return this.getRenderedColumnsCount();\n  },\n  /**\n   * Get the number of rendered row headers.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRowHeadersCount() {\n    return this.dataAccessObject.rowHeaders.length;\n  }\n};\ndefineGetter(stickyColumnsStart, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default stickyColumnsStart;", "import Table from \"../table.mjs\";\nimport stickyRowsBottom from \"./mixin/stickyRowsBottom.mjs\";\nimport stickyColumnsStart from \"./mixin/stickyColumnsStart.mjs\";\nimport { mixin } from \"../../../../helpers/object.mjs\";\nimport { CLONE_BOTTOM_INLINE_START_CORNER } from \"../overlay/index.mjs\";\n/**\n * Subclass of `Table` that provides the helper methods relevant to bottomInlineStartCornerOverlay\n * (in RTL mode the overlay sits on the right of the screen), implemented through mixins.\n *\n * @mixes stickyRowsBottom\n * @mixes stickyColumnsStart\n */\nclass BottomInlineStartCornerOverlayTable extends Table {\n  /**\n   * @param {TableDao} dataAccessObject The data access object.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {DomBindings} domBindings Bindings into DOM.\n   * @param {Settings} wtSettings The Walkontable settings.\n   */\n  constructor(dataAccessObject, facadeGetter, domBindings, wtSettings) {\n    super(dataAccessObject, facadeGetter, domBindings, wtSettings, CLONE_BOTTOM_INLINE_START_CORNER);\n  }\n}\nmixin(BottomInlineStartCornerOverlayTable, stickyRowsBottom);\nmixin(BottomInlineStartCornerOverlayTable, stickyColumnsStart);\nexport default BottomInlineStartCornerOverlayTable;", "/**\n * @typedef {'top'|'bottom'|'inline_start'|'top_inline_start_corner'|'bottom_inline_start_corner'} CLONE_TYPES_ENUM\n */\nexport const CLONE_TOP = 'top';\nexport const CLONE_BOTTOM = 'bottom';\nexport const CLONE_INLINE_START = 'inline_start';\nexport const CLONE_TOP_INLINE_START_CORNER = 'top_inline_start_corner';\nexport const CLONE_BOTTOM_INLINE_START_CORNER = 'bottom_inline_start_corner';\nexport const CLONE_TYPES = [CLONE_TOP, CLONE_BOTTOM, CLONE_INLINE_START, CLONE_TOP_INLINE_START_CORNER, CLONE_BOTTOM_INLINE_START_CORNER];\nexport const CLONE_CLASS_NAMES = new Map([[CLONE_TOP, `ht_clone_${CLONE_TOP}`], [CLONE_BOTTOM, `ht_clone_${CLONE_BOTTOM}`], [CLONE_INLINE_START, `ht_clone_${CLONE_INLINE_START} ht_clone_left`], [CLONE_TOP_INLINE_START_CORNER, `ht_clone_${CLONE_TOP_INLINE_START_CORNER} ht_clone_top_left_corner`], [CLONE_BOTTOM_INLINE_START_CORNER, `ht_clone_${CLONE_BOTTOM_INLINE_START_CORNER} ht_clone_bottom_left_corner`]]);", "import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { innerHeight, innerWidth, getScrollLeft, getScrollTop, offset } from \"../../../helpers/dom/element.mjs\";\n/**\n * @class Scroll\n */\nclass Scroll {\n  /**\n   * @param {ScrollDao} dataAccessObject Tha data access object.\n   */\n  constructor(dataAccessObject) {\n    /**\n     * The data access object.\n     *\n     * @protected\n     * @type {ScrollDao}\n     */\n    _defineProperty(this, \"dataAccessObject\", void 0);\n    /**\n     * Holds the last column reached by the scroll, which determines the scroll snapping direction\n     * (left or right) for a next horizontal scroll.\n     *\n     * @protected\n     * @type {number}\n     */\n    _defineProperty(this, \"lastScrolledColumnPos\", -1);\n    /**\n     * Holds the last row reached by the scroll, which determines the scroll snapping direction\n     * (top or bottom) for a next vertical scroll.\n     *\n     * @protected\n     * @type {number}\n     */\n    _defineProperty(this, \"lastScrolledRowPos\", -1);\n    this.dataAccessObject = dataAccessObject;\n  }\n\n  /**\n   * Scrolls viewport to a cell.\n   *\n   * @param {CellCoords} coords The cell coordinates.\n   * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.\n   * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right of the table.\n   * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom of the table.\n   * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left of the table.\n   * @returns {boolean}\n   */\n  scrollViewport(coords, snapToTop, snapToRight, snapToBottom, snapToLeft) {\n    const scrolledHorizontally = this.scrollViewportHorizontally(coords.col, snapToRight, snapToLeft);\n    const scrolledVertically = this.scrollViewportVertically(coords.row, snapToTop, snapToBottom);\n    return scrolledHorizontally || scrolledVertically;\n  }\n\n  /**\n   * Scrolls viewport to a column.\n   *\n   * @param {number} column Visual column index.\n   * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right of the table.\n   * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left of the table.\n   * @returns {boolean}\n   */\n  scrollViewportHorizontally(column, snapToRight, snapToLeft) {\n    const {\n      drawn,\n      totalColumns\n    } = this.dataAccessObject;\n\n    // do not scroll the viewport when the column points to a range outside of the dataset\n    if (!drawn || !Number.isInteger(column) || column < 0 || column > totalColumns) {\n      return false;\n    }\n    const firstVisibleColumn = this.getFirstVisibleColumn();\n    const lastVisibleColumn = this.getLastVisibleColumn();\n    const autoSnapping = snapToRight === undefined && snapToLeft === undefined;\n    const {\n      fixedColumnsStart,\n      inlineStartOverlay\n    } = this.dataAccessObject;\n\n    // for auto-snapping (both snap* arguments are undefined) do not scroll the viewport\n    // when the columns points to the overlays\n    if (autoSnapping && column < fixedColumnsStart) {\n      return false;\n    }\n    let result = false;\n    column = this.dataAccessObject.wtSettings.getSetting('onBeforeViewportScrollHorizontally', column);\n\n    // if there is no fully visible columns use the supporting variable (lastScrolledColumnPos) to\n    // determine the snapping direction (left or right)\n    if (firstVisibleColumn === -1) {\n      result = inlineStartOverlay.scrollTo(column, autoSnapping ? column > this.lastScrolledColumnPos : snapToRight);\n    } else if (autoSnapping && (column < firstVisibleColumn || column > lastVisibleColumn) || !autoSnapping) {\n      // if there is at least one fully visible column determine the snapping direction based on\n      // that columns or by snapToRight/snapToLeft flags, if provided.\n      result = inlineStartOverlay.scrollTo(column, autoSnapping ? column > lastVisibleColumn : snapToRight);\n    }\n    if (result) {\n      this.lastScrolledColumnPos = column;\n    }\n    return result;\n  }\n\n  /**\n   * Scrolls viewport to a row.\n   *\n   * @param {number} row Visual row index.\n   * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.\n   * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom of the table.\n   * @returns {boolean}\n   */\n  scrollViewportVertically(row, snapToTop, snapToBottom) {\n    const {\n      drawn,\n      totalRows\n    } = this.dataAccessObject;\n\n    // do not scroll the viewport when the row points to a range outside of the dataset\n    if (!drawn || !Number.isInteger(row) || row < 0 || row > totalRows) {\n      return false;\n    }\n    const firstVisibleRow = this.getFirstVisibleRow();\n    const lastVisibleRow = this.getLastVisibleRow();\n    const autoSnapping = snapToTop === undefined && snapToBottom === undefined;\n    const {\n      fixedRowsBottom,\n      fixedRowsTop,\n      topOverlay\n    } = this.dataAccessObject;\n\n    // for auto-snapping (both snap* arguments are undefined) do not scroll the viewport\n    // when the rows points to the overlays\n    if (autoSnapping && (row < fixedRowsTop || row > totalRows - fixedRowsBottom - 1)) {\n      return false;\n    }\n    let result = false;\n    row = this.dataAccessObject.wtSettings.getSetting('onBeforeViewportScrollVertically', row);\n\n    // if there is no fully visible rows use the supporting variable (lastScrolledRowPos) to\n    // determine the snapping direction (top or bottom)\n    if (firstVisibleRow === -1) {\n      result = topOverlay.scrollTo(row, autoSnapping ? row > this.lastScrolledRowPos : snapToBottom);\n    } else if (autoSnapping && (row < firstVisibleRow || row > lastVisibleRow) || !autoSnapping) {\n      // if there is at least one fully visible row determine the snapping direction based on\n      // that rows or by snapToTop/snapToBottom flags, if provided.\n      result = topOverlay.scrollTo(row, autoSnapping ? row > lastVisibleRow : snapToBottom);\n    }\n    if (result) {\n      this.lastScrolledRowPos = row;\n    }\n    return result;\n  }\n\n  /**\n   * Get first visible row based on virtual dom and how table is visible in browser window viewport.\n   *\n   * @returns {number}\n   */\n  getFirstVisibleRow() {\n    const {\n      topOverlay,\n      wtTable,\n      wtViewport,\n      totalRows,\n      fixedRowsTop,\n      rootWindow\n    } = this.dataAccessObject;\n    let firstVisibleRow = wtTable.getFirstVisibleRow();\n    if (topOverlay.mainTableScrollableElement === rootWindow) {\n      const rootElementOffset = offset(wtTable.wtRootElement);\n      const totalTableHeight = innerHeight(wtTable.hider);\n      const windowHeight = innerHeight(rootWindow);\n      const windowScrollTop = getScrollTop(rootWindow, rootWindow);\n\n      // Only calculate firstVisibleRow when table didn't filled (from up) whole viewport space\n      if (rootElementOffset.top + totalTableHeight - windowHeight <= windowScrollTop) {\n        let rowsHeight = wtViewport.getColumnHeaderHeight();\n        rowsHeight += topOverlay.sumCellSizes(0, fixedRowsTop);\n        for (let row = totalRows; row > 0; row--) {\n          rowsHeight += topOverlay.sumCellSizes(row - 1, row);\n          if (rootElementOffset.top + totalTableHeight - rowsHeight <= windowScrollTop) {\n            // Return physical row + 1\n            firstVisibleRow = row;\n            break;\n          }\n        }\n      }\n    }\n    return firstVisibleRow;\n  }\n\n  /**\n   * Get last visible row based on virtual dom and how table is visible in browser window viewport.\n   *\n   * @returns {number}\n   */\n  getLastVisibleRow() {\n    const {\n      topOverlay,\n      wtTable,\n      wtViewport,\n      totalRows,\n      rootWindow\n    } = this.dataAccessObject;\n    let lastVisibleRow = wtTable.getLastVisibleRow();\n    if (topOverlay.mainTableScrollableElement === rootWindow) {\n      const rootElementOffset = offset(wtTable.wtRootElement);\n      const windowScrollTop = getScrollTop(rootWindow, rootWindow);\n\n      // Only calculate lastVisibleRow when table didn't filled (from bottom) whole viewport space\n      if (rootElementOffset.top > windowScrollTop) {\n        const windowHeight = innerHeight(rootWindow);\n        let rowsHeight = wtViewport.getColumnHeaderHeight();\n        for (let row = 1; row <= totalRows; row++) {\n          rowsHeight += topOverlay.sumCellSizes(row - 1, row);\n          if (rootElementOffset.top + rowsHeight - windowScrollTop >= windowHeight) {\n            // Return physical row - 1 (-2 because rangeEach gives row index + 1 - sumCellSizes requirements)\n            lastVisibleRow = row - 2;\n            break;\n          }\n        }\n      }\n    }\n    return lastVisibleRow;\n  }\n\n  /**\n   * Get first visible column based on virtual dom and how table is visible in browser window viewport.\n   *\n   * @returns {number}\n   */\n  getFirstVisibleColumn() {\n    const {\n      inlineStartOverlay,\n      wtTable,\n      wtViewport,\n      totalColumns,\n      rootWindow\n    } = this.dataAccessObject;\n    let firstVisibleColumn = wtTable.getFirstVisibleColumn();\n    if (inlineStartOverlay.mainTableScrollableElement === rootWindow) {\n      const rootElementOffset = offset(wtTable.wtRootElement);\n      const totalTableWidth = innerWidth(wtTable.hider);\n      const windowWidth = innerWidth(rootWindow);\n      const windowScrollLeft = Math.abs(getScrollLeft(rootWindow, rootWindow));\n\n      // Only calculate firstVisibleColumn when table didn't filled (from left) whole viewport space\n      if (rootElementOffset.left + totalTableWidth - windowWidth <= windowScrollLeft) {\n        let columnsWidth = wtViewport.getRowHeaderWidth();\n        for (let column = totalColumns; column > 0; column--) {\n          columnsWidth += inlineStartOverlay.sumCellSizes(column - 1, column);\n          if (rootElementOffset.left + totalTableWidth - columnsWidth <= windowScrollLeft) {\n            // Return physical column + 1\n            firstVisibleColumn = column;\n            break;\n          }\n        }\n      }\n    }\n    return firstVisibleColumn;\n  }\n\n  /**\n   * Get last visible column based on virtual dom and how table is visible in browser window viewport.\n   *\n   * @returns {number}\n   */\n  getLastVisibleColumn() {\n    const {\n      wtSettings,\n      inlineStartOverlay,\n      wtTable,\n      wtViewport,\n      totalColumns,\n      rootWindow\n    } = this.dataAccessObject;\n    let lastVisibleColumn = wtTable.getLastVisibleColumn();\n    if (inlineStartOverlay.mainTableScrollableElement === rootWindow) {\n      const isRtl = wtSettings.getSetting('rtlMode');\n      let inlineStartRootElementOffset = null;\n      if (isRtl) {\n        const tableRect = wtTable.TABLE.getBoundingClientRect();\n        const rootDocument = this.dataAccessObject.rootWindow.document;\n        const docOffsetWidth = rootDocument.documentElement.offsetWidth;\n        inlineStartRootElementOffset = Math.abs(tableRect.right - docOffsetWidth);\n      } else {\n        const rootElementOffset = offset(wtTable.wtRootElement);\n        inlineStartRootElementOffset = rootElementOffset.left;\n      }\n      const windowScrollLeft = Math.abs(getScrollLeft(rootWindow, rootWindow));\n\n      // Only calculate lastVisibleColumn when table didn't filled (from right) whole viewport space\n      if (inlineStartRootElementOffset > windowScrollLeft) {\n        const windowWidth = innerWidth(rootWindow);\n        let columnsWidth = wtViewport.getRowHeaderWidth();\n        for (let column = 1; column <= totalColumns; column++) {\n          columnsWidth += inlineStartOverlay.sumCellSizes(column - 1, column);\n          if (inlineStartRootElementOffset + columnsWidth - windowScrollLeft >= windowWidth) {\n            // Return physical column - 1 (-2 because rangeEach gives column index + 1 - sumCellSizes requirements)\n            lastVisibleColumn = column - 2;\n            break;\n          }\n        }\n      }\n    }\n    return lastVisibleColumn;\n  }\n}\nexport default Scroll;", "import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { fastInnerText } from \"../../../../helpers/dom/element.mjs\";\nimport { randomString } from \"../../../../helpers/string.mjs\";\nimport EventManager from \"../../../../eventManager.mjs\";\nimport Scroll from \"../scroll.mjs\";\nimport CellCoords from \"../cell/coords.mjs\";\nimport CellRange from \"../cell/range.mjs\";\n/**\n * @abstract\n * @class Walkontable\n */\nexport default class CoreAbstract {\n  get eventManager() {\n    return new EventManager(this);\n  }\n\n  /**\n   * @param {HTMLTableElement} table Main table.\n   * @param {Settings} settings The Walkontable settings.\n   */\n  constructor(table, settings) {\n    _defineProperty(this, \"wtTable\", void 0);\n    _defineProperty(this, \"wtScroll\", void 0);\n    _defineProperty(this, \"wtViewport\", void 0);\n    _defineProperty(this, \"wtOverlays\", void 0);\n    _defineProperty(this, \"selectionManager\", void 0);\n    _defineProperty(this, \"wtEvent\", void 0);\n    /**\n     * The walkontable instance id.\n     *\n     * @public\n     * @type {Readonly<string>}\n     */\n    _defineProperty(this, \"guid\", `wt_${randomString()}`);\n    _defineProperty(this, \"drawInterrupted\", false);\n    _defineProperty(this, \"drawn\", false);\n    /**\n     * The DOM bindings.\n     *\n     * @public\n     * @type {DomBindings}\n     */\n    _defineProperty(this, \"domBindings\", void 0);\n    /**\n     * Settings.\n     *\n     * @public\n     * @type {Settings}\n     */\n    _defineProperty(this, \"wtSettings\", void 0);\n    this.domBindings = {\n      rootTable: table,\n      rootDocument: table.ownerDocument,\n      rootWindow: table.ownerDocument.defaultView\n    };\n    this.wtSettings = settings;\n    this.wtScroll = new Scroll(this.createScrollDao());\n  }\n  findOriginalHeaders() {\n    const originalHeaders = [];\n\n    // find original headers\n    if (this.wtTable.THEAD.childNodes.length && this.wtTable.THEAD.childNodes[0].childNodes.length) {\n      for (let c = 0, clen = this.wtTable.THEAD.childNodes[0].childNodes.length; c < clen; c++) {\n        originalHeaders.push(this.wtTable.THEAD.childNodes[0].childNodes[c].innerHTML);\n      }\n      if (!this.wtSettings.getSetting('columnHeaders').length) {\n        this.wtSettings.update('columnHeaders', [function (column, TH) {\n          fastInnerText(TH, originalHeaders[column]);\n        }]);\n      }\n    }\n  }\n\n  /**\n   * Creates and returns the CellCoords object.\n   *\n   * @param {*} row The row index.\n   * @param {*} column The column index.\n   * @returns {CellCoords}\n   */\n  createCellCoords(row, column) {\n    return new CellCoords(row, column, this.wtSettings.getSetting('rtlMode'));\n  }\n\n  /**\n   * Creates and returns the CellRange object.\n   *\n   * @param {CellCoords} highlight The highlight coordinates.\n   * @param {CellCoords} from The from coordinates.\n   * @param {CellCoords} to The to coordinates.\n   * @returns {CellRange}\n   */\n  createCellRange(highlight, from, to) {\n    return new CellRange(highlight, from, to, this.wtSettings.getSetting('rtlMode'));\n  }\n\n  /**\n   * Force rerender of Walkontable.\n   *\n   * @param {boolean} [fastDraw=false] When `true`, try to refresh only the positions of borders without rerendering\n   *                                   the data. It will only work if Table.draw() does not force\n   *                                   rendering anyway.\n   * @returns {Walkontable}\n   */\n  draw() {\n    let fastDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.drawInterrupted = false;\n    if (!fastDraw && !this.wtTable.isVisible()) {\n      // draw interrupted because TABLE is not visible\n      this.drawInterrupted = true;\n    } else {\n      this.wtTable.draw(fastDraw);\n    }\n    return this;\n  }\n\n  /**\n   * Returns the TD at coords. If topmost is set to true, returns TD from the topmost overlay layer,\n   * if not set or set to false, returns TD from the master table.\n   *\n   * @param {CellCoords} coords The cell coordinates.\n   * @param {boolean} [topmost=false] If set to `true`, it returns the TD element from the topmost overlay. For example,\n   *                                  if the wanted cell is in the range of fixed rows, it will return a TD element\n   *                                  from the top overlay.\n   * @returns {HTMLElement}\n   */\n  getCell(coords) {\n    let topmost = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (!topmost) {\n      return this.wtTable.getCell(coords);\n    }\n    const totalRows = this.wtSettings.getSetting('totalRows');\n    const fixedRowsTop = this.wtSettings.getSetting('fixedRowsTop');\n    const fixedRowsBottom = this.wtSettings.getSetting('fixedRowsBottom');\n    const fixedColumnsStart = this.wtSettings.getSetting('fixedColumnsStart');\n    if (coords.row < fixedRowsTop && coords.col < fixedColumnsStart) {\n      return this.wtOverlays.topInlineStartCornerOverlay.clone.wtTable.getCell(coords);\n    } else if (coords.row < fixedRowsTop) {\n      return this.wtOverlays.topOverlay.clone.wtTable.getCell(coords);\n    } else if (coords.col < fixedColumnsStart && coords.row >= totalRows - fixedRowsBottom) {\n      if (this.wtOverlays.bottomInlineStartCornerOverlay && this.wtOverlays.bottomInlineStartCornerOverlay.clone) {\n        return this.wtOverlays.bottomInlineStartCornerOverlay.clone.wtTable.getCell(coords);\n      }\n    } else if (coords.col < fixedColumnsStart) {\n      return this.wtOverlays.inlineStartOverlay.clone.wtTable.getCell(coords);\n    } else if (coords.row < totalRows && coords.row >= totalRows - fixedRowsBottom) {\n      if (this.wtOverlays.bottomOverlay && this.wtOverlays.bottomOverlay.clone) {\n        return this.wtOverlays.bottomOverlay.clone.wtTable.getCell(coords);\n      }\n    }\n    return this.wtTable.getCell(coords);\n  }\n\n  /**\n   * Scrolls the viewport to a cell (rerenders if needed).\n   *\n   * @param {CellCoords} coords The cell coordinates to scroll to.\n   * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.\n   * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right of the table.\n   * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom of the table.\n   * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left of the table.\n   * @returns {boolean}\n   */\n  scrollViewport(coords, snapToTop, snapToRight, snapToBottom, snapToLeft) {\n    if (coords.col < 0 || coords.row < 0) {\n      return false;\n    }\n    return this.wtScroll.scrollViewport(coords, snapToTop, snapToRight, snapToBottom, snapToLeft);\n  }\n\n  /**\n   * Scrolls the viewport to a column (rerenders if needed).\n   *\n   * @param {number} column Visual column index.\n   * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right of the table.\n   * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left of the table.\n   * @returns {boolean}\n   */\n  scrollViewportHorizontally(column, snapToRight, snapToLeft) {\n    if (column < 0) {\n      return false;\n    }\n    return this.wtScroll.scrollViewportHorizontally(column, snapToRight, snapToLeft);\n  }\n\n  /**\n   * Scrolls the viewport to a row (rerenders if needed).\n   *\n   * @param {number} row Visual row index.\n   * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.\n   * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom of the table.\n   * @returns {boolean}\n   */\n  scrollViewportVertically(row, snapToTop, snapToBottom) {\n    if (row < 0) {\n      return false;\n    }\n    return this.wtScroll.scrollViewportVertically(row, snapToTop, snapToBottom);\n  }\n\n  /**\n   * @returns {Array}\n   */\n  getViewport() {\n    return [this.wtTable.getFirstVisibleRow(), this.wtTable.getFirstVisibleColumn(), this.wtTable.getLastVisibleRow(), this.wtTable.getLastVisibleColumn()];\n  }\n\n  /**\n   * Destroy instance.\n   */\n  destroy() {\n    this.wtOverlays.destroy();\n    this.wtEvent.destroy();\n  }\n\n  /**\n   * Create data access object for scroll.\n   *\n   * @protected\n   * @returns {ScrollDao}\n   */\n  createScrollDao() {\n    const wot = this;\n    return {\n      get drawn() {\n        return wot.drawn; // TODO refactoring: consider about injecting `isDrawn` function : ()=>return wot.drawn. (it'll enables remove dao layer)\n      },\n\n      get topOverlay() {\n        return wot.wtOverlays.topOverlay; // TODO refactoring: move outside dao, use IOC\n      },\n\n      get inlineStartOverlay() {\n        return wot.wtOverlays.inlineStartOverlay; // TODO refactoring: move outside dao, use IOC\n      },\n\n      get wtTable() {\n        return wot.wtTable; // TODO refactoring: move outside dao, use IOC\n      },\n\n      get wtViewport() {\n        return wot.wtViewport; // TODO refactoring: move outside dao, use IOC\n      },\n\n      get wtSettings() {\n        return wot.wtSettings;\n      },\n      get rootWindow() {\n        return wot.domBindings.rootWindow; // TODO refactoring: move outside dao\n      },\n\n      // TODO refactoring, consider about using injecting wtSettings into scroll (it'll enables remove dao layer)\n      get totalRows() {\n        return wot.wtSettings.getSetting('totalRows');\n      },\n      get totalColumns() {\n        return wot.wtSettings.getSetting('totalColumns');\n      },\n      get fixedRowsTop() {\n        return wot.wtSettings.getSetting('fixedRowsTop');\n      },\n      get fixedRowsBottom() {\n        return wot.wtSettings.getSetting('fixedRowsBottom');\n      },\n      get fixedColumnsStart() {\n        return wot.wtSettings.getSetting('fixedColumnsStart');\n      }\n    };\n  }\n  // TODO refactoring: it will be much better to not use DAO objects. They are needed for now to provide\n  // dynamically access to related objects\n  /**\n   * Create data access object for wtTable.\n   *\n   * @protected\n   * @returns {TableDao}\n   */\n  getTableDao() {\n    const wot = this;\n    return {\n      get wot() {\n        return wot;\n      },\n      get parentTableOffset() {\n        return wot.cloneSource.wtTable.tableOffset; // TODO rethink: cloneSource exists only in Clone type.\n      },\n\n      get cloneSource() {\n        return wot.cloneSource; // TODO rethink: cloneSource exists only in Clone type.\n      },\n\n      get workspaceWidth() {\n        return wot.wtViewport.getWorkspaceWidth();\n      },\n      get wtViewport() {\n        return wot.wtViewport; // TODO refactoring: move outside dao, use IOC\n      },\n\n      get wtOverlays() {\n        return wot.wtOverlays; // TODO refactoring: move outside dao, use IOC\n      },\n\n      get selectionManager() {\n        return wot.selectionManager; // TODO refactoring: move outside dao, use IOC\n      },\n\n      get drawn() {\n        return wot.drawn;\n      },\n      set drawn(v) {\n        // TODO rethink: this breaks assumes of data access object, however it is required until invent better way to handle WOT state.\n        wot.drawn = v;\n      },\n      get wtTable() {\n        return wot.wtTable; // TODO refactoring: it provides itself\n      },\n\n      get startColumnRendered() {\n        return wot.wtViewport.columnsRenderCalculator.startColumn;\n      },\n      get startColumnVisible() {\n        return wot.wtViewport.columnsVisibleCalculator.startColumn;\n      },\n      get endColumnRendered() {\n        return wot.wtViewport.columnsRenderCalculator.endColumn;\n      },\n      get endColumnVisible() {\n        return wot.wtViewport.columnsVisibleCalculator.endColumn;\n      },\n      get countColumnsRendered() {\n        return wot.wtViewport.columnsRenderCalculator.count;\n      },\n      get countColumnsVisible() {\n        return wot.wtViewport.columnsVisibleCalculator.count;\n      },\n      get startRowRendered() {\n        return wot.wtViewport.rowsRenderCalculator.startRow;\n      },\n      get startRowVisible() {\n        return wot.wtViewport.rowsVisibleCalculator.startRow;\n      },\n      get endRowRendered() {\n        return wot.wtViewport.rowsRenderCalculator.endRow;\n      },\n      get endRowVisible() {\n        return wot.wtViewport.rowsVisibleCalculator.endRow;\n      },\n      get countRowsRendered() {\n        return wot.wtViewport.rowsRenderCalculator.count;\n      },\n      get countRowsVisible() {\n        return wot.wtViewport.rowsVisibleCalculator.count;\n      },\n      get columnHeaders() {\n        return wot.wtSettings.getSetting('columnHeaders');\n      },\n      get rowHeaders() {\n        return wot.wtSettings.getSetting('rowHeaders');\n      }\n    };\n  }\n}", "import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport Event from \"../event.mjs\";\nimport CoreAbstract from \"./_base.mjs\";\n/**\n * @class Walkontable\n */\nexport default class Clone extends CoreAbstract {\n  /**\n   * @param {HTMLTableElement} table Main table.\n   * @param {SettingsPure|Settings} settings The Walkontable settings.\n   * @param {WalkontableCloneOptions} clone Clone data.\n   */\n  constructor(table, settings, clone) {\n    super(table, settings);\n    /**\n     * @type {Walkontable}\n     */\n    _defineProperty(this, \"cloneSource\", void 0);\n    /**\n     * @type {Overlay}\n     */\n    _defineProperty(this, \"cloneOverlay\", void 0);\n    const facadeGetter = this.wtSettings.getSetting('facade', this);\n    this.cloneSource = clone.source;\n    this.cloneOverlay = clone.overlay;\n    this.wtTable = this.cloneOverlay.createTable(this.getTableDao(), facadeGetter, this.domBindings, this.wtSettings);\n    this.wtViewport = clone.viewport;\n    this.selectionManager = clone.selectionManager;\n    this.wtEvent = new Event(facadeGetter, this.domBindings, this.wtSettings, this.eventManager, this.wtTable, this.selectionManager, clone.event);\n    this.findOriginalHeaders();\n  }\n}", "import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { getScrollableElement, getTrimmingContainer, getScrollbarWidth, setAttribute } from \"../../../../helpers/dom/element.mjs\";\nimport { defineGetter } from \"../../../../helpers/object.mjs\";\nimport { arrayEach } from \"../../../../helpers/array.mjs\";\nimport { warn } from \"../../../../helpers/console.mjs\";\nimport { CLONE_TYPES, CLONE_CLASS_NAMES, CLONE_TOP, CLONE_INLINE_START } from \"./constants.mjs\";\nimport Clone from \"../core/clone.mjs\";\nimport { A11Y_PRESENTATION } from \"../../../../helpers/a11y.mjs\";\n/**\n * Creates an overlay over the original Walkontable instance. The overlay renders the clone of the original Walkontable\n * and (optionally) implements behavior needed for native horizontal and vertical scrolling.\n *\n * @abstract\n * @class Overlay\n * @property {Walkontable} wot The Walkontable instance.\n */\nexport class Overlay {\n  /**\n   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {CLONE_TYPES_ENUM} type The overlay type name (clone name).\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {DomBindings} domBindings Dom elements bound to the current instance.\n   */\n  constructor(wotInstance, facadeGetter, type, wtSettings, domBindings) {\n    /**\n     *  The Walkontable settings.\n     *\n     * @private\n     * @type {Settings}\n     */\n    _defineProperty(this, \"wtSettings\", null);\n    defineGetter(this, 'wot', wotInstance, {\n      writable: false\n    });\n    this.domBindings = domBindings;\n    this.facadeGetter = facadeGetter;\n    this.wtSettings = wtSettings;\n    const {\n      TABLE,\n      hider,\n      spreader,\n      holder,\n      wtRootElement\n    } = this.wot.wtTable; // todo ioc\n\n    // legacy support, deprecated in the future\n    this.instance = this.wot;\n    this.type = type;\n    this.mainTableScrollableElement = null;\n    this.TABLE = TABLE;\n    this.hider = hider;\n    this.spreader = spreader;\n    this.holder = holder;\n    this.wtRootElement = wtRootElement;\n    this.trimmingContainer = getTrimmingContainer(this.hider.parentNode.parentNode);\n    this.updateStateOfRendering();\n    this.clone = this.makeClone();\n  }\n\n  /**\n   * Update internal state of object with an information about the need of full rendering of the overlay.\n   *\n   * @returns {boolean} Returns `true` if the state has changed since the last check.\n   */\n  updateStateOfRendering() {\n    // todo refactoring: conceive introducing final state machine, normal -> changed (once) -> needs-full-render -> ...? -> normal\n    const previousState = this.needFullRender;\n    this.needFullRender = this.shouldBeRendered();\n    const changed = previousState !== this.needFullRender;\n    if (changed && !this.needFullRender) {\n      this.reset();\n    }\n    return changed;\n  }\n\n  /**\n   * Checks if overlay should be fully rendered.\n   *\n   * @returns {boolean}\n   */\n  shouldBeRendered() {\n    return true;\n  }\n\n  /**\n   * Update the trimming container.\n   */\n  updateTrimmingContainer() {\n    this.trimmingContainer = getTrimmingContainer(this.hider.parentNode.parentNode);\n  }\n\n  /**\n   * Update the main scrollable element.\n   */\n  updateMainScrollableElement() {\n    const {\n      wtTable\n    } = this.wot;\n    const {\n      rootWindow\n    } = this.domBindings;\n    if (rootWindow.getComputedStyle(wtTable.wtRootElement.parentNode).getPropertyValue('overflow') === 'hidden') {\n      this.mainTableScrollableElement = this.wot.wtTable.holder;\n    } else {\n      this.mainTableScrollableElement = getScrollableElement(wtTable.TABLE);\n    }\n  }\n\n  /**\n   * Calculates coordinates of the provided element, relative to the root Handsontable element.\n   * NOTE: The element needs to be a child of the overlay in order for the method to work correctly.\n   *\n   * @param {HTMLElement} element The cell element to calculate the position for.\n   * @param {number} rowIndex Visual row index.\n   * @param {number} columnIndex Visual column index.\n   * @returns {{top: number, start: number}|undefined}\n   */\n  getRelativeCellPosition(element, rowIndex, columnIndex) {\n    if (this.clone.wtTable.holder.contains(element) === false) {\n      warn(`The provided element is not a child of the ${this.type} overlay`);\n      return;\n    }\n    const windowScroll = this.mainTableScrollableElement === this.domBindings.rootWindow;\n    const fixedColumnStart = columnIndex < this.wtSettings.getSetting('fixedColumnsStart');\n    const fixedRowTop = rowIndex < this.wtSettings.getSetting('fixedRowsTop');\n    const fixedRowBottom = rowIndex >= this.wtSettings.getSetting('totalRows') - this.wtSettings.getSetting('fixedRowsBottom');\n    const spreader = this.clone.wtTable.spreader;\n    const spreaderOffset = {\n      start: this.getRelativeStartPosition(spreader),\n      top: spreader.offsetTop\n    };\n    const elementOffset = {\n      start: this.getRelativeStartPosition(element),\n      top: element.offsetTop\n    };\n    let offsetObject = null;\n    if (windowScroll) {\n      offsetObject = this.getRelativeCellPositionWithinWindow(fixedRowTop, fixedColumnStart, elementOffset, spreaderOffset);\n    } else {\n      offsetObject = this.getRelativeCellPositionWithinHolder(fixedRowTop, fixedRowBottom, fixedColumnStart, elementOffset, spreaderOffset);\n    }\n    return offsetObject;\n  }\n\n  /**\n   * Get inline start value depending of direction.\n   *\n   * @param {HTMLElement} el Element.\n   * @returns {number}\n   */\n  getRelativeStartPosition(el) {\n    return this.isRtl() ? el.offsetParent.offsetWidth - el.offsetLeft - el.offsetWidth : el.offsetLeft;\n  }\n\n  /**\n   * Calculates coordinates of the provided element, relative to the root Handsontable element within a table with window\n   * as a scrollable element.\n   *\n   * @private\n   * @param {boolean} onFixedRowTop `true` if the coordinates point to a place within the top fixed rows.\n   * @param {boolean} onFixedColumn `true` if the coordinates point to a place within the fixed columns.\n   * @param {number} elementOffset Offset position of the cell element.\n   * @param {number} spreaderOffset Offset position of the spreader element.\n   * @returns {{top: number, left: number}}\n   */\n  getRelativeCellPositionWithinWindow(onFixedRowTop, onFixedColumn, elementOffset, spreaderOffset) {\n    const absoluteRootElementPosition = this.wot.wtTable.wtRootElement.getBoundingClientRect(); // todo refactoring: DEMETER\n    let horizontalOffset = 0;\n    let verticalOffset = 0;\n    if (!onFixedColumn) {\n      horizontalOffset = spreaderOffset.start;\n    } else {\n      let absoluteRootElementStartPosition = absoluteRootElementPosition.left;\n      if (this.isRtl()) {\n        absoluteRootElementStartPosition = this.domBindings.rootWindow.innerWidth - (absoluteRootElementPosition.left + absoluteRootElementPosition.width + getScrollbarWidth());\n      }\n      horizontalOffset = absoluteRootElementStartPosition <= 0 ? -1 * absoluteRootElementStartPosition : 0;\n    }\n    if (onFixedRowTop) {\n      const absoluteOverlayPosition = this.clone.wtTable.TABLE.getBoundingClientRect();\n      verticalOffset = absoluteOverlayPosition.top - absoluteRootElementPosition.top;\n    } else {\n      verticalOffset = spreaderOffset.top;\n    }\n    return {\n      start: elementOffset.start + horizontalOffset,\n      top: elementOffset.top + verticalOffset\n    };\n  }\n\n  /**\n   * Calculates coordinates of the provided element, relative to the root Handsontable element within a table with window\n   * as a scrollable element.\n   *\n   * @private\n   * @param {boolean} onFixedRowTop `true` if the coordinates point to a place within the top fixed rows.\n   * @param {boolean} onFixedRowBottom `true` if the coordinates point to a place within the bottom fixed rows.\n   * @param {boolean} onFixedColumn `true` if the coordinates point to a place within the fixed columns.\n   * @param {number} elementOffset Offset position of the cell element.\n   * @param {number} spreaderOffset Offset position of the spreader element.\n   * @returns {{top: number, left: number}}\n   */\n  getRelativeCellPositionWithinHolder(onFixedRowTop, onFixedRowBottom, onFixedColumn, elementOffset, spreaderOffset) {\n    const tableScrollPosition = {\n      horizontal: this.wot.wtOverlays.inlineStartOverlay.getScrollPosition(),\n      vertical: this.wot.wtOverlays.topOverlay.getScrollPosition()\n    };\n    let horizontalOffset = 0;\n    let verticalOffset = 0;\n    if (!onFixedColumn) {\n      horizontalOffset = tableScrollPosition.horizontal - spreaderOffset.start;\n    }\n    if (onFixedRowBottom) {\n      const absoluteRootElementPosition = this.wot.wtTable.wtRootElement.getBoundingClientRect(); // todo refactoring: DEMETER\n      const absoluteOverlayPosition = this.clone.wtTable.TABLE.getBoundingClientRect(); // todo refactoring: DEMETER\n\n      verticalOffset = absoluteOverlayPosition.top * -1 + absoluteRootElementPosition.top;\n    } else if (!onFixedRowTop) {\n      verticalOffset = tableScrollPosition.vertical - spreaderOffset.top;\n    }\n    return {\n      start: elementOffset.start - horizontalOffset,\n      top: elementOffset.top - verticalOffset\n    };\n  }\n\n  /**\n   * Make a clone of table for overlay.\n   *\n   * @returns {Clone}\n   */\n  makeClone() {\n    if (CLONE_TYPES.indexOf(this.type) === -1) {\n      throw new Error(`Clone type \"${this.type}\" is not supported.`);\n    }\n    const {\n      wtTable,\n      wtSettings\n    } = this.wot;\n    const {\n      rootDocument,\n      rootWindow\n    } = this.domBindings;\n    const clone = rootDocument.createElement('div');\n    const clonedTable = rootDocument.createElement('table');\n    const tableParent = wtTable.wtRootElement.parentNode;\n    clone.className = `${CLONE_CLASS_NAMES.get(this.type)} handsontable`;\n    clone.setAttribute('dir', this.isRtl() ? 'rtl' : 'ltr');\n    clone.style.position = 'absolute';\n    clone.style.top = 0;\n    clone.style.overflow = 'visible';\n    if (this.isRtl()) {\n      clone.style.right = 0;\n    } else {\n      clone.style.left = 0;\n    }\n    if (wtSettings.getSetting('ariaTags')) {\n      setAttribute(clone, [A11Y_PRESENTATION()]);\n    }\n    clonedTable.className = wtTable.TABLE.className;\n\n    // Clone the main table's `role` attribute to the cloned table.\n    const mainTableRole = wtTable.TABLE.getAttribute('role');\n    if (mainTableRole) {\n      clonedTable.setAttribute('role', wtTable.TABLE.getAttribute('role'));\n    }\n    clone.appendChild(clonedTable);\n    tableParent.appendChild(clone);\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    if (preventOverflow === true || preventOverflow === 'horizontal' && this.type === CLONE_TOP || preventOverflow === 'vertical' && this.type === CLONE_INLINE_START) {\n      this.mainTableScrollableElement = rootWindow;\n    } else if (rootWindow.getComputedStyle(tableParent).getPropertyValue('overflow') === 'hidden') {\n      this.mainTableScrollableElement = wtTable.holder;\n    } else {\n      this.mainTableScrollableElement = getScrollableElement(wtTable.TABLE);\n    }\n\n    // Create a new instance of the Walkontable class\n    return new Clone(clonedTable, this.wtSettings, {\n      // todo ioc factory\n      source: this.wot,\n      overlay: this,\n      viewport: this.wot.wtViewport,\n      // todo ioc , or factor func if used only here\n      event: this.wot.wtEvent,\n      // todo ioc , or factory func if used only here\n      selectionManager: this.wot.selectionManager // todo ioc , or factory func if used only here\n    });\n  }\n\n  /**\n   * Refresh/Redraw overlay.\n   *\n   * @param {boolean} [fastDraw=false] When `true`, try to refresh only the positions of borders without rerendering\n   *                                   the data. It will only work if Table.draw() does not force\n   *                                   rendering anyway.\n   */\n  refresh() {\n    let fastDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    // When hot settings are changed we allow to refresh overlay once before blocking\n    const nextCycleRenderFlag = this.shouldBeRendered();\n    if (this.clone && (this.needFullRender || nextCycleRenderFlag)) {\n      this.clone.draw(fastDraw);\n    }\n    this.needFullRender = nextCycleRenderFlag;\n  }\n\n  /**\n   * Reset overlay styles to initial values.\n   */\n  reset() {\n    if (!this.clone) {\n      return;\n    }\n    const holder = this.clone.wtTable.holder; // todo refactoring: DEMETER\n    const hider = this.clone.wtTable.hider; // todo refactoring: DEMETER\n    const holderStyle = holder.style;\n    const hiderStyle = hider.style;\n    const rootStyle = holder.parentNode.style;\n    arrayEach([holderStyle, hiderStyle, rootStyle], style => {\n      style.width = '';\n      style.height = '';\n    });\n  }\n\n  /**\n   * Determine if Walkontable is running in RTL mode.\n   *\n   * @returns {boolean}\n   */\n  isRtl() {\n    return this.wtSettings.getSetting('rtlMode');\n  }\n\n  /**\n   * Destroy overlay instance.\n   */\n  destroy() {\n    this.clone.eventManager.destroy(); // todo check if it is good place for that operation\n  }\n}", "import { getScrollbarWidth, outerHeight, outerWidth, resetCssTransform } from \"../../../../helpers/dom/element.mjs\";\nimport BottomInlineStartCornerOverlayTable from \"../table/bottomInlineStartCorner.mjs\";\nimport { Overlay } from \"./_base.mjs\";\nimport { CLONE_BOTTOM_INLINE_START_CORNER } from \"./constants.mjs\";\n/**\n * @class BottomInlineStartCornerOverlay\n */\nexport class BottomInlineStartCornerOverlay extends Overlay {\n  /**\n   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {DomBindings} domBindings Dom elements bound to the current instance.\n   * @param {BottomOverlay} bottomOverlay The instance of the Top overlay.\n   * @param {InlineStartOverlay} inlineStartOverlay The instance of the InlineStart overlay.\n   */\n  constructor(wotInstance, facadeGetter, wtSettings, domBindings, bottomOverlay, inlineStartOverlay) {\n    super(wotInstance, facadeGetter, CLONE_BOTTOM_INLINE_START_CORNER, wtSettings, domBindings);\n    this.bottomOverlay = bottomOverlay;\n    this.inlineStartOverlay = inlineStartOverlay;\n  }\n\n  /**\n   * Factory method to create a subclass of `Table` that is relevant to this overlay.\n   *\n   * @see Table#constructor\n   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.\n   * @returns {BottomInlineStartCornerOverlayTable}\n   */\n  createTable() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new BottomInlineStartCornerOverlayTable(...args);\n  }\n\n  /**\n   * Checks if overlay should be fully rendered.\n   *\n   * @returns {boolean}\n   */\n  shouldBeRendered() {\n    return this.wtSettings.getSetting('shouldRenderBottomOverlay') && this.wtSettings.getSetting('shouldRenderInlineStartOverlay');\n  }\n\n  /**\n   * Updates the corner overlay position.\n   *\n   * @returns {boolean}\n   */\n  resetFixedPosition() {\n    const {\n      wot\n    } = this;\n    this.updateTrimmingContainer();\n    if (!wot.wtTable.holder.parentNode) {\n      // removed from DOM\n      return false;\n    }\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    overlayRoot.style.top = '';\n    if (this.trimmingContainer === this.domBindings.rootWindow) {\n      const inlineStartOffset = this.inlineStartOverlay.getOverlayOffset();\n      const bottom = this.bottomOverlay.getOverlayOffset();\n      overlayRoot.style[this.isRtl() ? 'right' : 'left'] = `${inlineStartOffset}px`;\n      overlayRoot.style.bottom = `${bottom}px`;\n    } else {\n      resetCssTransform(overlayRoot);\n      this.repositionOverlay();\n    }\n    let tableHeight = outerHeight(this.clone.wtTable.TABLE);\n    const tableWidth = outerWidth(this.clone.wtTable.TABLE);\n    if (!this.wot.wtTable.hasDefinedSize()) {\n      tableHeight = 0;\n    }\n    overlayRoot.style.height = `${tableHeight}px`;\n    overlayRoot.style.width = `${tableWidth}px`;\n    return false;\n  }\n\n  /**\n   * Reposition the overlay.\n   */\n  repositionOverlay() {\n    const {\n      wtTable,\n      wtViewport\n    } = this.wot;\n    const {\n      rootDocument\n    } = this.domBindings;\n    const cloneRoot = this.clone.wtTable.holder.parentNode;\n    let bottomOffset = 0;\n    if (!wtViewport.hasVerticalScroll()) {\n      bottomOffset += wtViewport.getWorkspaceHeight() - wtTable.getTotalHeight();\n    }\n    if (wtViewport.hasVerticalScroll() && wtViewport.hasHorizontalScroll()) {\n      bottomOffset += getScrollbarWidth(rootDocument);\n    }\n    cloneRoot.style.bottom = `${bottomOffset}px`;\n  }\n}", "import { defineGetter } from \"../../../../../helpers/object.mjs\";\nconst MIXIN_NAME = 'calculatedColumns';\n\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to columns.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use virtual rendering in the horizontal axis.\n *\n * @type {object}\n */\nconst calculatedColumns = {\n  /**\n   * Get the source index of the first rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstRenderedColumn() {\n    const startColumn = this.dataAccessObject.startColumnRendered;\n    if (startColumn === null) {\n      return -1;\n    }\n    return startColumn;\n  },\n  /**\n   * Get the source index of the first column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstVisibleColumn() {\n    const startColumn = this.dataAccessObject.startColumnVisible;\n    if (startColumn === null) {\n      return -1;\n    }\n    return startColumn;\n  },\n  /**\n   * Get the source index of the last rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastRenderedColumn() {\n    const endColumn = this.dataAccessObject.endColumnRendered;\n    if (endColumn === null) {\n      return -1;\n    }\n    return endColumn;\n  },\n  /**\n   * Get the source index of the last column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastVisibleColumn() {\n    const endColumn = this.dataAccessObject.endColumnVisible;\n    if (endColumn === null) {\n      return -1;\n    }\n    return endColumn;\n  },\n  /**\n   * Get the number of rendered columns.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRenderedColumnsCount() {\n    return this.dataAccessObject.countColumnsRendered;\n  },\n  /**\n   * Get the number of fully visible columns in the viewport.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getVisibleColumnsCount() {\n    return this.dataAccessObject.countColumnsVisible;\n  },\n  /**\n   * Get the number of rendered row headers.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRowHeadersCount() {\n    return this.dataAccessObject.rowHeaders.length;\n  }\n};\ndefineGetter(calculatedColumns, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default calculatedColumns;", "import Table from \"../table.mjs\";\nimport stickyRowsBottom from \"./mixin/stickyRowsBottom.mjs\";\nimport calculatedColumns from \"./mixin/calculatedColumns.mjs\";\nimport { mixin } from \"../../../../helpers/object.mjs\";\nimport { CLONE_BOTTOM } from \"../overlay/index.mjs\";\n/**\n * Subclass of `Table` that provides the helper methods relevant to BottomOverlay, implemented through mixins.\n *\n * @mixes stickyRowsBottom\n * @mixes calculatedColumns\n */\nclass BottomOverlayTable extends Table {\n  /**\n   * @param {TableDao} dataAccessObject The data access object.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {DomBindings} domBindings Bindings into DOM.\n   * @param {Settings} wtSettings The Walkontable settings.\n   */\n  constructor(dataAccessObject, facadeGetter, domBindings, wtSettings) {\n    super(dataAccessObject, facadeGetter, domBindings, wtSettings, CLONE_BOTTOM);\n  }\n}\nmixin(BottomOverlayTable, stickyRowsBottom);\nmixin(BottomOverlayTable, calculatedColumns);\nexport default BottomOverlayTable;", "import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { addClass, getScrollbarWidth, getScrollTop, getWindowScrollLeft, hasClass, outerHeight, removeClass } from \"../../../../helpers/dom/element.mjs\";\nimport BottomOverlayTable from \"./../table/bottom.mjs\";\nimport { Overlay } from \"./_base.mjs\";\nimport { CLONE_BOTTOM } from \"./constants.mjs\";\n/**\n * @class BottomOverlay\n */\nexport class BottomOverlay extends Overlay {\n  /**\n   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {DomBindings} domBindings Dom elements bound to the current instance.\n   */\n  constructor(wotInstance, facadeGetter, wtSettings, domBindings) {\n    super(wotInstance, facadeGetter, CLONE_BOTTOM, wtSettings, domBindings);\n    /**\n     * Cached value which holds the previous value of the `fixedRowsBottom` option.\n     * It is used as a comparison value that can be used to detect changes in that value.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"cachedFixedRowsBottom\", -1);\n    this.cachedFixedRowsBottom = this.wtSettings.getSetting('fixedRowsBottom');\n  }\n\n  /**\n   * Factory method to create a subclass of `Table` that is relevant to this overlay.\n   *\n   * @see Table#constructor\n   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.\n   * @returns {BottomOverlayTable}\n   */\n  createTable() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new BottomOverlayTable(...args);\n  }\n\n  /**\n   * Checks if overlay should be fully rendered.\n   *\n   * @returns {boolean}\n   */\n  shouldBeRendered() {\n    return this.wtSettings.getSetting('shouldRenderBottomOverlay');\n  }\n\n  /**\n   * Updates the top overlay position.\n   *\n   * @returns {boolean}\n   */\n  resetFixedPosition() {\n    if (!this.needFullRender || !this.wot.wtTable.holder.parentNode) {\n      // removed from DOM\n      return false;\n    }\n    const {\n      rootWindow\n    } = this.domBindings;\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    overlayRoot.style.top = '';\n    let overlayPosition = 0;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'vertical')) {\n      overlayPosition = this.getOverlayOffset();\n      overlayRoot.style.bottom = `${overlayPosition}px`;\n    } else {\n      overlayPosition = this.getScrollPosition();\n      this.repositionOverlay();\n    }\n    const positionChanged = this.adjustHeaderBordersPosition(overlayPosition);\n    this.adjustElementsSize();\n    return positionChanged;\n  }\n\n  /**\n   * Updates the bottom overlay position.\n   */\n  repositionOverlay() {\n    const {\n      wtTable,\n      wtViewport\n    } = this.wot;\n    const {\n      rootDocument\n    } = this.domBindings;\n    const cloneRoot = this.clone.wtTable.holder.parentNode;\n    let bottomOffset = 0;\n    if (!wtViewport.hasVerticalScroll()) {\n      bottomOffset += wtViewport.getWorkspaceHeight() - wtTable.getTotalHeight();\n    }\n    if (wtViewport.hasVerticalScroll() && wtViewport.hasHorizontalScroll()) {\n      bottomOffset += getScrollbarWidth(rootDocument);\n    }\n    cloneRoot.style.bottom = `${bottomOffset}px`;\n  }\n\n  /**\n   * Sets the main overlay's vertical scroll position.\n   *\n   * @param {number} pos The scroll position.\n   * @returns {boolean}\n   */\n  setScrollPosition(pos) {\n    const {\n      rootWindow\n    } = this.domBindings;\n    let result = false;\n    if (this.mainTableScrollableElement === rootWindow) {\n      rootWindow.scrollTo(getWindowScrollLeft(rootWindow), pos);\n      result = true;\n    } else if (this.mainTableScrollableElement.scrollTop !== pos) {\n      this.mainTableScrollableElement.scrollTop = pos;\n      result = true;\n    }\n    return result;\n  }\n\n  /**\n   * Triggers onScroll hook callback.\n   */\n  onScroll() {\n    this.wtSettings.getSetting('onScrollHorizontally');\n  }\n\n  /**\n   * Calculates total sum cells height.\n   *\n   * @param {number} from Row index which calculates started from.\n   * @param {number} to Row index where calculation is finished.\n   * @returns {number} Height sum.\n   */\n  sumCellSizes(from, to) {\n    const {\n      wtTable,\n      wtSettings\n    } = this.wot;\n    const defaultRowHeight = wtSettings.getSetting('defaultRowHeight');\n    let row = from;\n    let sum = 0;\n    while (row < to) {\n      const height = wtTable.getRowHeight(row);\n      sum += height === undefined ? defaultRowHeight : height;\n      row += 1;\n    }\n    return sum;\n  }\n\n  /**\n   * Adjust overlay root element, childs and master table element sizes (width, height).\n   *\n   * @param {boolean} [force=false] When `true`, it adjusts the DOM nodes sizes for that overlay.\n   */\n  adjustElementsSize() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.updateTrimmingContainer();\n    if (this.needFullRender || force) {\n      this.adjustRootElementSize();\n      this.adjustRootChildrenSize();\n    }\n  }\n\n  /**\n   * Adjust overlay root element size (width and height).\n   */\n  adjustRootElementSize() {\n    const {\n      wtTable,\n      wtViewport\n    } = this.wot;\n    const {\n      rootDocument,\n      rootWindow\n    } = this.domBindings;\n    const scrollbarWidth = getScrollbarWidth(rootDocument);\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    const overlayRootStyle = overlayRoot.style;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    if (this.trimmingContainer !== rootWindow || preventOverflow === 'horizontal') {\n      let width = wtViewport.getWorkspaceWidth();\n      if (this.wot.wtOverlays.hasScrollbarRight) {\n        width -= scrollbarWidth;\n      }\n      width = Math.min(width, wtTable.wtRootElement.scrollWidth);\n      overlayRootStyle.width = `${width}px`;\n    } else {\n      overlayRootStyle.width = '';\n    }\n    this.clone.wtTable.holder.style.width = overlayRootStyle.width;\n    let tableHeight = outerHeight(this.clone.wtTable.TABLE);\n    if (!this.wot.wtTable.hasDefinedSize()) {\n      tableHeight = 0;\n    }\n    overlayRootStyle.height = `${tableHeight}px`;\n  }\n\n  /**\n   * Adjust overlay root childs size.\n   */\n  adjustRootChildrenSize() {\n    const {\n      holder\n    } = this.clone.wtTable;\n    this.clone.wtTable.hider.style.width = this.hider.style.width;\n    holder.style.width = holder.parentNode.style.width;\n    holder.style.height = holder.parentNode.style.height;\n  }\n\n  /**\n   * Adjust the overlay dimensions and position.\n   */\n  applyToDOM() {\n    const total = this.wtSettings.getSetting('totalRows');\n    if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition === 'number') {\n      this.spreader.style.top = `${this.wot.wtViewport.rowsRenderCalculator.startPosition}px`;\n    } else if (total === 0) {\n      // can happen if there are 0 rows\n      this.spreader.style.top = '0';\n    } else {\n      throw new Error('Incorrect value of the rowsRenderCalculator');\n    }\n    this.spreader.style.bottom = '';\n    if (this.needFullRender) {\n      this.syncOverlayOffset();\n    }\n  }\n\n  /**\n   * Synchronize calculated left position to an element.\n   */\n  syncOverlayOffset() {\n    const styleProperty = this.isRtl() ? 'right' : 'left';\n    const {\n      spreader\n    } = this.clone.wtTable;\n    if (typeof this.wot.wtViewport.columnsRenderCalculator.startPosition === 'number') {\n      spreader.style[styleProperty] = `${this.wot.wtViewport.columnsRenderCalculator.startPosition}px`;\n    } else {\n      spreader.style[styleProperty] = '';\n    }\n  }\n\n  /**\n   * Scrolls vertically to a row.\n   *\n   * @param {number} sourceRow Row index which you want to scroll to.\n   * @param {boolean} [bottomEdge=false] If `true`, scrolls according to the bottom edge (top edge is by default).\n   */\n  scrollTo(sourceRow, bottomEdge) {\n    let newY = this.getTableParentOffset();\n    const sourceInstance = this.wot.cloneSource ? this.wot.cloneSource : this.wot;\n    const mainHolder = sourceInstance.wtTable.holder;\n    let scrollbarCompensation = 0;\n    if (bottomEdge && mainHolder.offsetHeight !== mainHolder.clientHeight) {\n      scrollbarCompensation = getScrollbarWidth(this.domBindings.rootDocument);\n    }\n    if (bottomEdge) {\n      newY += this.sumCellSizes(0, sourceRow + 1);\n      newY -= this.wot.wtViewport.getViewportHeight();\n      // Fix 1 pixel offset when cell is selected\n      newY += 1;\n    } else {\n      newY += this.sumCellSizes(this.wtSettings.getSetting('fixedRowsBottom'), sourceRow);\n    }\n    newY += scrollbarCompensation;\n    this.setScrollPosition(newY);\n  }\n\n  /**\n   * Gets table parent top position.\n   *\n   * @returns {number}\n   */\n  getTableParentOffset() {\n    if (this.mainTableScrollableElement === this.domBindings.rootWindow) {\n      return this.wot.wtTable.holderOffset.top;\n    }\n    return 0;\n  }\n\n  /**\n   * Gets the main overlay's vertical scroll position.\n   *\n   * @returns {number} Main table's vertical scroll position.\n   */\n  getScrollPosition() {\n    return getScrollTop(this.mainTableScrollableElement, this.domBindings.rootWindow);\n  }\n\n  /**\n   * Gets the main overlay's vertical overlay offset.\n   *\n   * @returns {number} Main table's vertical overlay offset.\n   */\n  getOverlayOffset() {\n    const {\n      rootWindow\n    } = this.domBindings;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    let overlayOffset = 0;\n    if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'vertical')) {\n      const rootHeight = this.wot.wtTable.getTotalHeight();\n      const overlayRootHeight = this.clone.wtTable.getTotalHeight();\n      const maxOffset = rootHeight - overlayRootHeight;\n      const docClientHeight = this.domBindings.rootDocument.documentElement.clientHeight;\n      overlayOffset = Math.max(this.getTableParentOffset() - this.getScrollPosition() - docClientHeight + rootHeight, 0);\n      if (overlayOffset > maxOffset) {\n        overlayOffset = 0;\n      }\n    }\n    return overlayOffset;\n  }\n\n  /**\n   * Adds css classes to hide the header border's header (cell-selection border hiding issue).\n   *\n   * @param {number} position Header Y position if trimming container is window or scroll top if not.\n   * @returns {boolean}\n   */\n  adjustHeaderBordersPosition(position) {\n    const fixedRowsBottom = this.wtSettings.getSetting('fixedRowsBottom');\n    const areFixedRowsBottomChanged = this.cachedFixedRowsBottom !== fixedRowsBottom;\n    const columnHeaders = this.wtSettings.getSetting('columnHeaders');\n    let positionChanged = false;\n    if ((areFixedRowsBottomChanged || fixedRowsBottom === 0) && columnHeaders.length > 0) {\n      const masterParent = this.wot.wtTable.holder.parentNode;\n      const previousState = hasClass(masterParent, 'innerBorderBottom');\n      this.cachedFixedRowsBottom = this.wtSettings.getSetting('fixedRowsBottom');\n      if (position || this.wtSettings.getSetting('totalRows') === 0) {\n        addClass(masterParent, 'innerBorderBottom');\n        positionChanged = !previousState;\n      } else {\n        removeClass(masterParent, 'innerBorderBottom');\n        positionChanged = previousState;\n      }\n    }\n    return positionChanged;\n  }\n}", "import { defineGetter } from \"../../../../../helpers/object.mjs\";\nconst MIXIN_NAME = 'calculatedRows';\n\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to rows.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use virtual rendering in the vertical axis.\n *\n * @type {object}\n */\nconst calculatedRows = {\n  /**\n   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstRenderedRow() {\n    const startRow = this.dataAccessObject.startRowRendered;\n    if (startRow === null) {\n      return -1;\n    }\n    return startRow;\n  },\n  /**\n   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstVisibleRow() {\n    const startRow = this.dataAccessObject.startRowVisible;\n    if (startRow === null) {\n      return -1;\n    }\n    return startRow;\n  },\n  /**\n   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastRenderedRow() {\n    const endRow = this.dataAccessObject.endRowRendered;\n    if (endRow === null) {\n      return -1;\n    }\n    return endRow;\n  },\n  /**\n   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastVisibleRow() {\n    const endRow = this.dataAccessObject.endRowVisible;\n    if (endRow === null) {\n      return -1;\n    }\n    return endRow;\n  },\n  /**\n   * Get the number of rendered rows.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRenderedRowsCount() {\n    return this.dataAccessObject.countRowsRendered;\n  },\n  /**\n   * Get the number of fully visible rows in the viewport.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getVisibleRowsCount() {\n    return this.dataAccessObject.countRowsVisible;\n  },\n  /**\n   * Get the number of rendered column headers.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getColumnHeadersCount() {\n    return this.dataAccessObject.columnHeaders.length;\n  }\n};\ndefineGetter(calculatedRows, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default calculatedRows;", "import Table from \"../table.mjs\";\nimport calculatedRows from \"./mixin/calculatedRows.mjs\";\nimport stickyColumnsStart from \"./mixin/stickyColumnsStart.mjs\";\nimport { mixin } from \"../../../../helpers/object.mjs\";\nimport { CLONE_INLINE_START } from \"../overlay/index.mjs\";\n/**\n * Subclass of `Table` that provides the helper methods relevant to InlineStartOverlayTable, implemented through mixins.\n */\nclass InlineStartOverlayTable extends Table {\n  /**\n   * @param {TableDao} dataAccessObject The data access object.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {DomBindings} domBindings Bindings into DOM.\n   * @param {Settings} wtSettings The Walkontable settings.\n   */\n  constructor(dataAccessObject, facadeGetter, domBindings, wtSettings) {\n    super(dataAccessObject, facadeGetter, domBindings, wtSettings, CLONE_INLINE_START);\n  }\n}\nmixin(InlineStartOverlayTable, calculatedRows);\nmixin(InlineStartOverlayTable, stickyColumnsStart);\nexport default InlineStartOverlayTable;", "import \"core-js/modules/es.array.push.js\";\nimport { defineGetter } from \"./../helpers/object.mjs\";\nimport { fastCall } from \"./../helpers/function.mjs\";\nconst MIXIN_NAME = 'localHooks';\n\n/**\n * Mixin object to extend objects functionality for local hooks.\n *\n * @type {object}\n */\nconst localHooks = {\n  /**\n   * Internal hooks storage.\n   */\n  _localHooks: Object.create(null),\n  /**\n   * Add hook to the collection.\n   *\n   * @param {string} key The hook name.\n   * @param {Function} callback The hook callback.\n   * @returns {object}\n   */\n  addLocalHook(key, callback) {\n    if (!this._localHooks[key]) {\n      this._localHooks[key] = [];\n    }\n    this._localHooks[key].push(callback);\n    return this;\n  },\n  /**\n   * Run hooks.\n   *\n   * @param {string} key The name of the hook to run.\n   * @param {*} [arg1] An additional parameter passed to the callback function.\n   * @param {*} [arg2] An additional parameter passed to the callback function.\n   * @param {*} [arg3] An additional parameter passed to the callback function.\n   * @param {*} [arg4] An additional parameter passed to the callback function.\n   * @param {*} [arg5] An additional parameter passed to the callback function.\n   * @param {*} [arg6] An additional parameter passed to the callback function.\n   */\n  runLocalHooks(key, arg1, arg2, arg3, arg4, arg5, arg6) {\n    if (this._localHooks[key]) {\n      const length = this._localHooks[key].length;\n\n      // don't optimize this loop with the `arrayEach()` method or arrow functions\n      // otherwise, performance will decrease because of garbage collection\n      // using the `...rest` syntax (ES6 and later) will decrease performance as well\n      for (let i = 0; i < length; i++) {\n        fastCall(this._localHooks[key][i], this, arg1, arg2, arg3, arg4, arg5, arg6);\n      }\n    }\n  },\n  /**\n   * Clear all added hooks.\n   *\n   * @returns {object}\n   */\n  clearLocalHooks() {\n    this._localHooks = {};\n    return this;\n  }\n};\ndefineGetter(localHooks, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default localHooks;", "import { mixin } from \"../../../../helpers/object.mjs\";\nimport localHooks from \"../../../../mixins/localHooks.mjs\";\n/**\n * The Selection class allows highlighting (by applying CSS class) the table's cells or headers\n * and setting up the borders if defined in the settings.\n *\n * The Selection coordinates may point to the cells (positive numbers) or headers (negative numbers).\n *\n * @class Selection\n */\nclass Selection {\n  /**\n   * @param {object} settings The selection settings object. @todo type.\n   * @param {CellRange} cellRange The cell range instance.\n   */\n  constructor(settings, cellRange) {\n    this.settings = settings;\n    this.cellRange = cellRange || null;\n  }\n\n  /**\n   * Checks if selection is empty.\n   *\n   * @returns {boolean}\n   */\n  isEmpty() {\n    return this.cellRange === null;\n  }\n\n  /**\n   * Adds a cell coords to the selection.\n   *\n   * @param {CellCoords} coords The cell coordinates to add.\n   * @returns {Selection}\n   */\n  add(coords) {\n    if (this.isEmpty()) {\n      this.cellRange = this.settings.createCellRange(coords);\n    } else {\n      this.cellRange.expand(coords);\n    }\n    return this;\n  }\n\n  /**\n   * If selection range from or to property equals oldCoords, replace it with newCoords. Return boolean\n   * information about success.\n   *\n   * @param {CellCoords} oldCoords An old cell coordinates to replace.\n   * @param {CellCoords} newCoords The new cell coordinates.\n   * @returns {boolean}\n   */\n  replace(oldCoords, newCoords) {\n    if (!this.isEmpty()) {\n      if (this.cellRange.from.isEqual(oldCoords)) {\n        this.cellRange.from = newCoords;\n        return true;\n      }\n      if (this.cellRange.to.isEqual(oldCoords)) {\n        this.cellRange.to = newCoords;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Clears selection.\n   *\n   * @returns {Selection}\n   */\n  clear() {\n    this.cellRange = null;\n    return this;\n  }\n\n  /**\n   * Returns the top left (or top right in RTL) and bottom right (or bottom left in RTL) selection coordinates.\n   *\n   * @returns {number[]} Returns array of coordinates for example `[1, 1, 5, 5]`.\n   */\n  getCorners() {\n    const topStart = this.cellRange.getOuterTopStartCorner();\n    const bottomEnd = this.cellRange.getOuterBottomEndCorner();\n    return [topStart.row, topStart.col, bottomEnd.row, bottomEnd.col];\n  }\n\n  /**\n   * Destroys the instance.\n   */\n  destroy() {\n    this.runLocalHooks('destroy');\n  }\n}\nmixin(Selection, localHooks);\nexport default Selection;", "/**\n * Selection type that is visible only if the row or column header is clicked. If that happened\n * all row or column header layers are highlighted.\n *\n * @type {string}\n */\nexport const ACTIVE_HEADER_TYPE = 'active-header';\n/**\n * Selection type that is visible only if the a cell or cells are clicked. If that happened\n * only the most closest to the cells row or column header is highlighted.\n *\n * @type {string}\n */\nexport const HEADER_TYPE = 'header';\n/**\n * Selection type that is visible when a cell or cells are clicked. The selected cells are\n * highlighted.\n *\n * @type {string}\n */\nexport const AREA_TYPE = 'area';\n/**\n * Selection type defines a cell that follows the user (keyboard navigation).\n *\n * @type {string}\n */\nexport const FOCUS_TYPE = 'focus';\n/**\n * Selection type defines borders for the autofill functionality.\n *\n * @type {string}\n */\nexport const FILL_TYPE = 'fill';\n/**\n * Selection type defines highlights for the `currentRowClassName` option.\n *\n * @type {string}\n */\nexport const ROW_TYPE = 'row';\n/**\n * Selection type defines highlights for the `currentColumnClassName` option.\n *\n * @type {string}\n */\nexport const COLUMN_TYPE = 'column';\n/**\n * Selection type defines highlights managed by the CustomBorders plugin.\n *\n * @type {string}\n */\nexport const CUSTOM_SELECTION_TYPE = 'custom-selection';", "/**\n * Default border corner style.\n *\n * @type {object}\n */\nexport const CORNER_DEFAULT_STYLE = Object.freeze({\n  width: '6px',\n  height: '6px',\n  borderWidth: '1px',\n  borderStyle: 'solid',\n  borderColor: '#FFF'\n});", "'use strict';\n// this method was added to unscopables after implementation\n// in popular engines, so it's moved to a separate module\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\n// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\naddToUnscopables('flat');\n", "import \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\n/* eslint-disable no-continue */\nimport { addClass } from \"../../../../helpers/dom/element.mjs\";\n/**\n * Selection scanner module scans the rendered cells and headers and if it finds an intersection with\n * the coordinates of the Selection class (highlight) it returns the DOM elements.\n *\n * @private\n */\nvar _selection = /*#__PURE__*/new WeakMap();\nvar _activeOverlaysWot = /*#__PURE__*/new WeakMap();\nvar _scanCellsRange = /*#__PURE__*/new WeakSet();\nexport class SelectionScanner {\n  constructor() {\n    /**\n     * The method triggers a callback for each rendered cell.\n     *\n     * @param {function(number, number): void} callback The callback function to trigger.\n     */\n    _classPrivateMethodInitSpec(this, _scanCellsRange);\n    /**\n     * Active Selection instance to process.\n     *\n     * @type {Selection}\n     */\n    _classPrivateFieldInitSpec(this, _selection, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * The Walkontable instance that the scans depends on.\n     *\n     * @type {Walkontable}\n     */\n    _classPrivateFieldInitSpec(this, _activeOverlaysWot, {\n      writable: true,\n      value: void 0\n    });\n  }\n  /**\n   * Sets the Walkontable instance that will be taking into account while scanning the table.\n   *\n   * @param {Walkontable} activeOverlaysWot The Walkontable instance.\n   * @returns {SelectionScanner}\n   */\n  setActiveOverlay(activeOverlaysWot) {\n    _classPrivateFieldSet(this, _activeOverlaysWot, activeOverlaysWot);\n    return this;\n  }\n\n  /**\n   * Sets the Selection instance to process.\n   *\n   * @param {Selection} selection The Selection instance.\n   * @returns {SelectionScanner}\n   */\n  setActiveSelection(selection) {\n    _classPrivateFieldSet(this, _selection, selection);\n    return this;\n  }\n\n  /**\n   * Scans the rendered table with selection and returns elements that intersects\n   * with selection coordinates.\n   *\n   * @returns {HTMLTableElement[]}\n   */\n  scan() {\n    const selectionType = _classPrivateFieldGet(this, _selection).settings.selectionType;\n    const elements = new Set();\n\n    // TODO(improvement): use heuristics from coords to detect what type of scan\n    // the Selection needs instead of using `selectionType` property.\n    if (selectionType === 'active-header') {\n      this.scanColumnsInHeadersRange(element => elements.add(element));\n      this.scanRowsInHeadersRange(element => elements.add(element));\n    } else if (selectionType === 'area') {\n      this.scanCellsRange(element => elements.add(element));\n    } else if (selectionType === 'focus') {\n      this.scanColumnsInHeadersRange(element => elements.add(element));\n      this.scanRowsInHeadersRange(element => elements.add(element));\n      this.scanCellsRange(element => elements.add(element));\n    } else if (selectionType === 'fill') {\n      this.scanCellsRange(element => elements.add(element));\n    } else if (selectionType === 'header') {\n      this.scanColumnsInHeadersRange(element => elements.add(element));\n      this.scanRowsInHeadersRange(element => elements.add(element));\n    } else if (selectionType === 'row') {\n      this.scanRowsInHeadersRange(element => elements.add(element));\n      this.scanRowsInCellsRange(element => elements.add(element));\n    } else if (selectionType === 'column') {\n      this.scanColumnsInHeadersRange(element => elements.add(element));\n      this.scanColumnsInCellsRange(element => elements.add(element));\n    }\n    return elements;\n  }\n\n  /**\n   * Scans the table (only rendered headers) and collect all column headers (TH) that match\n   * the coordinates passed in the Selection instance.\n   *\n   * @param {function(HTMLTableElement): void} callback The callback function to trigger.\n   */\n  scanColumnsInHeadersRange(callback) {\n    const [topRow, topColumn, bottomRow, bottomColumn] = _classPrivateFieldGet(this, _selection).getCorners();\n    const {\n      wtTable\n    } = _classPrivateFieldGet(this, _activeOverlaysWot);\n    const renderedColumnsCount = wtTable.getRenderedColumnsCount();\n    const columnHeadersCount = wtTable.getColumnHeadersCount();\n    let cursor = 0;\n    for (let column = -wtTable.getRowHeadersCount(); column < renderedColumnsCount; column++) {\n      const sourceColumn = wtTable.columnFilter.renderedToSource(column);\n      if (sourceColumn < topColumn || sourceColumn > bottomColumn) {\n        continue;\n      }\n      for (let headerLevel = -columnHeadersCount; headerLevel < 0; headerLevel++) {\n        if (headerLevel < topRow || headerLevel > bottomRow) {\n          continue;\n        }\n        const positiveBasedHeaderLevel = headerLevel + columnHeadersCount;\n        let TH = wtTable.getColumnHeader(sourceColumn, positiveBasedHeaderLevel);\n        const newSourceCol = _classPrivateFieldGet(this, _activeOverlaysWot).getSetting('onBeforeHighlightingColumnHeader', sourceColumn, positiveBasedHeaderLevel, {\n          selectionType: _classPrivateFieldGet(this, _selection).settings.selectionType,\n          columnCursor: cursor,\n          selectionWidth: bottomColumn - topColumn + 1\n        });\n        if (newSourceCol === null) {\n          continue;\n        }\n        if (newSourceCol !== sourceColumn) {\n          TH = wtTable.getColumnHeader(newSourceCol, positiveBasedHeaderLevel);\n        }\n        callback(TH);\n      }\n      cursor += 1;\n    }\n  }\n\n  /**\n   * Scans the table (only rendered headers) and collect all row headers (TH) that match\n   * the coordinates passed in the Selection instance.\n   *\n   * @param {function(HTMLTableElement): void} callback The callback function to trigger.\n   */\n  scanRowsInHeadersRange(callback) {\n    const [topRow, topColumn, bottomRow, bottomColumn] = _classPrivateFieldGet(this, _selection).getCorners();\n    const {\n      wtTable\n    } = _classPrivateFieldGet(this, _activeOverlaysWot);\n    const renderedRowsCount = wtTable.getRenderedRowsCount();\n    const rowHeadersCount = wtTable.getRowHeadersCount();\n    let cursor = 0;\n    for (let row = -wtTable.getColumnHeadersCount(); row < renderedRowsCount; row++) {\n      const sourceRow = wtTable.rowFilter.renderedToSource(row);\n      if (sourceRow < topRow || sourceRow > bottomRow) {\n        continue;\n      }\n      for (let headerLevel = -rowHeadersCount; headerLevel < 0; headerLevel++) {\n        if (headerLevel < topColumn || headerLevel > bottomColumn) {\n          continue;\n        }\n        const positiveBasedHeaderLevel = headerLevel + rowHeadersCount;\n        let TH = wtTable.getRowHeader(sourceRow, positiveBasedHeaderLevel);\n        const newSourceRow = _classPrivateFieldGet(this, _activeOverlaysWot).getSetting('onBeforeHighlightingRowHeader', sourceRow, positiveBasedHeaderLevel, {\n          selectionType: _classPrivateFieldGet(this, _selection).settings.selectionType,\n          rowCursor: cursor,\n          selectionHeight: bottomRow - topRow + 1\n        });\n        if (newSourceRow === null) {\n          continue;\n        }\n        if (newSourceRow !== sourceRow) {\n          TH = wtTable.getRowHeader(newSourceRow, positiveBasedHeaderLevel);\n        }\n        callback(TH);\n      }\n      cursor += 1;\n    }\n  }\n\n  /**\n   * Scans the table (only rendered cells) and collect all cells (TR) that match\n   * the coordinates passed in the Selection instance.\n   *\n   * @param {function(HTMLTableElement): void} callback The callback function to trigger.\n   */\n  scanCellsRange(callback) {\n    const [topRow, topColumn, bottomRow, bottomColumn] = _classPrivateFieldGet(this, _selection).getCorners();\n    const {\n      wtTable\n    } = _classPrivateFieldGet(this, _activeOverlaysWot);\n    _classPrivateMethodGet(this, _scanCellsRange, _scanCellsRange2).call(this, (sourceRow, sourceColumn) => {\n      if (sourceRow >= topRow && sourceRow <= bottomRow && sourceColumn >= topColumn && sourceColumn <= bottomColumn) {\n        const cell = wtTable.getCell(_classPrivateFieldGet(this, _activeOverlaysWot).createCellCoords(sourceRow, sourceColumn));\n\n        // support for old API\n        const additionalSelectionClass = _classPrivateFieldGet(this, _activeOverlaysWot).getSetting('onAfterDrawSelection', sourceRow, sourceColumn, _classPrivateFieldGet(this, _selection).settings.layerLevel);\n        if (typeof additionalSelectionClass === 'string') {\n          addClass(cell, additionalSelectionClass);\n        }\n        callback(cell);\n      }\n    });\n  }\n\n  /**\n   * Scans the table (only rendered cells) and collects all cells (TR) that match the coordinates\n   * passed in the Selection instance but only for the X axis (rows).\n   *\n   * @param {function(HTMLTableElement): void} callback The callback function to trigger.\n   */\n  scanRowsInCellsRange(callback) {\n    // eslint-disable-next-line comma-spacing\n    const [topRow,, bottomRow] = _classPrivateFieldGet(this, _selection).getCorners();\n    const {\n      wtTable\n    } = _classPrivateFieldGet(this, _activeOverlaysWot);\n    _classPrivateMethodGet(this, _scanCellsRange, _scanCellsRange2).call(this, (sourceRow, sourceColumn) => {\n      if (sourceRow >= topRow && sourceRow <= bottomRow) {\n        const cell = wtTable.getCell(_classPrivateFieldGet(this, _activeOverlaysWot).createCellCoords(sourceRow, sourceColumn));\n        callback(cell);\n      }\n    });\n  }\n\n  /**\n   * Scans the table (only rendered cells) and collects all cells (TR) that match the coordinates\n   * passed in the Selection instance but only for the Y axis (columns).\n   *\n   * @param {function(HTMLTableElement): void} callback The callback function to trigger.\n   */\n  scanColumnsInCellsRange(callback) {\n    const [, topColumn,, bottomColumn] = _classPrivateFieldGet(this, _selection).getCorners();\n    const {\n      wtTable\n    } = _classPrivateFieldGet(this, _activeOverlaysWot);\n    _classPrivateMethodGet(this, _scanCellsRange, _scanCellsRange2).call(this, (sourceRow, sourceColumn) => {\n      if (sourceColumn >= topColumn && sourceColumn <= bottomColumn) {\n        const cell = wtTable.getCell(_classPrivateFieldGet(this, _activeOverlaysWot).createCellCoords(sourceRow, sourceColumn));\n        callback(cell);\n      }\n    });\n  }\n}\nfunction _scanCellsRange2(callback) {\n  const {\n    wtTable\n  } = _classPrivateFieldGet(this, _activeOverlaysWot);\n  const renderedRowsCount = wtTable.getRenderedRowsCount();\n  const renderedColumnsCount = wtTable.getRenderedColumnsCount();\n  for (let row = 0; row < renderedRowsCount; row += 1) {\n    const sourceRow = wtTable.rowFilter.renderedToSource(row);\n    for (let column = 0; column < renderedColumnsCount; column += 1) {\n      callback(sourceRow, wtTable.columnFilter.renderedToSource(column));\n    }\n  }\n}", "import { addClass, hasClass, removeClass, getComputedStyle, getTrimmingContainer, innerWidth, innerHeight, offset, outerHeight, outerWidth } from \"../../../../../helpers/dom/element.mjs\";\nimport { stopImmediatePropagation } from \"../../../../../helpers/dom/event.mjs\";\nimport { objectEach } from \"../../../../../helpers/object.mjs\";\nimport { isMobileBrowser } from \"../../../../../helpers/browser.mjs\";\nimport { CORNER_DEFAULT_STYLE } from \"./constants.mjs\";\n/**\n *\n */\nclass Border {\n  // TODO As this is an internal class, should be designed for using {Walkontable}. It uses the facade,\n  // TODO Con. Because the class is created on place where the instance reference comes from external origin.\n  // TODO Imho, the discrimination for handling both, facade and non-facade should be handled.\n  /**\n   * @param {WalkontableFacade} wotInstance The Walkontable instance.\n   * @param {object} settings The border settings.\n   */\n  constructor(wotInstance, settings) {\n    if (!settings) {\n      return;\n    }\n    this.eventManager = wotInstance.eventManager;\n    this.instance = wotInstance;\n    this.wot = wotInstance;\n    this.settings = settings;\n    this.mouseDown = false;\n    this.main = null;\n    this.top = null;\n    this.bottom = null;\n    this.start = null;\n    this.end = null;\n    this.topStyle = null;\n    this.bottomStyle = null;\n    this.startStyle = null;\n    this.endStyle = null;\n    this.cornerDefaultStyle = CORNER_DEFAULT_STYLE;\n    // Offset to moving the corner to be centered relative to the grid.\n    this.cornerCenterPointOffset = -(parseInt(this.cornerDefaultStyle.width, 10) / 2);\n    this.corner = null;\n    this.cornerStyle = null;\n    this.createBorders(settings);\n    this.registerListeners();\n  }\n\n  /**\n   * Register all necessary events.\n   */\n  registerListeners() {\n    const documentBody = this.wot.rootDocument.body;\n    this.eventManager.addEventListener(documentBody, 'mousedown', () => this.onMouseDown());\n    this.eventManager.addEventListener(documentBody, 'mouseup', () => this.onMouseUp());\n    for (let c = 0, len = this.main.childNodes.length; c < len; c++) {\n      const element = this.main.childNodes[c];\n      this.eventManager.addEventListener(element, 'mouseenter', event => this.onMouseEnter(event, this.main.childNodes[c]));\n    }\n  }\n\n  /**\n   * Mouse down listener.\n   *\n   * @private\n   */\n  onMouseDown() {\n    this.mouseDown = true;\n  }\n\n  /**\n   * Mouse up listener.\n   *\n   * @private\n   */\n  onMouseUp() {\n    this.mouseDown = false;\n  }\n\n  /**\n   * Mouse enter listener for fragment selection functionality.\n   *\n   * @private\n   * @param {Event} event Dom event.\n   * @param {HTMLElement} parentElement Part of border element.\n   */\n  onMouseEnter(event, parentElement) {\n    if (!this.mouseDown || !this.wot.getSetting('hideBorderOnMouseDownOver')) {\n      return;\n    }\n    event.preventDefault();\n    stopImmediatePropagation(event);\n    const _this = this;\n    const documentBody = this.wot.rootDocument.body;\n    const bounds = parentElement.getBoundingClientRect();\n\n    // Hide border to prevents selection jumping when fragmentSelection is enabled.\n    parentElement.style.display = 'none';\n\n    /**\n     * @param {Event} mouseEvent The mouse event object.\n     * @returns {boolean}\n     */\n    function isOutside(mouseEvent) {\n      if (mouseEvent.clientY < Math.floor(bounds.top)) {\n        return true;\n      }\n      if (mouseEvent.clientY > Math.ceil(bounds.top + bounds.height)) {\n        return true;\n      }\n      if (mouseEvent.clientX < Math.floor(bounds.left)) {\n        return true;\n      }\n      if (mouseEvent.clientX > Math.ceil(bounds.left + bounds.width)) {\n        return true;\n      }\n    }\n\n    /**\n     * @param {Event} handlerEvent The mouse event object.\n     */\n    function handler(handlerEvent) {\n      if (isOutside(handlerEvent)) {\n        _this.eventManager.removeEventListener(documentBody, 'mousemove', handler);\n        parentElement.style.display = 'block';\n      }\n    }\n    this.eventManager.addEventListener(documentBody, 'mousemove', handler);\n  }\n\n  /**\n   * Create border elements.\n   *\n   * @param {object} settings The border settings.\n   */\n  createBorders(settings) {\n    const {\n      rootDocument\n    } = this.wot;\n    this.main = rootDocument.createElement('div');\n    const borderDivs = ['top', 'start', 'bottom', 'end', 'corner'];\n    let style = this.main.style;\n    style.position = 'absolute';\n    style.top = 0;\n    style.left = 0;\n    for (let i = 0; i < 5; i++) {\n      const position = borderDivs[i];\n      const div = rootDocument.createElement('div');\n      div.className = `wtBorder ${this.settings.className || ''}`; // + borderDivs[i];\n\n      if (this.settings[position] && this.settings[position].hide) {\n        div.className += ' hidden';\n      }\n      style = div.style;\n      style.backgroundColor = this.settings[position] && this.settings[position].color ? this.settings[position].color : settings.border.color;\n      style.height = this.settings[position] && this.settings[position].width ? `${this.settings[position].width}px` : `${settings.border.width}px`;\n      style.width = this.settings[position] && this.settings[position].width ? `${this.settings[position].width}px` : `${settings.border.width}px`;\n      this.main.appendChild(div);\n    }\n    this.top = this.main.childNodes[0];\n    this.start = this.main.childNodes[1];\n    this.bottom = this.main.childNodes[2];\n    this.end = this.main.childNodes[3];\n    this.topStyle = this.top.style;\n    this.startStyle = this.start.style;\n    this.bottomStyle = this.bottom.style;\n    this.endStyle = this.end.style;\n    this.corner = this.main.childNodes[4];\n    this.corner.className += ' corner';\n    this.cornerStyle = this.corner.style;\n    this.cornerStyle.width = this.cornerDefaultStyle.width;\n    this.cornerStyle.height = this.cornerDefaultStyle.height;\n    this.cornerStyle.border = [this.cornerDefaultStyle.borderWidth, this.cornerDefaultStyle.borderStyle, this.cornerDefaultStyle.borderColor].join(' ');\n    if (isMobileBrowser()) {\n      this.createMultipleSelectorHandles();\n    }\n    this.disappear();\n    const {\n      wtTable\n    } = this.wot;\n    let bordersHolder = wtTable.bordersHolder;\n    if (!bordersHolder) {\n      bordersHolder = rootDocument.createElement('div');\n      bordersHolder.className = 'htBorders';\n      wtTable.bordersHolder = bordersHolder;\n      wtTable.spreader.appendChild(bordersHolder);\n    }\n    bordersHolder.appendChild(this.main);\n  }\n\n  /**\n   * Create multiple selector handler for mobile devices.\n   */\n  createMultipleSelectorHandles() {\n    const {\n      rootDocument\n    } = this.wot;\n    this.selectionHandles = {\n      top: rootDocument.createElement('DIV'),\n      topHitArea: rootDocument.createElement('DIV'),\n      bottom: rootDocument.createElement('DIV'),\n      bottomHitArea: rootDocument.createElement('DIV')\n    };\n    const width = 10;\n    const hitAreaWidth = 40;\n    this.selectionHandles.top.className = 'topSelectionHandle topLeftSelectionHandle';\n    this.selectionHandles.topHitArea.className = 'topSelectionHandle-HitArea topLeftSelectionHandle-HitArea';\n    this.selectionHandles.bottom.className = 'bottomSelectionHandle bottomRightSelectionHandle';\n    this.selectionHandles.bottomHitArea.className = 'bottomSelectionHandle-HitArea bottomRightSelectionHandle-HitArea';\n    this.selectionHandles.styles = {\n      top: this.selectionHandles.top.style,\n      topHitArea: this.selectionHandles.topHitArea.style,\n      bottom: this.selectionHandles.bottom.style,\n      bottomHitArea: this.selectionHandles.bottomHitArea.style\n    };\n    const hitAreaStyle = {\n      position: 'absolute',\n      height: `${hitAreaWidth}px`,\n      width: `${hitAreaWidth}px`,\n      'border-radius': `${parseInt(hitAreaWidth / 1.5, 10)}px`\n    };\n    objectEach(hitAreaStyle, (value, key) => {\n      this.selectionHandles.styles.bottomHitArea[key] = value;\n      this.selectionHandles.styles.topHitArea[key] = value;\n    });\n    const handleStyle = {\n      position: 'absolute',\n      height: `${width}px`,\n      width: `${width}px`,\n      'border-radius': `${parseInt(width / 1.5, 10)}px`,\n      background: '#F5F5FF',\n      border: '1px solid #4285c8'\n    };\n    objectEach(handleStyle, (value, key) => {\n      this.selectionHandles.styles.bottom[key] = value;\n      this.selectionHandles.styles.top[key] = value;\n    });\n    this.main.appendChild(this.selectionHandles.top);\n    this.main.appendChild(this.selectionHandles.bottom);\n    this.main.appendChild(this.selectionHandles.topHitArea);\n    this.main.appendChild(this.selectionHandles.bottomHitArea);\n  }\n\n  /**\n   * @param {number} row The visual row index.\n   * @param {number} col The visual column index.\n   * @returns {boolean}\n   */\n  isPartRange(row, col) {\n    const areaSelection = this.wot.selectionManager.getAreaSelection();\n    if (areaSelection.cellRange) {\n      if (row !== areaSelection.cellRange.to.row || col !== areaSelection.cellRange.to.col) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {number} row The visual row index.\n   * @param {number} col The visual column index.\n   * @param {number} top The top position of the handler.\n   * @param {number} left The left position of the handler.\n   * @param {number} width The width of the handler.\n   * @param {number} height The height of the handler.\n   */\n  updateMultipleSelectionHandlesPosition(row, col, top, left, width, height) {\n    const isRtl = this.wot.wtSettings.getSetting('rtlMode');\n    const inlinePosProperty = isRtl ? 'right' : 'left';\n    const {\n      top: topStyles,\n      topHitArea: topHitAreaStyles,\n      bottom: bottomStyles,\n      bottomHitArea: bottomHitAreaStyles\n    } = this.selectionHandles.styles;\n    const handleBorderSize = parseInt(topStyles.borderWidth, 10);\n    const handleSize = parseInt(topStyles.width, 10);\n    const hitAreaSize = parseInt(topHitAreaStyles.width, 10);\n    const totalTableWidth = this.wot.wtTable.getWidth();\n    const totalTableHeight = this.wot.wtTable.getHeight();\n    topStyles.top = `${parseInt(top - handleSize - 1, 10)}px`;\n    topStyles[inlinePosProperty] = `${parseInt(left - handleSize - 1, 10)}px`;\n    topHitAreaStyles.top = `${parseInt(top - hitAreaSize / 4 * 3, 10)}px`;\n    topHitAreaStyles[inlinePosProperty] = `${parseInt(left - hitAreaSize / 4 * 3, 10)}px`;\n    const bottomHandlerInline = Math.min(parseInt(left + width, 10), totalTableWidth - handleSize - handleBorderSize * 2);\n    const bottomHandlerAreaInline = Math.min(parseInt(left + width - hitAreaSize / 4, 10), totalTableWidth - hitAreaSize - handleBorderSize * 2);\n    bottomStyles[inlinePosProperty] = `${bottomHandlerInline}px`;\n    bottomHitAreaStyles[inlinePosProperty] = `${bottomHandlerAreaInline}px`;\n    const bottomHandlerTop = Math.min(parseInt(top + height, 10), totalTableHeight - handleSize - handleBorderSize * 2);\n    const bottomHandlerAreaTop = Math.min(parseInt(top + height - hitAreaSize / 4, 10), totalTableHeight - hitAreaSize - handleBorderSize * 2);\n    bottomStyles.top = `${bottomHandlerTop}px`;\n    bottomHitAreaStyles.top = `${bottomHandlerAreaTop}px`;\n    if (this.settings.border.cornerVisible && this.settings.border.cornerVisible()) {\n      topStyles.display = 'block';\n      topHitAreaStyles.display = 'block';\n      if (this.isPartRange(row, col)) {\n        bottomStyles.display = 'none';\n        bottomHitAreaStyles.display = 'none';\n      } else {\n        bottomStyles.display = 'block';\n        bottomHitAreaStyles.display = 'block';\n      }\n    } else {\n      topStyles.display = 'none';\n      bottomStyles.display = 'none';\n      topHitAreaStyles.display = 'none';\n      bottomHitAreaStyles.display = 'none';\n    }\n    if (row === this.wot.wtSettings.getSetting('fixedRowsTop') || col === this.wot.wtSettings.getSetting('fixedColumnsStart')) {\n      topStyles.zIndex = '9999';\n      topHitAreaStyles.zIndex = '9999';\n    } else {\n      topStyles.zIndex = '';\n      topHitAreaStyles.zIndex = '';\n    }\n  }\n\n  /**\n   * Show border around one or many cells.\n   *\n   * @param {Array} corners The corner coordinates.\n   */\n  appear(corners) {\n    if (this.disabled) {\n      return;\n    }\n    const {\n      wtTable,\n      rootDocument,\n      rootWindow\n    } = this.wot; // todo refactoring: consider about using internal facade (it is given by external code)\n    let fromRow;\n    let toRow;\n    let fromColumn;\n    let toColumn;\n    let rowHeader;\n    let columnHeader;\n    const rowsCount = wtTable.getRenderedRowsCount();\n    for (let i = 0; i < rowsCount; i += 1) {\n      const s = wtTable.rowFilter.renderedToSource(i);\n      if (s >= corners[0] && s <= corners[2]) {\n        fromRow = s;\n        rowHeader = corners[0];\n        break;\n      }\n    }\n    for (let i = rowsCount - 1; i >= 0; i -= 1) {\n      const s = wtTable.rowFilter.renderedToSource(i);\n      if (s >= corners[0] && s <= corners[2]) {\n        toRow = s;\n        break;\n      }\n    }\n    const columnsCount = wtTable.getRenderedColumnsCount();\n    for (let i = 0; i < columnsCount; i += 1) {\n      const s = wtTable.columnFilter.renderedToSource(i);\n      if (s >= corners[1] && s <= corners[3]) {\n        fromColumn = s;\n        columnHeader = corners[1];\n        break;\n      }\n    }\n    for (let i = columnsCount - 1; i >= 0; i -= 1) {\n      const s = wtTable.columnFilter.renderedToSource(i);\n      if (s >= corners[1] && s <= corners[3]) {\n        toColumn = s;\n        break;\n      }\n    }\n    if (fromRow === undefined || fromColumn === undefined) {\n      this.disappear();\n      return;\n    }\n    let fromTD = wtTable.getCell(this.wot.createCellCoords(fromRow, fromColumn));\n    const isMultiple = fromRow !== toRow || fromColumn !== toColumn;\n    const toTD = isMultiple ? wtTable.getCell(this.wot.createCellCoords(toRow, toColumn)) : fromTD;\n    const fromOffset = offset(fromTD);\n    const toOffset = isMultiple ? offset(toTD) : fromOffset;\n    const containerOffset = offset(wtTable.TABLE);\n    const containerWidth = outerWidth(wtTable.TABLE);\n    const minTop = fromOffset.top;\n    const minLeft = fromOffset.left;\n    const isRtl = this.wot.wtSettings.getSetting('rtlMode');\n    let inlineStartPos = 0;\n    let width = 0;\n    if (isRtl) {\n      const fromWidth = outerWidth(fromTD);\n      const gridRightPos = rootWindow.innerWidth - containerOffset.left - containerWidth;\n      width = minLeft + fromWidth - toOffset.left;\n      inlineStartPos = rootWindow.innerWidth - minLeft - fromWidth - gridRightPos - 1;\n    } else {\n      width = toOffset.left + outerWidth(toTD) - minLeft;\n      inlineStartPos = minLeft - containerOffset.left - 1;\n    }\n    if (this.isEntireColumnSelected(fromRow, toRow)) {\n      const modifiedValues = this.getDimensionsFromHeader('columns', fromColumn, toColumn, rowHeader, containerOffset);\n      let fromTH = null;\n      if (modifiedValues) {\n        [fromTH, inlineStartPos, width] = modifiedValues;\n      }\n      if (fromTH) {\n        fromTD = fromTH;\n      }\n    }\n    let top = minTop - containerOffset.top - 1;\n    let height = toOffset.top + outerHeight(toTD) - minTop;\n    if (this.isEntireRowSelected(fromColumn, toColumn)) {\n      const modifiedValues = this.getDimensionsFromHeader('rows', fromRow, toRow, columnHeader, containerOffset);\n      let fromTH = null;\n      if (modifiedValues) {\n        [fromTH, top, height] = modifiedValues;\n      }\n      if (fromTH) {\n        fromTD = fromTH;\n      }\n    }\n    const style = getComputedStyle(fromTD, rootWindow);\n    if (parseInt(style.borderTopWidth, 10) > 0) {\n      top += 1;\n      height = height > 0 ? height - 1 : 0;\n    }\n    if (parseInt(style[isRtl ? 'borderRightWidth' : 'borderLeftWidth'], 10) > 0) {\n      inlineStartPos += 1;\n      width = width > 0 ? width - 1 : 0;\n    }\n    const inlinePosProperty = isRtl ? 'right' : 'left';\n    this.topStyle.top = `${top}px`;\n    this.topStyle[inlinePosProperty] = `${inlineStartPos}px`;\n    this.topStyle.width = `${width}px`;\n    this.topStyle.display = 'block';\n    this.startStyle.top = `${top}px`;\n    this.startStyle[inlinePosProperty] = `${inlineStartPos}px`;\n    this.startStyle.height = `${height}px`;\n    this.startStyle.display = 'block';\n    const delta = Math.floor(this.settings.border.width / 2);\n    this.bottomStyle.top = `${top + height - delta}px`;\n    this.bottomStyle[inlinePosProperty] = `${inlineStartPos}px`;\n    this.bottomStyle.width = `${width}px`;\n    this.bottomStyle.display = 'block';\n    this.endStyle.top = `${top}px`;\n    this.endStyle[inlinePosProperty] = `${inlineStartPos + width - delta}px`;\n    this.endStyle.height = `${height + 1}px`;\n    this.endStyle.display = 'block';\n    let cornerVisibleSetting = this.settings.border.cornerVisible;\n    cornerVisibleSetting = typeof cornerVisibleSetting === 'function' ? cornerVisibleSetting(this.settings.layerLevel) : cornerVisibleSetting;\n    const hookResult = this.wot.getSetting('onModifyGetCellCoords', toRow, toColumn);\n    let [checkRow, checkCol] = [toRow, toColumn];\n    if (hookResult && Array.isArray(hookResult)) {\n      [,, checkRow, checkCol] = hookResult;\n    }\n    if (isMobileBrowser() || !cornerVisibleSetting || this.isPartRange(checkRow, checkCol)) {\n      this.cornerStyle.display = 'none';\n    } else {\n      this.cornerStyle.top = `${top + height + this.cornerCenterPointOffset - 1}px`;\n      this.cornerStyle[inlinePosProperty] = `${inlineStartPos + width + this.cornerCenterPointOffset - 1}px`;\n      this.cornerStyle.borderRightWidth = this.cornerDefaultStyle.borderWidth;\n      this.cornerStyle.width = this.cornerDefaultStyle.width;\n\n      // Hide the fill handle, so the possible further adjustments won't force unneeded scrollbars.\n      this.cornerStyle.display = 'none';\n      let trimmingContainer = getTrimmingContainer(wtTable.TABLE);\n      const trimToWindow = trimmingContainer === rootWindow;\n      if (trimToWindow) {\n        trimmingContainer = rootDocument.documentElement;\n      }\n      const cornerHalfWidth = parseInt(this.cornerDefaultStyle.width, 10) / 2;\n      const cornerHalfHeight = parseInt(this.cornerDefaultStyle.height, 10) / 2;\n      if (toColumn === this.wot.getSetting('totalColumns') - 1) {\n        const toTdOffsetLeft = trimToWindow ? toTD.getBoundingClientRect().left : toTD.offsetLeft;\n        let cornerOverlappingContainer = false;\n        let cornerEdge = 0;\n        if (isRtl) {\n          cornerEdge = toTdOffsetLeft - parseInt(this.cornerDefaultStyle.width, 10) / 2;\n          cornerOverlappingContainer = cornerEdge < 0;\n        } else {\n          cornerEdge = toTdOffsetLeft + outerWidth(toTD) + parseInt(this.cornerDefaultStyle.width, 10) / 2;\n          cornerOverlappingContainer = cornerEdge >= innerWidth(trimmingContainer);\n        }\n        if (cornerOverlappingContainer) {\n          this.cornerStyle[inlinePosProperty] = `${Math.floor(inlineStartPos + width + this.cornerCenterPointOffset - cornerHalfWidth)}px`;\n          this.cornerStyle[isRtl ? 'borderLeftWidth' : 'borderRightWidth'] = 0;\n        }\n      }\n      if (toRow === this.wot.getSetting('totalRows') - 1) {\n        const toTdOffsetTop = trimToWindow ? toTD.getBoundingClientRect().top : toTD.offsetTop;\n        const cornerBottomEdge = toTdOffsetTop + outerHeight(toTD) + parseInt(this.cornerDefaultStyle.height, 10) / 2;\n        const cornerOverlappingContainer = cornerBottomEdge >= innerHeight(trimmingContainer);\n        if (cornerOverlappingContainer) {\n          this.cornerStyle.top = `${Math.floor(top + height + this.cornerCenterPointOffset - cornerHalfHeight)}px`;\n          this.cornerStyle.borderBottomWidth = 0;\n        }\n      }\n      this.cornerStyle.display = 'block';\n    }\n    if (isMobileBrowser()) {\n      this.updateMultipleSelectionHandlesPosition(toRow, toColumn, top, inlineStartPos, width, height);\n    }\n  }\n\n  /**\n   * Check whether an entire column of cells is selected.\n   *\n   * @private\n   * @param {number} startRowIndex Start row index.\n   * @param {number} endRowIndex End row index.\n   * @returns {boolean}\n   */\n  isEntireColumnSelected(startRowIndex, endRowIndex) {\n    return startRowIndex === this.wot.wtTable.getFirstRenderedRow() && endRowIndex === this.wot.wtTable.getLastRenderedRow();\n  }\n\n  /**\n   * Check whether an entire row of cells is selected.\n   *\n   * @private\n   * @param {number} startColumnIndex Start column index.\n   * @param {number} endColumnIndex End column index.\n   * @returns {boolean}\n   */\n  isEntireRowSelected(startColumnIndex, endColumnIndex) {\n    return startColumnIndex === this.wot.wtTable.getFirstRenderedColumn() && endColumnIndex === this.wot.wtTable.getLastRenderedColumn();\n  }\n\n  /**\n   * Get left/top index and width/height depending on the `direction` provided.\n   *\n   * @private\n   * @param {string} direction `rows` or `columns`, defines if an entire column or row is selected.\n   * @param {number} fromIndex Start index of the selection.\n   * @param {number} toIndex End index of the selection.\n   * @param {number} headerIndex The header index as negative value.\n   * @param {number} containerOffset Offset of the container.\n   * @returns {Array|boolean} Returns an array of [headerElement, left, width] or [headerElement, top, height], depending on `direction` (`false` in case of an error getting the headers).\n   */\n  getDimensionsFromHeader(direction, fromIndex, toIndex, headerIndex, containerOffset) {\n    const {\n      wtTable\n    } = this.wot;\n    const rootHotElement = wtTable.wtRootElement.parentNode;\n    let getHeaderFn = null;\n    let dimensionFn = null;\n    let entireSelectionClassname = null;\n    let index = null;\n    let dimension = null;\n    let dimensionProperty = null;\n    let startHeader = null;\n    let endHeader = null;\n    switch (direction) {\n      case 'rows':\n        getHeaderFn = function () {\n          return wtTable.getRowHeader(...arguments);\n        };\n        dimensionFn = function () {\n          return outerHeight(...arguments);\n        };\n        entireSelectionClassname = 'ht__selection--rows';\n        dimensionProperty = 'top';\n        break;\n      case 'columns':\n        getHeaderFn = function () {\n          return wtTable.getColumnHeader(...arguments);\n        };\n        dimensionFn = function () {\n          return outerWidth(...arguments);\n        };\n        entireSelectionClassname = 'ht__selection--columns';\n        dimensionProperty = 'left';\n        break;\n      default:\n    }\n    if (rootHotElement.classList.contains(entireSelectionClassname)) {\n      const columnHeaderLevelCount = this.wot.getSetting('columnHeaders').length;\n      startHeader = getHeaderFn(fromIndex, columnHeaderLevelCount - headerIndex);\n      endHeader = getHeaderFn(toIndex, columnHeaderLevelCount - headerIndex);\n      if (!startHeader || !endHeader) {\n        return false;\n      }\n      const startHeaderOffset = offset(startHeader);\n      const endOffset = offset(endHeader);\n      if (startHeader && endHeader) {\n        index = startHeaderOffset[dimensionProperty] - containerOffset[dimensionProperty] - 1;\n        dimension = endOffset[dimensionProperty] + dimensionFn(endHeader) - startHeaderOffset[dimensionProperty];\n      }\n      return [startHeader, index, dimension];\n    }\n    return false;\n  }\n\n  /**\n   * Change border style.\n   *\n   * @private\n   * @param {string} borderElement Coordinate where add/remove border: top, bottom, start, end.\n   * @param {object} border The border object descriptor.\n   */\n  changeBorderStyle(borderElement, border) {\n    const style = this[borderElement].style;\n    const borderStyle = border[borderElement];\n    if (!borderStyle || borderStyle.hide) {\n      addClass(this[borderElement], 'hidden');\n    } else {\n      if (hasClass(this[borderElement], 'hidden')) {\n        removeClass(this[borderElement], 'hidden');\n      }\n      style.backgroundColor = borderStyle.color;\n      if (borderElement === 'top' || borderElement === 'bottom') {\n        style.height = `${borderStyle.width}px`;\n      }\n      if (borderElement === 'start' || borderElement === 'end') {\n        style.width = `${borderStyle.width}px`;\n      }\n    }\n  }\n\n  /**\n   * Change border style to default.\n   *\n   * @private\n   * @param {string} position The position type (\"top\", \"bottom\", \"start\", \"end\") to change.\n   */\n  changeBorderToDefaultStyle(position) {\n    const defaultBorder = {\n      width: 1,\n      color: '#000'\n    };\n    const style = this[position].style;\n    style.backgroundColor = defaultBorder.color;\n    style.width = `${defaultBorder.width}px`;\n    style.height = `${defaultBorder.width}px`;\n  }\n\n  /**\n   * Toggle class 'hidden' to element.\n   *\n   * @private\n   * @param {string} borderElement Coordinate where add/remove border: top, bottom, start, end.\n   * @param {boolean} [remove] Defines type of the action to perform.\n   */\n  toggleHiddenClass(borderElement, remove) {\n    this.changeBorderToDefaultStyle(borderElement);\n    if (remove) {\n      addClass(this[borderElement], 'hidden');\n    } else {\n      removeClass(this[borderElement], 'hidden');\n    }\n  }\n\n  /**\n   * Hide border.\n   */\n  disappear() {\n    this.topStyle.display = 'none';\n    this.bottomStyle.display = 'none';\n    this.startStyle.display = 'none';\n    this.endStyle.display = 'none';\n    this.cornerStyle.display = 'none';\n    if (isMobileBrowser()) {\n      this.selectionHandles.styles.top.display = 'none';\n      this.selectionHandles.styles.topHitArea.display = 'none';\n      this.selectionHandles.styles.bottom.display = 'none';\n      this.selectionHandles.styles.bottomHitArea.display = 'none';\n    }\n  }\n\n  /**\n   * Cleans up all the DOM state related to a Border instance. Call this prior to deleting a Border instance.\n   */\n  destroy() {\n    this.eventManager.destroyWithOwnEventsOnly();\n    this.main.parentNode.removeChild(this.main);\n  }\n}\nexport default Border;", "import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unscopables.flat.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { removeClass, addClass, setAttribute, removeAttribute } from \"../../../../helpers/dom/element.mjs\";\nimport { SelectionScanner } from \"./scanner.mjs\";\nimport Border from \"./border/border.mjs\";\n/**\n * Module responsible for rendering selections (CSS classes) and borders based on the\n * collection of the Selection instances provided throughout the `selections` Walkontable\n * setting.\n *\n * @private\n */\nvar _activeOverlaysWot = /*#__PURE__*/new WeakMap();\nvar _selections = /*#__PURE__*/new WeakMap();\nvar _scanner = /*#__PURE__*/new WeakMap();\nvar _appliedClasses = /*#__PURE__*/new WeakMap();\nvar _destroyListeners = /*#__PURE__*/new WeakMap();\nvar _selectionBorders = /*#__PURE__*/new WeakMap();\nvar _resetCells = /*#__PURE__*/new WeakSet();\nexport class SelectionManager {\n  constructor(selections) {\n    /**\n     * Resets the elements to their initial state (remove the CSS classes that are added in the\n     * previous render cycle).\n     */\n    _classPrivateMethodInitSpec(this, _resetCells);\n    /**\n     * The overlay's Walkontable instance that are currently processed.\n     *\n     * @type {Walkontable}\n     */\n    _classPrivateFieldInitSpec(this, _activeOverlaysWot, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * The Highlight instance that holds Selections instances within it.\n     *\n     * @type {Highlight|null}\n     */\n    _classPrivateFieldInitSpec(this, _selections, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * The SelectionScanner allows to scan and collect the cell and header elements that matches\n     * to the coords defined in the selections.\n     *\n     * @type {SelectionScanner}\n     */\n    _classPrivateFieldInitSpec(this, _scanner, {\n      writable: true,\n      value: new SelectionScanner()\n    });\n    /**\n     * The Map tracks applied CSS classes. It's used to reset the elements state to their initial state.\n     *\n     * @type {WeakMap}\n     */\n    _classPrivateFieldInitSpec(this, _appliedClasses, {\n      writable: true,\n      value: new WeakMap()\n    });\n    /**\n     * The Map tracks applied \"destroy\" listeners for Selection instances.\n     *\n     * @type {WeakMap}\n     */\n    _classPrivateFieldInitSpec(this, _destroyListeners, {\n      writable: true,\n      value: new WeakSet()\n    });\n    /**\n     * The Map holds references to Border classes for Selection instances which requires that when\n     * the \"border\" setting is defined.\n     *\n     * @type {Map}\n     */\n    _classPrivateFieldInitSpec(this, _selectionBorders, {\n      writable: true,\n      value: new Map()\n    });\n    _classPrivateFieldSet(this, _selections, selections);\n  }\n\n  /**\n   * Sets the active Walkontable instance.\n   *\n   * @param {Walkontable} activeWot The overlays or master Walkontable instance.\n   * @returns {SelectionManager}\n   */\n  setActiveOverlay(activeWot) {\n    _classPrivateFieldSet(this, _activeOverlaysWot, activeWot);\n    _classPrivateFieldGet(this, _scanner).setActiveOverlay(_classPrivateFieldGet(this, _activeOverlaysWot));\n    if (!_classPrivateFieldGet(this, _appliedClasses).has(_classPrivateFieldGet(this, _activeOverlaysWot))) {\n      _classPrivateFieldGet(this, _appliedClasses).set(_classPrivateFieldGet(this, _activeOverlaysWot), new Set());\n    }\n    return this;\n  }\n\n  /**\n   * Gets the Selection instance of the \"focus\" type.\n   *\n   * @returns {Selection|null}\n   */\n  getFocusSelection() {\n    return _classPrivateFieldGet(this, _selections) !== null ? _classPrivateFieldGet(this, _selections).getFocus() : null;\n  }\n\n  /**\n   * Gets the Selection instance of the \"area\" type.\n   *\n   * @returns {Selection|null}\n   */\n  getAreaSelection() {\n    return _classPrivateFieldGet(this, _selections) !== null ? _classPrivateFieldGet(this, _selections).createLayeredArea() : null;\n  }\n\n  /**\n   * Gets the Border instance associated with Selection instance.\n   *\n   * @param {Selection} selection The selection instance.\n   * @returns {Border|null} Returns the Border instance (new for each overlay Walkontable instance).\n   */\n  getBorderInstance(selection) {\n    if (!selection.settings.border) {\n      return null;\n    }\n    if (_classPrivateFieldGet(this, _selectionBorders).has(selection)) {\n      const borders = _classPrivateFieldGet(this, _selectionBorders).get(selection);\n      if (borders.has(_classPrivateFieldGet(this, _activeOverlaysWot))) {\n        return borders.get(_classPrivateFieldGet(this, _activeOverlaysWot));\n      }\n      const border = new Border(_classPrivateFieldGet(this, _activeOverlaysWot), selection.settings);\n      borders.set(_classPrivateFieldGet(this, _activeOverlaysWot), border);\n      return border;\n    }\n    const border = new Border(_classPrivateFieldGet(this, _activeOverlaysWot), selection.settings);\n    _classPrivateFieldGet(this, _selectionBorders).set(selection, new Map([[_classPrivateFieldGet(this, _activeOverlaysWot), border]]));\n    return border;\n  }\n\n  /**\n   * Gets all Border instances associated with Selection instance for all overlays.\n   *\n   * @param {Selection} selection The selection instance.\n   * @returns {Border[]}\n   */\n  getBorderInstances(selection) {\n    var _classPrivateFieldGet2, _classPrivateFieldGet3;\n    return Array.from((_classPrivateFieldGet2 = (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _selectionBorders).get(selection)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.values()) !== null && _classPrivateFieldGet2 !== void 0 ? _classPrivateFieldGet2 : []);\n  }\n\n  /**\n   * Destroys the Border instance associated with Selection instance.\n   *\n   * @param {Selection} selection The selection instance.\n   */\n  destroyBorders(selection) {\n    _classPrivateFieldGet(this, _selectionBorders).get(selection).forEach(border => border.destroy());\n    _classPrivateFieldGet(this, _selectionBorders).delete(selection);\n  }\n\n  /**\n   * Renders all the selections (add CSS classes to cells and draw borders).\n   *\n   * @param {boolean} fastDraw Indicates the render cycle type (fast/slow).\n   */\n  render(fastDraw) {\n    if (_classPrivateFieldGet(this, _selections) === null) {\n      return;\n    }\n    if (fastDraw) {\n      // there was no rerender, so we need to remove classNames by ourselves\n      _classPrivateMethodGet(this, _resetCells, _resetCells2).call(this);\n    }\n    const selections = Array.from(_classPrivateFieldGet(this, _selections));\n    const classNamesMap = new Map();\n    const headerAttributesMap = new Map();\n    for (let i = 0; i < selections.length; i++) {\n      const selection = selections[i];\n      const {\n        className,\n        headerAttributes,\n        createLayers,\n        selectionType\n      } = selection.settings;\n      if (!_classPrivateFieldGet(this, _destroyListeners).has(selection)) {\n        _classPrivateFieldGet(this, _destroyListeners).add(selection);\n        selection.addLocalHook('destroy', () => this.destroyBorders(selection));\n      }\n      const borderInstance = this.getBorderInstance(selection);\n      if (selection.isEmpty()) {\n        borderInstance === null || borderInstance === void 0 || borderInstance.disappear();\n        continue; // eslint-disable-line no-continue\n      }\n\n      if (className) {\n        const elements = _classPrivateFieldGet(this, _scanner).setActiveSelection(selection).scan();\n        elements.forEach(element => {\n          if (classNamesMap.has(element)) {\n            const classNamesLayers = classNamesMap.get(element);\n            if (classNamesLayers.has(className) && createLayers === true) {\n              classNamesLayers.set(className, classNamesLayers.get(className) + 1);\n            } else {\n              classNamesLayers.set(className, 1);\n            }\n          } else {\n            classNamesMap.set(element, new Map([[className, 1]]));\n          }\n          if (headerAttributes) {\n            if (!headerAttributesMap.has(element)) {\n              headerAttributesMap.set(element, []);\n            }\n            if (element.nodeName === 'TH') {\n              headerAttributesMap.get(element).push(...headerAttributes);\n            }\n          }\n        });\n      }\n      const corners = selection.getCorners();\n      _classPrivateFieldGet(this, _activeOverlaysWot).getSetting('onBeforeDrawBorders', corners, selectionType);\n      borderInstance === null || borderInstance === void 0 || borderInstance.appear(corners);\n    }\n    classNamesMap.forEach((classNamesLayers, element) => {\n      var _classPrivateFieldGet4;\n      const classNames = Array.from(classNamesLayers).map(_ref => {\n        let [className, occurrenceCount] = _ref;\n        if (occurrenceCount === 1) {\n          return className;\n        }\n        return [className, ...Array.from({\n          length: occurrenceCount - 1\n        }, (_, i) => `${className}-${i + 1}`)];\n      }).flat();\n      classNames.forEach(className => _classPrivateFieldGet(this, _appliedClasses).get(_classPrivateFieldGet(this, _activeOverlaysWot)).add(className));\n      addClass(element, classNames);\n      if (element.nodeName === 'TD' && Array.isArray((_classPrivateFieldGet4 = _classPrivateFieldGet(this, _selections).options) === null || _classPrivateFieldGet4 === void 0 ? void 0 : _classPrivateFieldGet4.cellAttributes)) {\n        setAttribute(element, _classPrivateFieldGet(this, _selections).options.cellAttributes);\n      }\n    });\n\n    // Set the attributes for the headers if they're focused.\n    Array.from(headerAttributesMap.keys()).forEach(element => {\n      setAttribute(element, [...headerAttributesMap.get(element)]);\n    });\n  }\n}\nfunction _resetCells2() {\n  const appliedOverlaysClasses = _classPrivateFieldGet(this, _appliedClasses).get(_classPrivateFieldGet(this, _activeOverlaysWot));\n  const classesToRemove = _classPrivateFieldGet(this, _activeOverlaysWot).wtSettings.getSetting('onBeforeRemoveCellClassNames');\n  if (Array.isArray(classesToRemove)) {\n    for (let i = 0; i < classesToRemove.length; i++) {\n      appliedOverlaysClasses.add(classesToRemove[i]);\n    }\n  }\n  appliedOverlaysClasses.forEach(className => {\n    var _classPrivateFieldGet5, _classPrivateFieldGet6;\n    const nodes = _classPrivateFieldGet(this, _activeOverlaysWot).wtTable.TABLE.querySelectorAll(`.${className}`);\n    let cellAttributes = [];\n    if (Array.isArray((_classPrivateFieldGet5 = _classPrivateFieldGet(this, _selections).options) === null || _classPrivateFieldGet5 === void 0 ? void 0 : _classPrivateFieldGet5.cellAttributes)) {\n      cellAttributes = _classPrivateFieldGet(this, _selections).options.cellAttributes.map(el => el[0]);\n    }\n    if (Array.isArray((_classPrivateFieldGet6 = _classPrivateFieldGet(this, _selections).options) === null || _classPrivateFieldGet6 === void 0 ? void 0 : _classPrivateFieldGet6.headerAttributes)) {\n      cellAttributes = [...cellAttributes, ..._classPrivateFieldGet(this, _selections).options.headerAttributes.map(el => el[0])];\n    }\n    for (let i = 0, len = nodes.length; i < len; i++) {\n      removeClass(nodes[i], className);\n      removeAttribute(nodes[i], cellAttributes);\n    }\n  });\n  appliedOverlaysClasses.clear();\n}", "import \"core-js/modules/es.error.cause.js\";\nimport { addClass, getScrollbarWidth, getScrollLeft, getWindowScrollTop, hasClass, outerWidth, removeClass, setOverlayPosition, resetCssTransform } from \"../../../../helpers/dom/element.mjs\";\nimport InlineStartOverlayTable from \"../table/inlineStart.mjs\";\nimport { Overlay } from \"./_base.mjs\";\nimport { CORNER_DEFAULT_STYLE } from \"../selection/index.mjs\";\nimport { CLONE_INLINE_START } from \"./constants.mjs\";\n/**\n * @class InlineStartOverlay\n */\nexport class InlineStartOverlay extends Overlay {\n  /**\n   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {DomBindings} domBindings Dom elements bound to the current instance.\n   */\n  constructor(wotInstance, facadeGetter, wtSettings, domBindings) {\n    super(wotInstance, facadeGetter, CLONE_INLINE_START, wtSettings, domBindings);\n  }\n\n  /**\n   * Factory method to create a subclass of `Table` that is relevant to this overlay.\n   *\n   * @see Table#constructor\n   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.\n   * @returns {InlineStartOverlayTable}\n   */\n  createTable() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new InlineStartOverlayTable(...args);\n  }\n\n  /**\n   * Checks if overlay should be fully rendered.\n   *\n   * @returns {boolean}\n   */\n  shouldBeRendered() {\n    return this.wtSettings.getSetting('shouldRenderInlineStartOverlay');\n  }\n\n  /**\n   * Updates the left overlay position.\n   *\n   * @returns {boolean}\n   */\n  resetFixedPosition() {\n    const {\n      wtTable\n    } = this.wot;\n    if (!this.needFullRender || !wtTable.holder.parentNode) {\n      // removed from DOM\n      return false;\n    }\n    const {\n      rootWindow\n    } = this.domBindings;\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    let overlayPosition = 0;\n    if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'horizontal')) {\n      overlayPosition = this.getOverlayOffset() * (this.isRtl() ? -1 : 1);\n      setOverlayPosition(overlayRoot, `${overlayPosition}px`, '0px');\n    } else {\n      overlayPosition = this.getScrollPosition();\n      resetCssTransform(overlayRoot);\n    }\n    const positionChanged = this.adjustHeaderBordersPosition(overlayPosition);\n    this.adjustElementsSize();\n    return positionChanged;\n  }\n\n  /**\n   * Sets the main overlay's horizontal scroll position.\n   *\n   * @param {number} pos The scroll position.\n   * @returns {boolean}\n   */\n  setScrollPosition(pos) {\n    const {\n      rootWindow\n    } = this.domBindings;\n    let result = false;\n    if (this.isRtl()) {\n      pos = -pos;\n    }\n    if (this.mainTableScrollableElement === rootWindow && rootWindow.scrollX !== pos) {\n      rootWindow.scrollTo(pos, getWindowScrollTop(rootWindow));\n      result = true;\n    } else if (this.mainTableScrollableElement.scrollLeft !== pos) {\n      this.mainTableScrollableElement.scrollLeft = pos;\n      result = true;\n    }\n    return result;\n  }\n\n  /**\n   * Triggers onScroll hook callback.\n   */\n  onScroll() {\n    this.wtSettings.getSetting('onScrollVertically');\n  }\n\n  /**\n   * Calculates total sum cells width.\n   *\n   * @param {number} from Column index which calculates started from.\n   * @param {number} to Column index where calculation is finished.\n   * @returns {number} Width sum.\n   */\n  sumCellSizes(from, to) {\n    const defaultColumnWidth = this.wtSettings.getSetting('defaultColumnWidth');\n    let column = from;\n    let sum = 0;\n    while (column < to) {\n      sum += this.wot.wtTable.getStretchedColumnWidth(column) || defaultColumnWidth;\n      column += 1;\n    }\n    return sum;\n  }\n\n  /**\n   * Adjust overlay root element, childs and master table element sizes (width, height).\n   *\n   * @param {boolean} [force=false] When `true`, it adjusts the DOM nodes sizes for that overlay.\n   */\n  adjustElementsSize() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.updateTrimmingContainer();\n    if (this.needFullRender || force) {\n      this.adjustRootElementSize();\n      this.adjustRootChildrenSize();\n    }\n  }\n\n  /**\n   * Adjust overlay root element size (width and height).\n   */\n  adjustRootElementSize() {\n    const {\n      wtTable\n    } = this.wot;\n    const {\n      rootDocument,\n      rootWindow\n    } = this.domBindings;\n    const scrollbarHeight = getScrollbarWidth(rootDocument);\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    const overlayRootStyle = overlayRoot.style;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    if (this.trimmingContainer !== rootWindow || preventOverflow === 'vertical') {\n      let height = this.wot.wtViewport.getWorkspaceHeight();\n      if (this.wot.wtOverlays.hasScrollbarBottom) {\n        height -= scrollbarHeight;\n      }\n      height = Math.min(height, wtTable.wtRootElement.scrollHeight);\n      overlayRootStyle.height = `${height}px`;\n    } else {\n      overlayRootStyle.height = '';\n    }\n    this.clone.wtTable.holder.style.height = overlayRootStyle.height;\n    const tableWidth = outerWidth(this.clone.wtTable.TABLE);\n    overlayRootStyle.width = `${tableWidth}px`;\n  }\n\n  /**\n   * Adjust overlay root childs size.\n   */\n  adjustRootChildrenSize() {\n    const {\n      holder\n    } = this.clone.wtTable;\n    const selectionCornerOffset = this.wot.selectionManager.getFocusSelection() ? parseInt(CORNER_DEFAULT_STYLE.width, 10) / 2 : 0;\n    this.clone.wtTable.hider.style.height = this.hider.style.height;\n    holder.style.height = holder.parentNode.style.height;\n    // Add selection corner protruding part to the holder total width to make sure that\n    // borders' corner won't be cut after horizontal scroll (#6937).\n    holder.style.width = `${parseInt(holder.parentNode.style.width, 10) + selectionCornerOffset}px`;\n  }\n\n  /**\n   * Adjust the overlay dimensions and position.\n   */\n  applyToDOM() {\n    const total = this.wtSettings.getSetting('totalColumns');\n    const styleProperty = this.isRtl() ? 'right' : 'left';\n    if (typeof this.wot.wtViewport.columnsRenderCalculator.startPosition === 'number') {\n      this.spreader.style[styleProperty] = `${this.wot.wtViewport.columnsRenderCalculator.startPosition}px`;\n    } else if (total === 0) {\n      this.spreader.style[styleProperty] = '0';\n    } else {\n      throw new Error('Incorrect value of the columnsRenderCalculator');\n    }\n    if (this.isRtl()) {\n      this.spreader.style.left = '';\n    } else {\n      this.spreader.style.right = '';\n    }\n    if (this.needFullRender) {\n      this.syncOverlayOffset();\n    }\n  }\n\n  /**\n   * Synchronize calculated top position to an element.\n   */\n  syncOverlayOffset() {\n    if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition === 'number') {\n      this.clone.wtTable.spreader.style.top = `${this.wot.wtViewport.rowsRenderCalculator.startPosition}px`;\n    } else {\n      this.clone.wtTable.spreader.style.top = '';\n    }\n  }\n\n  /**\n   * Scrolls horizontally to a column at the left edge of the viewport.\n   *\n   * @param {number} sourceCol  Column index which you want to scroll to.\n   * @param {boolean} [beyondRendered]  If `true`, scrolls according to the right\n   *                                    edge (left edge is by default).\n   * @returns {boolean}\n   */\n  scrollTo(sourceCol, beyondRendered) {\n    let newX = this.getTableParentOffset();\n    const sourceInstance = this.wot.cloneSource ? this.wot.cloneSource : this.wot;\n    const mainHolder = sourceInstance.wtTable.holder;\n    let scrollbarCompensation = 0;\n    if (beyondRendered) {\n      const columnWidth = this.wot.wtTable.getColumnWidth(sourceCol);\n      const viewportWidth = this.wot.wtViewport.getViewportWidth();\n      if (columnWidth > viewportWidth) {\n        beyondRendered = false;\n      }\n    }\n    if (beyondRendered && mainHolder.offsetWidth !== mainHolder.clientWidth) {\n      scrollbarCompensation = getScrollbarWidth(this.domBindings.rootDocument);\n    }\n    if (beyondRendered) {\n      newX += this.sumCellSizes(0, sourceCol + 1);\n      newX -= this.wot.wtViewport.getViewportWidth();\n    } else {\n      newX += this.sumCellSizes(this.wtSettings.getSetting('fixedColumnsStart'), sourceCol);\n    }\n    newX += scrollbarCompensation;\n    return this.setScrollPosition(newX);\n  }\n\n  /**\n   * Gets table parent left position.\n   *\n   * @returns {number}\n   */\n  getTableParentOffset() {\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    let offset = 0;\n    if (!preventOverflow && this.trimmingContainer === this.domBindings.rootWindow) {\n      offset = this.wot.wtTable.holderOffset.left;\n    }\n    return offset;\n  }\n\n  /**\n   * Gets the main overlay's horizontal scroll position.\n   *\n   * @returns {number} Main table's horizontal scroll position.\n   */\n  getScrollPosition() {\n    return Math.abs(getScrollLeft(this.mainTableScrollableElement, this.domBindings.rootWindow));\n  }\n\n  /**\n   * Gets the main overlay's horizontal overlay offset.\n   *\n   * @returns {number} Main table's horizontal overlay offset.\n   */\n  getOverlayOffset() {\n    const {\n      rootWindow\n    } = this.domBindings;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    let overlayOffset = 0;\n    if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'horizontal')) {\n      if (this.isRtl()) {\n        overlayOffset = Math.abs(Math.min(this.getTableParentOffset() - this.getScrollPosition(), 0));\n      } else {\n        overlayOffset = Math.max(this.getScrollPosition() - this.getTableParentOffset(), 0);\n      }\n      const rootWidth = this.wot.wtTable.getTotalWidth();\n      const overlayRootWidth = this.clone.wtTable.getTotalWidth();\n      const maxOffset = rootWidth - overlayRootWidth;\n      if (overlayOffset > maxOffset) {\n        overlayOffset = 0;\n      }\n    }\n    return overlayOffset;\n  }\n\n  /**\n   * Adds css classes to hide the header border's header (cell-selection border hiding issue).\n   *\n   * @param {number} position Header X position if trimming container is window or scroll top if not.\n   * @returns {boolean}\n   */\n  adjustHeaderBordersPosition(position) {\n    const masterParent = this.wot.wtTable.holder.parentNode;\n    const rowHeaders = this.wtSettings.getSetting('rowHeaders');\n    const fixedColumnsStart = this.wtSettings.getSetting('fixedColumnsStart');\n    const totalRows = this.wtSettings.getSetting('totalRows');\n    if (totalRows) {\n      removeClass(masterParent, 'emptyRows');\n    } else {\n      addClass(masterParent, 'emptyRows');\n    }\n    let positionChanged = false;\n    if (fixedColumnsStart && !rowHeaders.length) {\n      // \"innerBorderLeft\" is for backward compatibility\n      addClass(masterParent, 'innerBorderLeft innerBorderInlineStart');\n    } else if (!fixedColumnsStart && rowHeaders.length) {\n      const previousState = hasClass(masterParent, 'innerBorderInlineStart');\n      if (position) {\n        addClass(masterParent, 'innerBorderLeft innerBorderInlineStart');\n        positionChanged = !previousState;\n      } else {\n        removeClass(masterParent, 'innerBorderLeft innerBorderInlineStart');\n        positionChanged = previousState;\n      }\n    }\n    return positionChanged;\n  }\n}", "import { defineGetter } from \"../../../../../helpers/object.mjs\";\nconst MIXIN_NAME = 'stickyRowsTop';\n\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to rows.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use sticky rendering of the top rows in the vertical axis.\n *\n * @type {object}\n */\nconst stickyRowsTop = {\n  /**\n   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstRenderedRow() {\n    const totalRows = this.wtSettings.getSetting('totalRows');\n    if (totalRows === 0) {\n      return -1;\n    }\n    return 0;\n  },\n  /**\n   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstVisibleRow() {\n    return this.getFirstRenderedRow();\n  },\n  /**\n   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastRenderedRow() {\n    return this.getRenderedRowsCount() - 1;\n  },\n  /**\n   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastVisibleRow() {\n    return this.getLastRenderedRow();\n  },\n  /**\n   * Get the number of rendered rows.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRenderedRowsCount() {\n    const totalRows = this.wtSettings.getSetting('totalRows');\n    return Math.min(this.wtSettings.getSetting('fixedRowsTop'), totalRows);\n  },\n  /**\n   * Get the number of fully visible rows in the viewport.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getVisibleRowsCount() {\n    return this.getRenderedRowsCount();\n  },\n  /**\n   * Get the number of rendered column headers.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getColumnHeadersCount() {\n    return this.dataAccessObject.columnHeaders.length;\n  }\n};\ndefineGetter(stickyRowsTop, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default stickyRowsTop;", "import Table from \"../table.mjs\";\nimport stickyRowsTop from \"./mixin/stickyRowsTop.mjs\";\nimport stickyColumnsStart from \"./mixin/stickyColumnsStart.mjs\";\nimport { mixin } from \"../../../../helpers/object.mjs\";\nimport { CLONE_TOP_INLINE_START_CORNER } from \"../overlay/index.mjs\";\n/**\n * Subclass of `Table` that provides the helper methods relevant to topInlineStartCornerOverlay\n * (in RTL mode the overlay sits on the right of the screen), implemented through mixins.\n *\n * @mixes stickyRowsTop\n * @mixes stickyColumnsStart\n */\nclass TopInlineStartCornerOverlayTable extends Table {\n  /**\n   * @param {TableDao} dataAccessObject The data access object.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {DomBindings} domBindings Bindings into DOM.\n   * @param {Settings} wtSettings The Walkontable settings.\n   */\n  constructor(dataAccessObject, facadeGetter, domBindings, wtSettings) {\n    super(dataAccessObject, facadeGetter, domBindings, wtSettings, CLONE_TOP_INLINE_START_CORNER);\n  }\n}\nmixin(TopInlineStartCornerOverlayTable, stickyRowsTop);\nmixin(TopInlineStartCornerOverlayTable, stickyColumnsStart);\nexport default TopInlineStartCornerOverlayTable;", "import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { outerHeight, outerWidth, setOverlayPosition, resetCssTransform } from \"../../../../helpers/dom/element.mjs\";\nimport TopInlineStartCornerOverlayTable from \"../table/topInlineStartCorner.mjs\";\nimport { Overlay } from \"./_base.mjs\";\nimport { CLONE_TOP_INLINE_START_CORNER } from \"./constants.mjs\";\n/**\n * @class TopInlineStartCornerOverlay\n */\nexport class TopInlineStartCornerOverlay extends Overlay {\n  /**\n   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {DomBindings} domBindings Dom elements bound to the current instance.\n   * @param {TopOverlay} topOverlay The instance of the Top overlay.\n   * @param {InlineStartOverlay} inlineStartOverlay The instance of the InlineStart overlay.\n   */\n  constructor(wotInstance, facadeGetter, wtSettings, domBindings, topOverlay, inlineStartOverlay) {\n    super(wotInstance, facadeGetter, CLONE_TOP_INLINE_START_CORNER, wtSettings, domBindings);\n    /**\n     * The instance of the Top overlay.\n     *\n     * @type {TopOverlay}\n     */\n    _defineProperty(this, \"topOverlay\", void 0);\n    /**\n     * The instance of the InlineStart overlay.\n     *\n     * @type {InlineStartOverlay}\n     */\n    _defineProperty(this, \"inlineStartOverlay\", void 0);\n    this.topOverlay = topOverlay;\n    this.inlineStartOverlay = inlineStartOverlay;\n  }\n\n  /**\n   * Factory method to create a subclass of `Table` that is relevant to this overlay.\n   *\n   * @see Table#constructor\n   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.\n   * @returns {TopInlineStartCornerOverlayTable}\n   */\n  createTable() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new TopInlineStartCornerOverlayTable(...args);\n  }\n\n  /**\n   * Checks if overlay should be fully rendered.\n   *\n   * @returns {boolean}\n   */\n  shouldBeRendered() {\n    return this.wtSettings.getSetting('shouldRenderTopOverlay') && this.wtSettings.getSetting('shouldRenderInlineStartOverlay');\n  }\n\n  /**\n   * Updates the corner overlay position.\n   *\n   * @returns {boolean}\n   */\n  resetFixedPosition() {\n    this.updateTrimmingContainer();\n    if (!this.wot.wtTable.holder.parentNode) {\n      // removed from DOM\n      return false;\n    }\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    if (this.trimmingContainer === this.domBindings.rootWindow) {\n      const left = this.inlineStartOverlay.getOverlayOffset() * (this.isRtl() ? -1 : 1);\n      const top = this.topOverlay.getOverlayOffset();\n      setOverlayPosition(overlayRoot, `${left}px`, `${top}px`);\n    } else {\n      resetCssTransform(overlayRoot);\n    }\n    let tableHeight = outerHeight(this.clone.wtTable.TABLE);\n    const tableWidth = outerWidth(this.clone.wtTable.TABLE);\n    if (!this.wot.wtTable.hasDefinedSize()) {\n      tableHeight = 0;\n    }\n    overlayRoot.style.height = `${tableHeight}px`;\n    overlayRoot.style.width = `${tableWidth}px`;\n    return false;\n  }\n}", "import Table from \"../table.mjs\";\nimport stickyRowsTop from \"./mixin/stickyRowsTop.mjs\";\nimport calculatedColumns from \"./mixin/calculatedColumns.mjs\";\nimport { mixin } from \"../../../../helpers/object.mjs\";\nimport { CLONE_TOP } from \"../overlay/index.mjs\";\n/**\n * Subclass of `Table` that provides the helper methods relevant to TopOverlay, implemented through mixins.\n *\n * @mixes stickyRowsTop\n * @mixes calculatedColumns\n */\nclass TopOverlayTable extends Table {\n  /**\n   * @param {TableDao} dataAccessObject The data access object.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {DomBindings} domBindings Bindings into DOM.\n   * @param {Settings} wtSettings The Walkontable settings.\n   */\n  constructor(dataAccessObject, facadeGetter, domBindings, wtSettings) {\n    super(dataAccessObject, facadeGetter, domBindings, wtSettings, CLONE_TOP);\n  }\n}\nmixin(TopOverlayTable, stickyRowsTop);\nmixin(TopOverlayTable, calculatedColumns);\nexport default TopOverlayTable;", "import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { addClass, getScrollbarWidth, getScrollTop, getWindowScrollLeft, hasClass, outerHeight, removeClass, setOverlayPosition, resetCssTransform } from \"../../../../helpers/dom/element.mjs\";\nimport TopOverlayTable from \"./../table/top.mjs\";\nimport { Overlay } from \"./_base.mjs\";\nimport { CORNER_DEFAULT_STYLE } from \"../selection/index.mjs\";\nimport { CLONE_TOP } from \"./constants.mjs\";\n/**\n * @class TopOverlay\n */\nexport class TopOverlay extends Overlay {\n  /**\n   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {DomBindings} domBindings Dom elements bound to the current instance.\n   */\n  constructor(wotInstance, facadeGetter, wtSettings, domBindings) {\n    super(wotInstance, facadeGetter, CLONE_TOP, wtSettings, domBindings);\n    /**\n     * Cached value which holds the previous value of the `fixedRowsTop` option.\n     * It is used as a comparison value that can be used to detect changes in this value.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"cachedFixedRowsTop\", -1);\n    this.cachedFixedRowsTop = this.wtSettings.getSetting('fixedRowsTop');\n  }\n\n  /**\n   * Factory method to create a subclass of `Table` that is relevant to this overlay.\n   *\n   * @see Table#constructor\n   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.\n   * @returns {TopOverlayTable}\n   */\n  createTable() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new TopOverlayTable(...args);\n  }\n\n  /**\n   * Checks if overlay should be fully rendered.\n   *\n   * @returns {boolean}\n   */\n  shouldBeRendered() {\n    return this.wtSettings.getSetting('shouldRenderTopOverlay');\n  }\n\n  /**\n   * Updates the top overlay position.\n   *\n   * @returns {boolean}\n   */\n  resetFixedPosition() {\n    if (!this.needFullRender || !this.wot.wtTable.holder.parentNode) {\n      // removed from DOM\n      return false;\n    }\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    const {\n      rootWindow\n    } = this.domBindings;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    let overlayPosition = 0;\n    let skipInnerBorderAdjusting = false;\n    if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'vertical')) {\n      const {\n        wtTable\n      } = this.wot;\n      const hiderRect = wtTable.hider.getBoundingClientRect();\n      const bottom = Math.ceil(hiderRect.bottom);\n      const rootHeight = overlayRoot.offsetHeight;\n\n      // This checks if the overlay is going to an infinite loop caused by added (or removed)\n      // `innerBorderTop` class name. Toggling the class name shifts the viewport by 1px and\n      // triggers the `scroll` event. It causes the table to render. The new render cycle takes into,\n      // account the shift and toggles the class name again. This causes the next loops. This\n      // happens only on Chrome (#7256).\n      //\n      // When we detect that the table bottom position is the same as the overlay bottom,\n      // do not toggle the class name.\n      //\n      // This workaround will be able to be cleared after merging the SVG borders, which introduces\n      // frozen lines (no more `innerBorderTop` workaround).\n      skipInnerBorderAdjusting = bottom === rootHeight;\n      overlayPosition = this.getOverlayOffset();\n      setOverlayPosition(overlayRoot, '0px', `${overlayPosition}px`);\n    } else {\n      overlayPosition = this.getScrollPosition();\n      resetCssTransform(overlayRoot);\n    }\n    const positionChanged = this.adjustHeaderBordersPosition(overlayPosition, skipInnerBorderAdjusting);\n    this.adjustElementsSize();\n    return positionChanged;\n  }\n\n  /**\n   * Sets the main overlay's vertical scroll position.\n   *\n   * @param {number} pos The scroll position.\n   * @returns {boolean}\n   */\n  setScrollPosition(pos) {\n    const rootWindow = this.domBindings.rootWindow;\n    let result = false;\n    if (this.mainTableScrollableElement === rootWindow && rootWindow.scrollY !== pos) {\n      rootWindow.scrollTo(getWindowScrollLeft(rootWindow), pos);\n      result = true;\n    } else if (this.mainTableScrollableElement.scrollTop !== pos) {\n      this.mainTableScrollableElement.scrollTop = pos;\n      result = true;\n    }\n    return result;\n  }\n\n  /**\n   * Triggers onScroll hook callback.\n   */\n  onScroll() {\n    this.wtSettings.getSetting('onScrollHorizontally');\n  }\n\n  /**\n   * Calculates total sum cells height.\n   *\n   * @param {number} from Row index which calculates started from.\n   * @param {number} to Row index where calculation is finished.\n   * @returns {number} Height sum.\n   */\n  sumCellSizes(from, to) {\n    const defaultRowHeight = this.wtSettings.getSetting('defaultRowHeight');\n    let row = from;\n    let sum = 0;\n    while (row < to) {\n      const height = this.wot.wtTable.getRowHeight(row);\n      sum += height === undefined ? defaultRowHeight : height;\n      row += 1;\n    }\n    return sum;\n  }\n\n  /**\n   * Adjust overlay root element, childs and master table element sizes (width, height).\n   *\n   * @param {boolean} [force=false] When `true`, it adjusts the DOM nodes sizes for that overlay.\n   */\n  adjustElementsSize() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.updateTrimmingContainer();\n    if (this.needFullRender || force) {\n      this.adjustRootElementSize();\n      this.adjustRootChildrenSize();\n    }\n  }\n\n  /**\n   * Adjust overlay root element size (width and height).\n   */\n  adjustRootElementSize() {\n    const {\n      wtTable\n    } = this.wot;\n    const {\n      rootDocument,\n      rootWindow\n    } = this.domBindings;\n    const scrollbarWidth = getScrollbarWidth(rootDocument);\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    const overlayRootStyle = overlayRoot.style;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    if (this.trimmingContainer !== rootWindow || preventOverflow === 'horizontal') {\n      let width = this.wot.wtViewport.getWorkspaceWidth();\n      if (this.wot.wtOverlays.hasScrollbarRight) {\n        width -= scrollbarWidth;\n      }\n      width = Math.min(width, wtTable.wtRootElement.scrollWidth);\n      overlayRootStyle.width = `${width}px`;\n    } else {\n      overlayRootStyle.width = '';\n    }\n    this.clone.wtTable.holder.style.width = overlayRootStyle.width;\n    let tableHeight = outerHeight(this.clone.wtTable.TABLE);\n    if (!this.wot.wtTable.hasDefinedSize()) {\n      tableHeight = 0;\n    }\n    overlayRootStyle.height = `${tableHeight}px`;\n  }\n\n  /**\n   * Adjust overlay root childs size.\n   */\n  adjustRootChildrenSize() {\n    const {\n      holder\n    } = this.clone.wtTable;\n    const selectionCornerOffset = this.wot.selectionManager.getFocusSelection() ? parseInt(CORNER_DEFAULT_STYLE.height, 10) / 2 : 0;\n    this.clone.wtTable.hider.style.width = this.hider.style.width;\n    holder.style.width = holder.parentNode.style.width;\n    // Add selection corner protruding part to the holder total height to make sure that\n    // borders' corner won't be cut after vertical scroll (#6937).\n    holder.style.height = `${parseInt(holder.parentNode.style.height, 10) + selectionCornerOffset}px`;\n  }\n\n  /**\n   * Adjust the overlay dimensions and position.\n   */\n  applyToDOM() {\n    const total = this.wtSettings.getSetting('totalRows');\n    if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition === 'number') {\n      this.spreader.style.top = `${this.wot.wtViewport.rowsRenderCalculator.startPosition}px`;\n    } else if (total === 0) {\n      // can happen if there are 0 rows\n      this.spreader.style.top = '0';\n    } else {\n      throw new Error('Incorrect value of the rowsRenderCalculator');\n    }\n    this.spreader.style.bottom = '';\n    if (this.needFullRender) {\n      this.syncOverlayOffset();\n    }\n  }\n\n  /**\n   * Synchronize calculated left position to an element.\n   */\n  syncOverlayOffset() {\n    const styleProperty = this.isRtl() ? 'right' : 'left';\n    const {\n      spreader\n    } = this.clone.wtTable;\n    if (typeof this.wot.wtViewport.columnsRenderCalculator.startPosition === 'number') {\n      spreader.style[styleProperty] = `${this.wot.wtViewport.columnsRenderCalculator.startPosition}px`;\n    } else {\n      spreader.style[styleProperty] = '';\n    }\n  }\n\n  /**\n   * Scrolls vertically to a row.\n   *\n   * @param {number} sourceRow Row index which you want to scroll to.\n   * @param {boolean} [bottomEdge] If `true`, scrolls according to the bottom edge (top edge is by default).\n   * @returns {boolean}\n   */\n  scrollTo(sourceRow, bottomEdge) {\n    const {\n      wot,\n      wtSettings\n    } = this;\n    const sourceInstance = wot.cloneSource ? wot.cloneSource : wot;\n    const mainHolder = sourceInstance.wtTable.holder;\n    let newY = this.getTableParentOffset();\n    let scrollbarCompensation = 0;\n    if (bottomEdge) {\n      const rowHeight = this.wot.wtTable.getRowHeight(sourceRow);\n      const viewportHeight = this.wot.wtViewport.getViewportHeight();\n      if (rowHeight > viewportHeight) {\n        bottomEdge = false;\n      }\n    }\n    if (bottomEdge && mainHolder.offsetHeight !== mainHolder.clientHeight) {\n      scrollbarCompensation = getScrollbarWidth(this.domBindings.rootDocument);\n    }\n    if (bottomEdge) {\n      const fixedRowsBottom = wtSettings.getSetting('fixedRowsBottom');\n      const totalRows = wtSettings.getSetting('totalRows');\n      newY += this.sumCellSizes(0, sourceRow + 1);\n      newY -= wot.wtViewport.getViewportHeight() - this.sumCellSizes(totalRows - fixedRowsBottom, totalRows);\n      // Fix 1 pixel offset when cell is selected\n      newY += 1;\n    } else {\n      newY += this.sumCellSizes(wtSettings.getSetting('fixedRowsTop'), sourceRow);\n    }\n    newY += scrollbarCompensation;\n    return this.setScrollPosition(newY);\n  }\n\n  /**\n   * Gets table parent top position.\n   *\n   * @returns {number}\n   */\n  getTableParentOffset() {\n    if (this.mainTableScrollableElement === this.domBindings.rootWindow) {\n      return this.wot.wtTable.holderOffset.top;\n    }\n    return 0;\n  }\n\n  /**\n   * Gets the main overlay's vertical scroll position.\n   *\n   * @returns {number} Main table's vertical scroll position.\n   */\n  getScrollPosition() {\n    return getScrollTop(this.mainTableScrollableElement, this.domBindings.rootWindow);\n  }\n\n  /**\n   * Gets the main overlay's vertical overlay offset.\n   *\n   * @returns {number} Main table's vertical overlay offset.\n   */\n  getOverlayOffset() {\n    const {\n      rootWindow\n    } = this.domBindings;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    let overlayOffset = 0;\n    if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'vertical')) {\n      const rootHeight = this.wot.wtTable.getTotalHeight();\n      const overlayRootHeight = this.clone.wtTable.getTotalHeight();\n      const maxOffset = rootHeight - overlayRootHeight;\n      overlayOffset = Math.max(this.getScrollPosition() - this.getTableParentOffset(), 0);\n      if (overlayOffset > maxOffset) {\n        overlayOffset = 0;\n      }\n    }\n    return overlayOffset;\n  }\n\n  /**\n   * Adds css classes to hide the header border's header (cell-selection border hiding issue).\n   *\n   * @param {number} position Header Y position if trimming container is window or scroll top if not.\n   * @param {boolean} [skipInnerBorderAdjusting=false] If `true` the inner border adjusting will be skipped.\n   * @returns {boolean}\n   */\n  adjustHeaderBordersPosition(position) {\n    let skipInnerBorderAdjusting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const masterParent = this.wot.wtTable.holder.parentNode;\n    const totalColumns = this.wtSettings.getSetting('totalColumns');\n    if (totalColumns) {\n      removeClass(masterParent, 'emptyColumns');\n    } else {\n      addClass(masterParent, 'emptyColumns');\n    }\n    let positionChanged = false;\n    if (!skipInnerBorderAdjusting) {\n      const fixedRowsTop = this.wtSettings.getSetting('fixedRowsTop');\n      const areFixedRowsTopChanged = this.cachedFixedRowsTop !== fixedRowsTop;\n      const columnHeaders = this.wtSettings.getSetting('columnHeaders');\n      if ((areFixedRowsTopChanged || fixedRowsTop === 0) && columnHeaders.length > 0) {\n        const previousState = hasClass(masterParent, 'innerBorderTop');\n        this.cachedFixedRowsTop = this.wtSettings.getSetting('fixedRowsTop');\n        if (position || this.wtSettings.getSetting('totalRows') === 0) {\n          addClass(masterParent, 'innerBorderTop');\n          positionChanged = !previousState;\n        } else {\n          removeClass(masterParent, 'innerBorderTop');\n          positionChanged = previousState;\n        }\n      }\n    }\n    return positionChanged;\n  }\n}", "import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { getScrollableElement, getScrollbarWidth } from \"../../../helpers/dom/element.mjs\";\nimport { requestAnimationFrame } from \"../../../helpers/feature.mjs\";\nimport { arrayEach } from \"../../../helpers/array.mjs\";\nimport { isKey } from \"../../../helpers/unicode.mjs\";\nimport { isChrome } from \"../../../helpers/browser.mjs\";\nimport { InlineStartOverlay, TopOverlay, TopInlineStartCornerOverlay, BottomOverlay, BottomInlineStartCornerOverlay } from \"./overlay/index.mjs\";\n/**\n * @class Overlays\n */\nclass Overlays {\n  /**\n   * @param {Walkontable} wotInstance The Walkontable instance. @todo refactoring remove.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {DomBindings} domBindings Bindings into DOM.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {EventManager} eventManager The walkontable event manager.\n   * @param {MasterTable} wtTable The master table.\n   */\n  constructor(wotInstance, facadeGetter, domBindings, wtSettings, eventManager, wtTable) {\n    /**\n     * Walkontable instance's reference.\n     *\n     * @protected\n     * @type {Walkontable}\n     */\n    _defineProperty(this, \"wot\", null);\n    /**\n     * Refer to the TopOverlay instance.\n     *\n     * @protected\n     * @type {TopOverlay}\n     */\n    _defineProperty(this, \"topOverlay\", null);\n    /**\n     * Refer to the BottomOverlay instance.\n     *\n     * @protected\n     * @type {BottomOverlay}\n     */\n    _defineProperty(this, \"bottomOverlay\", null);\n    /**\n     * Refer to the InlineStartOverlay or instance.\n     *\n     * @protected\n     * @type {InlineStartOverlay}\n     */\n    _defineProperty(this, \"inlineStartOverlay\", null);\n    /**\n     * Refer to the TopInlineStartCornerOverlay instance.\n     *\n     * @protected\n     * @type {TopInlineStartCornerOverlay}\n     */\n    _defineProperty(this, \"topInlineStartCornerOverlay\", null);\n    /**\n     * Refer to the BottomInlineStartCornerOverlay instance.\n     *\n     * @protected\n     * @type {BottomInlineStartCornerOverlay}\n     */\n    _defineProperty(this, \"bottomInlineStartCornerOverlay\", null);\n    /**\n     * Browser line height for purposes of translating mouse wheel.\n     *\n     * @private\n     * @type {number}\n     */\n    _defineProperty(this, \"browserLineHeight\", undefined);\n    /**\n     * The walkontable settings.\n     *\n     * @protected\n     * @type {Settings}\n     */\n    _defineProperty(this, \"wtSettings\", null);\n    /**\n     * The instance of the ResizeObserver that observes the size of the Walkontable wrapper element.\n     * In case of the size change detection the `onContainerElementResize` is fired.\n     *\n     * @private\n     * @type {ResizeObserver}\n     */\n    _defineProperty(this, \"resizeObserver\", new ResizeObserver(entries => {\n      requestAnimationFrame(() => {\n        if (!Array.isArray(entries) || !entries.length) {\n          return;\n        }\n        this.wtSettings.getSetting('onContainerElementResize');\n      });\n    }));\n    this.wot = wotInstance;\n    this.wtSettings = wtSettings;\n    this.domBindings = domBindings;\n    this.facadeGetter = facadeGetter;\n    this.wtTable = wtTable;\n    const {\n      rootDocument,\n      rootWindow\n    } = this.domBindings;\n\n    // legacy support\n    this.instance = this.wot; // todo refactoring: move to facade\n    this.eventManager = eventManager;\n\n    // TODO refactoring: probably invalid place to this logic\n    this.scrollbarSize = getScrollbarWidth(rootDocument);\n    const isOverflowHidden = rootWindow.getComputedStyle(wtTable.wtRootElement.parentNode).getPropertyValue('overflow') === 'hidden';\n    this.scrollableElement = isOverflowHidden ? wtTable.holder : getScrollableElement(wtTable.TABLE);\n    this.initOverlays();\n    this.hasScrollbarBottom = false;\n    this.hasScrollbarRight = false;\n    this.destroyed = false;\n    this.keyPressed = false;\n    this.spreaderLastSize = {\n      width: null,\n      height: null\n    };\n    this.verticalScrolling = false;\n    this.horizontalScrolling = false;\n    this.initBrowserLineHeight();\n    this.registerListeners();\n    this.lastScrollX = rootWindow.scrollX;\n    this.lastScrollY = rootWindow.scrollY;\n  }\n\n  /**\n   * Get the list of references to all overlays.\n   *\n   * @param {boolean} [includeMaster = false] If set to `true`, the list will contain the master table as the last\n   * element.\n   * @returns {(TopOverlay|TopInlineStartCornerOverlay|InlineStartOverlay|BottomOverlay|BottomInlineStartCornerOverlay)[]}\n   */\n  getOverlays() {\n    let includeMaster = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const overlays = [this.topOverlay, this.topInlineStartCornerOverlay, this.inlineStartOverlay, this.bottomOverlay, this.bottomInlineStartCornerOverlay];\n    if (includeMaster) {\n      overlays.push(this.wtTable);\n    }\n    return overlays;\n  }\n\n  /**\n   * Retrieve browser line height and apply its value to `browserLineHeight`.\n   *\n   * @private\n   */\n  initBrowserLineHeight() {\n    const {\n      rootWindow,\n      rootDocument\n    } = this.domBindings;\n    const computedStyle = rootWindow.getComputedStyle(rootDocument.body);\n    /**\n     * Sometimes `line-height` might be set to 'normal'. In that case, a default `font-size` should be multiplied by roughly 1.2.\n     * Https://developer.mozilla.org/pl/docs/Web/CSS/line-height#Values.\n     */\n    const lineHeight = parseInt(computedStyle.lineHeight, 10);\n    const lineHeightFalback = parseInt(computedStyle.fontSize, 10) * 1.2;\n    this.browserLineHeight = lineHeight || lineHeightFalback;\n  }\n\n  /**\n   * Prepare overlays based on user settings.\n   *\n   * @private\n   */\n  initOverlays() {\n    const args = [this.wot, this.facadeGetter, this.wtSettings, this.domBindings];\n\n    // todo refactoring: IOC, collection or factories.\n    // TODO refactoring, conceive about using generic collection of overlays.\n    this.topOverlay = new TopOverlay(...args);\n    this.bottomOverlay = new BottomOverlay(...args);\n    this.inlineStartOverlay = new InlineStartOverlay(...args);\n\n    // TODO discuss, the controversial here would be removing the lazy creation mechanism for corners.\n    // TODO cond. Has no any visual impact. They're initially hidden in same way like left, top, and bottom overlays.\n    this.topInlineStartCornerOverlay = new TopInlineStartCornerOverlay(...args, this.topOverlay, this.inlineStartOverlay);\n    this.bottomInlineStartCornerOverlay = new BottomInlineStartCornerOverlay(...args, this.bottomOverlay, this.inlineStartOverlay);\n  }\n\n  /**\n   * Update state of rendering, check if changed.\n   *\n   * @package\n   * @returns {boolean} Returns `true` if changes applied to overlay needs scroll synchronization.\n   */\n  updateStateOfRendering() {\n    let syncScroll = this.topOverlay.updateStateOfRendering();\n    syncScroll = this.bottomOverlay.updateStateOfRendering() || syncScroll;\n    syncScroll = this.inlineStartOverlay.updateStateOfRendering() || syncScroll;\n\n    // todo refactoring: move conditions into updateStateOfRendering(),\n    if (this.inlineStartOverlay.needFullRender) {\n      if (this.topOverlay.needFullRender) {\n        syncScroll = this.topInlineStartCornerOverlay.updateStateOfRendering() || syncScroll;\n      }\n      if (this.bottomOverlay.needFullRender) {\n        syncScroll = this.bottomInlineStartCornerOverlay.updateStateOfRendering() || syncScroll;\n      }\n    }\n    return syncScroll;\n  }\n\n  /**\n   * Refresh and redraw table.\n   */\n  refreshAll() {\n    if (!this.wot.drawn) {\n      return;\n    }\n    if (!this.wtTable.holder.parentNode) {\n      // Walkontable was detached from DOM, but this handler was not removed\n      this.destroy();\n      return;\n    }\n    this.wot.draw(true);\n    if (this.verticalScrolling) {\n      this.inlineStartOverlay.onScroll(); // todo the inlineStartOverlay.onScroll() fires hook. Why is it needed there, not in any another place?\n    }\n\n    if (this.horizontalScrolling) {\n      this.topOverlay.onScroll();\n    }\n    this.verticalScrolling = false;\n    this.horizontalScrolling = false;\n  }\n\n  /**\n   * Register all necessary event listeners.\n   */\n  registerListeners() {\n    const {\n      rootDocument,\n      rootWindow\n    } = this.domBindings;\n    const {\n      mainTableScrollableElement: topOverlayScrollableElement\n    } = this.topOverlay;\n    const {\n      mainTableScrollableElement: inlineStartOverlayScrollableElement\n    } = this.inlineStartOverlay;\n    this.eventManager.addEventListener(rootDocument.documentElement, 'keydown', event => this.onKeyDown(event));\n    this.eventManager.addEventListener(rootDocument.documentElement, 'keyup', () => this.onKeyUp());\n    this.eventManager.addEventListener(rootDocument, 'visibilitychange', () => this.onKeyUp());\n    this.eventManager.addEventListener(topOverlayScrollableElement, 'scroll', event => this.onTableScroll(event), {\n      passive: true\n    });\n    if (topOverlayScrollableElement !== inlineStartOverlayScrollableElement) {\n      this.eventManager.addEventListener(inlineStartOverlayScrollableElement, 'scroll', event => this.onTableScroll(event), {\n        passive: true\n      });\n    }\n    const isHighPixelRatio = rootWindow.devicePixelRatio && rootWindow.devicePixelRatio > 1;\n    const isScrollOnWindow = this.scrollableElement === rootWindow;\n    const preventWheel = this.wtSettings.getSetting('preventWheel');\n    const wheelEventOptions = {\n      passive: isScrollOnWindow\n    };\n    if (preventWheel || isHighPixelRatio || !isChrome()) {\n      this.eventManager.addEventListener(this.wtTable.wtRootElement, 'wheel', event => this.onCloneWheel(event, preventWheel), wheelEventOptions);\n    }\n    const overlays = [this.topOverlay, this.bottomOverlay, this.inlineStartOverlay, this.topInlineStartCornerOverlay, this.bottomInlineStartCornerOverlay];\n    overlays.forEach(overlay => {\n      if (overlay && overlay.needFullRender) {\n        const {\n          holder\n        } = overlay.clone.wtTable; // todo rethink, maybe: overlay.getHolder()\n\n        this.eventManager.addEventListener(holder, 'wheel', event => this.onCloneWheel(event, preventWheel), wheelEventOptions);\n      }\n    });\n    let resizeTimeout;\n    this.eventManager.addEventListener(rootWindow, 'resize', () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = setTimeout(() => {\n        this.wtSettings.getSetting('onWindowResize');\n      }, 200);\n    });\n    if (!isScrollOnWindow) {\n      this.resizeObserver.observe(this.wtTable.wtRootElement.parentElement);\n    }\n  }\n\n  /**\n   * Deregister all previously registered listeners.\n   */\n  deregisterListeners() {\n    this.eventManager.clearEvents(true);\n  }\n\n  /**\n   * Scroll listener.\n   *\n   * @param {Event} event The mouse event object.\n   */\n  onTableScroll(event) {\n    // There was if statement which controlled flow of this function. It avoided the execution of the next lines\n    // on mobile devices. It was changed. Broader description of this case is included within issue #4856.\n    const rootWindow = this.domBindings.rootWindow;\n    const masterHorizontal = this.inlineStartOverlay.mainTableScrollableElement;\n    const masterVertical = this.topOverlay.mainTableScrollableElement;\n    const target = event.target;\n\n    // For key press, sync only master -> overlay position because while pressing Walkontable.render is triggered\n    // by hot.refreshBorder\n    if (this.keyPressed) {\n      if (masterVertical !== rootWindow && target !== rootWindow && !event.target.contains(masterVertical) || masterHorizontal !== rootWindow && target !== rootWindow && !event.target.contains(masterHorizontal)) {\n        return;\n      }\n    }\n    this.syncScrollPositions(event);\n  }\n\n  /**\n   * Wheel listener for cloned overlays.\n   *\n   * @param {Event} event The mouse event object.\n   * @param {boolean} preventDefault If `true`, the `preventDefault` will be called on event object.\n   */\n  onCloneWheel(event, preventDefault) {\n    const {\n      rootWindow\n    } = this.domBindings;\n\n    // There was if statement which controlled flow of this function. It avoided the execution of the next lines\n    // on mobile devices. It was changed. Broader description of this case is included within issue #4856.\n\n    const masterHorizontal = this.inlineStartOverlay.mainTableScrollableElement;\n    const masterVertical = this.topOverlay.mainTableScrollableElement;\n    const target = event.target;\n\n    // For key press, sync only master -> overlay position because while pressing Walkontable.render is triggered\n    // by hot.refreshBorder\n    const shouldNotWheelVertically = masterVertical !== rootWindow && target !== rootWindow && !target.contains(masterVertical);\n    const shouldNotWheelHorizontally = masterHorizontal !== rootWindow && target !== rootWindow && !target.contains(masterHorizontal);\n    if (this.keyPressed && (shouldNotWheelVertically || shouldNotWheelHorizontally)) {\n      return;\n    }\n    const isScrollPossible = this.translateMouseWheelToScroll(event);\n    if (preventDefault || this.scrollableElement !== rootWindow && isScrollPossible) {\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Key down listener.\n   *\n   * @param {Event} event The keyboard event object.\n   */\n  onKeyDown(event) {\n    this.keyPressed = isKey(event.keyCode, 'ARROW_UP|ARROW_RIGHT|ARROW_DOWN|ARROW_LEFT');\n  }\n\n  /**\n   * Key up listener.\n   */\n  onKeyUp() {\n    this.keyPressed = false;\n  }\n\n  /**\n   * Translate wheel event into scroll event and sync scroll overlays position.\n   *\n   * @private\n   * @param {Event} event The mouse event object.\n   * @returns {boolean}\n   */\n  translateMouseWheelToScroll(event) {\n    let deltaY = isNaN(event.deltaY) ? -1 * event.wheelDeltaY : event.deltaY;\n    let deltaX = isNaN(event.deltaX) ? -1 * event.wheelDeltaX : event.deltaX;\n    if (event.deltaMode === 1) {\n      deltaX += deltaX * this.browserLineHeight;\n      deltaY += deltaY * this.browserLineHeight;\n    }\n    const isScrollVerticallyPossible = this.scrollVertically(deltaY);\n    const isScrollHorizontallyPossible = this.scrollHorizontally(deltaX);\n    return isScrollVerticallyPossible || isScrollHorizontallyPossible;\n  }\n\n  /**\n   * Scrolls main scrollable element horizontally.\n   *\n   * @param {number} delta Relative value to scroll.\n   * @returns {boolean}\n   */\n  scrollVertically(delta) {\n    const previousScroll = this.scrollableElement.scrollTop;\n    this.scrollableElement.scrollTop += delta;\n    return previousScroll !== this.scrollableElement.scrollTop;\n  }\n\n  /**\n   * Scrolls main scrollable element horizontally.\n   *\n   * @param {number} delta Relative value to scroll.\n   * @returns {boolean}\n   */\n  scrollHorizontally(delta) {\n    const previousScroll = this.scrollableElement.scrollLeft;\n    this.scrollableElement.scrollLeft += delta;\n    return previousScroll !== this.scrollableElement.scrollLeft;\n  }\n\n  /**\n   * Synchronize scroll position between master table and overlay table.\n   *\n   * @private\n   */\n  syncScrollPositions() {\n    if (this.destroyed) {\n      return;\n    }\n    const {\n      rootWindow\n    } = this.domBindings;\n    const topHolder = this.topOverlay.clone.wtTable.holder; // todo rethink\n    const leftHolder = this.inlineStartOverlay.clone.wtTable.holder; // todo rethink\n\n    const [scrollLeft, scrollTop] = [this.scrollableElement.scrollLeft, this.scrollableElement.scrollTop];\n    this.horizontalScrolling = topHolder.scrollLeft !== scrollLeft || this.lastScrollX !== rootWindow.scrollX;\n    this.verticalScrolling = leftHolder.scrollTop !== scrollTop || this.lastScrollY !== rootWindow.scrollY;\n    this.lastScrollX = rootWindow.scrollX;\n    this.lastScrollY = rootWindow.scrollY;\n    if (this.horizontalScrolling) {\n      topHolder.scrollLeft = scrollLeft;\n      const bottomHolder = this.bottomOverlay.needFullRender ? this.bottomOverlay.clone.wtTable.holder : null; // todo rethink\n\n      if (bottomHolder) {\n        bottomHolder.scrollLeft = scrollLeft;\n      }\n    }\n    if (this.verticalScrolling) {\n      leftHolder.scrollTop = scrollTop;\n    }\n    this.refreshAll();\n  }\n\n  /**\n   * Synchronize overlay scrollbars with the master scrollbar.\n   */\n  syncScrollWithMaster() {\n    const master = this.topOverlay.mainTableScrollableElement;\n    const {\n      scrollLeft,\n      scrollTop\n    } = master;\n    if (this.topOverlay.needFullRender) {\n      this.topOverlay.clone.wtTable.holder.scrollLeft = scrollLeft; // todo rethink, *overlay.setScroll*()\n    }\n\n    if (this.bottomOverlay.needFullRender) {\n      this.bottomOverlay.clone.wtTable.holder.scrollLeft = scrollLeft; // todo rethink, *overlay.setScroll*()\n    }\n\n    if (this.inlineStartOverlay.needFullRender) {\n      this.inlineStartOverlay.clone.wtTable.holder.scrollTop = scrollTop; // todo rethink, *overlay.setScroll*()\n    }\n  }\n\n  /**\n   * Update the main scrollable elements for all the overlays.\n   */\n  updateMainScrollableElements() {\n    this.deregisterListeners();\n    this.inlineStartOverlay.updateMainScrollableElement();\n    this.topOverlay.updateMainScrollableElement();\n    if (this.bottomOverlay.needFullRender) {\n      this.bottomOverlay.updateMainScrollableElement();\n    }\n    const {\n      wtTable\n    } = this;\n    const {\n      rootWindow\n    } = this.domBindings;\n    if (rootWindow.getComputedStyle(wtTable.wtRootElement.parentNode).getPropertyValue('overflow') === 'hidden') {\n      this.scrollableElement = wtTable.holder;\n    } else {\n      this.scrollableElement = getScrollableElement(wtTable.TABLE);\n    }\n    this.registerListeners();\n  }\n\n  /**\n   *\n   */\n  destroy() {\n    this.resizeObserver.disconnect();\n    this.eventManager.destroy();\n    // todo, probably all below `destory` calls has no sense. To analyze\n    this.topOverlay.destroy();\n    if (this.bottomOverlay.clone) {\n      this.bottomOverlay.destroy();\n    }\n    this.inlineStartOverlay.destroy();\n    if (this.topInlineStartCornerOverlay) {\n      this.topInlineStartCornerOverlay.destroy();\n    }\n    if (this.bottomInlineStartCornerOverlay && this.bottomInlineStartCornerOverlay.clone) {\n      this.bottomInlineStartCornerOverlay.destroy();\n    }\n    this.destroyed = true;\n  }\n\n  /**\n   * @param {boolean} [fastDraw=false] When `true`, try to refresh only the positions of borders without rerendering\n   *                                   the data. It will only work if Table.draw() does not force\n   *                                   rendering anyway.\n   */\n  refresh() {\n    let fastDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const wasSpreaderSizeUpdated = this.updateLastSpreaderSize();\n    if (wasSpreaderSizeUpdated) {\n      this.adjustElementsSize();\n    }\n    if (this.bottomOverlay.clone) {\n      this.bottomOverlay.refresh(fastDraw);\n    }\n    this.inlineStartOverlay.refresh(fastDraw);\n    this.topOverlay.refresh(fastDraw);\n    if (this.topInlineStartCornerOverlay) {\n      this.topInlineStartCornerOverlay.refresh(fastDraw);\n    }\n    if (this.bottomInlineStartCornerOverlay && this.bottomInlineStartCornerOverlay.clone) {\n      this.bottomInlineStartCornerOverlay.refresh(fastDraw);\n    }\n  }\n\n  /**\n   * Update the last cached spreader size with the current size.\n   *\n   * @returns {boolean} `true` if the lastSpreaderSize cache was updated, `false` otherwise.\n   */\n  updateLastSpreaderSize() {\n    const spreader = this.wtTable.spreader;\n    const width = spreader.clientWidth;\n    const height = spreader.clientHeight;\n    const needsUpdating = width !== this.spreaderLastSize.width || height !== this.spreaderLastSize.height;\n    if (needsUpdating) {\n      this.spreaderLastSize.width = width;\n      this.spreaderLastSize.height = height;\n    }\n    return needsUpdating;\n  }\n\n  /**\n   * Adjust overlays elements size and master table size.\n   *\n   * @param {boolean} [force=false] When `true`, it adjust the DOM nodes sizes for all overlays.\n   */\n  adjustElementsSize() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const {\n      wtViewport\n    } = this.wot;\n    const {\n      wtTable\n    } = this;\n    const totalColumns = this.wtSettings.getSetting('totalColumns');\n    const totalRows = this.wtSettings.getSetting('totalRows');\n    const headerRowSize = wtViewport.getRowHeaderWidth();\n    const headerColumnSize = wtViewport.getColumnHeaderHeight();\n    const hiderStyle = wtTable.hider.style;\n    hiderStyle.width = `${headerRowSize + this.inlineStartOverlay.sumCellSizes(0, totalColumns)}px`;\n    hiderStyle.height = `${headerColumnSize + this.topOverlay.sumCellSizes(0, totalRows) + 1}px`;\n    if (this.scrollbarSize > 0) {\n      // todo refactoring, looking as a part of logic which should be moved outside the class\n      const {\n        scrollHeight: rootElemScrollHeight,\n        scrollWidth: rootElemScrollWidth\n      } = wtTable.wtRootElement;\n      const {\n        scrollHeight: holderScrollHeight,\n        scrollWidth: holderScrollWidth\n      } = wtTable.holder;\n      this.hasScrollbarRight = rootElemScrollHeight < holderScrollHeight;\n      this.hasScrollbarBottom = rootElemScrollWidth < holderScrollWidth;\n      if (this.hasScrollbarRight && wtTable.hider.scrollWidth + this.scrollbarSize > rootElemScrollWidth) {\n        this.hasScrollbarBottom = true;\n      } else if (this.hasScrollbarBottom && wtTable.hider.scrollHeight + this.scrollbarSize > rootElemScrollHeight) {\n        this.hasScrollbarRight = true;\n      }\n    }\n    this.topOverlay.adjustElementsSize(force);\n    this.inlineStartOverlay.adjustElementsSize(force);\n    this.bottomOverlay.adjustElementsSize(force);\n  }\n\n  /**\n   *\n   */\n  applyToDOM() {\n    if (!this.wtTable.isVisible()) {\n      return;\n    }\n    this.topOverlay.applyToDOM();\n    if (this.bottomOverlay.clone) {\n      this.bottomOverlay.applyToDOM();\n    }\n    this.inlineStartOverlay.applyToDOM();\n  }\n\n  /**\n   * Get the parent overlay of the provided element.\n   *\n   * @param {HTMLElement} element An element to process.\n   * @returns {object|null}\n   */\n  getParentOverlay(element) {\n    if (!element) {\n      return null;\n    }\n    const overlays = [this.topOverlay, this.inlineStartOverlay, this.bottomOverlay, this.topInlineStartCornerOverlay, this.bottomInlineStartCornerOverlay];\n    let result = null;\n    arrayEach(overlays, overlay => {\n      if (!overlay) {\n        return;\n      }\n      if (overlay.clone && overlay.clone.wtTable.TABLE.contains(element)) {\n        // todo demeter\n        result = overlay.clone;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Synchronize the class names between the main overlay table and the tables on the other overlays.\n   *\n   */\n  syncOverlayTableClassNames() {\n    const masterTable = this.wtTable.TABLE;\n    const overlays = [this.topOverlay, this.inlineStartOverlay, this.bottomOverlay, this.topInlineStartCornerOverlay, this.bottomInlineStartCornerOverlay];\n    arrayEach(overlays, elem => {\n      if (!elem) {\n        return;\n      }\n      elem.clone.wtTable.TABLE.className = masterTable.className; // todo demeter\n    });\n  }\n}\n\nexport default Overlays;", "import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { fastInnerText } from \"../../../helpers/dom/element.mjs\";\nimport { objectEach } from \"../../../helpers/object.mjs\";\n/**\n * @todo Describe options.\n * @typedef SettingsPure\n *\n * @property {Option} facade @todo desc.\n * @property {Option} ariaTags Option `ariaTags`.\n * @property {Option} cellRenderer Option `cellRenderer`.\n * @property {Option} columnHeaders Option `columnHeaders`.\n * @property {Option} columnWidth Option `columnWidth`.\n * @property {Option} currentRowClassName Option `currentRowClassName`.\n * @property {Option} data Option `data`.\n * @property {Option} defaultColumnWidth Option `defaultColumnWidth`.\n * @property {Option} defaultRowHeight Option `defaultRowHeight`.\n * @property {Option} externalRowCalculator Option `externalRowCalculator`.\n * @property {Option} fixedColumnsStart Option `fixedColumnsStart`.\n * @property {Option} fixedRowsBottom Option `fixedRowsBottom`.\n * @property {Option} fixedRowsTop Option `fixedRowsTop`.\n * @property {Option} freezeOverlays Option `freezeOverlays`.\n * @property {Option} groups Option `groups`.\n * @property {Option} hideBorderOnMouseDownOver Option `hideBorderOnMouseDownOver`.\n * @property {Option} isRtl Option `isRtl`.\n * @property {Option} isDataViewInstance Option `isDataViewInstance`.\n * @property {Option} minSpareRows Option `minSpareRows`.\n * @property {Option} onBeforeHighlightingColumnHeader Option `onBeforeHighlightingColumnHeader`.\n * @property {Option} onBeforeHighlightingRowHeader Option `onBeforeHighlightingRowHeader`.\n * @property {Option} onBeforeRemoveCellClassNames Option `onBeforeRemoveCellClassNames`.\n * @property {Option} onBeforeStretchingColumnWidth Option `onBeforeStretchingColumnWidth`.\n * @property {Option} preventOverflow Option `preventOverflow`.\n * @property {Option} preventWheel Option `preventWheel`.\n * @property {Option} renderAllRows Option `renderAllRows`.\n * @property {Option} rowHeaders Option `rowHeaders`.\n * @property {Option} rowHeight Option `,`.\n * @property {Option} shouldRenderBottomOverlay Option `shouldRenderBottomOverlay`.\n * @property {Option} shouldRenderInlineStartOverlay Option `shouldRenderInlineStartOverlay`.\n * @property {Option} shouldRenderTopOverlay Option `shouldRenderTopOverlay`.\n * @property {Option} stretchH Option `stretchH`.\n * @property {Option} table Option `table`.\n * @property {Option} totalColumns Option `totalColumns`.\n * @property {Option} totalRows Option `totalRows`.\n * @property {?Option} beforeDraw Option `beforeDraw`.\n * @property {?Option} columnHeaderHeight Option `columnHeaderHeight`.\n * @property {?Option} currentColumnClassName Option `currentColumnClassName`.\n * @property {?Option} headerClassName Option `headerClassName`.\n * @property {?Option} onAfterDrawSelection Option `onAfterDrawSelection`.\n * @property {?Option} onAfterMomentumScroll Option `onAfterMomentumScroll`.\n * @property {?Option} onBeforeDrawBorders Option `onBeforeDrawBorders`.\n * @property {?Option} onBeforeTouchScroll Option `onBeforeTouchScroll`.\n * @property {?Option} onCellContextMenu Option `onCellContextMenu`.\n * @property {?Option} onCellCornerDblClick Option `onCellCornerDblClick`.\n * @property {?Option} onCellCornerMouseDown Option `onCellCornerMouseDown`.\n * @property {?Option} onCellDblClick Option `onCellDblClick`.\n * @property {?Option} onCellMouseDown Option `onCellMouseDown`.\n * @property {?Option} onCellMouseOut Option `onCellMouseOut`.\n * @property {?Option} onCellMouseOver Option `onCellMouseOver`.\n * @property {?Option} onCellMouseUp Option `onCellMouseUp`.\n * @property {?Option} onDraw Option `onDraw`.\n * @property {?Option} onModifyGetCellCoords Option `onModifyGetCellCoords`.\n * @property {?Option} onModifyRowHeaderWidth Option `onModifyRowHeaderWidth`.\n * @property {?Option} onBeforeViewportScrollHorizontally Option `onBeforeViewportScrollHorizontally`.\n * @property {?Option} onBeforeViewportScrollVertically Option `onBeforeViewportScrollVertically`.\n * @property {?Option} onScrollHorizontally Option `onScrollHorizontally`.\n * @property {?Option} onScrollVertically Option `onScrollVertically`.\n * @property {?Option} onWindowResize Option `onWindowResize`.\n * @property {?Option} rowHeaderWidth Option `rowHeaderWidth`.\n * @property {?Option} selections Option `selections`.\n * @property {?Option} viewportColumnCalculatorOverride Option `viewportColumnCalculatorOverride`.\n * @property {?Option} viewportRowCalculatorOverride Option `viewportRowCalculatorOverride`.\n */\n/**\n * @template TValue.\n * @typedef { TValue | Array.<TValue> | (function(...*): TValue) } Option\n */\n/**\n * @class Settings\n */\nexport default class Settings {\n  /**\n   * @param {SettingsPure} settings The user defined settings.\n   */\n  constructor(settings) {\n    /**\n     * Reference to settings.\n     *\n     * @protected\n     * @type {SettingsPure}\n     */\n    _defineProperty(this, \"settings\", {});\n    /**\n     * The defaults values of settings.\n     * Void 0 means it is required, null means it can be empty.\n     *\n     * @public\n     * @type {Readonly<SettingsPure>}\n     */\n    _defineProperty(this, \"defaults\", Object.freeze(this.getDefaults()));\n    objectEach(this.defaults, (value, key) => {\n      if (settings[key] !== undefined) {\n        this.settings[key] = settings[key];\n      } else if (value === undefined) {\n        throw new Error(`A required setting \"${key}\" was not provided`);\n      } else {\n        this.settings[key] = value;\n      }\n    });\n  }\n\n  /**\n   * Generate defaults for a settings.\n   * Void 0 means it is required, null means it can be empty.\n   *\n   * @private\n   * @returns {SettingsPure}\n   */\n  getDefaults() {\n    return {\n      facade: undefined,\n      table: undefined,\n      // Determines whether the Walkontable instance is used as dataset viewer. When its instance is used as\n      // a context menu, autocomplete list, etc, the returned value is `false`.\n      isDataViewInstance: true,\n      // presentation mode\n      externalRowCalculator: false,\n      stretchH: 'none',\n      // values: all, last, none\n      currentRowClassName: null,\n      currentColumnClassName: null,\n      preventOverflow() {\n        return false;\n      },\n      preventWheel: false,\n      // data source\n      data: undefined,\n      freezeOverlays: false,\n      // Number of renderable columns for the left overlay.\n      fixedColumnsStart: 0,\n      // Number of renderable rows for the top overlay.\n      fixedRowsTop: 0,\n      // Number of renderable rows for the bottom overlay.\n      fixedRowsBottom: 0,\n      // Enable the inline start overlay when conditions are met (left for LTR and right for RTL document mode).\n      shouldRenderInlineStartOverlay: () => {\n        return this.getSetting('fixedColumnsStart') > 0 || this.getSetting('rowHeaders').length > 0;\n      },\n      // Enable the top overlay when conditions are met.\n      shouldRenderTopOverlay: () => {\n        return this.getSetting('fixedRowsTop') > 0 || this.getSetting('columnHeaders').length > 0;\n      },\n      // Enable the bottom overlay when conditions are met.\n      shouldRenderBottomOverlay: () => {\n        return this.getSetting('fixedRowsBottom') > 0;\n      },\n      minSpareRows: 0,\n      // this must be array of functions: [function (row, TH) {}]\n      rowHeaders() {\n        return [];\n      },\n      // this must be array of functions: [function (column, TH) {}]\n      columnHeaders() {\n        return [];\n      },\n      totalRows: undefined,\n      totalColumns: undefined,\n      cellRenderer: (row, column, TD) => {\n        const cellData = this.getSetting('data', row, column);\n        fastInnerText(TD, cellData === undefined || cellData === null ? '' : cellData);\n      },\n      // columnWidth: 50,\n      columnWidth() {\n        // return undefined means use default size for the rendered cell content\n      },\n      rowHeight() {\n        // return undefined means use default size for the rendered cell content\n      },\n      defaultRowHeight: 23,\n      defaultColumnWidth: 50,\n      selections: null,\n      hideBorderOnMouseDownOver: false,\n      viewportRowCalculatorOverride: null,\n      viewportColumnCalculatorOverride: null,\n      // callbacks\n      onCellMouseDown: null,\n      onCellContextMenu: null,\n      onCellMouseOver: null,\n      onCellMouseOut: null,\n      onCellMouseUp: null,\n      // onCellMouseOut: null,\n      onCellDblClick: null,\n      onCellCornerMouseDown: null,\n      onCellCornerDblClick: null,\n      beforeDraw: null,\n      onDraw: null,\n      onBeforeRemoveCellClassNames: null,\n      onAfterDrawSelection: null,\n      onBeforeDrawBorders: null,\n      // viewport scroll hooks\n      onBeforeViewportScrollHorizontally: column => column,\n      onBeforeViewportScrollVertically: row => row,\n      // native scroll hooks\n      onScrollHorizontally: null,\n      onScrollVertically: null,\n      //\n      onBeforeTouchScroll: null,\n      onAfterMomentumScroll: null,\n      onBeforeStretchingColumnWidth: width => width,\n      onModifyRowHeaderWidth: null,\n      onModifyGetCellCoords: null,\n      onBeforeHighlightingRowHeader: sourceRow => sourceRow,\n      onBeforeHighlightingColumnHeader: sourceCol => sourceCol,\n      onWindowResize: null,\n      onContainerElementResize: null,\n      renderAllRows: false,\n      groups: false,\n      rowHeaderWidth: null,\n      columnHeaderHeight: null,\n      headerClassName: null,\n      rtlMode: false,\n      ariaTags: true\n    };\n  }\n\n  /**\n   * Update settings.\n   *\n   * @param {object|string} settings The singular settings to update or if passed as object to merge with.\n   * @param {*} value The value to set if the first argument is passed as string.\n   * @returns {Settings}\n   */\n  update(settings, value) {\n    if (value === undefined) {\n      // settings is object\n      objectEach(settings, (settingValue, key) => {\n        this.settings[key] = settingValue;\n      });\n    } else {\n      // if value is defined then settings is the key\n      this.settings[settings] = value;\n    }\n    return this;\n  }\n\n  /**\n   * Get setting by name.\n   *\n   * @param {$Keys<SettingsPure>} key The settings key to retrieve.\n   * @param {*} [param1] Additional parameter passed to the options defined as function.\n   * @param {*} [param2] Additional parameter passed to the options defined as function.\n   * @param {*} [param3] Additional parameter passed to the options defined as function.\n   * @param {*} [param4] Additional parameter passed to the options defined as function.\n   * @returns {*}\n   */\n  getSetting(key, param1, param2, param3, param4) {\n    if (typeof this.settings[key] === 'function') {\n      return this.settings[key](param1, param2, param3, param4);\n    } else if (param1 !== undefined && Array.isArray(this.settings[key])) {\n      return this.settings[key][param1];\n    }\n    return this.settings[key];\n  }\n\n  /**\n   * Get a setting value without any evaluation.\n   *\n   * @param {string} key The settings key to retrieve.\n   * @returns {*}\n   */\n  getSettingPure(key) {\n    return this.settings[key];\n  }\n\n  /**\n   * Checks if setting exists.\n   *\n   * @param {boolean} key The settings key to check.\n   * @returns {boolean}\n   */\n  has(key) {\n    return !!this.settings[key];\n  }\n}", "import { getStyle, getComputedStyle, getTrimmingContainer, isVisible } from \"./../../../../helpers/dom/element.mjs\";\nimport Table from \"../table.mjs\";\nimport calculatedRows from \"./mixin/calculatedRows.mjs\";\nimport calculatedColumns from \"./mixin/calculatedColumns.mjs\";\nimport { mixin } from \"./../../../../helpers/object.mjs\";\n/**\n * Subclass of `Table` that provides the helper methods relevant to the master table (not overlays), implemented through mixins.\n *\n * @mixes calculatedRows\n * @mixes calculatedColumns\n */\nclass MasterTable extends Table {\n  /**\n   * @param {TableDao} dataAccessObject The data access object.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {DomBindings} domBindings Bindings into DOM.\n   * @param {Settings} wtSettings The Walkontable settings.\n   */\n  constructor(dataAccessObject, facadeGetter, domBindings, wtSettings) {\n    super(dataAccessObject, facadeGetter, domBindings, wtSettings, 'master');\n  }\n  alignOverlaysWithTrimmingContainer() {\n    const trimmingElement = getTrimmingContainer(this.wtRootElement);\n    const {\n      rootWindow\n    } = this.domBindings;\n    if (trimmingElement === rootWindow) {\n      const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n      if (!preventOverflow) {\n        this.holder.style.overflow = 'visible';\n        this.wtRootElement.style.overflow = 'visible';\n      }\n    } else {\n      const trimmingElementParent = trimmingElement.parentElement;\n      const trimmingHeight = getStyle(trimmingElement, 'height', rootWindow);\n      const trimmingOverflow = getStyle(trimmingElement, 'overflow', rootWindow);\n      const holderStyle = this.holder.style;\n      const {\n        scrollWidth,\n        scrollHeight\n      } = trimmingElement;\n      let width = trimmingElement.offsetWidth;\n      let height = trimmingElement.offsetHeight;\n      const overflow = ['auto', 'hidden', 'scroll'];\n      if (trimmingElementParent && overflow.includes(trimmingOverflow)) {\n        const cloneNode = trimmingElement.cloneNode(false);\n\n        // Before calculating the height of the trimming element, set overflow: auto to hide scrollbars.\n        // An issue occurred on Firefox, where an empty element with overflow: scroll returns an element height higher than 0px\n        // despite an empty content within.\n        cloneNode.style.overflow = 'auto';\n        // Issue #9545 shows problem with calculating height for HOT on Firefox while placing instance in some\n        // flex containers and setting overflow for some `div` section.\n        cloneNode.style.position = 'absolute';\n        if (trimmingElement.nextElementSibling) {\n          trimmingElementParent.insertBefore(cloneNode, trimmingElement.nextElementSibling);\n        } else {\n          trimmingElementParent.appendChild(cloneNode);\n        }\n        const cloneHeight = parseInt(getComputedStyle(cloneNode, rootWindow).height, 10);\n        trimmingElementParent.removeChild(cloneNode);\n        if (cloneHeight === 0) {\n          height = 0;\n        }\n      }\n      height = Math.min(height, scrollHeight);\n      holderStyle.height = trimmingHeight === 'auto' ? 'auto' : `${height}px`;\n      width = Math.min(width, scrollWidth);\n      holderStyle.width = `${width}px`;\n      holderStyle.overflow = '';\n      this.hasTableHeight = holderStyle.height === 'auto' ? true : height > 0;\n      this.hasTableWidth = width > 0;\n    }\n    this.isTableVisible = isVisible(this.TABLE);\n  }\n  markOversizedColumnHeaders() {\n    const {\n      wtSettings\n    } = this;\n    const {\n      wtViewport\n    } = this.dataAccessObject;\n    const overlayName = 'master';\n    const columnHeaders = wtSettings.getSetting('columnHeaders');\n    const columnHeadersCount = columnHeaders.length;\n    if (columnHeadersCount && !wtViewport.hasOversizedColumnHeadersMarked[overlayName]) {\n      const rowHeaders = wtSettings.getSetting('rowHeaders');\n      const rowHeaderCount = rowHeaders.length;\n      const columnCount = this.getRenderedColumnsCount();\n      for (let i = 0; i < columnHeadersCount; i++) {\n        for (let renderedColumnIndex = -1 * rowHeaderCount; renderedColumnIndex < columnCount; renderedColumnIndex++) {\n          // eslint-disable-line max-len\n          this.markIfOversizedColumnHeader(renderedColumnIndex);\n        }\n      }\n      wtViewport.hasOversizedColumnHeadersMarked[overlayName] = true;\n    }\n  }\n}\nmixin(MasterTable, calculatedRows);\nmixin(MasterTable, calculatedColumns);\nexport default MasterTable;", "import { getScrollbarWidth, getStyle, offset, outerHeight, outerWidth } from \"../../../helpers/dom/element.mjs\";\nimport { objectEach } from \"../../../helpers/object.mjs\";\nimport { RENDER_TYPE, FULLY_VISIBLE_TYPE, ViewportColumnsCalculator, ViewportRowsCalculator } from \"./calculator/index.mjs\";\n/**\n * @class Viewport\n */\nclass Viewport {\n  /**\n   * @param {ViewportDao} dataAccessObject The Walkontable instance.\n   * @param {DomBindings} domBindings Bindings into DOM.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {EventManager} eventManager The instance event manager.\n   * @param {Table} wtTable The table.\n   */\n  constructor(dataAccessObject, domBindings, wtSettings, eventManager, wtTable) {\n    this.dataAccessObject = dataAccessObject;\n    // legacy support\n    this.wot = dataAccessObject.wot;\n    this.instance = this.wot;\n    this.domBindings = domBindings;\n    this.wtSettings = wtSettings;\n    this.wtTable = wtTable;\n    this.oversizedRows = [];\n    this.oversizedColumnHeaders = [];\n    this.hasOversizedColumnHeadersMarked = {};\n    this.clientHeight = 0;\n    this.containerWidth = NaN;\n    this.rowHeaderWidth = NaN;\n    this.rowsVisibleCalculator = null;\n    this.columnsVisibleCalculator = null;\n    this.eventManager = eventManager;\n    this.eventManager.addEventListener(this.domBindings.rootWindow, 'resize', () => {\n      this.clientHeight = this.getWorkspaceHeight();\n    });\n  }\n\n  /**\n   * @returns {number}\n   */\n  getWorkspaceHeight() {\n    const currentDocument = this.domBindings.rootDocument;\n    const trimmingContainer = this.dataAccessObject.topOverlayTrimmingContainer;\n    let height = 0;\n    if (trimmingContainer === this.domBindings.rootWindow) {\n      height = currentDocument.documentElement.clientHeight;\n    } else {\n      const elemHeight = outerHeight(trimmingContainer);\n\n      // returns height without DIV scrollbar\n      height = elemHeight > 0 && trimmingContainer.clientHeight > 0 ? trimmingContainer.clientHeight : Infinity;\n    }\n    return height;\n  }\n  getWorkspaceWidth() {\n    const {\n      wtSettings\n    } = this;\n    const {\n      rootDocument,\n      rootWindow\n    } = this.domBindings;\n    const trimmingContainer = this.dataAccessObject.inlineStartOverlayTrimmingContainer;\n    const docOffsetWidth = rootDocument.documentElement.offsetWidth;\n    const totalColumns = wtSettings.getSetting('totalColumns');\n    const preventOverflow = wtSettings.getSetting('preventOverflow');\n    const isRtl = wtSettings.getSetting('rtlMode');\n    const tableRect = this.wtTable.TABLE.getBoundingClientRect();\n    const inlineStart = isRtl ? tableRect.right - docOffsetWidth : tableRect.left;\n    const tableOffset = docOffsetWidth - inlineStart;\n    let width;\n    let overflow;\n    if (preventOverflow) {\n      return outerWidth(this.wtTable.wtRootElement);\n    }\n    if (wtSettings.getSetting('freezeOverlays')) {\n      width = Math.min(tableOffset, docOffsetWidth);\n    } else {\n      width = Math.min(this.getContainerFillWidth(), tableOffset, docOffsetWidth);\n    }\n    if (trimmingContainer === rootWindow && totalColumns > 0 && this.sumColumnWidths(0, totalColumns - 1) > width) {\n      // in case sum of column widths is higher than available stylesheet width, let's assume using the whole window\n      // otherwise continue below, which will allow stretching\n      // this is used in `scroll_window.html`\n      // TODO test me\n      return rootDocument.documentElement.clientWidth;\n    }\n    if (trimmingContainer !== rootWindow) {\n      overflow = getStyle(this.dataAccessObject.inlineStartOverlayTrimmingContainer, 'overflow', rootWindow);\n      if (overflow === 'scroll' || overflow === 'hidden' || overflow === 'auto') {\n        // this is used in `scroll.html`\n        // TODO test me\n        return Math.max(width, trimmingContainer.clientWidth);\n      }\n    }\n    const stretchSetting = wtSettings.getSetting('stretchH');\n    if (stretchSetting === 'none' || !stretchSetting) {\n      // if no stretching is used, return the maximum used workspace width\n      return Math.max(width, outerWidth(this.wtTable.TABLE));\n    }\n\n    // if stretching is used, return the actual container width, so the columns can fit inside it\n    return width;\n  }\n\n  /**\n   * Checks if viewport has vertical scroll.\n   *\n   * @returns {boolean}\n   */\n  hasVerticalScroll() {\n    return this.wtTable.hider.offsetHeight > this.getWorkspaceHeight();\n  }\n\n  /**\n   * Checks if viewport has horizontal scroll.\n   *\n   * @returns {boolean}\n   */\n  hasHorizontalScroll() {\n    return this.wtTable.hider.offsetWidth > this.getWorkspaceWidth();\n  }\n\n  /**\n   * @param {number} from The visual column index from the width sum is start calculated.\n   * @param {number} length The length of the column to traverse.\n   * @returns {number}\n   */\n  sumColumnWidths(from, length) {\n    let sum = 0;\n    let column = from;\n    while (column < length) {\n      sum += this.wtTable.getColumnWidth(column);\n      column += 1;\n    }\n    return sum;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getContainerFillWidth() {\n    if (this.containerWidth) {\n      return this.containerWidth;\n    }\n    const mainContainer = this.wtTable.holder;\n    const dummyElement = this.domBindings.rootDocument.createElement('div');\n    dummyElement.style.width = '100%';\n    dummyElement.style.height = '1px';\n    mainContainer.appendChild(dummyElement);\n    const fillWidth = dummyElement.offsetWidth;\n    this.containerWidth = fillWidth;\n    mainContainer.removeChild(dummyElement);\n    return fillWidth;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getWorkspaceOffset() {\n    return offset(this.wtTable.TABLE);\n  }\n\n  /**\n   * @returns {number}\n   */\n  getColumnHeaderHeight() {\n    const columnHeaders = this.wtSettings.getSetting('columnHeaders');\n    if (!columnHeaders.length) {\n      this.columnHeaderHeight = 0;\n    } else if (isNaN(this.columnHeaderHeight)) {\n      this.columnHeaderHeight = outerHeight(this.wtTable.THEAD);\n    }\n    return this.columnHeaderHeight;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getViewportHeight() {\n    let containerHeight = this.getWorkspaceHeight();\n    if (containerHeight === Infinity) {\n      return containerHeight;\n    }\n    const columnHeaderHeight = this.getColumnHeaderHeight();\n    if (columnHeaderHeight > 0) {\n      containerHeight -= columnHeaderHeight;\n    }\n    return containerHeight;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getRowHeaderWidth() {\n    const rowHeadersWidthSetting = this.wtSettings.getSetting('rowHeaderWidth');\n    const rowHeaders = this.wtSettings.getSetting('rowHeaders');\n    if (rowHeadersWidthSetting) {\n      this.rowHeaderWidth = 0;\n      for (let i = 0, len = rowHeaders.length; i < len; i++) {\n        this.rowHeaderWidth += rowHeadersWidthSetting[i] || rowHeadersWidthSetting;\n      }\n    }\n    if (isNaN(this.rowHeaderWidth)) {\n      if (rowHeaders.length) {\n        let TH = this.wtTable.TABLE.querySelector('TH');\n        this.rowHeaderWidth = 0;\n        for (let i = 0, len = rowHeaders.length; i < len; i++) {\n          if (TH) {\n            this.rowHeaderWidth += outerWidth(TH);\n            TH = TH.nextSibling;\n          } else {\n            // yes this is a cheat but it worked like that before, just taking assumption from CSS instead of measuring.\n            // TODO: proper fix\n            this.rowHeaderWidth += 50;\n          }\n        }\n      } else {\n        this.rowHeaderWidth = 0;\n      }\n    }\n    this.rowHeaderWidth = this.wtSettings.getSetting('onModifyRowHeaderWidth', this.rowHeaderWidth) || this.rowHeaderWidth;\n    return this.rowHeaderWidth;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getViewportWidth() {\n    const containerWidth = this.getWorkspaceWidth();\n    if (containerWidth === Infinity) {\n      return containerWidth;\n    }\n    const rowHeaderWidth = this.getRowHeaderWidth();\n    if (rowHeaderWidth > 0) {\n      return containerWidth - rowHeaderWidth;\n    }\n    return containerWidth;\n  }\n\n  /**\n   * Creates:\n   * - rowsRenderCalculator (before draw, to qualify rows for rendering)\n   * - rowsVisibleCalculator (after draw, to measure which rows are actually visible).\n   *\n   * @param {number} calculationType The render type ID, which determines for what type of\n   *                                 calculation calculator is created.\n   * @returns {ViewportRowsCalculator}\n   */\n  createRowsCalculator() {\n    let calculationType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : RENDER_TYPE;\n    const {\n      wtSettings,\n      wtTable\n    } = this;\n    let height;\n    let scrollbarHeight;\n    let fixedRowsHeight;\n    this.rowHeaderWidth = NaN;\n    if (wtSettings.getSetting('renderAllRows') && calculationType === RENDER_TYPE) {\n      height = Infinity;\n    } else {\n      height = this.getViewportHeight();\n    }\n    let pos = this.dataAccessObject.topScrollPosition - this.dataAccessObject.topParentOffset;\n    const fixedRowsTop = wtSettings.getSetting('fixedRowsTop');\n    const fixedRowsBottom = wtSettings.getSetting('fixedRowsBottom');\n    const totalRows = wtSettings.getSetting('totalRows');\n    if (fixedRowsTop && pos >= 0) {\n      fixedRowsHeight = this.dataAccessObject.topOverlay.sumCellSizes(0, fixedRowsTop);\n      pos += fixedRowsHeight;\n      height -= fixedRowsHeight;\n    }\n    if (fixedRowsBottom && this.dataAccessObject.bottomOverlay.clone) {\n      fixedRowsHeight = this.dataAccessObject.bottomOverlay.sumCellSizes(totalRows - fixedRowsBottom, totalRows);\n      height -= fixedRowsHeight;\n    }\n    if (wtTable.holder.clientHeight === wtTable.holder.offsetHeight) {\n      scrollbarHeight = 0;\n    } else {\n      scrollbarHeight = getScrollbarWidth(this.domBindings.rootDocument);\n    }\n    return new ViewportRowsCalculator({\n      viewportHeight: height,\n      scrollOffset: pos,\n      totalRows: wtSettings.getSetting('totalRows'),\n      rowHeightFn: sourceRow => wtTable.getRowHeight(sourceRow),\n      overrideFn: wtSettings.getSettingPure('viewportRowCalculatorOverride'),\n      calculationType,\n      horizontalScrollbarHeight: scrollbarHeight\n    });\n  }\n\n  /**\n   * Creates:\n   * - columnsRenderCalculator (before draw, to qualify columns for rendering)\n   * - columnsVisibleCalculator (after draw, to measure which columns are actually visible).\n   *\n   * @param {number} calculationType The render type ID, which determines for what type of\n   *                                 calculation calculator is created.\n   * @returns {ViewportColumnsCalculator}\n   */\n  createColumnsCalculator() {\n    let calculationType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : RENDER_TYPE;\n    const {\n      wtSettings,\n      wtTable\n    } = this;\n    let width = this.getViewportWidth();\n    let pos = Math.abs(this.dataAccessObject.inlineStartScrollPosition) - this.dataAccessObject.inlineStartParentOffset;\n    this.columnHeaderHeight = NaN;\n    const fixedColumnsStart = wtSettings.getSetting('fixedColumnsStart');\n    if (fixedColumnsStart && pos >= 0) {\n      const fixedColumnsWidth = this.dataAccessObject.inlineStartOverlay.sumCellSizes(0, fixedColumnsStart);\n      pos += fixedColumnsWidth;\n      width -= fixedColumnsWidth;\n    }\n    if (wtTable.holder.clientWidth !== wtTable.holder.offsetWidth) {\n      width -= getScrollbarWidth(this.domBindings.rootDocument);\n    }\n    return new ViewportColumnsCalculator({\n      viewportWidth: width,\n      scrollOffset: pos,\n      totalColumns: wtSettings.getSetting('totalColumns'),\n      columnWidthFn: sourceCol => wtTable.getColumnWidth(sourceCol),\n      overrideFn: wtSettings.getSettingPure('viewportColumnCalculatorOverride'),\n      calculationType,\n      stretchMode: wtSettings.getSetting('stretchH'),\n      stretchingColumnWidthFn: (stretchedWidth, column) => {\n        return wtSettings.getSetting('onBeforeStretchingColumnWidth', stretchedWidth, column);\n      },\n      inlineStartOffset: this.dataAccessObject.inlineStartParentOffset\n    });\n  }\n\n  /**\n   * Creates rowsRenderCalculator and columnsRenderCalculator (before draw, to determine what rows and\n   * cols should be rendered).\n   *\n   * @param {boolean} fastDraw If `true`, will try to avoid full redraw and only update the border positions.\n   *                           If `false` or `undefined`, will perform a full redraw.\n   * @returns {boolean} The fastDraw value, possibly modified.\n   */\n  createRenderCalculators() {\n    let fastDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let runFastDraw = fastDraw;\n    if (runFastDraw) {\n      const proposedRowsVisibleCalculator = this.createRowsCalculator(FULLY_VISIBLE_TYPE);\n      const proposedColumnsVisibleCalculator = this.createColumnsCalculator(FULLY_VISIBLE_TYPE);\n      if (!(this.areAllProposedVisibleRowsAlreadyRendered(proposedRowsVisibleCalculator) && this.areAllProposedVisibleColumnsAlreadyRendered(proposedColumnsVisibleCalculator))) {\n        runFastDraw = false;\n      }\n    }\n    if (!runFastDraw) {\n      this.rowsRenderCalculator = this.createRowsCalculator(RENDER_TYPE);\n      this.columnsRenderCalculator = this.createColumnsCalculator(RENDER_TYPE);\n    }\n    // delete temporarily to make sure that renderers always use rowsRenderCalculator, not rowsVisibleCalculator\n    this.rowsVisibleCalculator = null;\n    this.columnsVisibleCalculator = null;\n    return runFastDraw;\n  }\n\n  /**\n   * Creates rowsVisibleCalculator and columnsVisibleCalculator (after draw, to determine what are\n   * the actually fully visible rows and columns).\n   */\n  createVisibleCalculators() {\n    this.rowsVisibleCalculator = this.createRowsCalculator(FULLY_VISIBLE_TYPE);\n    this.columnsVisibleCalculator = this.createColumnsCalculator(FULLY_VISIBLE_TYPE);\n  }\n\n  /**\n   * Returns information whether proposedRowsVisibleCalculator viewport\n   * is contained inside rows rendered in previous draw (cached in rowsRenderCalculator).\n   *\n   * @param {ViewportRowsCalculator} proposedRowsVisibleCalculator The instance of the viewport calculator to compare with.\n   * @returns {boolean} Returns `true` if all proposed visible rows are already rendered (meaning: redraw is not needed).\n   *                    Returns `false` if at least one proposed visible row is not already rendered (meaning: redraw is needed).\n   */\n  areAllProposedVisibleRowsAlreadyRendered(proposedRowsVisibleCalculator) {\n    if (!this.rowsVisibleCalculator) {\n      return false;\n    }\n    const {\n      startRow,\n      endRow,\n      isVisibleInTrimmingContainer\n    } = proposedRowsVisibleCalculator;\n\n    // if there are no fully visible rows at all, return false\n    if (startRow === null && endRow === null) {\n      return !isVisibleInTrimmingContainer;\n    }\n    const {\n      startRow: renderedStartRow,\n      endRow: renderedEndRow\n    } = this.rowsRenderCalculator;\n    if (startRow < renderedStartRow || startRow === renderedStartRow && startRow > 0) {\n      return false;\n    } else if (endRow > renderedEndRow || endRow === renderedEndRow && endRow < this.wtSettings.getSetting('totalRows') - 1) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Returns information whether proposedColumnsVisibleCalculator viewport\n   * is contained inside column rendered in previous draw (cached in columnsRenderCalculator).\n   *\n   * @param {ViewportRowsCalculator} proposedColumnsVisibleCalculator The instance of the viewport calculator to compare with.\n   * @returns {boolean} Returns `true` if all proposed visible columns are already rendered (meaning: redraw is not needed).\n   *                    Returns `false` if at least one proposed visible column is not already rendered (meaning: redraw is needed).\n   */\n  areAllProposedVisibleColumnsAlreadyRendered(proposedColumnsVisibleCalculator) {\n    if (!this.columnsVisibleCalculator) {\n      return false;\n    }\n    const {\n      startColumn,\n      endColumn,\n      isVisibleInTrimmingContainer\n    } = proposedColumnsVisibleCalculator;\n\n    // if there are no fully visible columns at all, return false\n    if (startColumn === null && endColumn === null) {\n      return !isVisibleInTrimmingContainer;\n    }\n    const {\n      startColumn: renderedStartColumn,\n      endColumn: renderedEndColumn\n    } = this.columnsRenderCalculator;\n    if (startColumn < renderedStartColumn || startColumn === renderedStartColumn && startColumn > 0) {\n      return false;\n    } else if (endColumn > renderedEndColumn || endColumn === renderedEndColumn && endColumn < this.wtSettings.getSetting('totalColumns') - 1) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Resets values in keys of the hasOversizedColumnHeadersMarked object after updateSettings.\n   */\n  resetHasOversizedColumnHeadersMarked() {\n    objectEach(this.hasOversizedColumnHeadersMarked, (value, key, object) => {\n      object[key] = undefined;\n    });\n  }\n}\nexport default Viewport;", "import \"core-js/modules/es.array.push.js\";\nimport Event from \"../event.mjs\";\nimport Overlays from \"../overlays.mjs\";\nimport Settings from \"../settings.mjs\";\nimport MasterTable from \"../table/master.mjs\";\nimport Viewport from \"../viewport.mjs\";\nimport CoreAbstract from \"./_base.mjs\";\nimport { SelectionManager } from \"../selection/manager.mjs\";\nimport { objectEach } from \"../../../../helpers/object.mjs\";\nimport { addClass, removeClass } from \"../../../../helpers/dom/element.mjs\";\n/**\n * @class Walkontable\n */\nexport default class Walkontable extends CoreAbstract {\n  /**\n   * @param {HTMLTableElement} table Main table.\n   * @param {SettingsPure} settings The Walkontable settings.\n   */\n  constructor(table, settings) {\n    super(table, new Settings(settings));\n    const facadeGetter = this.wtSettings.getSetting('facade', this); // todo rethink. I would like to have no access to facade from the internal scope.\n\n    this.wtTable = new MasterTable(this.getTableDao(), facadeGetter, this.domBindings, this.wtSettings);\n    this.wtViewport = new Viewport(this.getViewportDao(), this.domBindings, this.wtSettings, this.eventManager, this.wtTable);\n    this.selectionManager = new SelectionManager(this.wtSettings.getSetting('selections'));\n    this.wtEvent = new Event(facadeGetter, this.domBindings, this.wtSettings, this.eventManager, this.wtTable, this.selectionManager);\n    this.wtOverlays = new Overlays(\n    // TODO create DAO and remove reference to the Walkontable instance.\n    this, facadeGetter, this.domBindings, this.wtSettings, this.eventManager, this.wtTable);\n    this.exportSettingsAsClassNames();\n    this.findOriginalHeaders();\n  }\n\n  /**\n   * Export settings as class names added to the parent element of the table.\n   */\n  exportSettingsAsClassNames() {\n    const toExport = {\n      rowHeaders: 'htRowHeaders',\n      columnHeaders: 'htColumnHeaders'\n    };\n    const allClassNames = [];\n    const newClassNames = [];\n    objectEach(toExport, (className, key) => {\n      if (this.wtSettings.getSetting(key).length) {\n        newClassNames.push(className);\n      }\n      allClassNames.push(className);\n    });\n    removeClass(this.wtTable.wtRootElement.parentNode, allClassNames);\n    addClass(this.wtTable.wtRootElement.parentNode, newClassNames);\n  }\n\n  /**\n   * @returns {ViewportDao}\n   */\n  getViewportDao() {\n    const wot = this;\n    return {\n      get wot() {\n        return wot;\n      },\n      get topOverlayTrimmingContainer() {\n        return wot.wtOverlays.topOverlay.trimmingContainer;\n      },\n      get inlineStartOverlayTrimmingContainer() {\n        return wot.wtOverlays.inlineStartOverlay.trimmingContainer;\n      },\n      get topScrollPosition() {\n        return wot.wtOverlays.topOverlay.getScrollPosition();\n      },\n      get topParentOffset() {\n        return wot.wtOverlays.topOverlay.getTableParentOffset();\n      },\n      get inlineStartScrollPosition() {\n        return wot.wtOverlays.inlineStartOverlay.getScrollPosition();\n      },\n      get inlineStartParentOffset() {\n        return wot.wtOverlays.inlineStartOverlay.getTableParentOffset();\n      },\n      get topOverlay() {\n        return wot.wtOverlays.topOverlay; // TODO refactoring: move outside dao, use IOC\n      },\n\n      get inlineStartOverlay() {\n        return wot.wtOverlays.inlineStartOverlay; // TODO refactoring: move outside dao, use IOC\n      },\n\n      get bottomOverlay() {\n        return wot.wtOverlays.bottomOverlay; // TODO refactoring: move outside dao, use IOC\n      }\n    };\n  }\n}", "import Walkontable from \"../core/core.mjs\";\nimport CoreAbstract from \"../core/_base.mjs\";\n/**\n * This layer cares about backward compatibility.\n *\n * @class WalkontableFacade\n * @augments Walkontable\n * @inheritDoc\n */\nexport default class WalkontableFacade {\n  /**\n   * @param {SettingsPure|Walkontable} settingsOrInstance The Walkontable settings.\n   */\n  constructor(settingsOrInstance) {\n    if (settingsOrInstance instanceof CoreAbstract) {\n      this._wot = settingsOrInstance;\n    } else {\n      this._initFromSettings(settingsOrInstance);\n    }\n  }\n  _initFromSettings(settings) {\n    settings.facade = instance => {\n      const facade = new WalkontableFacade(instance);\n      return () => facade;\n    };\n    this._wot = new Walkontable(settings.table, settings);\n  }\n  get guid() {\n    return this._wot.guid;\n  }\n  get rootDocument() {\n    return this._wot.domBindings.rootDocument;\n  }\n  get rootWindow() {\n    return this._wot.domBindings.rootWindow;\n  }\n  get wtSettings() {\n    return this._wot.wtSettings; // todo create facade\n  }\n\n  get cloneSource() {\n    return this._wot.cloneSource; // todo create facade\n  }\n\n  get cloneOverlay() {\n    return this._wot.cloneOverlay; // todo create facade\n  }\n\n  get selectionManager() {\n    return this._wot.selectionManager; // todo create facade\n  }\n\n  get wtViewport() {\n    return this._wot.wtViewport; // todo create facade\n  }\n\n  get wtOverlays() {\n    return this._wot.wtOverlays; // todo create facade\n  }\n\n  get wtTable() {\n    return this._wot.wtTable; // todo create facade\n  }\n\n  get wtEvent() {\n    return this._wot.wtEvent; // todo create facade\n  }\n\n  get wtScroll() {\n    return this._wot.wtScroll; // todo create facade\n  }\n\n  get drawn() {\n    return this._wot.drawn;\n  }\n  set drawn(value) {\n    this._wot.drawn = value;\n  }\n  get drawInterrupted() {\n    return this._wot.drawInterrupted;\n  }\n  set drawInterrupted(value) {\n    this._wot.drawInterrupted = value;\n  }\n  get lastMouseOver() {\n    return this._wot.lastMouseOver;\n  }\n  set lastMouseOver(value) {\n    this._wot.lastMouseOver = value;\n  }\n  get momentumScrolling() {\n    return this._wot.momentumScrolling;\n  }\n  set momentumScrolling(value) {\n    this._wot.momentumScrolling = value;\n  }\n  get touchApplied() {\n    return this._wot.touchApplied;\n  }\n  set touchApplied(value) {\n    this._wot.touchApplied = value;\n  }\n  get domBindings() {\n    return this._wot.domBindings;\n  }\n  get eventListeners() {\n    return this._wot.eventListeners;\n  }\n  set eventListeners(value) {\n    this._wot.eventListeners = value;\n  }\n  get eventManager() {\n    return this._wot.eventManager;\n  }\n  createCellCoords(row, column) {\n    return this._wot.createCellCoords(row, column);\n  }\n  createCellRange(highlight, from, to) {\n    return this._wot.createCellRange(highlight, from, to);\n  }\n  draw() {\n    let fastDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this._wot.draw(fastDraw);\n    return this;\n  }\n  getCell(coords) {\n    let topmost = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return this._wot.getCell(coords, topmost);\n  }\n  scrollViewport(coords, snapToTop, snapToRight, snapToBottom, snapToLeft) {\n    return this._wot.scrollViewport(coords, snapToTop, snapToRight, snapToBottom, snapToLeft);\n  }\n  scrollViewportHorizontally(column, snapToRight, snapToLeft) {\n    return this._wot.scrollViewportHorizontally(column, snapToRight, snapToLeft);\n  }\n  scrollViewportVertically(row, snapToTop, snapToBottom) {\n    return this._wot.scrollViewportVertically(row, snapToTop, snapToBottom);\n  }\n  getViewport() {\n    return this._wot.getViewport();\n  }\n  getOverlayName() {\n    return this._wot.cloneOverlay ? this._wot.cloneOverlay.type : 'master';\n  }\n  exportSettingsAsClassNames() {\n    return this._wot.exportSettingsAsClassNames();\n  }\n  update(settings, value) {\n    this._wot.wtSettings.update(settings, value);\n    return this;\n  }\n  getSetting(key, param1, param2, param3, param4) {\n    return this._wot.wtSettings.getSetting(key, param1, param2, param3, param4);\n  }\n  hasSetting(key) {\n    return this._wot.wtSettings.hasSetting(key);\n  }\n  destroy() {\n    this._wot.destroy();\n  }\n}", "import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { CellRange } from \"./../3rdparty/walkontable/src/index.mjs\";\nimport { arrayEach, arrayReduce } from \"./../helpers/array.mjs\";\nimport { isUndefined } from \"./../helpers/mixed.mjs\";\nexport const SELECTION_TYPE_UNRECOGNIZED = 0;\nexport const SELECTION_TYPE_EMPTY = 1;\nexport const SELECTION_TYPE_ARRAY = 2;\nexport const SELECTION_TYPE_OBJECT = 3;\nexport const SELECTION_TYPES = [SELECTION_TYPE_OBJECT, SELECTION_TYPE_ARRAY];\nconst ARRAY_TYPE_PATTERN = [['number'], ['number', 'string'], ['number', 'undefined'], ['number', 'string', 'undefined']];\nconst rootCall = Symbol('root');\nconst childCall = Symbol('child');\n\n/**\n * Detect selection schema structure.\n *\n * @param {*} selectionRanges The selected range or and array of selected ranges. This type of data is produced by\n * `hot.getSelected()`, `hot.getSelectedLast()`, `hot.getSelectedRange()`\n * and `hot.getSelectedRangeLast()` methods.\n * @param {symbol} _callSymbol The symbol object which indicates source of the helper invocation.\n * @returns {number} Returns a number that specifies the type of detected selection schema. If selection schema type\n * is unrecognized than it returns `0`.\n */\nexport function detectSelectionType(selectionRanges) {\n  let _callSymbol = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : rootCall;\n  if (_callSymbol !== rootCall && _callSymbol !== childCall) {\n    throw new Error('The second argument is used internally only and cannot be overwritten.');\n  }\n  const isArray = Array.isArray(selectionRanges);\n  const isRootCall = _callSymbol === rootCall;\n  let result = SELECTION_TYPE_UNRECOGNIZED;\n  if (isArray) {\n    const firstItem = selectionRanges[0];\n    if (selectionRanges.length === 0) {\n      result = SELECTION_TYPE_EMPTY;\n    } else if (isRootCall && firstItem instanceof CellRange) {\n      result = SELECTION_TYPE_OBJECT;\n    } else if (isRootCall && Array.isArray(firstItem)) {\n      result = detectSelectionType(firstItem, childCall);\n    } else if (selectionRanges.length >= 2 && selectionRanges.length <= 4) {\n      const isArrayType = !selectionRanges.some((value, index) => !ARRAY_TYPE_PATTERN[index].includes(typeof value));\n      if (isArrayType) {\n        result = SELECTION_TYPE_ARRAY;\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Factory function designed for normalization data schema from different data structures of the selection ranges.\n *\n * @param {number} type Selection type which will be processed.\n * @param {object} options The normalization options.\n * @param {function(number, number): CellCoords} options.createCellCoords The factory function that returns an instance of the `CellCoords` class.\n * @param {function(CellCoords, CellCoords, CellCoords): CellRange} options.createCellRange The factory function that returns an instance of the `CellRange` class.\n * @param {boolean} [options.keepDirection=false] If `true`, the coordinates which contain the direction of the\n *                                                selected cells won't be changed. Otherwise, the selection will be\n *                                                normalized to values starting from top-left to bottom-right.\n * @param {Function} [options.propToCol] Pass the converting function (usually `datamap.propToCol`) if the column\n *                                       defined as props should be normalized to the numeric values.\n * @returns {number[]} Returns normalized data about selected range as an array (`[rowStart, columnStart, rowEnd, columnEnd]`).\n */\nexport function normalizeSelectionFactory(type) {\n  let {\n    createCellCoords,\n    createCellRange,\n    keepDirection = false,\n    propToCol\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!SELECTION_TYPES.includes(type)) {\n    throw new Error('Unsupported selection ranges schema type was provided.');\n  }\n  return function (selection) {\n    const isObjectType = type === SELECTION_TYPE_OBJECT;\n    let rowStart = isObjectType ? selection.from.row : selection[0];\n    let columnStart = isObjectType ? selection.from.col : selection[1];\n    let rowEnd = isObjectType ? selection.to.row : selection[2];\n    let columnEnd = isObjectType ? selection.to.col : selection[3];\n    if (typeof propToCol === 'function') {\n      if (typeof columnStart === 'string') {\n        columnStart = propToCol(columnStart);\n      }\n      if (typeof columnEnd === 'string') {\n        columnEnd = propToCol(columnEnd);\n      }\n    }\n    if (isUndefined(rowEnd)) {\n      rowEnd = rowStart;\n    }\n    if (isUndefined(columnEnd)) {\n      columnEnd = columnStart;\n    }\n    if (!keepDirection) {\n      const origRowStart = rowStart;\n      const origColumnStart = columnStart;\n      const origRowEnd = rowEnd;\n      const origColumnEnd = columnEnd;\n      rowStart = Math.min(origRowStart, origRowEnd);\n      columnStart = Math.min(origColumnStart, origColumnEnd);\n      rowEnd = Math.max(origRowStart, origRowEnd);\n      columnEnd = Math.max(origColumnStart, origColumnEnd);\n    }\n    const from = createCellCoords(rowStart, columnStart);\n    const to = createCellCoords(rowEnd, columnEnd);\n    return createCellRange(from, from, to);\n  };\n}\n\n/**\n * Function transform selection ranges (produced by `hot.getSelected()` and `hot.getSelectedRange()`) to normalized\n * data structure. It merges repeated ranges into consecutive coordinates. The returned structure\n * contains an array of arrays. The single item contains at index 0 visual column index from the selection was\n * started and at index 1 distance as a count of selected columns.\n *\n * @param {Core} hotInstance The Handsontable instance.\n * @returns {Array[]} Returns an array of arrays with ranges defines in that schema:\n *                   `[[visualColumnStart, distance], [visualColumnStart, distance], ...]`.\n *                   The column distances are always created starting from the left (zero index) to the\n *                   right (the latest column index).\n */\nexport function transformSelectionToColumnDistance(hotInstance) {\n  const selectionType = detectSelectionType(hotInstance.getSelected());\n  if (selectionType === SELECTION_TYPE_UNRECOGNIZED || selectionType === SELECTION_TYPE_EMPTY) {\n    return [];\n  }\n  const selectionSchemaNormalizer = normalizeSelectionFactory(selectionType, {\n    createCellCoords: hotInstance._createCellCoords.bind(hotInstance),\n    createCellRange: hotInstance._createCellRange.bind(hotInstance)\n  });\n  const unorderedIndexes = new Set();\n\n  // Iterate through all ranges and collect all column indexes which are not saved yet.\n  arrayEach(hotInstance.getSelected(), selection => {\n    const {\n      from,\n      to\n    } = selectionSchemaNormalizer(selection);\n    const columnNonHeaderStart = Math.max(from.col, 0);\n    const amount = to.col - columnNonHeaderStart + 1;\n    arrayEach(Array.from(new Array(amount), (_, i) => columnNonHeaderStart + i), index => {\n      if (!unorderedIndexes.has(index)) {\n        unorderedIndexes.add(index);\n      }\n    });\n  });\n\n  // Sort indexes in ascending order to easily detecting non-consecutive columns.\n  const orderedIndexes = Array.from(unorderedIndexes).sort((a, b) => a - b);\n  const normalizedColumnRanges = arrayReduce(orderedIndexes, (acc, visualColumnIndex, index, array) => {\n    if (index !== 0 && visualColumnIndex === array[index - 1] + 1) {\n      acc[acc.length - 1][1] += 1;\n    } else {\n      acc.push([visualColumnIndex, 1]);\n    }\n    return acc;\n  }, []);\n  return normalizedColumnRanges;\n}\n\n/**\n * Function transform selection ranges (produced by `hot.getSelected()` and `hot.getSelectedRange()`) to normalized\n * data structure. It merges repeated ranges into consecutive coordinates. The returned structure\n * contains an array of arrays. The single item contains at index 0 visual column index from the selection was\n * started and at index 1 distance as a count of selected columns.\n *\n * @param {Core} hotInstance The Handsontable instance.\n * @returns {Array[]} Returns an array of arrays with ranges defines in that schema:\n *                   `[[visualColumnStart, distance], [visualColumnStart, distance], ...]`.\n *                   The column distances are always created starting from the left (zero index) to the\n *                   right (the latest column index).\n */\nexport function transformSelectionToRowDistance(hotInstance) {\n  const selectionType = detectSelectionType(hotInstance.getSelected());\n  if (selectionType === SELECTION_TYPE_UNRECOGNIZED || selectionType === SELECTION_TYPE_EMPTY) {\n    return [];\n  }\n  const selectionSchemaNormalizer = normalizeSelectionFactory(selectionType, {\n    createCellCoords: hotInstance._createCellCoords.bind(hotInstance),\n    createCellRange: hotInstance._createCellRange.bind(hotInstance)\n  });\n  const unorderedIndexes = new Set();\n\n  // Iterate through all ranges and collect all column indexes which are not saved yet.\n  arrayEach(hotInstance.getSelected(), selection => {\n    const {\n      from,\n      to\n    } = selectionSchemaNormalizer(selection);\n    const rowNonHeaderStart = Math.max(from.row, 0);\n    const amount = to.row - rowNonHeaderStart + 1;\n    arrayEach(Array.from(new Array(amount), (_, i) => rowNonHeaderStart + i), index => {\n      if (!unorderedIndexes.has(index)) {\n        unorderedIndexes.add(index);\n      }\n    });\n  });\n\n  // Sort indexes in ascending order to easily detecting non-consecutive columns.\n  const orderedIndexes = Array.from(unorderedIndexes).sort((a, b) => a - b);\n  const normalizedRowRanges = arrayReduce(orderedIndexes, (acc, rowIndex, index, array) => {\n    if (index !== 0 && rowIndex === array[index - 1] + 1) {\n      acc[acc.length - 1][1] += 1;\n    } else {\n      acc.push([rowIndex, 1]);\n    }\n    return acc;\n  }, []);\n  return normalizedRowRanges;\n}"],
  "mappings": "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",
  "names": ["index", "activeXDocument", "_classPrivateFieldInitSpec", "_checkPrivateRedeclaration", "_defineProperty", "_toPropertyKey", "_toPrimitive", "_classPrivateFieldGet", "_classExtractFieldDescriptor", "_classApplyDescriptorGet", "_classPrivateFieldSet", "_classApplyDescriptorSet", "_isRtl", "index", "_classPrivateFieldInitSpec", "_checkPrivateRedeclaration", "_defineProperty", "_toPropertyKey", "_toPrimitive", "_classPrivateFieldGet", "_classExtractFieldDescriptor", "_classApplyDescriptorGet", "_classPrivateFieldSet", "_classApplyDescriptorSet", "_classPrivateFieldInitSpec", "_checkPrivateRedeclaration", "_defineProperty", "_toPropertyKey", "_toPrimitive", "_classPrivateFieldGet", "_classExtractFieldDescriptor", "_classApplyDescriptorGet", "_classPrivateFieldSet", "_classApplyDescriptorSet", "_options", "_classPrivateFieldInitSpec", "_checkPrivateRedeclaration", "_classPrivateFieldGet", "_classExtractFieldDescriptor", "_classApplyDescriptorGet", "_classPrivateFieldSet", "_classApplyDescriptorSet", "_defineProperty", "_toPropertyKey", "_toPrimitive", "offset", "index", "_defineProperty", "_toPropertyKey", "_toPrimitive", "offset", "index", "_defineProperty", "_toPropertyKey", "_toPrimitive", "offset", "_defineProperty", "_toPropertyKey", "_toPrimitive", "offset", "_defineProperty", "_toPropertyKey", "_toPrimitive", "offset", "_defineProperty", "_toPropertyKey", "_toPrimitive", "_defineProperty", "_toPropertyKey", "_toPrimitive", "_defineProperty", "_toPropertyKey", "_toPrimitive", "_defineProperty", "_toPropertyKey", "_toPrimitive", "_defineProperty", "_toPropertyKey", "_toPrimitive", "_defineProperty", "_toPropertyKey", "_toPrimitive", "_defineProperty", "_toPropertyKey", "_toPrimitive", "_defineProperty", "_toPropertyKey", "_toPrimitive", "_defineProperty", "_toPropertyKey", "_toPrimitive", "index", "MIXIN_NAME", "_defineProperty", "_toPropertyKey", "_toPrimitive", "_defineProperty", "_toPropertyKey", "_toPrimitive", "_defineProperty", "_toPropertyKey", "_toPrimitive", "_defineProperty", "_toPropertyKey", "_toPrimitive", "MIXIN_NAME", "_defineProperty", "_toPropertyKey", "_toPrimitive", "MIXIN_NAME", "MIXIN_NAME", "addToUnscopables", "_checkPrivateRedeclaration", "_classPrivateFieldInitSpec", "_classPrivateFieldGet", "_classExtractFieldDescriptor", "_classApplyDescriptorGet", "_classPrivateFieldSet", "_classApplyDescriptorSet", "index", "_classPrivateMethodInitSpec", "_checkPrivateRedeclaration", "_classPrivateFieldInitSpec", "_classPrivateMethodGet", "_classPrivateFieldGet", "_classExtractFieldDescriptor", "_classApplyDescriptorGet", "_classPrivateFieldSet", "_classApplyDescriptorSet", "_activeOverlaysWot", "border", "_classPrivateFieldGet2", "_classPrivateFieldGet3", "_classPrivateFieldGet4", "_classPrivateFieldGet5", "_classPrivateFieldGet6", "offset", "MIXIN_NAME", "_defineProperty", "_toPropertyKey", "_toPrimitive", "_defineProperty", "_toPropertyKey", "_toPrimitive", "_defineProperty", "_toPropertyKey", "_toPrimitive", "_defineProperty", "_toPropertyKey", "_toPrimitive", "index"]
}
