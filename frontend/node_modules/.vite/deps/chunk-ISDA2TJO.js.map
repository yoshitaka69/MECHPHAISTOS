{
  "version": 3,
  "sources": ["../../numbro/dist/node_modules/browser-pack/_prelude.js", "../../numbro/dist/node_modules/bignumber.js/bignumber.js", "../../numbro/dist/src/en-US.js", "../../numbro/dist/src/formatting.js", "../../numbro/dist/src/globalState.js", "../../numbro/dist/src/loading.js", "../../numbro/dist/src/manipulating.js", "../../numbro/dist/src/numbro.js", "../../numbro/dist/src/parsing.js", "../../numbro/dist/src/unformatting.js", "../../numbro/dist/src/validating.js", "../../handsontable/renderers/htmlRenderer/htmlRenderer.mjs", "../../handsontable/renderers/autocompleteRenderer/autocompleteRenderer.mjs", "../../handsontable/renderers/checkboxRenderer/checkboxRenderer.mjs", "../../handsontable/renderers/numericRenderer/numericRenderer.mjs", "../../handsontable/renderers/passwordRenderer/passwordRenderer.mjs", "../../handsontable/renderers/timeRenderer/timeRenderer.mjs"],
  "sourcesContent": ["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()", ";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v8.0.2\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * n {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(n, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor usage without new.\r\n      if (!(x instanceof BigNumber)) {\r\n\r\n        // Don't throw on constructor call without new (#81).\r\n        // '[BigNumber Error] Constructor call without new: {n}'\r\n        //throw Error(bignumberError + ' Constructor call without new: ' + n);\r\n        return new BigNumber(n, b);\r\n      }\r\n\r\n      if (b == null) {\r\n\r\n        // Duplicate.\r\n        if (n instanceof BigNumber) {\r\n          x.s = n.s;\r\n          x.e = n.e;\r\n          x.c = (n = n.c) ? n.slice() : n;\r\n          return;\r\n        }\r\n\r\n        isNum = typeof n == 'number';\r\n\r\n        if (isNum && n * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / n < 0 ? (n = -n, -1) : 1;\r\n\r\n          // Faster path for integers.\r\n          if (n === ~~n) {\r\n            for (e = 0, i = n; i >= 10; i /= 10, e++);\r\n            x.e = e;\r\n            x.c = [n];\r\n            return;\r\n          }\r\n\r\n          str = String(n);\r\n        } else {\r\n          str = String(n);\r\n          if (!isNumeric.test(str)) return parseNumeric(x, str, isNum);\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n        str = String(n);\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(n instanceof BigNumber ? n : str);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        isNum = typeof n == 'number';\r\n\r\n        if (isNum) {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (n * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + n);\r\n          }\r\n\r\n          // Prevent later check for length on converted number.\r\n          isNum = false;\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(n), isNum, b);\r\n          }\r\n        }\r\n\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      str = str.slice(i, ++len);\r\n\r\n      if (str) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * n));\r\n        }\r\n\r\n        e = e - i - 1;\r\n\r\n         // Overflow?\r\n        if (e > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            str = str.slice(i);\r\n            i = LOG_BASE - str.length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * v {any}\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      return v instanceof BigNumber || v && v._isBigNumber === true || false;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n          x.c = x.e = null;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.c = x.e = x.s = null;\r\n        }\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {\r\n      P[Symbol.toStringTag] = 'BigNumber';\r\n      // Node.js v10.12.0+\r\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n    }\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n", "/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nmodule.exports = {\n    languageTag: \"en-US\",\n    delimiters: {\n        thousands: \",\",\n        decimal: \".\"\n    },\n    abbreviations: {\n        thousand: \"k\",\n        million: \"m\",\n        billion: \"b\",\n        trillion: \"t\"\n    },\n    spaceSeparated: false,\n    ordinal: function(number) {\n        let b = number % 10;\n        return (~~(number % 100 / 10) === 1) ? \"th\" : (b === 1) ? \"st\" : (b === 2) ? \"nd\" : (b === 3) ? \"rd\" : \"th\";\n    },\n    currency: {\n        symbol: \"$\",\n        position: \"prefix\",\n        code: \"USD\"\n    },\n    currencyFormat: {\n        thousandSeparated: true,\n        totalLength: 4,\n        spaceSeparated: true\n    },\n    formats: {\n        fourDigits: {\n            totalLength: 4,\n            spaceSeparated: true\n        },\n        fullWithTwoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithTwoDecimalsNoCurrency: {\n            thousandSeparated: true,\n            mantissa: 2\n        },\n        fullWithNoDecimals: {\n            output: \"currency\",\n            thousandSeparated: true,\n            mantissa: 0\n        }\n    }\n};\n", "/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst globalState = require(\"./globalState\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nconst binarySuffixes = [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"];\nconst decimalSuffixes = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\nconst bytes = {\n    general: {scale: 1024, suffixes: decimalSuffixes, marker: \"bd\"},\n    binary: {scale: 1024, suffixes: binarySuffixes, marker: \"b\"},\n    decimal: {scale: 1000, suffixes: decimalSuffixes, marker: \"d\"}\n};\n\nconst defaultOptions = {\n    totalLength: 0,\n    characteristic: 0,\n    forceAverage: false,\n    average: false,\n    mantissa: -1,\n    optionalMantissa: true,\n    thousandSeparated: false,\n    spaceSeparated: false,\n    negative: \"sign\",\n    forceSign: false\n};\n\n/**\n * Entry point. Format the provided INSTANCE according to the PROVIDEDFORMAT.\n * This method ensure the prefix and postfix are added as the last step.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {NumbroFormat|string} [providedFormat] - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction format(instance, providedFormat = {}, numbro) {\n    if (typeof providedFormat === \"string\") {\n        providedFormat = parsing.parseFormat(providedFormat);\n    }\n\n    let valid = validating.validateFormat(providedFormat);\n\n    if (!valid) {\n        return \"ERROR: invalid format\";\n    }\n\n    let prefix = providedFormat.prefix || \"\";\n    let postfix = providedFormat.postfix || \"\";\n\n    let output = formatNumbro(instance, providedFormat, numbro);\n    output = insertPrefix(output, prefix);\n    output = insertPostfix(output, postfix);\n    return output;\n}\n\n/**\n * Format the provided INSTANCE according to the PROVIDEDFORMAT.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatNumbro(instance, providedFormat, numbro) {\n    switch (providedFormat.output) {\n        case \"currency\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentCurrencyDefaultFormat());\n            return formatCurrency(instance, providedFormat, globalState, numbro);\n        }\n        case \"percent\": {\n            providedFormat = formatOrDefault(providedFormat, globalState.currentPercentageDefaultFormat());\n            return formatPercentage(instance, providedFormat, globalState, numbro);\n        }\n        case \"byte\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentByteDefaultFormat());\n            return formatByte(instance, providedFormat, globalState, numbro);\n        case \"time\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentTimeDefaultFormat());\n            return formatTime(instance, providedFormat, globalState, numbro);\n        case \"ordinal\":\n            providedFormat = formatOrDefault(providedFormat, globalState.currentOrdinalDefaultFormat());\n            return formatOrdinal(instance, providedFormat, globalState, numbro);\n        case \"number\":\n        default:\n            return formatNumber({\n                instance,\n                providedFormat,\n                numbro\n            });\n    }\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1000).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getDecimalByteUnit(instance) {\n    let data = bytes.decimal;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the binary byte unit (MiB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getBinaryByteUnit(instance) {\n    let data = bytes.binary;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Get the decimal byte unit (MB) for the provided numbro INSTANCE.\n * We go from one unit to another using the decimal system (1024).\n *\n * @param {Numbro} instance - numbro instance to compute\n * @return {String}\n */\nfunction getByteUnit(instance) {\n    let data = bytes.general;\n    return getFormatByteUnits(instance._value, data.suffixes, data.scale).suffix;\n}\n\n/**\n * Return the value and the suffix computed in byte.\n * It uses the SUFFIXES and the SCALE provided.\n *\n * @param {number} value - Number to format\n * @param {[String]} suffixes - List of suffixes\n * @param {number} scale - Number in-between two units\n * @return {{value: Number, suffix: String}}\n */\nfunction getFormatByteUnits(value, suffixes, scale) {\n    let suffix = suffixes[0];\n    let abs = Math.abs(value);\n\n    if (abs >= scale) {\n        for (let power = 1; power < suffixes.length; ++power) {\n            let min = Math.pow(scale, power);\n            let max = Math.pow(scale, power + 1);\n\n            if (abs >= min && abs < max) {\n                suffix = suffixes[power];\n                value = value / min;\n                break;\n            }\n        }\n\n        // values greater than or equal to [scale] YB never set the suffix\n        if (suffix === suffixes[0]) {\n            value = value / Math.pow(scale, suffixes.length - 1);\n            suffix = suffixes[suffixes.length - 1];\n        }\n    }\n\n    return {value, suffix};\n}\n\n/**\n * Format the provided INSTANCE as bytes using the PROVIDEDFORMAT, and STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatByte(instance, providedFormat, state, numbro) {\n    let base = providedFormat.base || \"binary\";\n    let baseInfo = bytes[base];\n\n    let {value, suffix} = getFormatByteUnits(instance._value, baseInfo.suffixes, baseInfo.scale);\n    let output = formatNumber({\n        instance: numbro(value),\n        providedFormat,\n        state,\n        defaults: state.currentByteDefaultFormat()\n    });\n    let abbreviations = state.currentAbbreviations();\n    return `${output}${abbreviations.spaced ? \" \" : \"\"}${suffix}`;\n}\n\n/**\n * Format the provided INSTANCE as an ordinal using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatOrdinal(instance, providedFormat, state) {\n    let ordinalFn = state.currentOrdinal();\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    let output = formatNumber({\n        instance,\n        providedFormat,\n        state\n    });\n    let ordinal = ordinalFn(instance._value);\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}${ordinal}`;\n}\n\n/**\n * Format the provided INSTANCE as a time HH:MM:SS.\n *\n * @param {Numbro} instance - numbro instance to format\n * @return {string}\n */\nfunction formatTime(instance) {\n    let hours = Math.floor(instance._value / 60 / 60);\n    let minutes = Math.floor((instance._value - (hours * 60 * 60)) / 60);\n    let seconds = Math.round(instance._value - (hours * 60 * 60) - (minutes * 60));\n    return `${hours}:${(minutes < 10) ? \"0\" : \"\"}${minutes}:${(seconds < 10) ? \"0\" : \"\"}${seconds}`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param numbro - the numbro singleton\n * @return {string}\n */\nfunction formatPercentage(instance, providedFormat, state, numbro) {\n    let prefixSymbol = providedFormat.prefixSymbol;\n\n    let output = formatNumber({\n        instance: numbro(instance._value * 100),\n        providedFormat,\n        state\n    });\n    let options = Object.assign({}, defaultOptions, providedFormat);\n\n    if (prefixSymbol) {\n        return `%${options.spaceSeparated ? \" \" : \"\"}${output}`;\n    }\n\n    return `${output}${options.spaceSeparated ? \" \" : \"\"}%`;\n}\n\n/**\n * Format the provided INSTANCE as a percentage using the PROVIDEDFORMAT,\n * and the STATE.\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} providedFormat - specification for formatting\n * @param {globalState} state - shared state of the library\n * @return {string}\n */\nfunction formatCurrency(instance, providedFormat, state) {\n    const currentCurrency = state.currentCurrency();\n    let options = Object.assign({}, defaultOptions, providedFormat);\n    let decimalSeparator = undefined;\n    let space = \"\";\n    let average = !!options.totalLength || !!options.forceAverage || options.average;\n    let position = providedFormat.currencyPosition || currentCurrency.position;\n    let symbol = providedFormat.currencySymbol || currentCurrency.symbol;\n\n    if (options.spaceSeparated) {\n        space = \" \";\n    }\n\n    if (position === \"infix\") {\n        decimalSeparator = space + symbol + space;\n    }\n\n    let output = formatNumber({\n        instance,\n        providedFormat,\n        state,\n        decimalSeparator\n    });\n\n    if (position === \"prefix\") {\n        if (instance._value < 0 && options.negative === \"sign\") {\n            output = `-${space}${symbol}${output.slice(1)}`;\n        } else {\n            output = symbol + space + output;\n        }\n    }\n\n    if (!position || position === \"postfix\") {\n        space = average ? \"\" : space;\n        output = output + space + symbol;\n    }\n\n    return output;\n}\n\n/**\n * Compute the average value out of VALUE.\n * The other parameters are computation options.\n *\n * @param {number} value - value to compute\n * @param {string} [forceAverage] - forced unit used to compute\n * @param {{}} abbreviations - part of the language specification\n * @param {boolean} spaceSeparated - `true` if a space must be inserted between the value and the abbreviation\n * @param {number} [totalLength] - total length of the output including the characteristic and the mantissa\n * @return {{value: number, abbreviation: string, mantissaPrecision: number}}\n */\nfunction computeAverage({value, forceAverage, abbreviations, spaceSeparated = false, totalLength = 0}) {\n    let abbreviation = \"\";\n    let abs = Math.abs(value);\n    let mantissaPrecision = -1;\n\n    if ((abs >= Math.pow(10, 12) && !forceAverage) || (forceAverage === \"trillion\")) {\n        // trillion\n        abbreviation = abbreviations.trillion;\n        value = value / Math.pow(10, 12);\n    } else if ((abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !forceAverage) || (forceAverage === \"billion\")) {\n        // billion\n        abbreviation = abbreviations.billion;\n        value = value / Math.pow(10, 9);\n    } else if ((abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !forceAverage) || (forceAverage === \"million\")) {\n        // million\n        abbreviation = abbreviations.million;\n        value = value / Math.pow(10, 6);\n    } else if ((abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !forceAverage) || (forceAverage === \"thousand\")) {\n        // thousand\n        abbreviation = abbreviations.thousand;\n        value = value / Math.pow(10, 3);\n    }\n\n    let optionalSpace = spaceSeparated ? \" \" : \"\";\n\n    if (abbreviation) {\n        abbreviation = optionalSpace + abbreviation;\n    }\n\n    if (totalLength) {\n        let characteristic = value.toString().split(\".\")[0];\n        mantissaPrecision = Math.max(totalLength - characteristic.length, 0);\n    }\n\n    return {value, abbreviation, mantissaPrecision};\n}\n\n/**\n * Compute an exponential form for VALUE, taking into account CHARACTERISTIC\n * if provided.\n * @param {number} value - value to compute\n * @param {number} [characteristicPrecision] - optional characteristic length\n * @return {{value: number, abbreviation: string}}\n */\nfunction computeExponential({value, characteristicPrecision = 0}) {\n    let [numberString, exponential] = value.toExponential().split(\"e\");\n    let number = +numberString;\n\n    if (!characteristicPrecision) {\n        return {\n            value: number,\n            abbreviation: `e${exponential}`\n        };\n    }\n\n    let characteristicLength = 1; // see `toExponential`\n\n    if (characteristicLength < characteristicPrecision) {\n        number = number * Math.pow(10, characteristicPrecision - characteristicLength);\n        exponential = +exponential - (characteristicPrecision - characteristicLength);\n        exponential = exponential >= 0 ? `+${exponential}` : exponential;\n    }\n\n    return {\n        value: number,\n        abbreviation: `e${exponential}`\n    };\n}\n\n/**\n * Return a string of NUMBER zero.\n *\n * @param {number} number - Length of the output\n * @return {string}\n */\nfunction zeroes(number) {\n    let result = \"\";\n    for (let i = 0; i < number; i++) {\n        result += \"0\";\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n * This method is for large/small numbers only (a.k.a. including a \"e\").\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @return {string}\n */\nfunction toFixedLarge(value, precision) {\n    let result = value.toString();\n\n    let [base, exp] = result.split(\"e\");\n\n    let [characteristic, mantissa = \"\"] = base.split(\".\");\n\n    if (+exp > 0) {\n        result = characteristic + mantissa + zeroes(exp - mantissa.length);\n    } else {\n        let prefix = \".\";\n\n        if (+characteristic < 0) {\n            prefix = `-0${prefix}`;\n        } else {\n            prefix = `0${prefix}`;\n        }\n\n        let suffix = (zeroes(-exp - 1) + Math.abs(characteristic) + mantissa).substr(0, precision);\n        if (suffix.length < precision) {\n            suffix += zeroes(precision - suffix.length);\n        }\n        result = prefix + suffix;\n    }\n\n    if (+exp > 0 && precision > 0) {\n        result += `.${zeroes(precision)}`;\n    }\n\n    return result;\n}\n\n/**\n * Return a string representing VALUE with a PRECISION-long mantissa.\n *\n * @param {number} value - number to precise\n * @param {number} precision - desired length for the mantissa\n * @return {string}\n */\nfunction toFixed(value, precision) {\n    if (value.toString().indexOf(\"e\") !== -1) {\n        return toFixedLarge(value, precision);\n    }\n\n    return (Math.round(+`${value}e+${precision}`) / (Math.pow(10, precision))).toFixed(precision);\n}\n\n/**\n * Return the current OUTPUT with a mantissa precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalMantissa - if `true`, the mantissa is omitted when it's only zeroes\n * @param {number} precision - desired precision of the mantissa\n * @param {boolean} trim - if `true`, trailing zeroes are removed from the mantissa\n * @return {string}\n */\nfunction setMantissaPrecision(output, value, optionalMantissa, precision, trim) {\n    if (precision === -1) {\n        return output;\n    }\n\n    let result = toFixed(value, precision);\n    let [currentCharacteristic, currentMantissa = \"\"] = result.toString().split(\".\");\n\n    if (currentMantissa.match(/^0+$/) && (optionalMantissa || trim)) {\n        return currentCharacteristic;\n    }\n\n    let hasTrailingZeroes = currentMantissa.match(/0+$/);\n    if (trim && hasTrailingZeroes) {\n        return `${currentCharacteristic}.${currentMantissa.toString().slice(0, hasTrailingZeroes.index)}`;\n    }\n\n    return result.toString();\n}\n\n/**\n * Return the current OUTPUT with a characteristic precision of PRECISION.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} optionalCharacteristic - `true` if the characteristic is omitted when it's only zeroes\n * @param {number} precision - desired precision of the characteristic\n * @return {string}\n */\nfunction setCharacteristicPrecision(output, value, optionalCharacteristic, precision) {\n    let result = output;\n    let [currentCharacteristic, currentMantissa] = result.toString().split(\".\");\n\n    if (currentCharacteristic.match(/^-?0$/) && optionalCharacteristic) {\n        if (!currentMantissa) {\n            return currentCharacteristic.replace(\"0\", \"\");\n        }\n\n        return `${currentCharacteristic.replace(\"0\", \"\")}.${currentMantissa}`;\n    }\n\n    if (currentCharacteristic.length < precision) {\n        let missingZeros = precision - currentCharacteristic.length;\n        for (let i = 0; i < missingZeros; i++) {\n            result = `0${result}`;\n        }\n    }\n\n    return result.toString();\n}\n\n/**\n * Return the indexes where are the group separations after splitting\n * `totalLength` in group of `groupSize` size.\n * Important: we start grouping from the right hand side.\n *\n * @param {number} totalLength - total length of the characteristic to split\n * @param {number} groupSize - length of each group\n * @return {[number]}\n */\nfunction indexesOfGroupSpaces(totalLength, groupSize) {\n    let result = [];\n    let counter = 0;\n    for (let i = totalLength; i > 0; i--) {\n        if (counter === groupSize) {\n            result.unshift(i);\n            counter = 0;\n        }\n        counter++;\n    }\n\n    return result;\n}\n\n/**\n * Replace the decimal separator with DECIMALSEPARATOR and insert thousand\n * separators.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {boolean} thousandSeparated - `true` if the characteristic must be separated\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @return {string}\n */\nfunction replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator) {\n    let delimiters = state.currentDelimiters();\n    let thousandSeparator = delimiters.thousands;\n    decimalSeparator = decimalSeparator || delimiters.decimal;\n    let thousandsSize = delimiters.thousandsSize || 3;\n\n    let result = output.toString();\n    let characteristic = result.split(\".\")[0];\n    let mantissa = result.split(\".\")[1];\n\n    if (thousandSeparated) {\n        if (value < 0) {\n            // Remove the minus sign\n            characteristic = characteristic.slice(1);\n        }\n\n        let indexesToInsertThousandDelimiters = indexesOfGroupSpaces(characteristic.length, thousandsSize);\n        indexesToInsertThousandDelimiters.forEach((position, index) => {\n            characteristic = characteristic.slice(0, position + index) + thousandSeparator + characteristic.slice(position + index);\n        });\n\n        if (value < 0) {\n            // Add back the minus sign\n            characteristic = `-${characteristic}`;\n        }\n    }\n\n    if (!mantissa) {\n        result = characteristic;\n    } else {\n        result = characteristic + decimalSeparator + mantissa;\n    }\n    return result;\n}\n\n/**\n * Insert the provided ABBREVIATION at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} abbreviation - abbreviation to append\n * @return {*}\n */\nfunction insertAbbreviation(output, abbreviation) {\n    return output + abbreviation;\n}\n\n/**\n * Insert the positive/negative sign according to the NEGATIVE flag.\n * If the value is negative but still output as 0, the negative sign is removed.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {number} value - number being currently formatted\n * @param {string} negative - flag for the negative form (\"sign\" or \"parenthesis\")\n * @return {*}\n */\nfunction insertSign(output, value, negative) {\n    if (value === 0) {\n        return output;\n    }\n\n    if (+output === 0) {\n        return output.replace(\"-\", \"\");\n    }\n\n    if (value > 0) {\n        return `+${output}`;\n    }\n\n    if (negative === \"sign\") {\n        return output;\n    }\n\n    return `(${output.replace(\"-\", \"\")})`;\n}\n\n/**\n * Insert the provided PREFIX at the start of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} prefix - abbreviation to prepend\n * @return {*}\n */\nfunction insertPrefix(output, prefix) {\n    return prefix + output;\n}\n\n/**\n * Insert the provided POSTFIX at the end of OUTPUT.\n *\n * @param {string} output - output being build in the process of formatting\n * @param {string} postfix - abbreviation to append\n * @return {*}\n */\nfunction insertPostfix(output, postfix) {\n    return output + postfix;\n}\n\n/**\n * Format the provided INSTANCE as a number using the PROVIDEDFORMAT,\n * and the STATE.\n * This is the key method of the framework!\n *\n * @param {Numbro} instance - numbro instance to format\n * @param {{}} [providedFormat] - specification for formatting\n * @param {globalState} state - shared state of the library\n * @param {string} decimalSeparator - string to use as decimal separator\n * @param {{}} defaults - Set of default values used for formatting\n * @return {string}\n */\nfunction formatNumber({instance, providedFormat, state = globalState, decimalSeparator, defaults = state.currentDefaults()}) {\n    let value = instance._value;\n\n    if (value === 0 && state.hasZeroFormat()) {\n        return state.getZeroFormat();\n    }\n\n    if (!isFinite(value)) {\n        return value.toString();\n    }\n\n    let options = Object.assign({}, defaultOptions, defaults, providedFormat);\n\n    let totalLength = options.totalLength;\n    let characteristicPrecision = totalLength ? 0 : options.characteristic;\n    let optionalCharacteristic = options.optionalCharacteristic;\n    let forceAverage = options.forceAverage;\n    let average = !!totalLength || !!forceAverage || options.average;\n\n    // default when averaging is to chop off decimals\n    let mantissaPrecision = totalLength ? -1 : (average && providedFormat.mantissa === undefined ? 0 : options.mantissa);\n    let optionalMantissa = totalLength ? false : (providedFormat.optionalMantissa === undefined ? mantissaPrecision === -1 : options.optionalMantissa);\n    let trimMantissa = options.trimMantissa;\n    let thousandSeparated = options.thousandSeparated;\n    let spaceSeparated = options.spaceSeparated;\n    let negative = options.negative;\n    let forceSign = options.forceSign;\n    let exponential = options.exponential;\n\n    let abbreviation = \"\";\n\n    if (average) {\n        let data = computeAverage({\n            value,\n            forceAverage,\n            abbreviations: state.currentAbbreviations(),\n            spaceSeparated: spaceSeparated,\n            totalLength\n        });\n\n        value = data.value;\n        abbreviation += data.abbreviation;\n\n        if (totalLength) {\n            mantissaPrecision = data.mantissaPrecision;\n        }\n    }\n\n    if (exponential) {\n        let data = computeExponential({\n            value,\n            characteristicPrecision\n        });\n\n        value = data.value;\n        abbreviation = data.abbreviation + abbreviation;\n    }\n\n    let output = setMantissaPrecision(value.toString(), value, optionalMantissa, mantissaPrecision, trimMantissa);\n    output = setCharacteristicPrecision(output, value, optionalCharacteristic, characteristicPrecision);\n    output = replaceDelimiters(output, value, thousandSeparated, state, decimalSeparator);\n\n    if (average || exponential) {\n        output = insertAbbreviation(output, abbreviation);\n    }\n\n    if (forceSign || value < 0) {\n        output = insertSign(output, value, negative);\n    }\n\n    return output;\n}\n\n/**\n * If FORMAT is non-null and not just an output, return FORMAT.\n * Return DEFAULTFORMAT otherwise.\n *\n * @param providedFormat\n * @param defaultFormat\n */\nfunction formatOrDefault(providedFormat, defaultFormat) {\n    if (!providedFormat) {\n        return defaultFormat;\n    }\n\n    let keys = Object.keys(providedFormat);\n    if (keys.length === 1 && keys[0] === \"output\") {\n        return defaultFormat;\n    }\n\n    return providedFormat;\n}\n\nmodule.exports = (numbro) => ({\n    format: (...args) => format(...args, numbro),\n    getByteUnit: (...args) => getByteUnit(...args, numbro),\n    getBinaryByteUnit: (...args) => getBinaryByteUnit(...args, numbro),\n    getDecimalByteUnit: (...args) => getDecimalByteUnit(...args, numbro),\n    formatOrDefault\n});\n", "/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst enUS = require(\"./en-US\");\nconst validating = require(\"./validating\");\nconst parsing = require(\"./parsing\");\n\nlet state = {};\n\nlet currentLanguageTag = undefined;\nlet languages = {};\n\nlet zeroFormat = null;\n\nlet globalDefaults = {};\n\nfunction chooseLanguage(tag) { currentLanguageTag = tag; }\n\nfunction currentLanguageData() { return languages[currentLanguageTag]; }\n\n/**\n * Return all the register languages\n *\n * @return {{}}\n */\nstate.languages = () => Object.assign({}, languages);\n\n//\n// Current language accessors\n//\n\n/**\n * Return the current language tag\n *\n * @return {string}\n */\nstate.currentLanguage = () => currentLanguageTag;\n\n/**\n * Return the current language currency data\n *\n * @return {{}}\n */\nstate.currentCurrency = () => currentLanguageData().currency;\n\n/**\n * Return the current language abbreviations data\n *\n * @return {{}}\n */\nstate.currentAbbreviations = () => currentLanguageData().abbreviations;\n\n/**\n * Return the current language delimiters data\n *\n * @return {{}}\n */\nstate.currentDelimiters = () => currentLanguageData().delimiters;\n\n/**\n * Return the current language ordinal function\n *\n * @return {function}\n */\nstate.currentOrdinal = () => currentLanguageData().ordinal;\n\n//\n// Defaults\n//\n\n/**\n * Return the current formatting defaults.\n * Use first uses the current language default, then fallback to the globally defined defaults.\n *\n * @return {{}}\n */\nstate.currentDefaults = () => Object.assign({}, currentLanguageData().defaults, globalDefaults);\n\n/**\n * Return the ordinal default-format.\n * Use first uses the current language ordinal default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentOrdinalDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().ordinalFormat);\n\n/**\n * Return the byte default-format.\n * Use first uses the current language byte default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentByteDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().byteFormat);\n\n/**\n * Return the percentage default-format.\n * Use first uses the current language percentage default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentPercentageDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().percentageFormat);\n\n/**\n * Return the currency default-format.\n * Use first uses the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentCurrencyDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().currencyFormat);\n\n/**\n * Return the time default-format.\n * Use first uses the current language currency default, then fallback to the regular defaults.\n *\n * @return {{}}\n */\nstate.currentTimeDefaultFormat = () => Object.assign({}, state.currentDefaults(), currentLanguageData().timeFormat);\n\n/**\n * Set the global formatting defaults.\n *\n * @param {{}|string} format - formatting options to use as defaults\n */\nstate.setDefaults = (format) => {\n    format = parsing.parseFormat(format);\n    if (validating.validateFormat(format)) {\n        globalDefaults = format;\n    }\n};\n\n//\n// Zero format\n//\n\n/**\n * Return the format string for 0.\n *\n * @return {string}\n */\nstate.getZeroFormat = () => zeroFormat;\n\n/**\n * Set a STRING to output when the value is 0.\n *\n * @param {{}|string} string - string to set\n */\nstate.setZeroFormat = (string) => zeroFormat = typeof(string) === \"string\" ? string : null;\n\n/**\n * Return true if a format for 0 has been set already.\n *\n * @return {boolean}\n */\nstate.hasZeroFormat = () => zeroFormat !== null;\n\n//\n// Getters/Setters\n//\n\n/**\n * Return the language data for the provided TAG.\n * Return the current language data if no tag is provided.\n *\n * Throw an error if the tag doesn't match any registered language.\n *\n * @param {string} [tag] - language tag of a registered language\n * @return {{}}\n */\nstate.languageData = (tag) => {\n    if (tag) {\n        if (languages[tag]) {\n            return languages[tag];\n        }\n        throw new Error(`Unknown tag \"${tag}\"`);\n    }\n\n    return currentLanguageData();\n};\n\n/**\n * Register the provided DATA as a language if and only if the data is valid.\n * If the data is not valid, an error is thrown.\n *\n * When USELANGUAGE is true, the registered language is then used.\n *\n * @param {{}} data - language data to register\n * @param {boolean} [useLanguage] - `true` if the provided data should become the current language\n */\nstate.registerLanguage = (data, useLanguage = false) => {\n    if (!validating.validateLanguage(data)) {\n        throw new Error(\"Invalid language data\");\n    }\n\n    languages[data.languageTag] = data;\n\n    if (useLanguage) {\n        chooseLanguage(data.languageTag);\n    }\n};\n\n/**\n * Set the current language according to TAG.\n * If TAG doesn't match a registered language, another language matching\n * the \"language\" part of the tag (according to BCP47: https://tools.ietf.org/rfc/bcp/bcp47.txt).\n * If none, the FALLBACKTAG is used. If the FALLBACKTAG doesn't match a register language,\n * `en-US` is finally used.\n *\n * @param tag\n * @param fallbackTag\n */\nstate.setLanguage = (tag, fallbackTag = enUS.languageTag) => {\n    if (!languages[tag]) {\n        let suffix = tag.split(\"-\")[0];\n\n        let matchingLanguageTag = Object.keys(languages).find(each => {\n            return each.split(\"-\")[0] === suffix;\n        });\n\n        if (!languages[matchingLanguageTag]) {\n            chooseLanguage(fallbackTag);\n            return;\n        }\n\n        chooseLanguage(matchingLanguageTag);\n        return;\n    }\n\n    chooseLanguage(tag);\n};\n\nstate.registerLanguage(enUS);\ncurrentLanguageTag = enUS.languageTag;\n\nmodule.exports = state;\n", "/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Load languages matching TAGS. Silently pass over the failing load.\n *\n * We assume here that we are in a node environment, so we don't check for it.\n * @param {[String]} tags - list of tags to load\n * @param {Numbro} numbro - the numbro singleton\n */\nfunction loadLanguagesInNode(tags, numbro) {\n    tags.forEach((tag) => {\n        let data = undefined;\n        try {\n            data = require(`../languages/${tag}`);\n        } catch (e) {\n            console.error(`Unable to load \"${tag}\". No matching language file found.`); // eslint-disable-line no-console\n        }\n\n        if (data) {\n            numbro.registerLanguage(data);\n        }\n    });\n}\n\nmodule.exports = (numbro) => ({\n    loadLanguagesInNode: (tags) => loadLanguagesInNode(tags, numbro)\n});\n", "/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst BigNumber = require(\"bignumber.js\");\n\n/**\n * Add a number or a numbro to N.\n *\n * @param {Numbro} n - augend\n * @param {number|Numbro} other - addend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction add(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.plus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Subtract a number or a numbro from N.\n *\n * @param {Numbro} n - minuend\n * @param {number|Numbro} other - subtrahend\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction subtract(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.minus(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Multiply N by a number or a numbro.\n *\n * @param {Numbro} n - multiplicand\n * @param {number|Numbro} other - multiplier\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction multiply(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.times(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Divide N by a number or a numbro.\n *\n * @param {Numbro} n - dividend\n * @param {number|Numbro} other - divisor\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction divide(n, other, numbro) {\n    let value = new BigNumber(n._value);\n    let otherValue = other;\n\n    if (numbro.isNumbro(other)) {\n        otherValue = other._value;\n    }\n\n    otherValue = new BigNumber(otherValue);\n\n    n._value = value.dividedBy(otherValue).toNumber();\n    return n;\n}\n\n/**\n * Set N to the OTHER (or the value of OTHER when it's a numbro instance).\n *\n * @param {Numbro} n - numbro instance to mutate\n * @param {number|Numbro} other - new value to assign to N\n * @param {numbro} numbro - numbro singleton\n * @return {Numbro} n\n */\nfunction set (n, other, numbro) {\n    let value = other;\n\n    if (numbro.isNumbro(other)) {\n        value = other._value;\n    }\n\n    n._value = value;\n    return n;\n}\n\n/**\n * Return the distance between N and OTHER.\n *\n * @param {Numbro} n\n * @param {number|Numbro} other\n * @param {numbro} numbro - numbro singleton\n * @return {number}\n */\nfunction difference(n, other, numbro) {\n    let clone = numbro(n._value);\n    subtract(clone, other, numbro);\n\n    return Math.abs(clone._value);\n}\n\nmodule.exports = numbro => ({\n    add: (n, other) => add(n, other, numbro),\n    subtract: (n, other) => subtract(n, other, numbro),\n    multiply: (n, other) => multiply(n, other, numbro),\n    divide: (n, other) => divide(n, other, numbro),\n    set: (n, other) => set(n, other, numbro),\n    difference: (n, other) => difference(n, other, numbro)\n});\n", "/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst VERSION = \"2.1.2\";\n\nconst globalState = require(\"./globalState\");\nconst validator = require(\"./validating\");\nconst loader = require(\"./loading\")(numbro);\nconst unformatter = require(\"./unformatting\");\nlet formatter = require(\"./formatting\")(numbro);\nlet manipulate = require(\"./manipulating\")(numbro);\nconst parsing = require(\"./parsing\");\n\nclass Numbro {\n    constructor(number) {\n        this._value = number;\n    }\n\n    clone() { return numbro(this._value); }\n\n    format(format = {}) { return formatter.format(this, format); }\n\n    formatCurrency(format) {\n        if (typeof format === \"string\") {\n            format = parsing.parseFormat(format);\n        }\n        format = formatter.formatOrDefault(format, globalState.currentCurrencyDefaultFormat());\n        format.output = \"currency\";\n        return formatter.format(this, format);\n    }\n\n    formatTime(format = {}) {\n        format.output = \"time\";\n        return formatter.format(this, format);\n    }\n\n    binaryByteUnits() { return formatter.getBinaryByteUnit(this);}\n\n    decimalByteUnits() { return formatter.getDecimalByteUnit(this);}\n\n    byteUnits() { return formatter.getByteUnit(this);}\n\n    difference(other) { return manipulate.difference(this, other); }\n\n    add(other) { return manipulate.add(this, other); }\n\n    subtract(other) { return manipulate.subtract(this, other); }\n\n    multiply(other) { return manipulate.multiply(this, other); }\n\n    divide(other) { return manipulate.divide(this, other); }\n\n    set(input) { return manipulate.set(this, normalizeInput(input)); }\n\n    value() { return this._value; }\n\n    valueOf() { return this._value; }\n}\n\n/**\n * Make its best to convert input into a number.\n *\n * @param {numbro|string|number} input - Input to convert\n * @return {number}\n */\nfunction normalizeInput(input) {\n    let result = input;\n    if (numbro.isNumbro(input)) {\n        result = input._value;\n    } else if (typeof input === \"string\") {\n        result = numbro.unformat(input);\n    } else if (isNaN(input)) {\n        result = NaN;\n    }\n\n    return result;\n}\n\nfunction numbro(input) {\n    return new Numbro(normalizeInput(input));\n}\n\nnumbro.version = VERSION;\n\nnumbro.isNumbro = function(object) {\n    return object instanceof Numbro;\n};\n\n//\n// `numbro` static methods\n//\n\nnumbro.language = globalState.currentLanguage;\nnumbro.registerLanguage = globalState.registerLanguage;\nnumbro.setLanguage = globalState.setLanguage;\nnumbro.languages = globalState.languages;\nnumbro.languageData = globalState.languageData;\nnumbro.zeroFormat = globalState.setZeroFormat;\nnumbro.defaultFormat = globalState.currentDefaults;\nnumbro.setDefaults = globalState.setDefaults;\nnumbro.defaultCurrencyFormat = globalState.currentCurrencyDefaultFormat;\nnumbro.validate = validator.validate;\nnumbro.loadLanguagesInNode = loader.loadLanguagesInNode;\nnumbro.unformat = unformatter.unformat;\n\nmodule.exports = numbro;\n", "/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n/**\n * Parse the format STRING looking for a prefix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePrefix(string, result) {\n    let match = string.match(/^{([^}]*)}/);\n    if (match) {\n        result.prefix = match[1];\n        return string.slice(match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for a postfix. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parsePostfix(string, result) {\n    let match = string.match(/{([^}]*)}$/);\n    if (match) {\n        result.postfix = match[1];\n\n        return string.slice(0, -match[0].length);\n    }\n\n    return string;\n}\n\n/**\n * Parse the format STRING looking for the output value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseOutput(string, result) {\n    if (string.indexOf(\"$\") !== -1) {\n        result.output = \"currency\";\n        return;\n    }\n\n    if (string.indexOf(\"%\") !== -1) {\n        result.output = \"percent\";\n        return;\n    }\n\n    if (string.indexOf(\"bd\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"general\";\n        return;\n    }\n\n    if (string.indexOf(\"b\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"binary\";\n        return;\n\n    }\n\n    if (string.indexOf(\"d\") !== -1) {\n        result.output = \"byte\";\n        result.base = \"decimal\";\n        return;\n\n    }\n\n    if (string.indexOf(\":\") !== -1) {\n        result.output = \"time\";\n        return;\n    }\n\n    if (string.indexOf(\"o\") !== -1) {\n        result.output = \"ordinal\";\n    }\n}\n\n/**\n * Parse the format STRING looking for the thousand separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseThousandSeparated(string, result) {\n    if (string.indexOf(\",\") !== -1) {\n        result.thousandSeparated = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for the space separated value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseSpaceSeparated(string, result) {\n    if (string.indexOf(\" \") !== -1) {\n        result.spaceSeparated = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for the total length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseTotalLength(string, result) {\n    let match = string.match(/[1-9]+[0-9]*/);\n\n    if (match) {\n        result.totalLength = +match[0];\n    }\n}\n\n/**\n * Parse the format STRING looking for the characteristic length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseCharacteristic(string, result) {\n    let characteristic = string.split(\".\")[0];\n    let match = characteristic.match(/0+/);\n    if (match) {\n        result.characteristic = match[0].length;\n    }\n}\n\n/**\n * Parse the format STRING looking for the mantissa length. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseMantissa(string, result) {\n    let mantissa = string.split(\".\")[1];\n    if (mantissa) {\n        let match = mantissa.match(/0+/);\n        if (match) {\n            result.mantissa = match[0].length;\n        }\n    }\n}\n\n/**\n * Parse the format STRING looking for the average value. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseAverage(string, result) {\n    if (string.indexOf(\"a\") !== -1) {\n        result.average = true;\n    }\n}\n\n/**\n * Parse the format STRING looking for a forced average precision. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseForceAverage(string, result) {\n    if (string.indexOf(\"K\") !== -1) {\n        result.forceAverage = \"thousand\";\n    } else if (string.indexOf(\"M\") !== -1) {\n        result.forceAverage = \"million\";\n    } else if (string.indexOf(\"B\") !== -1) {\n        result.forceAverage = \"billion\";\n    } else if (string.indexOf(\"T\") !== -1) {\n        result.forceAverage = \"trillion\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the mantissa is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalMantissa(string, result) {\n    if (string.match(/\\[\\.]/)) {\n        result.optionalMantissa = true;\n    } else if (string.match(/\\./)) {\n        result.optionalMantissa = false;\n    }\n}\n\n/**\n * Parse the format STRING finding if the characteristic is optional. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseOptionalCharacteristic(string, result) {\n    if (string.indexOf(\".\") !== -1) {\n        let characteristic = string.split(\".\")[0];\n        result.optionalCharacteristic = characteristic.indexOf(\"0\") === -1;\n    }\n}\n\n/**\n * Parse the format STRING looking for the negative format. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {string} - format\n */\nfunction parseNegative(string, result) {\n    if (string.match(/^\\+?\\([^)]*\\)$/)) {\n        result.negative = \"parenthesis\";\n    }\n    if (string.match(/^\\+?-/)) {\n        result.negative = \"sign\";\n    }\n}\n\n/**\n * Parse the format STRING finding if the sign is mandatory. Append it to RESULT when found.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n */\nfunction parseForceSign(string, result) {\n    if (string.match(/^\\+/)) {\n        result.forceSign = true;\n    }\n}\n\n/**\n * Parse the format STRING and accumulating the values ie RESULT.\n *\n * @param {string} string - format\n * @param {NumbroFormat} result - Result accumulator\n * @return {NumbroFormat} - format\n */\nfunction parseFormat(string, result = {}) {\n    if (typeof string !== \"string\") {\n        return string;\n    }\n\n    string = parsePrefix(string, result);\n    string = parsePostfix(string, result);\n    parseOutput(string, result);\n    parseTotalLength(string, result);\n    parseCharacteristic(string, result);\n    parseOptionalCharacteristic(string, result);\n    parseAverage(string, result);\n    parseForceAverage(string, result);\n    parseMantissa(string, result);\n    parseOptionalMantissa(string, result);\n    parseThousandSeparated(string, result);\n    parseSpaceSeparated(string, result);\n    parseNegative(string, result);\n    parseForceSign(string, result);\n\n    return result;\n}\n\nmodule.exports = {\n    parseFormat\n};\n", "/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nconst allSuffixes = [\n    {key: \"ZiB\", factor: Math.pow(1024, 7)},\n    {key: \"ZB\", factor: Math.pow(1000, 7)},\n    {key: \"YiB\", factor: Math.pow(1024, 8)},\n    {key: \"YB\", factor: Math.pow(1000, 8)},\n    {key: \"TiB\", factor: Math.pow(1024, 4)},\n    {key: \"TB\", factor: Math.pow(1000, 4)},\n    {key: \"PiB\", factor: Math.pow(1024, 5)},\n    {key: \"PB\", factor: Math.pow(1000, 5)},\n    {key: \"MiB\", factor: Math.pow(1024, 2)},\n    {key: \"MB\", factor: Math.pow(1000, 2)},\n    {key: \"KiB\", factor: Math.pow(1024, 1)},\n    {key: \"KB\", factor: Math.pow(1000, 1)},\n    {key: \"GiB\", factor: Math.pow(1024, 3)},\n    {key: \"GB\", factor: Math.pow(1000, 3)},\n    {key: \"EiB\", factor: Math.pow(1024, 6)},\n    {key: \"EB\", factor: Math.pow(1000, 6)},\n    {key: \"B\", factor: 1}\n];\n\n/**\n * Generate a RegExp where S get all RegExp specific characters escaped.\n *\n * @param {string} s - string representing a RegExp\n * @return {string}\n */\nfunction escapeRegExp(s) {\n    return s.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\n\n/**\n * Recursively compute the unformatted value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction computeUnformattedValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (!isNaN(+inputString)) {\n        return +inputString;\n    }\n\n    let stripped = \"\";\n    // Negative\n\n    let newInput = inputString.replace(/(^[^(]*)\\((.*)\\)([^)]*$)/, \"$1$2$3\");\n\n    if (newInput !== inputString) {\n        return -1 * computeUnformattedValue(newInput, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n    }\n\n    // Byte\n\n    for (let i = 0; i < allSuffixes.length; i++) {\n        let suffix = allSuffixes[i];\n        stripped = inputString.replace(suffix.key, \"\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * suffix.factor;\n        }\n    }\n\n    // Percent\n\n    stripped = inputString.replace(\"%\", \"\");\n\n    if (stripped !== inputString) {\n        return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) / 100;\n    }\n\n    // Ordinal\n\n    let possibleOrdinalValue = parseFloat(inputString);\n\n    if (isNaN(possibleOrdinalValue)) {\n        return undefined;\n    }\n\n    let ordinalString = ordinal(possibleOrdinalValue);\n    if (ordinalString && ordinalString !== \".\") { // if ordinal is \".\" it will be caught next round in the +inputString\n        stripped = inputString.replace(new RegExp(`${escapeRegExp(ordinalString)}$`), \"\");\n\n        if (stripped !== inputString) {\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    }\n\n    // Average\n\n    let inversedAbbreviations = {};\n    Object.keys(abbreviations).forEach((key) => {\n        inversedAbbreviations[abbreviations[key]] = key;\n    });\n\n    let abbreviationValues = Object.keys(inversedAbbreviations).sort().reverse();\n    let numberOfAbbreviations = abbreviationValues.length;\n\n    for (let i = 0; i < numberOfAbbreviations; i++) {\n        let value = abbreviationValues[i];\n        let key = inversedAbbreviations[value];\n\n        stripped = inputString.replace(value, \"\");\n        if (stripped !== inputString) {\n            let factor = undefined;\n            switch (key) { // eslint-disable-line default-case\n                case \"thousand\":\n                    factor = Math.pow(10, 3);\n                    break;\n                case \"million\":\n                    factor = Math.pow(10, 6);\n                    break;\n                case \"billion\":\n                    factor = Math.pow(10, 9);\n                    break;\n                case \"trillion\":\n                    factor = Math.pow(10, 12);\n                    break;\n            }\n            return computeUnformattedValue(stripped, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format) * factor;\n        }\n    }\n\n    return undefined;\n}\n\n/**\n * Removes in one pass all formatting symbols.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @return {string}\n */\nfunction removeFormattingSymbols(inputString, delimiters, currencySymbol = \"\") {\n    // Currency\n\n    let stripped = inputString.replace(currencySymbol, \"\");\n\n    // Thousand separators\n\n    stripped = stripped.replace(new RegExp(`([0-9])${escapeRegExp(delimiters.thousands)}([0-9])`, \"g\"), \"$1$2\");\n\n    // Decimal\n\n    stripped = stripped.replace(delimiters.decimal, \".\");\n\n    return stripped;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {*} delimiters - Delimiters used to generate the inputString\n * @param {string} [currencySymbol] - symbol used for currency while generating the inputString\n * @param {function} ordinal - function used to generate an ordinal out of a number\n * @param {string} zeroFormat - string representing zero\n * @param {*} abbreviations - abbreviations used while generating the inputString\n * @param {NumbroFormat} format - format used while generating the inputString\n * @return {number|undefined}\n */\nfunction unformatValue(inputString, delimiters, currencySymbol = \"\", ordinal, zeroFormat, abbreviations, format) {\n    if (inputString === \"\") {\n        return undefined;\n    }\n\n    // Zero Format\n\n    if (inputString === zeroFormat) {\n        return 0;\n    }\n\n    let value = removeFormattingSymbols(inputString, delimiters, currencySymbol);\n    return computeUnformattedValue(value, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n}\n\n/**\n * Check if the INPUTSTRING represents a time.\n *\n * @param {string} inputString - string to check\n * @param {*} delimiters - Delimiters used while generating the inputString\n * @return {boolean}\n */\nfunction matchesTime(inputString, delimiters) {\n    let separators = inputString.indexOf(\":\") && delimiters.thousands !== \":\";\n\n    if (!separators) {\n        return false;\n    }\n\n    let segments = inputString.split(\":\");\n    if (segments.length !== 3) {\n        return false;\n    }\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return !isNaN(hours) && !isNaN(minutes) && !isNaN(seconds);\n}\n\n/**\n * Unformat a numbro-generated string representing a time to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @return {number}\n */\nfunction unformatTime(inputString) {\n    let segments = inputString.split(\":\");\n\n    let hours = +segments[0];\n    let minutes = +segments[1];\n    let seconds = +segments[2];\n\n    return seconds + 60 * minutes + 3600 * hours;\n}\n\n/**\n * Unformat a numbro-generated string to retrieve the original value.\n *\n * @param {string} inputString - string to unformat\n * @param {NumbroFormat} format - format used  while generating the inputString\n * @return {number}\n */\nfunction unformat(inputString, format) {\n    // Avoid circular references\n    const globalState = require(\"./globalState\");\n\n    let delimiters = globalState.currentDelimiters();\n    let currencySymbol = globalState.currentCurrency().symbol;\n    let ordinal = globalState.currentOrdinal();\n    let zeroFormat = globalState.getZeroFormat();\n    let abbreviations = globalState.currentAbbreviations();\n\n    let value = undefined;\n\n    if (typeof inputString === \"string\") {\n        if (matchesTime(inputString, delimiters)) {\n            value = unformatTime(inputString);\n        } else {\n            value = unformatValue(inputString, delimiters, currencySymbol, ordinal, zeroFormat, abbreviations, format);\n        }\n    } else if (typeof inputString === \"number\") {\n        value = inputString;\n    } else {\n        return undefined;\n    }\n\n    if (value === undefined) {\n        return undefined;\n    }\n\n    return value;\n}\n\nmodule.exports = {\n    unformat\n};\n", "/*!\n * Copyright (c) 2017 Benjamin Van Ryseghem<benjamin@vanryseghem.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nlet unformatter = require(\"./unformatting\");\n\n// Simplified regexp supporting only `language`, `script`, and `region`\nconst bcp47RegExp = /^[a-z]{2,3}(-[a-zA-Z]{4})?(-([A-Z]{2}|[0-9]{3}))?$/;\n\nconst validOutputValues = [\n    \"currency\",\n    \"percent\",\n    \"byte\",\n    \"time\",\n    \"ordinal\",\n    \"number\"\n];\n\nconst validForceAverageValues = [\n    \"trillion\",\n    \"billion\",\n    \"million\",\n    \"thousand\"\n];\n\nconst validCurrencyPosition = [\n    \"prefix\",\n    \"infix\",\n    \"postfix\"\n];\n\nconst validNegativeValues = [\n    \"sign\",\n    \"parenthesis\"\n];\n\nconst validMandatoryAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: {\n            type: \"string\",\n            mandatory: true\n        },\n        million: {\n            type: \"string\",\n            mandatory: true\n        },\n        billion: {\n            type: \"string\",\n            mandatory: true\n        },\n        trillion: {\n            type: \"string\",\n            mandatory: true\n        }\n    },\n    mandatory: true\n};\n\nconst validAbbreviations = {\n    type: \"object\",\n    children: {\n        thousand: \"string\",\n        million: \"string\",\n        billion: \"string\",\n        trillion: \"string\"\n    }\n};\n\nconst validBaseValues = [\n    \"decimal\",\n    \"binary\",\n    \"general\"\n];\n\nconst validFormat = {\n    output: {\n        type: \"string\",\n        validValues: validOutputValues\n    },\n    base: {\n        type: \"string\",\n        validValues: validBaseValues,\n        restriction: (number, format) => format.output === \"byte\",\n        message: \"`base` must be provided only when the output is `byte`\",\n        mandatory: (format) => format.output === \"byte\"\n    },\n    characteristic: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    prefix: \"string\",\n    postfix: \"string\",\n    forceAverage: {\n        type: \"string\",\n        validValues: validForceAverageValues\n    },\n    average: \"boolean\",\n    currencyPosition: {\n        type: \"string\",\n        validValues: validCurrencyPosition\n    },\n    currencySymbol: \"string\",\n    totalLength: {\n        type: \"number\",\n        restrictions: [\n            {\n                restriction: (number) => number >= 0,\n                message: \"value must be positive\"\n            },\n            {\n                restriction: (number, format) => !format.exponential,\n                message: \"`totalLength` is incompatible with `exponential`\"\n            }\n        ]\n    },\n    mantissa: {\n        type: \"number\",\n        restriction: (number) => number >= 0,\n        message: \"value must be positive\"\n    },\n    optionalMantissa: \"boolean\",\n    trimMantissa: \"boolean\",\n    optionalCharacteristic: \"boolean\",\n    thousandSeparated: \"boolean\",\n    spaceSeparated: \"boolean\",\n    abbreviations: validAbbreviations,\n    negative: {\n        type: \"string\",\n        validValues: validNegativeValues\n    },\n    forceSign: \"boolean\",\n    exponential: {\n        type: \"boolean\"\n    },\n    prefixSymbol: {\n        type: \"boolean\",\n        restriction: (number, format) => format.output === \"percent\",\n        message: \"`prefixSymbol` can be provided only when the output is `percent`\"\n    }\n};\n\nconst validLanguage = {\n    languageTag: {\n        type: \"string\",\n        mandatory: true,\n        restriction: (tag) => {\n            return tag.match(bcp47RegExp);\n        },\n        message: \"the language tag must follow the BCP 47 specification (see https://tools.ieft.org/html/bcp47)\"\n    },\n    delimiters: {\n        type: \"object\",\n        children: {\n            thousands: \"string\",\n            decimal: \"string\",\n            thousandsSize: \"number\"\n        },\n        mandatory: true\n    },\n    abbreviations: validMandatoryAbbreviations,\n    spaceSeparated: \"boolean\",\n    ordinal: {\n        type: \"function\",\n        mandatory: true\n    },\n    currency: {\n        type: \"object\",\n        children: {\n            symbol: \"string\",\n            position: \"string\",\n            code: \"string\"\n        },\n        mandatory: true\n    },\n    defaults: \"format\",\n    ordinalFormat: \"format\",\n    byteFormat: \"format\",\n    percentageFormat: \"format\",\n    currencyFormat: \"format\",\n    timeDefaults: \"format\",\n    formats: {\n        type: \"object\",\n        children: {\n            fourDigits: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimals: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithTwoDecimalsNoCurrency: {\n                type: \"format\",\n                mandatory: true\n            },\n            fullWithNoDecimals: {\n                type: \"format\",\n                mandatory: true\n            }\n        }\n    }\n};\n\n/**\n * Check the validity of the provided input and format.\n * The check is NOT lazy.\n *\n * @param {string|number|Numbro} input - input to check\n * @param {NumbroFormat} format - format to check\n * @return {boolean} True when everything is correct\n */\nfunction validate(input, format) {\n    let validInput = validateInput(input);\n    let isFormatValid = validateFormat(format);\n\n    return validInput && isFormatValid;\n}\n\n/**\n * Check the validity of the numbro input.\n *\n * @param {string|number|Numbro} input - input to check\n * @return {boolean} True when everything is correct\n */\nfunction validateInput(input) {\n    let value = unformatter.unformat(input);\n\n    return !!value;\n}\n\n/**\n * Check the validity of the provided format TOVALIDATE against SPEC.\n *\n * @param {NumbroFormat} toValidate - format to check\n * @param {*} spec - specification against which to check\n * @param {string} prefix - prefix use for error messages\n * @param {boolean} skipMandatoryCheck - `true` when the check for mandatory key must be skipped\n * @return {boolean} True when everything is correct\n */\nfunction validateSpec(toValidate, spec, prefix, skipMandatoryCheck = false) {\n    let results = Object.keys(toValidate).map((key) => {\n        if (!spec[key]) {\n            console.error(`${prefix} Invalid key: ${key}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        let value = toValidate[key];\n        let data = spec[key];\n\n        if (typeof data === \"string\") {\n            data = {type: data};\n        }\n\n        if (data.type === \"format\") { // all formats are partial (a.k.a will be merged with some default values) thus no need to check mandatory values\n            let valid = validateSpec(value, validFormat, `[Validate ${key}]`, true);\n\n            if (!valid) {\n                return false;\n            }\n        } else if (typeof value !== data.type) {\n            console.error(`${prefix} ${key} type mismatched: \"${data.type}\" expected, \"${typeof value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.restrictions && data.restrictions.length) {\n            let length = data.restrictions.length;\n            for (let i = 0; i < length; i++) {\n                let {restriction, message} = data.restrictions[i];\n                if (!restriction(value, toValidate)) {\n                    console.error(`${prefix} ${key} invalid value: ${message}`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n        }\n\n        if (data.restriction && !data.restriction(value, toValidate)) {\n            console.error(`${prefix} ${key} invalid value: ${data.message}`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.validValues && data.validValues.indexOf(value) === -1) {\n            console.error(`${prefix} ${key} invalid value: must be among ${JSON.stringify(data.validValues)}, \"${value}\" provided`); // eslint-disable-line no-console\n            return false;\n        }\n\n        if (data.children) {\n            let valid = validateSpec(value, data.children, `[Validate ${key}]`);\n\n            if (!valid) {\n                return false;\n            }\n        }\n\n        return true;\n    });\n\n    if (!skipMandatoryCheck) {\n        results.push(...Object.keys(spec).map((key) => {\n            let data = spec[key];\n            if (typeof data === \"string\") {\n                data = {type: data};\n            }\n\n            if (data.mandatory) {\n                let mandatory = data.mandatory;\n                if (typeof mandatory === \"function\") {\n                    mandatory = mandatory(toValidate);\n                }\n\n                if (mandatory && toValidate[key] === undefined) {\n                    console.error(`${prefix} Missing mandatory key \"${key}\"`); // eslint-disable-line no-console\n                    return false;\n                }\n            }\n\n            return true;\n        }));\n    }\n\n    return results.reduce((acc, current) => {\n        return acc && current;\n    }, true);\n}\n\n/**\n * Check the provided FORMAT.\n *\n * @param {NumbroFormat} format - format to check\n * @return {boolean}\n */\nfunction validateFormat(format) {\n    return validateSpec(format, validFormat, \"[Validate format]\");\n}\n\n/**\n * Check the provided LANGUAGE.\n *\n * @param {NumbroLanguage} language - language to check\n * @return {boolean}\n */\nfunction validateLanguage(language) {\n    return validateSpec(language, validLanguage, \"[Validate language]\");\n}\n\nmodule.exports = {\n    validate,\n    validateFormat,\n    validateInput,\n    validateLanguage\n};\n", "import { baseRenderer } from \"../baseRenderer/index.mjs\";\nimport { fastInnerHTML } from \"../../helpers/dom/element.mjs\";\nexport const RENDERER_TYPE = 'html';\n\n/**\n * @private\n * @param {Core} hotInstance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\nexport function htmlRenderer(hotInstance, TD, row, col, prop, value, cellProperties) {\n  baseRenderer.apply(this, [hotInstance, TD, row, col, prop, value, cellProperties]);\n  fastInnerHTML(TD, value === null || value === undefined ? '' : value, false);\n}\nhtmlRenderer.RENDERER_TYPE = RENDERER_TYPE;", "import { htmlRenderer } from \"../htmlRenderer/index.mjs\";\nimport { textRenderer } from \"../textRenderer/index.mjs\";\nimport EventManager from \"../../eventManager.mjs\";\nimport { addClass, hasClass } from \"../../helpers/dom/element.mjs\";\nimport { A11Y_HIDDEN } from \"../../helpers/a11y.mjs\";\nexport const RENDERER_TYPE = 'autocomplete';\n\n/**\n * Autocomplete renderer.\n *\n * @private\n * @param {Core} hotInstance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\nexport function autocompleteRenderer(hotInstance, TD, row, col, prop, value, cellProperties) {\n  const {\n    rootDocument\n  } = hotInstance;\n  const rendererFunc = cellProperties.allowHtml ? htmlRenderer : textRenderer;\n  const ARROW = rootDocument.createElement('DIV');\n  const isAriaEnabled = hotInstance.getSettings().ariaTags;\n  ARROW.className = 'htAutocompleteArrow';\n  if (isAriaEnabled) {\n    ARROW.setAttribute(...A11Y_HIDDEN());\n  }\n  ARROW.appendChild(rootDocument.createTextNode(String.fromCharCode(9660)));\n  rendererFunc.apply(this, [hotInstance, TD, row, col, prop, value, cellProperties]);\n  if (!TD.firstChild) {\n    // http://jsperf.com/empty-node-if-needed\n    // otherwise empty fields appear borderless in demo/renderers.html (IE)\n    TD.appendChild(rootDocument.createTextNode(String.fromCharCode(160))); // workaround for https://github.com/handsontable/handsontable/issues/1946\n    // this is faster than innerHTML. See: https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips\n  }\n\n  TD.insertBefore(ARROW, TD.firstChild);\n  addClass(TD, 'htAutocomplete');\n  if (!hotInstance.acArrowListener) {\n    const eventManager = new EventManager(hotInstance);\n\n    // not very elegant but easy and fast\n    hotInstance.acArrowListener = function (event) {\n      if (hasClass(event.target, 'htAutocompleteArrow')) {\n        hotInstance.view._wt.getSetting('onCellDblClick', null, hotInstance._createCellCoords(row, col), TD);\n      }\n    };\n    eventManager.addEventListener(hotInstance.rootElement, 'mousedown', hotInstance.acArrowListener);\n\n    // We need to unbind the listener after the table has been destroyed\n    hotInstance.addHookOnce('afterDestroy', () => {\n      eventManager.destroy();\n    });\n  }\n}\nautocompleteRenderer.RENDERER_TYPE = RENDERER_TYPE;", "import \"core-js/modules/es.array.push.js\";\nimport { baseRenderer } from \"../baseRenderer/index.mjs\";\nimport EventManager from \"../../eventManager.mjs\";\nimport { empty, addClass, setAttribute } from \"../../helpers/dom/element.mjs\";\nimport { isEmpty, stringify } from \"../../helpers/mixed.mjs\";\nimport { EDITOR_EDIT_GROUP as SHORTCUTS_GROUP_EDITOR } from \"../../shortcutContexts/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport { A11Y_CHECKBOX, A11Y_CHECKED, A11Y_LABEL } from \"../../helpers/a11y.mjs\";\nimport { CHECKBOX_CHECKED, CHECKBOX_UNCHECKED } from \"../../i18n/constants.mjs\";\nconst isListeningKeyDownEvent = new WeakMap();\nconst isCheckboxListenerAdded = new WeakMap();\nconst BAD_VALUE_CLASS = 'htBadValue';\nconst ATTR_ROW = 'data-row';\nconst ATTR_COLUMN = 'data-col';\nconst SHORTCUTS_GROUP = 'checkboxRenderer';\nexport const RENDERER_TYPE = 'checkbox';\nHooks.getSingleton().add('modifyAutoColumnSizeSeed', function (bundleSeed, cellMeta, cellValue) {\n  const {\n    label,\n    type,\n    row,\n    column,\n    prop\n  } = cellMeta;\n  if (type !== RENDERER_TYPE) {\n    return;\n  }\n  if (label) {\n    const {\n      value: labelValue,\n      property: labelProperty\n    } = label;\n    let labelText = cellValue;\n    if (labelValue) {\n      labelText = typeof labelValue === 'function' ? labelValue(row, column, prop, cellValue) : labelValue;\n    } else if (labelProperty) {\n      const labelData = this.getDataAtRowProp(row, labelProperty);\n      labelText = labelData !== null ? labelData : cellValue;\n    }\n    bundleSeed = labelText;\n  }\n  return bundleSeed;\n});\n/**\n * Checkbox renderer.\n *\n * @private\n * @param {Core} hotInstance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\nexport function checkboxRenderer(hotInstance, TD, row, col, prop, value, cellProperties) {\n  const {\n    rootDocument\n  } = hotInstance;\n  const ariaEnabled = hotInstance.getSettings().ariaTags;\n  baseRenderer.apply(this, [hotInstance, TD, row, col, prop, value, cellProperties]);\n  registerEvents(hotInstance);\n  let input = createInput(rootDocument);\n  const labelOptions = cellProperties.label;\n  let badValue = false;\n  if (typeof cellProperties.checkedTemplate === 'undefined') {\n    cellProperties.checkedTemplate = true;\n  }\n  if (typeof cellProperties.uncheckedTemplate === 'undefined') {\n    cellProperties.uncheckedTemplate = false;\n  }\n  empty(TD); // TODO identify under what circumstances this line can be removed\n\n  if (value === cellProperties.checkedTemplate || stringify(value).toLocaleLowerCase(cellProperties.locale) === stringify(cellProperties.checkedTemplate).toLocaleLowerCase(cellProperties.locale)) {\n    input.checked = true;\n  } else if (value === cellProperties.uncheckedTemplate || stringify(value).toLocaleLowerCase(cellProperties.locale) === stringify(cellProperties.uncheckedTemplate).toLocaleLowerCase(cellProperties.locale)) {\n    input.checked = false;\n  } else if (isEmpty(value)) {\n    // default value\n    addClass(input, 'noValue');\n  } else {\n    input.style.display = 'none';\n    addClass(input, BAD_VALUE_CLASS);\n    badValue = true;\n  }\n  setAttribute(input, [[ATTR_ROW, row], [ATTR_COLUMN, col]]);\n  if (ariaEnabled) {\n    setAttribute(input, [A11Y_LABEL(input.checked ? hotInstance.getTranslatedPhrase(CHECKBOX_CHECKED) : hotInstance.getTranslatedPhrase(CHECKBOX_UNCHECKED)), A11Y_CHECKED(input.checked), A11Y_CHECKBOX()]);\n  }\n  if (!badValue && labelOptions) {\n    let labelText = '';\n    if (labelOptions.value) {\n      labelText = typeof labelOptions.value === 'function' ? labelOptions.value.call(this, row, col, prop, value) : labelOptions.value;\n    } else if (labelOptions.property) {\n      const labelValue = hotInstance.getDataAtRowProp(row, labelOptions.property);\n      labelText = labelValue !== null ? labelValue : '';\n    }\n    const label = createLabel(rootDocument, labelText, labelOptions.separated !== true);\n    if (labelOptions.position === 'before') {\n      if (labelOptions.separated) {\n        TD.appendChild(label);\n        TD.appendChild(input);\n      } else {\n        label.appendChild(input);\n        input = label;\n      }\n    } else if (!labelOptions.position || labelOptions.position === 'after') {\n      if (labelOptions.separated) {\n        TD.appendChild(input);\n        TD.appendChild(label);\n      } else {\n        label.insertBefore(input, label.firstChild);\n        input = label;\n      }\n    }\n  }\n  if (!labelOptions || labelOptions && !labelOptions.separated) {\n    TD.appendChild(input);\n  }\n  if (badValue) {\n    TD.appendChild(rootDocument.createTextNode('#bad-value#'));\n  }\n  if (!isListeningKeyDownEvent.has(hotInstance)) {\n    isListeningKeyDownEvent.set(hotInstance, true);\n    registerShortcuts();\n  }\n\n  /**\n   * Register shortcuts responsible for toggling checkbox state.\n   *\n   * @private\n   */\n  function registerShortcuts() {\n    const shortcutManager = hotInstance.getShortcutManager();\n    const gridContext = shortcutManager.getContext('grid');\n    const config = {\n      group: SHORTCUTS_GROUP\n    };\n    gridContext.addShortcuts([{\n      keys: [['space']],\n      callback: () => {\n        changeSelectedCheckboxesState();\n        return !areSelectedCheckboxCells(); // False blocks next action associated with the keyboard shortcut.\n      }\n    }, {\n      keys: [['enter']],\n      callback: () => {\n        changeSelectedCheckboxesState();\n        return !areSelectedCheckboxCells(); // False blocks next action associated with the keyboard shortcut.\n      },\n\n      runOnlyIf: () => hotInstance.getSettings().enterBeginsEditing\n    }, {\n      keys: [['delete'], ['backspace']],\n      callback: () => {\n        changeSelectedCheckboxesState(true);\n        return !areSelectedCheckboxCells(); // False blocks next action associated with the keyboard shortcut.\n      },\n\n      relativeToGroup: SHORTCUTS_GROUP_EDITOR,\n      position: 'before'\n    }], config);\n  }\n\n  /**\n   * Change checkbox checked property.\n   *\n   * @private\n   * @param {boolean} [uncheckCheckbox=false] The new \"checked\" state for the checkbox elements.\n   */\n  function changeSelectedCheckboxesState() {\n    let uncheckCheckbox = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const selRange = hotInstance.getSelectedRange();\n    if (!selRange) {\n      return;\n    }\n    for (let key = 0; key < selRange.length; key++) {\n      const {\n        row: startRow,\n        col: startColumn\n      } = selRange[key].getTopStartCorner();\n      const {\n        row: endRow,\n        col: endColumn\n      } = selRange[key].getBottomEndCorner();\n      const changes = [];\n      for (let visualRow = startRow; visualRow <= endRow; visualRow += 1) {\n        for (let visualColumn = startColumn; visualColumn <= endColumn; visualColumn += 1) {\n          const cachedCellProperties = hotInstance.getCellMeta(visualRow, visualColumn);\n          if (cachedCellProperties.type !== 'checkbox') {\n            return;\n          }\n\n          /* eslint-disable no-continue */\n          if (cachedCellProperties.readOnly === true) {\n            continue;\n          }\n          if (typeof cachedCellProperties.checkedTemplate === 'undefined') {\n            cachedCellProperties.checkedTemplate = true;\n          }\n          if (typeof cachedCellProperties.uncheckedTemplate === 'undefined') {\n            cachedCellProperties.uncheckedTemplate = false;\n          }\n          const dataAtCell = hotInstance.getDataAtCell(visualRow, visualColumn);\n          if (uncheckCheckbox === false) {\n            if ([cachedCellProperties.checkedTemplate, cachedCellProperties.checkedTemplate.toString()].includes(dataAtCell)) {\n              // eslint-disable-line max-len\n              changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);\n            } else if ([cachedCellProperties.uncheckedTemplate, cachedCellProperties.uncheckedTemplate.toString(), null, undefined].includes(dataAtCell)) {\n              // eslint-disable-line max-len\n              changes.push([visualRow, visualColumn, cachedCellProperties.checkedTemplate]);\n            }\n          } else {\n            changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);\n          }\n        }\n      }\n      if (changes.length > 0) {\n        hotInstance.setDataAtCell(changes);\n      }\n    }\n  }\n\n  /**\n   * Check whether all selected cells are with checkbox type.\n   *\n   * @returns {boolean}\n   * @private\n   */\n  function areSelectedCheckboxCells() {\n    const selRange = hotInstance.getSelectedRange();\n    if (!selRange) {\n      return;\n    }\n    for (let key = 0; key < selRange.length; key++) {\n      const topLeft = selRange[key].getTopStartCorner();\n      const bottomRight = selRange[key].getBottomEndCorner();\n      for (let visualRow = topLeft.row; visualRow <= bottomRight.row; visualRow++) {\n        for (let visualColumn = topLeft.col; visualColumn <= bottomRight.col; visualColumn++) {\n          const cachedCellProperties = hotInstance.getCellMeta(visualRow, visualColumn);\n          if (cachedCellProperties.type !== 'checkbox') {\n            return false;\n          }\n          const cell = hotInstance.getCell(visualRow, visualColumn);\n          if (cell === null || cell === undefined) {\n            return true;\n          } else {\n            const checkboxes = cell.querySelectorAll('input[type=checkbox]');\n            if (checkboxes.length > 0 && !cachedCellProperties.readOnly) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n}\ncheckboxRenderer.RENDERER_TYPE = RENDERER_TYPE;\n\n/**\n * Register checkbox listeners.\n *\n * @param {Core} instance The Handsontable instance.\n * @returns {EventManager}\n */\nfunction registerEvents(instance) {\n  let eventManager = isCheckboxListenerAdded.get(instance);\n  if (!eventManager) {\n    const {\n      rootElement\n    } = instance;\n    eventManager = new EventManager(instance);\n    eventManager.addEventListener(rootElement, 'click', event => onClick(event, instance));\n    eventManager.addEventListener(rootElement, 'mouseup', event => onMouseUp(event, instance));\n    eventManager.addEventListener(rootElement, 'change', event => onChange(event, instance));\n    isCheckboxListenerAdded.set(instance, eventManager);\n  }\n  return eventManager;\n}\n\n/**\n * Create input element.\n *\n * @param {Document} rootDocument The document owner.\n * @returns {Node}\n */\nfunction createInput(rootDocument) {\n  const input = rootDocument.createElement('input');\n  input.className = 'htCheckboxRendererInput';\n  input.type = 'checkbox';\n  input.setAttribute('tabindex', '-1');\n  return input.cloneNode(false);\n}\n\n/**\n * Create label element.\n *\n * @param {Document} rootDocument The document owner.\n * @param {string} text The label text.\n * @param {boolean} fullWidth Determines whether label should have full width.\n * @returns {Node}\n */\nfunction createLabel(rootDocument, text, fullWidth) {\n  const label = rootDocument.createElement('label');\n  label.className = `htCheckboxRendererLabel ${fullWidth ? 'fullWidth' : ''}`;\n  label.appendChild(rootDocument.createTextNode(text));\n  return label.cloneNode(true);\n}\n\n/**\n * `mouseup` callback.\n *\n * @private\n * @param {Event} event `mouseup` event.\n * @param {Core} instance The Handsontable instance.\n */\nfunction onMouseUp(event, instance) {\n  const {\n    target\n  } = event;\n  if (!isCheckboxInput(target)) {\n    return;\n  }\n  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {\n    return;\n  }\n  setTimeout(instance.listen, 10);\n}\n\n/**\n * `click` callback.\n *\n * @private\n * @param {MouseEvent} event `click` event.\n * @param {Core} instance The Handsontable instance.\n */\nfunction onClick(event, instance) {\n  const {\n    target\n  } = event;\n  if (!isCheckboxInput(target)) {\n    return;\n  }\n  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {\n    return;\n  }\n  const row = parseInt(target.getAttribute(ATTR_ROW), 10);\n  const col = parseInt(target.getAttribute(ATTR_COLUMN), 10);\n  const cellProperties = instance.getCellMeta(row, col);\n  if (cellProperties.readOnly) {\n    event.preventDefault();\n  }\n}\n\n/**\n * `change` callback.\n *\n * @param {Event} event `change` event.\n * @param {Core} instance The Handsontable instance.\n */\nfunction onChange(event, instance) {\n  const {\n    target\n  } = event;\n  if (!isCheckboxInput(target)) {\n    return;\n  }\n  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {\n    return;\n  }\n  const row = parseInt(target.getAttribute(ATTR_ROW), 10);\n  const col = parseInt(target.getAttribute(ATTR_COLUMN), 10);\n  const cellProperties = instance.getCellMeta(row, col);\n  if (!cellProperties.readOnly) {\n    let newCheckboxValue = null;\n    if (event.target.checked) {\n      newCheckboxValue = cellProperties.uncheckedTemplate === undefined ? true : cellProperties.checkedTemplate;\n    } else {\n      newCheckboxValue = cellProperties.uncheckedTemplate === undefined ? false : cellProperties.uncheckedTemplate;\n    }\n    instance.setDataAtCell(row, col, newCheckboxValue);\n  }\n}\n\n/**\n * Check if the provided element is the checkbox input.\n *\n * @private\n * @param {HTMLElement} element The element in question.\n * @returns {boolean}\n */\nfunction isCheckboxInput(element) {\n  return element.tagName === 'INPUT' && element.getAttribute('type') === 'checkbox';\n}", "import \"core-js/modules/es.array.push.js\";\nimport numbro from 'numbro';\nimport { textRenderer } from \"../textRenderer/index.mjs\";\nimport { isNumeric } from \"../../helpers/number.mjs\";\nexport const RENDERER_TYPE = 'numeric';\n\n/**\n * Numeric cell renderer.\n *\n * @private\n * @param {Core} hotInstance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\nexport function numericRenderer(hotInstance, TD, row, col, prop, value, cellProperties) {\n  let newValue = value;\n  if (isNumeric(newValue)) {\n    const numericFormat = cellProperties.numericFormat;\n    const cellCulture = numericFormat && numericFormat.culture || '-';\n    const cellFormatPattern = numericFormat && numericFormat.pattern;\n    const className = cellProperties.className || '';\n    const classArr = className.length ? className.split(' ') : [];\n    if (typeof cellCulture !== 'undefined' && !numbro.languages()[cellCulture]) {\n      const shortTag = cellCulture.replace('-', '');\n      const langData = numbro.allLanguages ? numbro.allLanguages[cellCulture] : numbro[shortTag];\n      if (langData) {\n        numbro.registerLanguage(langData);\n      }\n    }\n    numbro.setLanguage(cellCulture);\n    newValue = numbro(newValue).format(cellFormatPattern || '0');\n    if (classArr.indexOf('htLeft') < 0 && classArr.indexOf('htCenter') < 0 && classArr.indexOf('htRight') < 0 && classArr.indexOf('htJustify') < 0) {\n      classArr.push('htRight');\n    }\n    if (classArr.indexOf('htNumeric') < 0) {\n      classArr.push('htNumeric');\n    }\n    cellProperties.className = classArr.join(' ');\n    TD.dir = 'ltr';\n  }\n  textRenderer(hotInstance, TD, row, col, prop, newValue, cellProperties);\n}\nnumericRenderer.RENDERER_TYPE = RENDERER_TYPE;", "import { textRenderer } from \"../textRenderer/index.mjs\";\nimport { fastInnerHTML } from \"../../helpers/dom/element.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nexport const RENDERER_TYPE = 'password';\n\n/**\n * @private\n * @param {Core} hotInstance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\nexport function passwordRenderer(hotInstance, TD, row, col, prop, value, cellProperties) {\n  textRenderer.apply(this, [hotInstance, TD, row, col, prop, value, cellProperties]);\n  const hashLength = cellProperties.hashLength || TD.innerHTML.length;\n  const hashSymbol = cellProperties.hashSymbol || '*';\n  let hash = '';\n  rangeEach(hashLength - 1, () => {\n    hash += hashSymbol;\n  });\n  fastInnerHTML(TD, hash);\n}\npasswordRenderer.RENDERER_TYPE = RENDERER_TYPE;", "import { textRenderer } from \"../textRenderer/index.mjs\";\nexport const RENDERER_TYPE = 'time';\n\n/**\n * Default time renderer.\n *\n * @private\n * @param {Core} hotInstance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\nexport function timeRenderer(hotInstance, TD, row, col, prop, value, cellProperties) {\n  textRenderer.apply(this, [hotInstance, TD, row, col, prop, value, cellProperties]);\n  TD.dir = 'ltr';\n}\ntimeRenderer.RENDERER_TYPE = RENDERER_TYPE;"],
  "mappings": "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",
  "names": ["f", "exports", "module", "define", "amd", "window", "global", "self", "this", "numbro", "r", "e", "n", "t", "o", "i", "c", "require", "u", "a", "Error", "code", "p", "call", "length", "1", "globalObject", "BigNumber", "isNumeric", "mathceil", "Math", "ceil", "mathfloor", "floor", "bignumberError", "tooManyDigits", "BASE", "LOG_BASE", "MAX_SAFE_INTEGER", "POWS_TEN", "SQRT_BASE", "MAX", "bitFloor", "coeffToString", "s", "z", "j", "charCodeAt", "slice", "compare", "x", "y", "b", "xc", "yc", "k", "l", "intCheck", "min", "max", "name", "String", "isOdd", "toExponential", "str", "charAt", "toFixedPoint", "len", "zs", "clone", "configObject", "div", "convertBase", "parseNumeric", "pow2_53", "random53bitInt", "basePrefix", "dotAfter", "dotBefore", "isInfinityOrNaN", "whitespaceOrPlus", "P", "prototype", "constructor", "toString", "valueOf", "ONE", "DECIMAL_PLACES", "ROUNDING_MODE", "TO_EXP_NEG", "TO_EXP_POS", "MIN_EXP", "MAX_EXP", "CRYPTO", "MODULO_MODE", "POW_PRECISION", "FORMAT", "prefix", "groupSize", "secondaryGroupSize", "groupSeparator", "decimalSeparator", "fractionGroupSize", "fractionGroupSeparator", "suffix", "ALPHABET", "alphabet", "caseChanged", "isNum", "test", "indexOf", "replace", "search", "substring", "round", "DEBUG", "toUpperCase", "toLowerCase", "push", "format", "rm", "id", "c0", "ne", "maxOrMin", "args", "method", "m", "normalise", "pop", "sd", "d", "ni", "rd", "pows10", "out", "ROUND_UP", "ROUND_DOWN", "ROUND_CEIL", "ROUND_FLOOR", "ROUND_HALF_UP", "ROUND_HALF_DOWN", "ROUND_HALF_EVEN", "ROUND_HALF_CEIL", "ROUND_HALF_FLOOR", "EUCLID", "config", "set", "obj", "v", "hasOwnProperty", "crypto", "getRandomValues", "randomBytes", "EXPONENTIAL_AT", "RANGE", "isBigNumber", "_isBigNumber", "maximum", "arguments", "lt", "minimum", "gt", "random", "dp", "rand", "Uint32Array", "copy", "splice", "sum", "plus", "decimal", "toBaseOut", "baseIn", "baseOut", "arrL", "arr", "reverse", "sign", "callerIsToString", "pow", "concat", "multiply", "base", "temp", "xlo", "xhi", "carry", "klo", "khi", "aL", "bL", "cmp", "subtract", "more", "prod", "prodL", "q", "qc", "rem", "remL", "rem0", "xi", "xL", "yc0", "yL", "yz", "NaN", "isNaN", "p1", "p2", "absoluteValue", "abs", "comparedTo", "decimalPlaces", "dividedBy", "dividedToIntegerBy", "idiv", "exponentiatedBy", "half", "isModExp", "nIsBig", "nIsNeg", "nIsOdd", "isInteger", "mod", "times", "integerValue", "isEqualTo", "eq", "isFinite", "isGreaterThan", "isGreaterThanOrEqualTo", "gte", "isLessThan", "isLessThanOrEqualTo", "lte", "isNegative", "isPositive", "isZero", "minus", "xLTy", "xe", "ye", "modulo", "multipliedBy", "xcL", "ycL", "ylo", "yhi", "zc", "sqrtBase", "negated", "precision", "shiftedBy", "squareRoot", "sqrt", "rep", "toFixed", "toFormat", "split", "g1", "g2", "intPart", "fractionPart", "isNeg", "intDigits", "substr", "RegExp", "toFraction", "md", "d0", "d1", "d2", "exp", "n0", "n1", "toNumber", "toPrecision", "toJSON", "Symbol", "iterator", "toStringTag", "for", "languageTag", "delimiters", "thousands", "abbreviations", "thousand", "million", "billion", "trillion", "spaceSeparated", "ordinal", "number", "currency", "symbol", "position", "currencyFormat", "thousandSeparated", "totalLength", "formats", "fourDigits", "fullWithTwoDecimals", "output", "mantissa", "fullWithTwoDecimalsNoCurrency", "fullWithNoDecimals", "globalState", "validating", "parsing", "decimalSuffixes", "bytes", "general", "scale", "suffixes", "marker", "binary", "defaultOptions", "characteristic", "forceAverage", "average", "optionalMantissa", "negative", "forceSign", "_format", "instance", "providedFormat", "parseFormat", "validateFormat", "postfix", "formatOrDefault", "currentCurrencyDefaultFormat", "state", "currentCurrency", "options", "Object", "assign", "space", "currencyPosition", "currencySymbol", "formatNumber", "_value", "currentPercentageDefaultFormat", "prefixSymbol", "currentByteDefaultFormat", "baseInfo", "_getFormatByteUnits", "getFormatByteUnits", "value", "defaults", "currentAbbreviations", "spaced", "currentTimeDefaultFormat", "hours", "minutes", "seconds", "currentOrdinalDefaultFormat", "ordinalFn", "currentOrdinal", "power", "zeroes", "result", "_result$split2", "_slicedToArray", "_base$split2", "_base$split2$", "_ref3", "_ref3$state", "_ref3$defaults", "currentDefaults", "hasZeroFormat", "getZeroFormat", "_ref2", "_ref2$characteristicP", "characteristicPrecision", "_value$toExponential$2", "numberString", "exponential", "optionalCharacteristic", "mantissaPrecision", "trimMantissa", "abbreviation", "data", "_ref", "_ref$spaceSeparated", "_ref$totalLength", "_data", "trim", "_result$toString$spli2", "currentCharacteristic", "_result$toString$spli3", "currentMantissa", "match", "hasTrailingZeroes", "index", "currentDelimiters", "thousandSeparator", "thousandsSize", "counter", "unshift", "forEach", "_result$toString$spli5", "missingZeros", "defaultFormat", "keys", "_len", "Array", "_key", "apply", "getByteUnit", "_len2", "_key2", "getBinaryByteUnit", "_len3", "_key3", "getDecimalByteUnit", "_len4", "_key4", "enUS", "currentLanguageTag", "languages", "zeroFormat", "globalDefaults", "chooseLanguage", "tag", "currentLanguageData", "currentLanguage", "ordinalFormat", "byteFormat", "percentageFormat", "timeFormat", "setDefaults", "setZeroFormat", "string", "languageData", "registerLanguage", "useLanguage", "validateLanguage", "setLanguage", "fallbackTag", "matchingLanguageTag", "find", "each", "loadLanguagesInNode", "tags", "console", "error", "_subtract", "other", "otherValue", "isNumbro", "add", "divide", "difference", "validator", "loader", "unformatter", "formatter", "manipulate", "Numbro", "input", "normalizeInput", "unformat", "version", "object", "language", "defaultCurrencyFormat", "validate", "allSuffixes", "key", "factor", "escapeRegExp", "unformatValue", "inputString", "computeUnformattedValue", "stripped", "newInput", "possibleOrdinalValue", "parseFloat", "ordinalString", "inversedAbbreviations", "abbreviationValues", "sort", "numberOfAbbreviations", "_i", "segments", "bcp47RegExp", "validFormat", "type", "validValues", "restriction", "message", "mandatory", "restrictions", "children", "validLanguage", "timeDefaults", "validateInput", "validateSpec", "toValidate", "spec", "skipMandatoryCheck", "results", "map", "_typeof", "_data$restrictions$i", "JSON", "stringify", "_toConsumableArray", "reduce", "acc", "current", "validInput", "isFormatValid", "RENDERER_TYPE", "RENDERER_TYPE", "RENDERER_TYPE", "numbro", "RENDERER_TYPE", "RENDERER_TYPE"]
}
