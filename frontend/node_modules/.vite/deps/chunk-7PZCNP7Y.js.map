{
  "version": 3,
  "sources": ["../../handsontable/renderers/baseRenderer/baseRenderer.mjs", "../../handsontable/renderers/textRenderer/textRenderer.mjs"],
  "sourcesContent": ["import \"core-js/modules/es.array.push.js\";\n/**\n * Adds appropriate CSS class to table cell, based on cellProperties.\n */\nimport { addClass, removeAttribute, removeClass, setAttribute } from \"../../helpers/dom/element.mjs\";\nimport { A11Y_INVALID, A11Y_READONLY } from \"../../helpers/a11y.mjs\";\nexport const RENDERER_TYPE = 'base';\n\n/**\n * @param {Core} hotInstance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\nexport function baseRenderer(hotInstance, TD, row, col, prop, value, cellProperties) {\n  const ariaEnabled = cellProperties.ariaTags;\n  const classesToAdd = [];\n  const classesToRemove = [];\n  const attributesToRemove = [];\n  const attributesToAdd = [];\n  if (cellProperties.className) {\n    addClass(TD, cellProperties.className);\n  }\n  if (cellProperties.readOnly) {\n    classesToAdd.push(cellProperties.readOnlyCellClassName);\n    if (ariaEnabled) {\n      attributesToAdd.push(A11Y_READONLY());\n    }\n  } else if (ariaEnabled) {\n    attributesToRemove.push(A11Y_READONLY()[0]);\n  }\n  if (cellProperties.valid === false && cellProperties.invalidCellClassName) {\n    classesToAdd.push(cellProperties.invalidCellClassName);\n    if (ariaEnabled) {\n      attributesToAdd.push(A11Y_INVALID());\n    }\n  } else {\n    classesToRemove.push(cellProperties.invalidCellClassName);\n    if (ariaEnabled) {\n      attributesToRemove.push(A11Y_INVALID()[0]);\n    }\n  }\n  if (cellProperties.wordWrap === false && cellProperties.noWordWrapClassName) {\n    classesToAdd.push(cellProperties.noWordWrapClassName);\n  }\n  if (!value && cellProperties.placeholder) {\n    classesToAdd.push(cellProperties.placeholderCellClassName);\n  }\n  removeClass(TD, classesToRemove);\n  addClass(TD, classesToAdd);\n  removeAttribute(TD, attributesToRemove);\n  setAttribute(TD, attributesToAdd);\n}\nbaseRenderer.RENDERER_TYPE = RENDERER_TYPE;", "import { baseRenderer } from \"../baseRenderer/index.mjs\";\nimport { empty, fastInnerText } from \"../../helpers/dom/element.mjs\";\nimport { stringify } from \"../../helpers/mixed.mjs\";\nexport const RENDERER_TYPE = 'text';\n\n/**\n * Default text renderer.\n *\n * @private\n * @param {Core} hotInstance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\nexport function textRenderer(hotInstance, TD, row, col, prop, value, cellProperties) {\n  baseRenderer.apply(this, [hotInstance, TD, row, col, prop, value, cellProperties]);\n  let escaped = value;\n  if (!escaped && cellProperties.placeholder) {\n    escaped = cellProperties.placeholder;\n  }\n  escaped = stringify(escaped);\n  if (cellProperties.trimWhitespace) {\n    escaped = escaped.trim();\n  }\n  if (cellProperties.rendererTemplate) {\n    empty(TD);\n    const TEMPLATE = hotInstance.rootDocument.createElement('TEMPLATE');\n    TEMPLATE.setAttribute('bind', '{{}}');\n    TEMPLATE.innerHTML = cellProperties.rendererTemplate;\n    HTMLTemplateElement.decorate(TEMPLATE);\n    TEMPLATE.model = hotInstance.getSourceDataAtRow(row);\n    TD.appendChild(TEMPLATE);\n  } else {\n    // this is faster than innerHTML. See: https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips\n    fastInnerText(TD, escaped);\n  }\n}\ntextRenderer.RENDERER_TYPE = RENDERER_TYPE;"],
  "mappings": ";;;;;;;;;;;;;AAMO,IAAM,gBAAgB;AAWtB,SAAS,aAAa,aAAa,IAAI,KAAK,KAAK,MAAM,OAAO,gBAAgB;AACnF,QAAM,cAAc,eAAe;AACnC,QAAM,eAAe,CAAC;AACtB,QAAM,kBAAkB,CAAC;AACzB,QAAM,qBAAqB,CAAC;AAC5B,QAAM,kBAAkB,CAAC;AACzB,MAAI,eAAe,WAAW;AAC5B,aAAS,IAAI,eAAe,SAAS;AAAA,EACvC;AACA,MAAI,eAAe,UAAU;AAC3B,iBAAa,KAAK,eAAe,qBAAqB;AACtD,QAAI,aAAa;AACf,sBAAgB,KAAK,cAAc,CAAC;AAAA,IACtC;AAAA,EACF,WAAW,aAAa;AACtB,uBAAmB,KAAK,cAAc,EAAE,CAAC,CAAC;AAAA,EAC5C;AACA,MAAI,eAAe,UAAU,SAAS,eAAe,sBAAsB;AACzE,iBAAa,KAAK,eAAe,oBAAoB;AACrD,QAAI,aAAa;AACf,sBAAgB,KAAK,aAAa,CAAC;AAAA,IACrC;AAAA,EACF,OAAO;AACL,oBAAgB,KAAK,eAAe,oBAAoB;AACxD,QAAI,aAAa;AACf,yBAAmB,KAAK,aAAa,EAAE,CAAC,CAAC;AAAA,IAC3C;AAAA,EACF;AACA,MAAI,eAAe,aAAa,SAAS,eAAe,qBAAqB;AAC3E,iBAAa,KAAK,eAAe,mBAAmB;AAAA,EACtD;AACA,MAAI,CAAC,SAAS,eAAe,aAAa;AACxC,iBAAa,KAAK,eAAe,wBAAwB;AAAA,EAC3D;AACA,cAAY,IAAI,eAAe;AAC/B,WAAS,IAAI,YAAY;AACzB,kBAAgB,IAAI,kBAAkB;AACtC,eAAa,IAAI,eAAe;AAClC;AACA,aAAa,gBAAgB;;;ACrDtB,IAAMA,iBAAgB;AActB,SAAS,aAAa,aAAa,IAAI,KAAK,KAAK,MAAM,OAAO,gBAAgB;AACnF,eAAa,MAAM,MAAM,CAAC,aAAa,IAAI,KAAK,KAAK,MAAM,OAAO,cAAc,CAAC;AACjF,MAAI,UAAU;AACd,MAAI,CAAC,WAAW,eAAe,aAAa;AAC1C,cAAU,eAAe;AAAA,EAC3B;AACA,YAAU,UAAU,OAAO;AAC3B,MAAI,eAAe,gBAAgB;AACjC,cAAU,QAAQ,KAAK;AAAA,EACzB;AACA,MAAI,eAAe,kBAAkB;AACnC,UAAM,EAAE;AACR,UAAM,WAAW,YAAY,aAAa,cAAc,UAAU;AAClE,aAAS,aAAa,QAAQ,MAAM;AACpC,aAAS,YAAY,eAAe;AACpC,wBAAoB,SAAS,QAAQ;AACrC,aAAS,QAAQ,YAAY,mBAAmB,GAAG;AACnD,OAAG,YAAY,QAAQ;AAAA,EACzB,OAAO;AAEL,kBAAc,IAAI,OAAO;AAAA,EAC3B;AACF;AACA,aAAa,gBAAgBA;",
  "names": ["RENDERER_TYPE"]
}
