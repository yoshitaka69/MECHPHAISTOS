{
  "version": 3,
  "sources": ["../../handsontable/i18n/languages/en-US.mjs", "../../handsontable/i18n/utils.mjs", "../../handsontable/i18n/phraseFormatters/pluralize.mjs", "../../handsontable/i18n/phraseFormatters/index.mjs", "../../handsontable/i18n/registry.mjs"],
  "sourcesContent": ["/**\n * @preserve\n * Authors: Handsoncode\n * Last updated: Nov 15, 2017\n *\n * Description: Definition file for English - United States language-country.\n */\nimport * as C from \"../constants.mjs\";\nconst dictionary = {\n  languageCode: 'en-US',\n  [C.CONTEXTMENU_ITEMS_NO_ITEMS]: 'No available options',\n  [C.CONTEXTMENU_ITEMS_ROW_ABOVE]: 'Insert row above',\n  [C.CONTEXTMENU_ITEMS_ROW_BELOW]: 'Insert row below',\n  [C.CONTEXTMENU_ITEMS_INSERT_LEFT]: 'Insert column left',\n  [C.CONTEXTMENU_ITEMS_INSERT_RIGHT]: 'Insert column right',\n  [C.CONTEXTMENU_ITEMS_REMOVE_ROW]: ['Remove row', 'Remove rows'],\n  [C.CONTEXTMENU_ITEMS_REMOVE_COLUMN]: ['Remove column', 'Remove columns'],\n  [C.CONTEXTMENU_ITEMS_UNDO]: 'Undo',\n  [C.CONTEXTMENU_ITEMS_REDO]: 'Redo',\n  [C.CONTEXTMENU_ITEMS_READ_ONLY]: 'Read only',\n  [C.CONTEXTMENU_ITEMS_CLEAR_COLUMN]: 'Clear column',\n  [C.CONTEXTMENU_ITEMS_ALIGNMENT]: 'Alignment',\n  [C.CONTEXTMENU_ITEMS_ALIGNMENT_LEFT]: 'Left',\n  [C.CONTEXTMENU_ITEMS_ALIGNMENT_CENTER]: 'Center',\n  [C.CONTEXTMENU_ITEMS_ALIGNMENT_RIGHT]: 'Right',\n  [C.CONTEXTMENU_ITEMS_ALIGNMENT_JUSTIFY]: 'Justify',\n  [C.CONTEXTMENU_ITEMS_ALIGNMENT_TOP]: 'Top',\n  [C.CONTEXTMENU_ITEMS_ALIGNMENT_MIDDLE]: 'Middle',\n  [C.CONTEXTMENU_ITEMS_ALIGNMENT_BOTTOM]: 'Bottom',\n  [C.CONTEXTMENU_ITEMS_FREEZE_COLUMN]: 'Freeze column',\n  [C.CONTEXTMENU_ITEMS_UNFREEZE_COLUMN]: 'Unfreeze column',\n  [C.CONTEXTMENU_ITEMS_BORDERS]: 'Borders',\n  [C.CONTEXTMENU_ITEMS_BORDERS_TOP]: 'Top',\n  [C.CONTEXTMENU_ITEMS_BORDERS_RIGHT]: 'Right',\n  [C.CONTEXTMENU_ITEMS_BORDERS_BOTTOM]: 'Bottom',\n  [C.CONTEXTMENU_ITEMS_BORDERS_LEFT]: 'Left',\n  [C.CONTEXTMENU_ITEMS_REMOVE_BORDERS]: 'Remove border(s)',\n  [C.CONTEXTMENU_ITEMS_ADD_COMMENT]: 'Add comment',\n  [C.CONTEXTMENU_ITEMS_EDIT_COMMENT]: 'Edit comment',\n  [C.CONTEXTMENU_ITEMS_REMOVE_COMMENT]: 'Delete comment',\n  [C.CONTEXTMENU_ITEMS_READ_ONLY_COMMENT]: 'Read-only comment',\n  [C.CONTEXTMENU_ITEMS_MERGE_CELLS]: 'Merge cells',\n  [C.CONTEXTMENU_ITEMS_UNMERGE_CELLS]: 'Unmerge cells',\n  [C.CONTEXTMENU_ITEMS_COPY]: 'Copy',\n  [C.CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_HEADERS]: ['Copy with header', 'Copy with headers'],\n  [C.CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_GROUP_HEADERS]: ['Copy with group header', 'Copy with group headers'],\n  [C.CONTEXTMENU_ITEMS_COPY_COLUMN_HEADERS_ONLY]: ['Copy header only', 'Copy headers only'],\n  [C.CONTEXTMENU_ITEMS_CUT]: 'Cut',\n  [C.CONTEXTMENU_ITEMS_NESTED_ROWS_INSERT_CHILD]: 'Insert child row',\n  [C.CONTEXTMENU_ITEMS_NESTED_ROWS_DETACH_CHILD]: 'Detach from parent',\n  [C.CONTEXTMENU_ITEMS_HIDE_COLUMN]: ['Hide column', 'Hide columns'],\n  [C.CONTEXTMENU_ITEMS_SHOW_COLUMN]: ['Show column', 'Show columns'],\n  [C.CONTEXTMENU_ITEMS_HIDE_ROW]: ['Hide row', 'Hide rows'],\n  [C.CONTEXTMENU_ITEMS_SHOW_ROW]: ['Show row', 'Show rows'],\n  [C.FILTERS_CONDITIONS_NONE]: 'None',\n  [C.FILTERS_CONDITIONS_EMPTY]: 'Is empty',\n  [C.FILTERS_CONDITIONS_NOT_EMPTY]: 'Is not empty',\n  [C.FILTERS_CONDITIONS_EQUAL]: 'Is equal to',\n  [C.FILTERS_CONDITIONS_NOT_EQUAL]: 'Is not equal to',\n  [C.FILTERS_CONDITIONS_BEGINS_WITH]: 'Begins with',\n  [C.FILTERS_CONDITIONS_ENDS_WITH]: 'Ends with',\n  [C.FILTERS_CONDITIONS_CONTAINS]: 'Contains',\n  [C.FILTERS_CONDITIONS_NOT_CONTAIN]: 'Does not contain',\n  [C.FILTERS_CONDITIONS_GREATER_THAN]: 'Greater than',\n  [C.FILTERS_CONDITIONS_GREATER_THAN_OR_EQUAL]: 'Greater than or equal to',\n  [C.FILTERS_CONDITIONS_LESS_THAN]: 'Less than',\n  [C.FILTERS_CONDITIONS_LESS_THAN_OR_EQUAL]: 'Less than or equal to',\n  [C.FILTERS_CONDITIONS_BETWEEN]: 'Is between',\n  [C.FILTERS_CONDITIONS_NOT_BETWEEN]: 'Is not between',\n  [C.FILTERS_CONDITIONS_AFTER]: 'After',\n  [C.FILTERS_CONDITIONS_BEFORE]: 'Before',\n  [C.FILTERS_CONDITIONS_TODAY]: 'Today',\n  [C.FILTERS_CONDITIONS_TOMORROW]: 'Tomorrow',\n  [C.FILTERS_CONDITIONS_YESTERDAY]: 'Yesterday',\n  [C.FILTERS_VALUES_BLANK_CELLS]: 'Blank cells',\n  [C.FILTERS_DIVS_FILTER_BY_CONDITION]: 'Filter by condition',\n  [C.FILTERS_DIVS_FILTER_BY_VALUE]: 'Filter by value',\n  [C.FILTERS_LABELS_CONJUNCTION]: 'And',\n  [C.FILTERS_LABELS_DISJUNCTION]: 'Or',\n  [C.FILTERS_BUTTONS_SELECT_ALL]: 'Select all',\n  [C.FILTERS_BUTTONS_CLEAR]: 'Clear',\n  [C.FILTERS_BUTTONS_OK]: 'OK',\n  [C.FILTERS_BUTTONS_CANCEL]: 'Cancel',\n  [C.FILTERS_BUTTONS_PLACEHOLDER_SEARCH]: 'Search',\n  [C.FILTERS_BUTTONS_PLACEHOLDER_VALUE]: 'Value',\n  [C.FILTERS_BUTTONS_PLACEHOLDER_SECOND_VALUE]: 'Second value',\n  [C.CHECKBOX_CHECKED]: 'Checked',\n  [C.CHECKBOX_UNCHECKED]: 'Unchecked'\n};\nexport default dictionary;", "import { isUndefined, isDefined } from \"./../helpers/mixed.mjs\";\nimport { objectEach } from \"./../helpers/object.mjs\";\nimport { error } from \"./../helpers/console.mjs\";\nimport { toSingleLine } from \"./../helpers/templateLiteralTag.mjs\";\n/**\n * Perform shallow extend of a target object with only this extension's properties which doesn't exist in the target.\n *\n * TODO: Maybe it should be moved to global helpers? It's changed `extend` function.\n *\n * @param {object} target An object that will receive the new properties.\n * @param {object} extension An object containing additional properties to merge into the target.\n * @returns {object}\n */\nexport function extendNotExistingKeys(target, extension) {\n  objectEach(extension, (value, key) => {\n    if (isUndefined(target[key])) {\n      target[key] = value;\n    }\n  });\n  return target;\n}\n\n/**\n * Create range of values basing on cell indexes. For example, it will create below ranges for specified function arguments:\n *\n * createCellHeadersRange(2, 7) => `2-7`\n * createCellHeadersRange(7, 2) => `2-7`\n * createCellHeadersRange(0, 4, 'A', 'D') => `A-D`\n * createCellHeadersRange(4, 0, 'D', 'A') => `A-D`.\n *\n * @param {number} firstRowIndex Index of \"first\" cell.\n * @param {number} nextRowIndex Index of \"next\" cell.\n * @param {*} fromValue Value which will represent \"first\" cell.\n * @param {*} toValue Value which will represent \"next\" cell.\n * @returns {string} Value representing range i.e. A-Z, 11-15.\n */\nexport function createCellHeadersRange(firstRowIndex, nextRowIndex) {\n  let fromValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : firstRowIndex;\n  let toValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : nextRowIndex;\n  // Will swap `fromValue` with `toValue` if it's necessary.\n  let [from, to] = [fromValue, toValue];\n  if (firstRowIndex > nextRowIndex) {\n    [from, to] = [to, from];\n  }\n  return `${from}-${to}`;\n}\n\n/**\n * Normalize language code. It takes handled languageCode proposition and change it to proper languageCode.\n * For example, when it takes `eN-us` as parameter it return `en-US`.\n *\n * @param {string} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @returns {string}\n */\nexport function normalizeLanguageCode(languageCode) {\n  const languageCodePattern = /^([a-zA-Z]{2})-([a-zA-Z]{2})$/;\n  const partsOfLanguageCode = languageCodePattern.exec(languageCode);\n  if (partsOfLanguageCode) {\n    return `${partsOfLanguageCode[1].toLowerCase()}-${partsOfLanguageCode[2].toUpperCase()}`;\n  }\n  return languageCode;\n}\n\n/**\n *\n * Warn user if there is no registered language.\n *\n * @param {string} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n */\nexport function warnUserAboutLanguageRegistration(languageCode) {\n  if (isDefined(languageCode)) {\n    error(toSingleLine`Language with code \"${languageCode}\" was not found. You should register particular language\\x20\n    before using it. Read more about this issue at: https://docs.handsontable.com/i18n/missing-language-code.`);\n  }\n}", "/**\n * Try to choose plural form from available phrase propositions.\n *\n * @param {Array} phrasePropositions List of phrases propositions.\n * @param {number} pluralForm Number determining which phrase form should be used.\n *\n * @returns {string|Array} One particular phrase if it's possible, list of unchanged phrase propositions otherwise.\n */\nexport default function pluralize(phrasePropositions, pluralForm) {\n  const isPluralizable = Array.isArray(phrasePropositions) && Number.isInteger(pluralForm);\n  if (isPluralizable) {\n    return phrasePropositions[pluralForm];\n  }\n  return phrasePropositions;\n}", "import staticRegister from \"./../../utils/staticRegister.mjs\";\nimport pluralizeFn from \"./pluralize.mjs\";\nconst {\n  register: registerGloballyPhraseFormatter,\n  getValues: getGlobalPhraseFormatters\n} = staticRegister('phraseFormatters');\n\n/**\n * Register phrase formatter.\n *\n * @param {string} name Name of formatter.\n * @param {Function} formatterFn Function which will be applied on phrase propositions. It will transform them if it's possible.\n */\nexport function register(name, formatterFn) {\n  registerGloballyPhraseFormatter(name, formatterFn);\n}\n\n/**\n * Get all registered previously formatters.\n *\n * @returns {Array}\n */\nexport function getAll() {\n  return getGlobalPhraseFormatters();\n}\nexport { register as registerPhraseFormatter, getAll as getPhraseFormatters };\nregister('pluralize', pluralizeFn);", "import { isObject, deepClone } from \"../helpers/object.mjs\";\nimport { arrayEach } from \"./../helpers/array.mjs\";\nimport { isUndefined } from \"../helpers/mixed.mjs\";\nimport { extendNotExistingKeys, normalizeLanguageCode, warnUserAboutLanguageRegistration } from \"./utils.mjs\";\nimport staticRegister from \"../utils/staticRegister.mjs\";\nimport { getPhraseFormatters } from \"./phraseFormatters/index.mjs\";\nimport DEFAULT_DICTIONARY from \"./languages/en-US.mjs\";\nimport * as _dictionaryKeys from \"./constants.mjs\";\nexport const dictionaryKeys = _dictionaryKeys;\nexport const DEFAULT_LANGUAGE_CODE = DEFAULT_DICTIONARY.languageCode;\nconst {\n  register: registerGloballyLanguageDictionary,\n  getItem: getGlobalLanguageDictionary,\n  hasItem: hasGlobalLanguageDictionary,\n  getValues: getGlobalLanguagesDictionaries\n} = staticRegister('languagesDictionaries');\n\n/**\n * Register automatically the default language dictionary.\n */\nregisterLanguageDictionary(DEFAULT_DICTIONARY);\n\n/**\n * Register language dictionary for specific language code.\n *\n * @param {string|object} languageCodeOrDictionary Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE' or object representing dictionary.\n * @param {object} dictionary Dictionary for specific language (optional if first parameter has already dictionary).\n * @returns {object}\n */\nexport function registerLanguageDictionary(languageCodeOrDictionary, dictionary) {\n  let languageCode = languageCodeOrDictionary;\n  let dictionaryObject = dictionary;\n\n  // Dictionary passed as first argument.\n  if (isObject(languageCodeOrDictionary)) {\n    dictionaryObject = languageCodeOrDictionary;\n    languageCode = dictionaryObject.languageCode;\n  }\n  extendLanguageDictionary(languageCode, dictionaryObject);\n  registerGloballyLanguageDictionary(languageCode, deepClone(dictionaryObject));\n\n  // We do not allow user to work with dictionary by reference, it can cause lot of bugs.\n  return deepClone(dictionaryObject);\n}\n\n/**\n * Extend handled dictionary by default language dictionary. As result, if any dictionary key isn't defined for specific language, it will be filled with default language value (\"dictionary gaps\" are supplemented).\n *\n * @private\n * @param {string} languageCode Language code.\n * @param {object} dictionary Dictionary which is extended.\n */\nfunction extendLanguageDictionary(languageCode, dictionary) {\n  if (languageCode !== DEFAULT_LANGUAGE_CODE) {\n    extendNotExistingKeys(dictionary, getGlobalLanguageDictionary(DEFAULT_LANGUAGE_CODE));\n  }\n}\n\n/**\n * Get language dictionary for specific language code.\n *\n * @param {string} languageCode Language code.\n * @returns {object} Object with constants representing identifiers for translation (as keys) and corresponding translation phrases (as values).\n */\nexport function getLanguageDictionary(languageCode) {\n  if (!hasLanguageDictionary(languageCode)) {\n    return null;\n  }\n  return deepClone(getGlobalLanguageDictionary(languageCode));\n}\n\n/**\n *\n * Get if language with specified language code was registered.\n *\n * @param {string} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @returns {boolean}\n */\nexport function hasLanguageDictionary(languageCode) {\n  return hasGlobalLanguageDictionary(languageCode);\n}\n\n/**\n * Get default language dictionary.\n *\n * @returns {object} Object with constants representing identifiers for translation (as keys) and corresponding translation phrases (as values).\n */\nexport function getDefaultLanguageDictionary() {\n  return DEFAULT_DICTIONARY;\n}\n\n/**\n * Get registered language dictionaries.\n *\n * @returns {Array}\n */\nexport function getLanguagesDictionaries() {\n  return getGlobalLanguagesDictionaries();\n}\n\n/**\n * Get phrase for specified dictionary key.\n *\n * @param {string} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @param {string} dictionaryKey Constant which is dictionary key.\n * @param {*} argumentsForFormatters Arguments which will be handled by formatters.\n *\n * @returns {string}\n */\nexport function getTranslatedPhrase(languageCode, dictionaryKey, argumentsForFormatters) {\n  const languageDictionary = getLanguageDictionary(languageCode);\n  if (languageDictionary === null) {\n    return null;\n  }\n  const phrasePropositions = languageDictionary[dictionaryKey];\n  if (isUndefined(phrasePropositions)) {\n    return null;\n  }\n  const formattedPhrase = getFormattedPhrase(phrasePropositions, argumentsForFormatters);\n  if (Array.isArray(formattedPhrase)) {\n    return formattedPhrase[0];\n  }\n  return formattedPhrase;\n}\n\n/**\n * Get formatted phrase from phrases propositions for specified dictionary key.\n *\n * @private\n * @param {Array|string} phrasePropositions List of phrase propositions.\n * @param {*} argumentsForFormatters Arguments which will be handled by formatters.\n *\n * @returns {Array|string}\n */\nfunction getFormattedPhrase(phrasePropositions, argumentsForFormatters) {\n  let formattedPhrasePropositions = phrasePropositions;\n  arrayEach(getPhraseFormatters(), formatter => {\n    formattedPhrasePropositions = formatter(phrasePropositions, argumentsForFormatters);\n  });\n  return formattedPhrasePropositions;\n}\n\n/**\n * Returns valid language code. If the passed language code doesn't exist default one will be used.\n *\n * @param {string} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @returns {string}\n */\nexport function getValidLanguageCode(languageCode) {\n  let normalizedLanguageCode = normalizeLanguageCode(languageCode);\n  if (!hasLanguageDictionary(normalizedLanguageCode)) {\n    normalizedLanguageCode = DEFAULT_LANGUAGE_CODE;\n    warnUserAboutLanguageRegistration(languageCode);\n  }\n  return normalizedLanguageCode;\n}"],
  "mappings": "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",
  "names": ["dictionary"]
}
