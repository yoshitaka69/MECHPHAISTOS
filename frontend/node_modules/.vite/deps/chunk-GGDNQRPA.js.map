{
  "version": 3,
  "sources": ["../../handsontable/shortcutContexts/constants.mjs", "../../handsontable/shortcutContexts/commands/editor/closeAndSave.mjs", "../../handsontable/shortcutContexts/commands/editor/closeWithoutSaving.mjs", "../../handsontable/shortcutContexts/commands/editor/fastOpen.mjs", "../../handsontable/shortcutContexts/commands/editor/open.mjs", "../../handsontable/shortcutContexts/commands/editor/index.mjs", "../../handsontable/shortcutContexts/commands/extendCellsSelection/down.mjs", "../../handsontable/shortcutContexts/commands/extendCellsSelection/downByViewportHeight.mjs", "../../handsontable/shortcutContexts/commands/extendCellsSelection/left.mjs", "../../handsontable/shortcutContexts/commands/extendCellsSelection/right.mjs", "../../handsontable/shortcutContexts/commands/extendCellsSelection/toColumns.mjs", "../../handsontable/shortcutContexts/commands/extendCellsSelection/toMostBottom.mjs", "../../handsontable/shortcutContexts/commands/extendCellsSelection/toMostInlineEnd.mjs", "../../handsontable/shortcutContexts/commands/extendCellsSelection/toMostInlineStart.mjs", "../../handsontable/shortcutContexts/commands/extendCellsSelection/toMostLeft.mjs", "../../handsontable/shortcutContexts/commands/extendCellsSelection/toMostRight.mjs", "../../handsontable/shortcutContexts/commands/extendCellsSelection/toMostTop.mjs", "../../handsontable/shortcutContexts/commands/extendCellsSelection/toRows.mjs", "../../handsontable/shortcutContexts/commands/extendCellsSelection/up.mjs", "../../handsontable/shortcutContexts/commands/extendCellsSelection/upByViewportHeight.mjs", "../../handsontable/shortcutContexts/commands/extendCellsSelection/index.mjs", "../../handsontable/shortcutContexts/commands/moveCellSelection/down.mjs", "../../handsontable/shortcutContexts/commands/moveCellSelection/downByViewportHeight.mjs", "../../handsontable/shortcutContexts/commands/moveCellSelection/inlineEnd.mjs", "../../handsontable/shortcutContexts/commands/moveCellSelection/inlineStart.mjs", "../../handsontable/shortcutContexts/commands/moveCellSelection/left.mjs", "../../handsontable/shortcutContexts/commands/moveCellSelection/right.mjs", "../../handsontable/shortcutContexts/commands/moveCellSelection/toMostBottom.mjs", "../../handsontable/shortcutContexts/commands/moveCellSelection/toMostBottomInlineEnd.mjs", "../../handsontable/shortcutContexts/commands/moveCellSelection/toMostInlineEnd.mjs", "../../handsontable/shortcutContexts/commands/moveCellSelection/toMostInlineStart.mjs", "../../handsontable/shortcutContexts/commands/moveCellSelection/toMostLeft.mjs", "../../handsontable/shortcutContexts/commands/moveCellSelection/toMostRight.mjs", "../../handsontable/shortcutContexts/commands/moveCellSelection/toMostTop.mjs", "../../handsontable/shortcutContexts/commands/moveCellSelection/toMostTopInlineStart.mjs", "../../handsontable/shortcutContexts/commands/moveCellSelection/up.mjs", "../../handsontable/shortcutContexts/commands/moveCellSelection/upByViewportHeight.mjs", "../../handsontable/shortcutContexts/commands/moveCellSelection/index.mjs", "../../handsontable/shortcutContexts/commands/emptySelectedCells.mjs", "../../handsontable/shortcutContexts/commands/scrollToFocusedCell.mjs", "../../handsontable/shortcutContexts/commands/selectAllCells.mjs", "../../handsontable/shortcutContexts/commands/selectAllCellsAndHeaders.mjs", "../../handsontable/shortcutContexts/commands/populateSelectedCellsData.mjs", "../../handsontable/shortcutContexts/commands/index.mjs", "../../handsontable/shortcutContexts/editor.mjs", "../../handsontable/shortcutContexts/grid.mjs", "../../handsontable/shortcutContexts/index.mjs"],
  "sourcesContent": ["/**\n * Group name for keyboard shortcuts that are active when the cell is selected.\n */\nexport const GRID_GROUP = 'gridDefault';\n/**\n * Group name for keyboard shortcuts that are active when the cell editor is active.\n */\nexport const EDITOR_EDIT_GROUP = 'editorManager.handlingEditor';", "export const command = {\n  name: 'editorCloseAndSave',\n  callback(hot, event, keys) {\n    const editorManager = hot._getEditorManager();\n    editorManager.closeEditorAndSaveChanges(event.ctrlKey || event.metaKey);\n    editorManager.moveSelectionAfterEnter(keys.includes('shift'));\n  }\n};", "export const command = {\n  name: 'editorCloseWithoutSaving',\n  callback(hot) {\n    const editorManager = hot._getEditorManager();\n    editorManager.closeEditorAndRestoreOriginalValue(hot.getShortcutManager().isCtrlPressed());\n    editorManager.activeEditor.focus();\n  }\n};", "export const command = {\n  name: 'editorFastOpen',\n  callback(hot, event) {\n    const {\n      highlight\n    } = hot.getSelectedRangeLast();\n    if (highlight.isHeader()) {\n      return;\n    }\n    hot._getEditorManager().openEditor(null, event, true);\n  }\n};", "import { stopImmediatePropagation } from \"../../../helpers/dom/event.mjs\";\nexport const command = {\n  name: 'editorOpen',\n  callback(hot, event, keys) {\n    const editorManager = hot._getEditorManager();\n    const {\n      highlight\n    } = hot.getSelectedRangeLast();\n    if (highlight.isHeader()) {\n      return;\n    }\n    if (hot.getSettings().enterBeginsEditing) {\n      if (editorManager.cellProperties.readOnly) {\n        editorManager.moveSelectionAfterEnter();\n      } else {\n        editorManager.openEditor(null, event, true);\n      }\n    } else {\n      editorManager.moveSelectionAfterEnter(keys.includes('shift'));\n    }\n    stopImmediatePropagation(event); // required by HandsontableEditor\n  }\n};", "import { command as closeAndSave } from \"./closeAndSave.mjs\";\nimport { command as closeWithoutSaving } from \"./closeWithoutSaving.mjs\";\nimport { command as fastOpen } from \"./fastOpen.mjs\";\nimport { command as open } from \"./open.mjs\";\n/**\n * Returns complete list of the shortcut commands for the cells editing feature.\n *\n * @returns {Function[]}\n */\nexport function getAllCommands() {\n  return [closeAndSave, closeWithoutSaving, fastOpen, open];\n}", "export const command = {\n  name: 'extendCellsSelectionDown',\n  callback(hot) {\n    const {\n      highlight\n    } = hot.getSelectedRangeLast();\n    if (highlight.isCell() || highlight.isHeader() && hot.selection.isSelectedByRowHeader()) {\n      hot.selection.transformEnd(1, 0);\n    }\n  }\n};", "export const command = {\n  name: 'extendCellsSelectionDownByViewportHeight',\n  callback(hot) {\n    const {\n      to\n    } = hot.getSelectedRangeLast();\n    const nextRowIndexToSelect = Math.min(to.row + hot.countVisibleRows(), hot.countRows() - 1);\n    const row = hot.rowIndexMapper.getNearestNotHiddenIndex(nextRowIndexToSelect, -1);\n    if (row !== null) {\n      const coords = hot._createCellCoords(row, to.col);\n      const scrollPadding = to.row - hot.view.getFirstFullyVisibleRow();\n      const nextVerticalScroll = Math.min(coords.row - scrollPadding, hot.countRows() - 1);\n      hot.selection.setRangeEnd(coords);\n      hot.scrollViewportTo({\n        row: nextVerticalScroll,\n        verticalSnap: 'top',\n        horizontalSnap: 'start'\n      });\n    }\n  }\n};", "export const command = {\n  name: 'extendCellsSelectionLeft',\n  callback(hot) {\n    const {\n      highlight\n    } = hot.getSelectedRangeLast();\n    if (highlight.isCell() || highlight.isHeader() && hot.selection.isSelectedByColumnHeader()) {\n      hot.selection.transformEnd(0, -1 * hot.getDirectionFactor());\n    }\n  }\n};", "export const command = {\n  name: 'extendCellsSelectionRight',\n  callback(hot) {\n    const {\n      highlight\n    } = hot.getSelectedRangeLast();\n    if (highlight.isCell() || highlight.isHeader() && hot.selection.isSelectedByColumnHeader()) {\n      hot.selection.transformEnd(0, hot.getDirectionFactor());\n    }\n  }\n};", "export const command = {\n  name: 'extendCellsSelectionToColumns',\n  callback(hot) {\n    const {\n      highlight,\n      from,\n      to\n    } = hot.getSelectedRangeLast();\n    if (hot.selection.isSelectedByRowHeader()) {\n      hot.selection.selectAll(true, true);\n    } else {\n      hot.selectColumns(from.col, to.col, highlight.row);\n    }\n  }\n};", "export const command = {\n  name: 'extendCellsSelectionToMostBottom',\n  callback(hot) {\n    const {\n      selection,\n      rowIndexMapper\n    } = hot;\n    const {\n      highlight,\n      from,\n      to\n    } = hot.getSelectedRangeLast();\n    const isFocusHighlightedByHeader = highlight.isHeader() && hot.selection.isSelectedByRowHeader();\n    if (highlight.isCell() || isFocusHighlightedByHeader) {\n      const row = rowIndexMapper.getNearestNotHiddenIndex(hot.countRows() - 1, -1);\n      selection.setRangeStart(from.clone());\n\n      // Restore the row highlight by header flag after setting up a new selection.\n      if (isFocusHighlightedByHeader) {\n        selection.selectedByRowHeader.add(selection.getLayerLevel());\n      }\n      selection.setRangeEnd(hot._createCellCoords(row, to.col));\n    }\n  }\n};", "export const command = {\n  name: 'extendCellsSelectionToMostInlineEnd',\n  callback(hot) {\n    const {\n      selection,\n      columnIndexMapper\n    } = hot;\n    const {\n      highlight\n    } = hot.getSelectedRangeLast();\n    if (highlight.isCell()) {\n      selection.setRangeEnd(hot._createCellCoords(selection.selectedRange.current().from.row, columnIndexMapper.getNearestNotHiddenIndex(hot.countCols() - 1, -1)));\n    }\n  }\n};", "export const command = {\n  name: 'extendCellsSelectionToMostInlineStart',\n  callback(hot) {\n    const {\n      selection,\n      columnIndexMapper\n    } = hot;\n    const {\n      highlight\n    } = hot.getSelectedRangeLast();\n    if (highlight.isCell()) {\n      selection.setRangeEnd(hot._createCellCoords(selection.selectedRange.current().from.row, columnIndexMapper.getNearestNotHiddenIndex(0, 1)));\n    }\n  }\n};", "export const command = {\n  name: 'extendCellsSelectionToMostLeft',\n  callback(hot) {\n    const {\n      selection,\n      columnIndexMapper\n    } = hot;\n    const {\n      highlight,\n      from,\n      to\n    } = hot.getSelectedRangeLast();\n    const isFocusHighlightedByHeader = highlight.isHeader() && hot.selection.isSelectedByColumnHeader();\n    if (highlight.isCell() || isFocusHighlightedByHeader) {\n      const column = columnIndexMapper.getNearestNotHiddenIndex(...(hot.isRtl() ? [hot.countCols() - 1, -1] : [0, 1]));\n      selection.setRangeStart(from.clone());\n\n      // Restore the column highlight by header flag after setting up a new selection.\n      if (isFocusHighlightedByHeader) {\n        selection.selectedByColumnHeader.add(selection.getLayerLevel());\n      }\n      selection.setRangeEnd(hot._createCellCoords(to.row, column));\n    }\n  }\n};", "export const command = {\n  name: 'extendCellsSelectionToMostRight',\n  callback(hot) {\n    const {\n      selection,\n      columnIndexMapper\n    } = hot;\n    const {\n      highlight,\n      from,\n      to\n    } = hot.getSelectedRangeLast();\n    const isFocusHighlightedByHeader = highlight.isHeader() && hot.selection.isSelectedByColumnHeader();\n    if (highlight.isCell() || isFocusHighlightedByHeader) {\n      const column = columnIndexMapper.getNearestNotHiddenIndex(...(hot.isRtl() ? [0, 1] : [hot.countCols() - 1, -1]));\n      selection.setRangeStart(from.clone());\n\n      // Restore the column highlight by header flag after setting up a new selection.\n      if (isFocusHighlightedByHeader) {\n        selection.selectedByColumnHeader.add(selection.getLayerLevel());\n      }\n      selection.setRangeEnd(hot._createCellCoords(to.row, column));\n    }\n  }\n};", "export const command = {\n  name: 'extendCellsSelectionToMostTop',\n  callback(hot) {\n    const {\n      selection,\n      rowIndexMapper\n    } = hot;\n    const {\n      highlight,\n      from,\n      to\n    } = hot.getSelectedRangeLast();\n    const isFocusHighlightedByHeader = highlight.isHeader() && hot.selection.isSelectedByRowHeader();\n    if (highlight.isCell() || isFocusHighlightedByHeader) {\n      const row = rowIndexMapper.getNearestNotHiddenIndex(0, 1);\n      selection.setRangeStart(from.clone());\n\n      // Restore the row highlight by header flag after setting up a new selection.\n      if (isFocusHighlightedByHeader) {\n        selection.selectedByRowHeader.add(selection.getLayerLevel());\n      }\n      selection.setRangeEnd(hot._createCellCoords(row, to.col));\n    }\n  }\n};", "export const command = {\n  name: 'extendCellsSelectionToRows',\n  callback(hot) {\n    const {\n      highlight,\n      from,\n      to\n    } = hot.getSelectedRangeLast();\n    if (hot.selection.isSelectedByColumnHeader()) {\n      hot.selection.selectAll(true, true);\n    } else {\n      hot.selectRows(from.row, to.row, highlight.col);\n    }\n  }\n};", "export const command = {\n  name: 'extendCellsSelectionUp',\n  callback(hot) {\n    const {\n      highlight\n    } = hot.getSelectedRangeLast();\n    if (highlight.isCell() || highlight.isHeader() && hot.selection.isSelectedByRowHeader()) {\n      hot.selection.transformEnd(-1, 0);\n    }\n  }\n};", "export const command = {\n  name: 'extendCellsSelectionUpByViewportHeight',\n  callback(hot) {\n    const {\n      to\n    } = hot.getSelectedRangeLast();\n    const nextRowIndexToSelect = Math.max(to.row - hot.countVisibleRows(), 0);\n    const row = hot.rowIndexMapper.getNearestNotHiddenIndex(nextRowIndexToSelect, 1);\n    if (row !== null) {\n      const coords = hot._createCellCoords(row, to.col);\n      const scrollPadding = to.row - hot.view.getFirstFullyVisibleRow();\n      const nextVerticalScroll = Math.max(coords.row - scrollPadding, 0);\n      hot.selection.setRangeEnd(coords);\n      hot.scrollViewportTo({\n        row: nextVerticalScroll,\n        verticalSnap: 'top',\n        horizontalSnap: 'start'\n      });\n    }\n  }\n};", "import { command as down } from \"./down.mjs\";\nimport { command as downByViewportHeight } from \"./downByViewportHeight.mjs\";\nimport { command as left } from \"./left.mjs\";\nimport { command as right } from \"./right.mjs\";\nimport { command as toColumns } from \"./toColumns.mjs\";\nimport { command as toMostBottom } from \"./toMostBottom.mjs\";\nimport { command as toMostInlineEnd } from \"./toMostInlineEnd.mjs\";\nimport { command as toMostInlineStart } from \"./toMostInlineStart.mjs\";\nimport { command as toMostLeft } from \"./toMostLeft.mjs\";\nimport { command as toMostRight } from \"./toMostRight.mjs\";\nimport { command as toMostTop } from \"./toMostTop.mjs\";\nimport { command as toRows } from \"./toRows.mjs\";\nimport { command as up } from \"./up.mjs\";\nimport { command as upByViewportHeight } from \"./upByViewportHeight.mjs\";\n/**\n * Returns complete list of the shortcut commands for the cells selection extending feature.\n *\n * @returns {Function[]}\n */\nexport function getAllCommands() {\n  return [down, downByViewportHeight, left, right, toColumns, toMostBottom, toMostInlineEnd, toMostInlineStart, toMostLeft, toMostRight, toMostTop, toRows, up, upByViewportHeight];\n}", "export const command = {\n  name: 'moveCellSelectionDown',\n  callback(_ref) {\n    let {\n      selection\n    } = _ref;\n    selection.transformStart(1, 0);\n  }\n};", "export const command = {\n  name: 'moveCellSelectionDownByViewportHeight',\n  callback(hot) {\n    const {\n      navigableHeaders\n    } = hot.getSettings();\n    const columnHeadersCount = navigableHeaders ? hot.countColHeaders() : 0;\n    const {\n      row\n    } = hot.getSelectedRangeLast().highlight;\n    let rowsStep = hot.countVisibleRows() + columnHeadersCount;\n\n    // if the last row is currently selected move the focus to the first row (if autoWrap is enabled)\n    if (row === hot.countRows() - 1) {\n      rowsStep = 1;\n\n      // if the next move would move the focus off the table calculate the delta to move the selection to\n      // the last row\n    } else if (row + rowsStep > hot.countRows()) {\n      rowsStep = hot.countRows() - row - 1;\n    }\n    hot.selection.transformStart(rowsStep, 0);\n    if (hot.getSelectedRangeLast().highlight.row < 0) {\n      hot.scrollViewportTo({\n        row: 0\n      });\n    }\n  }\n};", "export const command = {\n  name: 'moveCellSelectionInlineEnd',\n  callback(hot, event) {\n    const settings = hot.getSettings();\n    const tabMoves = typeof settings.tabMoves === 'function' ? settings.tabMoves(event) : settings.tabMoves;\n    hot.selection.transformStart(-tabMoves.row, -tabMoves.col);\n  }\n};", "export const command = {\n  name: 'moveCellSelectionInlineStart',\n  callback(hot, event) {\n    const settings = hot.getSettings();\n    const tabMoves = typeof settings.tabMoves === 'function' ? settings.tabMoves(event) : settings.tabMoves;\n    hot.selection.transformStart(tabMoves.row, tabMoves.col);\n  }\n};", "export const command = {\n  name: 'moveCellSelectionLeft',\n  callback(hot) {\n    hot.selection.transformStart(0, -1 * hot.getDirectionFactor());\n  }\n};", "export const command = {\n  name: 'moveCellSelectionRight',\n  callback(hot) {\n    hot.selection.transformStart(0, hot.getDirectionFactor());\n  }\n};", "export const command = {\n  name: 'moveCellSelectionToMostBottom',\n  callback(hot) {\n    const {\n      col\n    } = hot.getSelectedRangeLast().highlight;\n    let row = hot.rowIndexMapper.getNearestNotHiddenIndex(hot.countRows() - 1, -1);\n    if (row === null) {\n      row = -1;\n    }\n    hot.selection.setRangeStart(hot._createCellCoords(row, col));\n  }\n};", "export const command = {\n  name: 'moveCellSelectionToMostBottomInlineEnd',\n  callback(hot) {\n    const {\n      selection,\n      rowIndexMapper,\n      columnIndexMapper\n    } = hot;\n    const fixedRows = parseInt(hot.getSettings().fixedRowsBottom, 10);\n    const row = rowIndexMapper.getNearestNotHiddenIndex(hot.countRows() - fixedRows - 1, -1);\n    const column = columnIndexMapper.getNearestNotHiddenIndex(hot.countCols() - 1, -1);\n    selection.setRangeStart(hot._createCellCoords(row, column));\n  }\n};", "export const command = {\n  name: 'moveCellSelectionToMostInlineEnd',\n  callback(hot) {\n    const {\n      selection,\n      columnIndexMapper\n    } = hot;\n    selection.setRangeStart(hot._createCellCoords(hot.getSelectedRangeLast().highlight.row, columnIndexMapper.getNearestNotHiddenIndex(hot.countCols() - 1, -1)));\n  }\n};", "export const command = {\n  name: 'moveCellSelectionToMostInlineStart',\n  callback(hot) {\n    const {\n      selection,\n      columnIndexMapper\n    } = hot;\n    const fixedColumns = parseInt(hot.getSettings().fixedColumnsStart, 10);\n    const row = hot.getSelectedRangeLast().highlight.row;\n    const column = columnIndexMapper.getNearestNotHiddenIndex(fixedColumns, 1);\n    selection.setRangeStart(hot._createCellCoords(row, column));\n  }\n};", "export const command = {\n  name: 'moveCellSelectionToMostLeft',\n  callback(hot) {\n    const {\n      selection,\n      columnIndexMapper\n    } = hot;\n    const row = hot.getSelectedRangeLast().highlight.row;\n    let column = columnIndexMapper.getNearestNotHiddenIndex(...(hot.isRtl() ? [hot.countCols() - 1, -1] : [0, 1]));\n    if (column === null) {\n      column = hot.isRtl() ? -1 : -hot.countRowHeaders();\n    }\n    selection.setRangeStart(hot._createCellCoords(row, column));\n  }\n};", "export const command = {\n  name: 'moveCellSelectionToMostRight',\n  callback(hot) {\n    const {\n      selection,\n      columnIndexMapper\n    } = hot;\n    const {\n      row\n    } = hot.getSelectedRangeLast().highlight;\n    let column = columnIndexMapper.getNearestNotHiddenIndex(...(hot.isRtl() ? [0, 1] : [hot.countCols() - 1, -1]));\n    if (column === null) {\n      column = hot.isRtl() ? -hot.countRowHeaders() : -1;\n    }\n    selection.setRangeStart(hot._createCellCoords(row, column));\n  }\n};", "export const command = {\n  name: 'moveCellSelectionToMostTop',\n  callback(hot) {\n    const {\n      col\n    } = hot.getSelectedRangeLast().highlight;\n    let row = hot.rowIndexMapper.getNearestNotHiddenIndex(0, 1);\n    if (row === null) {\n      row = -hot.countColHeaders();\n    }\n    hot.selection.setRangeStart(hot._createCellCoords(row, col));\n  }\n};", "export const command = {\n  name: 'moveCellSelectionToMostTopInlineStart',\n  callback(hot) {\n    const {\n      selection,\n      rowIndexMapper,\n      columnIndexMapper\n    } = hot;\n    const fixedRows = parseInt(hot.getSettings().fixedRowsTop, 10);\n    const fixedColumns = parseInt(hot.getSettings().fixedColumnsStart, 10);\n    const row = rowIndexMapper.getNearestNotHiddenIndex(fixedRows, 1);\n    const column = columnIndexMapper.getNearestNotHiddenIndex(fixedColumns, 1);\n    selection.setRangeStart(hot._createCellCoords(row, column));\n  }\n};", "export const command = {\n  name: 'moveCellSelectionUp',\n  callback(_ref) {\n    let {\n      selection\n    } = _ref;\n    selection.transformStart(-1, 0);\n  }\n};", "export const command = {\n  name: 'moveCellSelectionUpByViewportHight',\n  callback(hot) {\n    const {\n      navigableHeaders\n    } = hot.getSettings();\n    const columnHeadersCount = navigableHeaders ? hot.countColHeaders() : 0;\n    const {\n      row\n    } = hot.getSelectedRangeLast().highlight;\n    let rowsStep = -(hot.countVisibleRows() + columnHeadersCount);\n\n    // if the first row is currently selected move the focus to the last row (if autoWrap is enabled)\n    if (row === -columnHeadersCount) {\n      rowsStep = -1;\n\n      // if the next move would move the focus off the table calculate the delta to move the selection to\n      // the first row\n    } else if (row + rowsStep < columnHeadersCount) {\n      rowsStep = -(row + columnHeadersCount);\n    }\n    hot.selection.transformStart(rowsStep, 0);\n    if (hot.getSelectedRangeLast().highlight.row < 0) {\n      hot.scrollViewportTo({\n        row: 0\n      });\n    }\n  }\n};", "import { command as down } from \"./down.mjs\";\nimport { command as downByViewportHeight } from \"./downByViewportHeight.mjs\";\nimport { command as inlineEnd } from \"./inlineEnd.mjs\";\nimport { command as inlineStart } from \"./inlineStart.mjs\";\nimport { command as left } from \"./left.mjs\";\nimport { command as right } from \"./right.mjs\";\nimport { command as toMostBottom } from \"./toMostBottom.mjs\";\nimport { command as toMostBottomInlineEnd } from \"./toMostBottomInlineEnd.mjs\";\nimport { command as toMostInlineEnd } from \"./toMostInlineEnd.mjs\";\nimport { command as toMostInlineStart } from \"./toMostInlineStart.mjs\";\nimport { command as toMostLeft } from \"./toMostLeft.mjs\";\nimport { command as toMostRight } from \"./toMostRight.mjs\";\nimport { command as toMostTop } from \"./toMostTop.mjs\";\nimport { command as toMostTopInlineStart } from \"./toMostTopInlineStart.mjs\";\nimport { command as up } from \"./up.mjs\";\nimport { command as upByViewportHeight } from \"./upByViewportHeight.mjs\";\n/**\n * Returns complete list of the shortcut commands for the cells moving feature.\n *\n * @returns {Function[]}\n */\nexport function getAllCommands() {\n  return [down, downByViewportHeight, inlineEnd, inlineStart, left, right, toMostBottom, toMostBottomInlineEnd, toMostInlineEnd, toMostInlineStart, toMostLeft, toMostRight, toMostTop, toMostTopInlineStart, up, upByViewportHeight];\n}", "export const command = {\n  name: 'emptySelectedCells',\n  callback(hot) {\n    hot.emptySelectedCells();\n    hot._getEditorManager().prepareEditor();\n  }\n};", "export const command = {\n  name: 'scrollToFocusedCell',\n  callback(hot) {\n    const {\n      highlight\n    } = hot.getSelectedRangeLast();\n    const firstVisibleRow = hot.view.getFirstFullyVisibleRow() - 1;\n    const firstVisibleColumn = hot.view.getFirstFullyVisibleColumn() - 1;\n    const lastVisibleRow = hot.view.getLastFullyVisibleRow() + 1;\n    const lastVisibleColumn = hot.view.getLastFullyVisibleColumn() + 1;\n    const visibleCoordsFrom = hot._createCellCoords(firstVisibleRow, firstVisibleColumn);\n    const visibleCoordsTo = hot._createCellCoords(lastVisibleRow, lastVisibleColumn);\n    const visibleRange = hot._createCellRange(visibleCoordsFrom, visibleCoordsFrom, visibleCoordsTo);\n    if (!visibleRange.includes(highlight) && (highlight.row >= 0 || highlight.col >= 0)) {\n      const scrollCoords = {};\n      if (highlight.col >= 0) {\n        const offsetColumns = Math.floor(hot.countVisibleCols() / 2);\n        scrollCoords.col = Math.max(highlight.col - offsetColumns, 0);\n      }\n      if (highlight.row >= 0) {\n        const offsetRows = Math.floor(hot.countVisibleRows() / 2);\n        scrollCoords.row = Math.max(highlight.row - offsetRows, 0);\n      }\n      hot.scrollViewportTo({\n        ...scrollCoords,\n        verticalSnap: 'top',\n        horizontalSnap: 'start'\n      });\n    }\n  }\n};", "export const command = {\n  name: 'selectAllCells',\n  callback(hot) {\n    hot.selection.selectAll(true, true, {\n      disableHeadersHighlight: true\n    });\n  }\n};", "export const command = {\n  name: 'selectAllCellsAndHeaders',\n  callback(hot) {\n    hot.selection.selectAll(true, true, {\n      disableHeadersHighlight: false\n    });\n  }\n};", "export const command = {\n  name: 'populateSelectedCellsData',\n  callback(hot) {\n    const selectedRange = hot.getSelectedRange();\n    const {\n      row: highlightRow,\n      col: highlightColumn\n    } = selectedRange[selectedRange.length - 1].highlight.normalize();\n    const valueToPopulate = hot.getDataAtCell(highlightRow, highlightColumn);\n    const cellValues = new Map();\n    for (let i = 0; i < selectedRange.length; i++) {\n      selectedRange[i].forAll((row, column) => {\n        if (row >= 0 && column >= 0 && (row !== highlightRow || column !== highlightColumn)) {\n          const {\n            readOnly\n          } = hot.getCellMeta(row, column);\n          if (!readOnly) {\n            cellValues.set(`${row}x${column}`, [row, column, valueToPopulate]);\n          }\n        }\n      });\n    }\n    hot.setDataAtCell(Array.from(cellValues.values()));\n  }\n};", "import { getAllCommands as getAllEditorCommands } from \"./editor/index.mjs\";\nimport { getAllCommands as getAllSelectionExtendCommands } from \"./extendCellsSelection/index.mjs\";\nimport { getAllCommands as getAllSelectionMoveCommands } from \"./moveCellSelection/index.mjs\";\nimport { command as emptySelectedCells } from \"./emptySelectedCells.mjs\";\nimport { command as scrollToFocusedCell } from \"./scrollToFocusedCell.mjs\";\nimport { command as selectAllCells } from \"./selectAllCells.mjs\";\nimport { command as selectAllCellsAndHeaders } from \"./selectAllCellsAndHeaders.mjs\";\nimport { command as populateSelectedCellsData } from \"./populateSelectedCellsData.mjs\";\nconst allCommands = [...getAllEditorCommands(), ...getAllSelectionExtendCommands(), ...getAllSelectionMoveCommands(), emptySelectedCells, scrollToFocusedCell, selectAllCells, selectAllCellsAndHeaders, populateSelectedCellsData];\n\n/**\n * Prepares and creates an object with all available commands to trigger.\n *\n * @param {Handsontable} hot The Handsontable instance.\n * @returns {object}\n */\nexport function createKeyboardShortcutCommandsPool(hot) {\n  const commands = {};\n  allCommands.forEach(_ref => {\n    let {\n      name,\n      callback\n    } = _ref;\n    commands[name] = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return callback(hot, ...args);\n    };\n  });\n  return commands;\n}", "import { EDITOR_EDIT_GROUP } from \"./constants.mjs\";\nimport { createKeyboardShortcutCommandsPool } from \"./commands/index.mjs\";\n/**\n * The context that defines a base shortcut list available for cells editors.\n *\n * @param {Handsontable} hot The Handsontable instance.\n */\nexport function shortcutsEditorContext(hot) {\n  const context = hot.getShortcutManager().addContext('editor');\n  const commandsPool = createKeyboardShortcutCommandsPool(hot);\n  const config = {\n    group: EDITOR_EDIT_GROUP\n  };\n  context.addShortcuts([{\n    keys: [['Enter'], ['Enter', 'Shift']],\n    callback: (event, keys) => commandsPool.editorCloseAndSave(event, keys)\n  }, {\n    keys: [['Enter', 'Control/Meta'], ['Enter', 'Control/Meta', 'Shift']],\n    captureCtrl: true,\n    callback: (event, keys) => commandsPool.editorCloseAndSave(event, keys)\n  }, {\n    keys: [['Escape'], ['Escape', 'Control/Meta']],\n    callback: () => commandsPool.editorCloseWithoutSaving()\n  }], config);\n}", "import { isDefined } from \"../helpers/mixed.mjs\";\nimport { GRID_GROUP, EDITOR_EDIT_GROUP } from \"./constants.mjs\";\nimport { createKeyboardShortcutCommandsPool } from \"./commands/index.mjs\";\n/**\n * The context that defines shortcut list available for selected cell or cells.\n *\n * @param {Handsontable} hot The Handsontable instance.\n */\nexport function shortcutsGridContext(hot) {\n  const context = hot.getShortcutManager().addContext('grid');\n  const commandsPool = createKeyboardShortcutCommandsPool(hot);\n  const config = {\n    runOnlyIf: () => {\n      const {\n        navigableHeaders\n      } = hot.getSettings();\n      return isDefined(hot.getSelected()) && (navigableHeaders || !navigableHeaders && hot.countRenderedRows() > 0 && hot.countRenderedCols() > 0);\n    },\n    group: GRID_GROUP\n  };\n  context.addShortcuts([{\n    keys: [['F2']],\n    callback: event => commandsPool.editorFastOpen(event)\n  }, {\n    keys: [['Enter'], ['Enter', 'Shift']],\n    callback: (event, keys) => commandsPool.editorOpen(event, keys)\n  }, {\n    keys: [['Backspace'], ['Delete']],\n    callback: () => commandsPool.emptySelectedCells()\n  }], {\n    group: EDITOR_EDIT_GROUP,\n    runOnlyIf: () => isDefined(hot.getSelected())\n  });\n  context.addShortcuts([{\n    keys: [['Control/Meta', 'A']],\n    callback: () => commandsPool.selectAllCells()\n  }, {\n    keys: [['Control/Meta', 'Shift', 'Space']],\n    callback: () => commandsPool.selectAllCellsAndHeaders()\n  }, {\n    keys: [['Control/Meta', 'Enter']],\n    callback: () => commandsPool.populateSelectedCellsData(),\n    runOnlyIf: () => {\n      return !hot.getSelectedRangeLast().highlight.isHeader() && hot.getSelectedRangeLast().getCellsCount() > 1;\n    }\n  }, {\n    keys: [['Control', 'Space']],\n    captureCtrl: true,\n    callback: () => commandsPool.extendCellsSelectionToColumns()\n  }, {\n    keys: [['Shift', 'Space']],\n    stopPropagation: true,\n    callback: () => commandsPool.extendCellsSelectionToRows()\n  }, {\n    keys: [['ArrowUp']],\n    callback: () => commandsPool.moveCellSelectionUp()\n  }, {\n    keys: [['ArrowUp', 'Control/Meta']],\n    captureCtrl: true,\n    callback: () => commandsPool.moveCellSelectionToMostTop()\n  }, {\n    keys: [['ArrowUp', 'Shift']],\n    callback: () => commandsPool.extendCellsSelectionUp()\n  }, {\n    keys: [['ArrowUp', 'Shift', 'Control/Meta']],\n    captureCtrl: true,\n    callback: () => commandsPool.extendCellsSelectionToMostTop(),\n    runOnlyIf: () => !(hot.selection.isSelectedByCorner() || hot.selection.isSelectedByColumnHeader())\n  }, {\n    keys: [['ArrowDown']],\n    callback: () => commandsPool.moveCellSelectionDown()\n  }, {\n    keys: [['ArrowDown', 'Control/Meta']],\n    captureCtrl: true,\n    callback: () => commandsPool.moveCellSelectionToMostBottom()\n  }, {\n    keys: [['ArrowDown', 'Shift']],\n    callback: () => commandsPool.extendCellsSelectionDown()\n  }, {\n    keys: [['ArrowDown', 'Shift', 'Control/Meta']],\n    captureCtrl: true,\n    callback: () => commandsPool.extendCellsSelectionToMostBottom(),\n    runOnlyIf: () => !(hot.selection.isSelectedByCorner() || hot.selection.isSelectedByColumnHeader())\n  }, {\n    keys: [['ArrowLeft']],\n    callback: () => commandsPool.moveCellSelectionLeft()\n  }, {\n    keys: [['ArrowLeft', 'Control/Meta']],\n    captureCtrl: true,\n    callback: () => commandsPool.moveCellSelectionToMostLeft()\n  }, {\n    keys: [['ArrowLeft', 'Shift']],\n    callback: () => commandsPool.extendCellsSelectionLeft()\n  }, {\n    keys: [['ArrowLeft', 'Shift', 'Control/Meta']],\n    captureCtrl: true,\n    callback: () => commandsPool.extendCellsSelectionToMostLeft(),\n    runOnlyIf: () => !(hot.selection.isSelectedByCorner() || hot.selection.isSelectedByRowHeader())\n  }, {\n    keys: [['ArrowRight']],\n    callback: () => commandsPool.moveCellSelectionRight()\n  }, {\n    keys: [['ArrowRight', 'Control/Meta']],\n    captureCtrl: true,\n    callback: () => commandsPool.moveCellSelectionToMostRight()\n  }, {\n    keys: [['ArrowRight', 'Shift']],\n    callback: () => commandsPool.extendCellsSelectionRight()\n  }, {\n    keys: [['ArrowRight', 'Shift', 'Control/Meta']],\n    captureCtrl: true,\n    callback: () => commandsPool.extendCellsSelectionToMostRight(),\n    runOnlyIf: () => !(hot.selection.isSelectedByCorner() || hot.selection.isSelectedByRowHeader())\n  }, {\n    keys: [['Home']],\n    captureCtrl: true,\n    callback: () => commandsPool.moveCellSelectionToMostInlineStart(),\n    runOnlyIf: () => hot.view.isMainTableNotFullyCoveredByOverlays()\n  }, {\n    keys: [['Home', 'Shift']],\n    callback: () => commandsPool.extendCellsSelectionToMostInlineStart()\n  }, {\n    keys: [['Home', 'Control/Meta']],\n    captureCtrl: true,\n    callback: () => commandsPool.moveCellSelectionToMostTopInlineStart(),\n    runOnlyIf: () => hot.view.isMainTableNotFullyCoveredByOverlays()\n  }, {\n    keys: [['End']],\n    captureCtrl: true,\n    callback: () => commandsPool.moveCellSelectionToMostInlineEnd(),\n    runOnlyIf: () => hot.view.isMainTableNotFullyCoveredByOverlays()\n  }, {\n    keys: [['End', 'Shift']],\n    callback: () => commandsPool.extendCellsSelectionToMostInlineEnd()\n  }, {\n    keys: [['End', 'Control/Meta']],\n    captureCtrl: true,\n    callback: () => commandsPool.moveCellSelectionToMostBottomInlineEnd(),\n    runOnlyIf: () => hot.view.isMainTableNotFullyCoveredByOverlays()\n  }, {\n    keys: [['PageUp']],\n    callback: () => commandsPool.moveCellSelectionUpByViewportHight()\n  }, {\n    keys: [['PageUp', 'Shift']],\n    callback: () => commandsPool.extendCellsSelectionUpByViewportHeight()\n  }, {\n    keys: [['PageDown']],\n    callback: () => commandsPool.moveCellSelectionDownByViewportHeight()\n  }, {\n    keys: [['PageDown', 'Shift']],\n    callback: () => commandsPool.extendCellsSelectionDownByViewportHeight()\n  }, {\n    keys: [['Tab']],\n    // The property value is controlled by focusCatcher module (https://github.com/handsontable/handsontable/blob/master/handsontable/src/core/focusCatcher/index.js)\n    preventDefault: false,\n    callback: () => commandsPool.moveCellSelectionInlineStart()\n  }, {\n    keys: [['Shift', 'Tab']],\n    // The property value is controlled by focusCatcher module (https://github.com/handsontable/handsontable/blob/master/handsontable/src/core/focusCatcher/index.js)\n    preventDefault: false,\n    callback: () => commandsPool.moveCellSelectionInlineEnd()\n  }, {\n    keys: [['Control/Meta', 'Backspace']],\n    callback: () => commandsPool.scrollToFocusedCell()\n  }], config);\n}", "import { shortcutsEditorContext } from \"./editor.mjs\";\nimport { shortcutsGridContext } from \"./grid.mjs\";\nexport * from \"./constants.mjs\";\n/**\n * Register all shortcut contexts.\n *\n * @param {Handsontable} hotInstance The Handsontable instance.\n */\nexport function registerAllShortcutContexts(hotInstance) {\n  [shortcutsEditorContext, shortcutsGridContext].forEach(context => context(hotInstance));\n}"],
  "mappings": "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",
  "names": ["command", "command", "command", "command", "command", "command", "command", "command", "command", "command", "command", "command", "command", "command", "command", "command", "command", "command", "getAllCommands", "command", "command", "command", "command", "command", "command", "command", "command", "command", "command", "command", "command", "command", "command", "command", "command", "command", "getAllCommands", "command", "command", "command", "command", "command", "command", "getAllCommands", "command"]
}
