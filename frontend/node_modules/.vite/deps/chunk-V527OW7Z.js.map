{
  "version": 3,
  "sources": ["../../handsontable/cellTypes/autocompleteType/autocompleteType.mjs", "../../handsontable/cellTypes/checkboxType/checkboxType.mjs", "../../handsontable/renderers/dateRenderer/dateRenderer.mjs", "../../handsontable/cellTypes/dateType/dateType.mjs", "../../handsontable/cellTypes/dropdownType/dropdownType.mjs", "../../handsontable/renderers/handsontableRenderer/handsontableRenderer.mjs", "../../handsontable/cellTypes/handsontableType/handsontableType.mjs", "../../handsontable/cellTypes/numericType/numericType.mjs", "../../handsontable/cellTypes/passwordType/passwordType.mjs", "../../handsontable/renderers/selectRenderer/selectRenderer.mjs", "../../handsontable/cellTypes/selectType/selectType.mjs", "../../handsontable/cellTypes/timeType/timeType.mjs", "../../handsontable/cellTypes/index.mjs"],
  "sourcesContent": ["import { AutocompleteEditor } from \"../../editors/autocompleteEditor/index.mjs\";\nimport { autocompleteRenderer } from \"../../renderers/autocompleteRenderer/index.mjs\";\nimport { autocompleteValidator } from \"../../validators/autocompleteValidator/index.mjs\";\nexport const CELL_TYPE = 'autocomplete';\nexport const AutocompleteCellType = {\n  CELL_TYPE,\n  editor: AutocompleteEditor,\n  renderer: autocompleteRenderer,\n  validator: autocompleteValidator\n};", "import { CheckboxEditor } from \"../../editors/checkboxEditor/index.mjs\";\nimport { checkboxRenderer } from \"../../renderers/checkboxRenderer/index.mjs\";\nexport const CELL_TYPE = 'checkbox';\nexport const CheckboxCellType = {\n  CELL_TYPE,\n  editor: CheckboxEditor,\n  renderer: checkboxRenderer\n};", "import { autocompleteRenderer } from \"../autocompleteRenderer/index.mjs\";\nexport const RENDERER_TYPE = 'date';\n\n/**\n * Handsontable renderer.\n *\n * @private\n * @param {Core} hotInstance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\nexport function dateRenderer(hotInstance, TD, row, col, prop, value, cellProperties) {\n  autocompleteRenderer.apply(this, [hotInstance, TD, row, col, prop, value, cellProperties]);\n}\ndateRenderer.RENDERER_TYPE = RENDERER_TYPE;", "import { DateEditor } from \"../../editors/dateEditor/index.mjs\";\nimport { dateRenderer } from \"../../renderers/dateRenderer/index.mjs\";\nimport { dateValidator } from \"../../validators/dateValidator/index.mjs\";\nexport const CELL_TYPE = 'date';\nexport const DateCellType = {\n  CELL_TYPE,\n  editor: DateEditor,\n  // displays small gray arrow on right side of the cell\n  renderer: dateRenderer,\n  validator: dateValidator\n};", "import { DropdownEditor } from \"../../editors/dropdownEditor/index.mjs\";\nimport { autocompleteRenderer } from \"../../renderers/autocompleteRenderer/index.mjs\";\nimport { autocompleteValidator } from \"../../validators/autocompleteValidator/index.mjs\";\nexport const CELL_TYPE = 'dropdown';\nexport const DropdownCellType = {\n  CELL_TYPE,\n  editor: DropdownEditor,\n  // displays small gray arrow on right side of the cell\n  renderer: autocompleteRenderer,\n  validator: autocompleteValidator\n};", "import { autocompleteRenderer } from \"../autocompleteRenderer/index.mjs\";\nexport const RENDERER_TYPE = 'handsontable';\n\n/**\n * Handsontable renderer.\n *\n * @private\n * @param {Core} hotInstance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\nexport function handsontableRenderer(hotInstance, TD, row, col, prop, value, cellProperties) {\n  autocompleteRenderer.apply(this, [hotInstance, TD, row, col, prop, value, cellProperties]);\n}\nhandsontableRenderer.RENDERER_TYPE = RENDERER_TYPE;", "import { HandsontableEditor } from \"../../editors/handsontableEditor/index.mjs\";\nimport { handsontableRenderer } from \"../../renderers/handsontableRenderer/index.mjs\";\nexport const CELL_TYPE = 'handsontable';\nexport const HandsontableCellType = {\n  CELL_TYPE,\n  editor: HandsontableEditor,\n  // displays small gray arrow on right side of the cell\n  renderer: handsontableRenderer\n};", "import { NumericEditor } from \"../../editors/numericEditor/index.mjs\";\nimport { numericRenderer } from \"../../renderers/numericRenderer/index.mjs\";\nimport { numericValidator } from \"../../validators/numericValidator/index.mjs\";\nexport const CELL_TYPE = 'numeric';\nexport const NumericCellType = {\n  CELL_TYPE,\n  editor: NumericEditor,\n  renderer: numericRenderer,\n  validator: numericValidator,\n  dataType: 'number'\n};", "import { PasswordEditor } from \"../../editors/passwordEditor/index.mjs\";\nimport { passwordRenderer } from \"../../renderers/passwordRenderer/index.mjs\";\nexport const CELL_TYPE = 'password';\nexport const PasswordCellType = {\n  CELL_TYPE,\n  editor: PasswordEditor,\n  renderer: passwordRenderer,\n  copyable: false\n};", "import { textRenderer } from \"../textRenderer/index.mjs\";\nexport const RENDERER_TYPE = 'select';\n\n/**\n * @private\n * @param {Core} hotInstance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\nexport function selectRenderer(hotInstance, TD, row, col, prop, value, cellProperties) {\n  textRenderer.apply(this, [hotInstance, TD, row, col, prop, value, cellProperties]);\n}\nselectRenderer.RENDERER_TYPE = RENDERER_TYPE;", "import { SelectEditor } from \"../../editors/selectEditor/index.mjs\";\nimport { selectRenderer } from \"../../renderers/selectRenderer/index.mjs\";\nexport const CELL_TYPE = 'select';\nexport const SelectCellType = {\n  CELL_TYPE,\n  editor: SelectEditor,\n  renderer: selectRenderer\n};", "import { TimeEditor } from \"../../editors/timeEditor/index.mjs\";\nimport { timeRenderer } from \"../../renderers/timeRenderer/index.mjs\";\nimport { timeValidator } from \"../../validators/timeValidator/index.mjs\";\nexport const CELL_TYPE = 'time';\nexport const TimeCellType = {\n  CELL_TYPE,\n  editor: TimeEditor,\n  renderer: timeRenderer,\n  validator: timeValidator\n};", "import { AutocompleteCellType, CELL_TYPE as AUTOCOMPLETE_TYPE } from \"./autocompleteType/index.mjs\";\nimport { CheckboxCellType, CELL_TYPE as CHECKBOX_TYPE } from \"./checkboxType/index.mjs\";\nimport { DateCellType, CELL_TYPE as DATE_TYPE } from \"./dateType/index.mjs\";\nimport { DropdownCellType, CELL_TYPE as DROPDOWN_TYPE } from \"./dropdownType/index.mjs\";\nimport { HandsontableCellType, CELL_TYPE as HANDSONTABLE_TYPE } from \"./handsontableType/index.mjs\";\nimport { NumericCellType, CELL_TYPE as NUMERIC_TYPE } from \"./numericType/index.mjs\";\nimport { PasswordCellType, CELL_TYPE as PASSWORD_TYPE } from \"./passwordType/index.mjs\";\nimport { SelectCellType, CELL_TYPE as SELECT_TYPE } from \"./selectType/index.mjs\";\nimport { TextCellType, CELL_TYPE as TEXT_TYPE } from \"./textType/index.mjs\";\nimport { TimeCellType, CELL_TYPE as TIME_TYPE } from \"./timeType/index.mjs\";\nimport { registerCellType } from \"./registry.mjs\";\n/**\n * Registers all available cell types.\n */\nexport function registerAllCellTypes() {\n  registerCellType(AutocompleteCellType);\n  registerCellType(CheckboxCellType);\n  registerCellType(DateCellType);\n  registerCellType(DropdownCellType);\n  registerCellType(HandsontableCellType);\n  registerCellType(NumericCellType);\n  registerCellType(PasswordCellType);\n  registerCellType(SelectCellType);\n  registerCellType(TextCellType);\n  registerCellType(TimeCellType);\n}\nexport { AutocompleteCellType, AUTOCOMPLETE_TYPE, CheckboxCellType, CHECKBOX_TYPE, DateCellType, DATE_TYPE, DropdownCellType, DROPDOWN_TYPE, HandsontableCellType, HANDSONTABLE_TYPE, NumericCellType, NUMERIC_TYPE, PasswordCellType, PASSWORD_TYPE, SelectCellType, SELECT_TYPE, TextCellType, TEXT_TYPE, TimeCellType, TIME_TYPE };\nexport { getCellType, getRegisteredCellTypeNames, getRegisteredCellTypes, hasCellType, registerCellType } from \"./registry.mjs\";"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGO,IAAM,YAAY;AAClB,IAAM,uBAAuB;AAAA,EAClC;AAAA,EACA,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,WAAW;AACb;;;ACPO,IAAMA,aAAY;AAClB,IAAM,mBAAmB;AAAA,EAC9B,WAAAA;AAAA,EACA,QAAQ;AAAA,EACR,UAAU;AACZ;;;ACNO,IAAM,gBAAgB;AActB,SAAS,aAAa,aAAa,IAAI,KAAK,KAAK,MAAM,OAAO,gBAAgB;AACnF,uBAAqB,MAAM,MAAM,CAAC,aAAa,IAAI,KAAK,KAAK,MAAM,OAAO,cAAc,CAAC;AAC3F;AACA,aAAa,gBAAgB;;;ACftB,IAAMC,aAAY;AAClB,IAAM,eAAe;AAAA,EAC1B,WAAAA;AAAA,EACA,QAAQ;AAAA;AAAA,EAER,UAAU;AAAA,EACV,WAAW;AACb;;;ACPO,IAAMC,aAAY;AAClB,IAAM,mBAAmB;AAAA,EAC9B,WAAAA;AAAA,EACA,QAAQ;AAAA;AAAA,EAER,UAAU;AAAA,EACV,WAAW;AACb;;;ACTO,IAAMC,iBAAgB;AActB,SAAS,qBAAqB,aAAa,IAAI,KAAK,KAAK,MAAM,OAAO,gBAAgB;AAC3F,uBAAqB,MAAM,MAAM,CAAC,aAAa,IAAI,KAAK,KAAK,MAAM,OAAO,cAAc,CAAC;AAC3F;AACA,qBAAqB,gBAAgBA;;;AChB9B,IAAMC,aAAY;AAClB,IAAM,uBAAuB;AAAA,EAClC,WAAAA;AAAA,EACA,QAAQ;AAAA;AAAA,EAER,UAAU;AACZ;;;ACLO,IAAMC,aAAY;AAClB,IAAM,kBAAkB;AAAA,EAC7B,WAAAA;AAAA,EACA,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,WAAW;AAAA,EACX,UAAU;AACZ;;;ACRO,IAAMC,aAAY;AAClB,IAAM,mBAAmB;AAAA,EAC9B,WAAAA;AAAA,EACA,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,UAAU;AACZ;;;ACPO,IAAMC,iBAAgB;AAYtB,SAAS,eAAe,aAAa,IAAI,KAAK,KAAK,MAAM,OAAO,gBAAgB;AACrF,eAAa,MAAM,MAAM,CAAC,aAAa,IAAI,KAAK,KAAK,MAAM,OAAO,cAAc,CAAC;AACnF;AACA,eAAe,gBAAgBA;;;ACdxB,IAAMC,aAAY;AAClB,IAAM,iBAAiB;AAAA,EAC5B,WAAAA;AAAA,EACA,QAAQ;AAAA,EACR,UAAU;AACZ;;;ACJO,IAAMC,aAAY;AAClB,IAAM,eAAe;AAAA,EAC1B,WAAAA;AAAA,EACA,QAAQ;AAAA,EACR,UAAU;AAAA,EACV,WAAW;AACb;;;ACKO,SAAS,uBAAuB;AACrC,YAAiB,oBAAoB;AACrC,YAAiB,gBAAgB;AACjC,YAAiB,YAAY;AAC7B,YAAiB,gBAAgB;AACjC,YAAiB,oBAAoB;AACrC,YAAiB,eAAe;AAChC,YAAiB,gBAAgB;AACjC,YAAiB,cAAc;AAC/B,YAAiB,YAAY;AAC7B,YAAiB,YAAY;AAC/B;",
  "names": ["CELL_TYPE", "CELL_TYPE", "CELL_TYPE", "RENDERER_TYPE", "CELL_TYPE", "CELL_TYPE", "CELL_TYPE", "RENDERER_TYPE", "CELL_TYPE", "CELL_TYPE"]
}
