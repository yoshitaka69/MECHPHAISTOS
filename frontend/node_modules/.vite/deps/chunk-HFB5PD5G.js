import {
  CHECKBOX_CHECKED,
  CHECKBOX_UNCHECKED,
  CONTEXTMENU_ITEMS_ADD_COMMENT,
  CONTEXTMENU_ITEMS_ALIGNMENT,
  CONTEXTMENU_ITEMS_ALIGNMENT_BOTTOM,
  CONTEXTMENU_ITEMS_ALIGNMENT_CENTER,
  CONTEXTMENU_ITEMS_ALIGNMENT_JUSTIFY,
  CONTEXTMENU_ITEMS_ALIGNMENT_LEFT,
  CONTEXTMENU_ITEMS_ALIGNMENT_MIDDLE,
  CONTEXTMENU_ITEMS_ALIGNMENT_RIGHT,
  CONTEXTMENU_ITEMS_ALIGNMENT_TOP,
  CONTEXTMENU_ITEMS_BORDERS,
  CONTEXTMENU_ITEMS_BORDERS_BOTTOM,
  CONTEXTMENU_ITEMS_BORDERS_LEFT,
  CONTEXTMENU_ITEMS_BORDERS_RIGHT,
  CONTEXTMENU_ITEMS_BORDERS_TOP,
  CONTEXTMENU_ITEMS_CLEAR_COLUMN,
  CONTEXTMENU_ITEMS_COPY,
  CONTEXTMENU_ITEMS_COPY_COLUMN_HEADERS_ONLY,
  CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_GROUP_HEADERS,
  CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_HEADERS,
  CONTEXTMENU_ITEMS_CUT,
  CONTEXTMENU_ITEMS_EDIT_COMMENT,
  CONTEXTMENU_ITEMS_FREEZE_COLUMN,
  CONTEXTMENU_ITEMS_HIDE_COLUMN,
  CONTEXTMENU_ITEMS_HIDE_ROW,
  CONTEXTMENU_ITEMS_INSERT_LEFT,
  CONTEXTMENU_ITEMS_INSERT_RIGHT,
  CONTEXTMENU_ITEMS_MERGE_CELLS,
  CONTEXTMENU_ITEMS_NESTED_ROWS_DETACH_CHILD,
  CONTEXTMENU_ITEMS_NESTED_ROWS_INSERT_CHILD,
  CONTEXTMENU_ITEMS_NO_ITEMS,
  CONTEXTMENU_ITEMS_READ_ONLY,
  CONTEXTMENU_ITEMS_READ_ONLY_COMMENT,
  CONTEXTMENU_ITEMS_REDO,
  CONTEXTMENU_ITEMS_REMOVE_BORDERS,
  CONTEXTMENU_ITEMS_REMOVE_COLUMN,
  CONTEXTMENU_ITEMS_REMOVE_COMMENT,
  CONTEXTMENU_ITEMS_REMOVE_ROW,
  CONTEXTMENU_ITEMS_ROW_ABOVE,
  CONTEXTMENU_ITEMS_ROW_BELOW,
  CONTEXTMENU_ITEMS_SHOW_COLUMN,
  CONTEXTMENU_ITEMS_SHOW_ROW,
  CONTEXTMENU_ITEMS_UNDO,
  CONTEXTMENU_ITEMS_UNFREEZE_COLUMN,
  CONTEXTMENU_ITEMS_UNMERGE_CELLS,
  FILTERS_BUTTONS_CANCEL,
  FILTERS_BUTTONS_CLEAR,
  FILTERS_BUTTONS_OK,
  FILTERS_BUTTONS_PLACEHOLDER_SEARCH,
  FILTERS_BUTTONS_PLACEHOLDER_SECOND_VALUE,
  FILTERS_BUTTONS_PLACEHOLDER_VALUE,
  FILTERS_BUTTONS_SELECT_ALL,
  FILTERS_CONDITIONS_AFTER,
  FILTERS_CONDITIONS_BEFORE,
  FILTERS_CONDITIONS_BEGINS_WITH,
  FILTERS_CONDITIONS_BETWEEN,
  FILTERS_CONDITIONS_CONTAINS,
  FILTERS_CONDITIONS_EMPTY,
  FILTERS_CONDITIONS_ENDS_WITH,
  FILTERS_CONDITIONS_EQUAL,
  FILTERS_CONDITIONS_GREATER_THAN,
  FILTERS_CONDITIONS_GREATER_THAN_OR_EQUAL,
  FILTERS_CONDITIONS_LESS_THAN,
  FILTERS_CONDITIONS_LESS_THAN_OR_EQUAL,
  FILTERS_CONDITIONS_NONE,
  FILTERS_CONDITIONS_NOT_BETWEEN,
  FILTERS_CONDITIONS_NOT_CONTAIN,
  FILTERS_CONDITIONS_NOT_EMPTY,
  FILTERS_CONDITIONS_NOT_EQUAL,
  FILTERS_CONDITIONS_TODAY,
  FILTERS_CONDITIONS_TOMORROW,
  FILTERS_CONDITIONS_YESTERDAY,
  FILTERS_DIVS_FILTER_BY_CONDITION,
  FILTERS_DIVS_FILTER_BY_VALUE,
  FILTERS_LABELS_CONJUNCTION,
  FILTERS_LABELS_DISJUNCTION,
  FILTERS_VALUES_BLANK_CELLS,
  constants_exports
} from "./chunk-WNOSTPTO.js";
import {
  arrayEach,
  deepClone,
  error,
  isDefined,
  isObject,
  isUndefined,
  objectEach,
  staticRegister,
  toSingleLine
} from "./chunk-DSUKSR6K.js";

// node_modules/handsontable/i18n/languages/en-US.mjs
var dictionary = {
  languageCode: "en-US",
  [CONTEXTMENU_ITEMS_NO_ITEMS]: "No available options",
  [CONTEXTMENU_ITEMS_ROW_ABOVE]: "Insert row above",
  [CONTEXTMENU_ITEMS_ROW_BELOW]: "Insert row below",
  [CONTEXTMENU_ITEMS_INSERT_LEFT]: "Insert column left",
  [CONTEXTMENU_ITEMS_INSERT_RIGHT]: "Insert column right",
  [CONTEXTMENU_ITEMS_REMOVE_ROW]: ["Remove row", "Remove rows"],
  [CONTEXTMENU_ITEMS_REMOVE_COLUMN]: ["Remove column", "Remove columns"],
  [CONTEXTMENU_ITEMS_UNDO]: "Undo",
  [CONTEXTMENU_ITEMS_REDO]: "Redo",
  [CONTEXTMENU_ITEMS_READ_ONLY]: "Read only",
  [CONTEXTMENU_ITEMS_CLEAR_COLUMN]: "Clear column",
  [CONTEXTMENU_ITEMS_ALIGNMENT]: "Alignment",
  [CONTEXTMENU_ITEMS_ALIGNMENT_LEFT]: "Left",
  [CONTEXTMENU_ITEMS_ALIGNMENT_CENTER]: "Center",
  [CONTEXTMENU_ITEMS_ALIGNMENT_RIGHT]: "Right",
  [CONTEXTMENU_ITEMS_ALIGNMENT_JUSTIFY]: "Justify",
  [CONTEXTMENU_ITEMS_ALIGNMENT_TOP]: "Top",
  [CONTEXTMENU_ITEMS_ALIGNMENT_MIDDLE]: "Middle",
  [CONTEXTMENU_ITEMS_ALIGNMENT_BOTTOM]: "Bottom",
  [CONTEXTMENU_ITEMS_FREEZE_COLUMN]: "Freeze column",
  [CONTEXTMENU_ITEMS_UNFREEZE_COLUMN]: "Unfreeze column",
  [CONTEXTMENU_ITEMS_BORDERS]: "Borders",
  [CONTEXTMENU_ITEMS_BORDERS_TOP]: "Top",
  [CONTEXTMENU_ITEMS_BORDERS_RIGHT]: "Right",
  [CONTEXTMENU_ITEMS_BORDERS_BOTTOM]: "Bottom",
  [CONTEXTMENU_ITEMS_BORDERS_LEFT]: "Left",
  [CONTEXTMENU_ITEMS_REMOVE_BORDERS]: "Remove border(s)",
  [CONTEXTMENU_ITEMS_ADD_COMMENT]: "Add comment",
  [CONTEXTMENU_ITEMS_EDIT_COMMENT]: "Edit comment",
  [CONTEXTMENU_ITEMS_REMOVE_COMMENT]: "Delete comment",
  [CONTEXTMENU_ITEMS_READ_ONLY_COMMENT]: "Read-only comment",
  [CONTEXTMENU_ITEMS_MERGE_CELLS]: "Merge cells",
  [CONTEXTMENU_ITEMS_UNMERGE_CELLS]: "Unmerge cells",
  [CONTEXTMENU_ITEMS_COPY]: "Copy",
  [CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_HEADERS]: ["Copy with header", "Copy with headers"],
  [CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_GROUP_HEADERS]: ["Copy with group header", "Copy with group headers"],
  [CONTEXTMENU_ITEMS_COPY_COLUMN_HEADERS_ONLY]: ["Copy header only", "Copy headers only"],
  [CONTEXTMENU_ITEMS_CUT]: "Cut",
  [CONTEXTMENU_ITEMS_NESTED_ROWS_INSERT_CHILD]: "Insert child row",
  [CONTEXTMENU_ITEMS_NESTED_ROWS_DETACH_CHILD]: "Detach from parent",
  [CONTEXTMENU_ITEMS_HIDE_COLUMN]: ["Hide column", "Hide columns"],
  [CONTEXTMENU_ITEMS_SHOW_COLUMN]: ["Show column", "Show columns"],
  [CONTEXTMENU_ITEMS_HIDE_ROW]: ["Hide row", "Hide rows"],
  [CONTEXTMENU_ITEMS_SHOW_ROW]: ["Show row", "Show rows"],
  [FILTERS_CONDITIONS_NONE]: "None",
  [FILTERS_CONDITIONS_EMPTY]: "Is empty",
  [FILTERS_CONDITIONS_NOT_EMPTY]: "Is not empty",
  [FILTERS_CONDITIONS_EQUAL]: "Is equal to",
  [FILTERS_CONDITIONS_NOT_EQUAL]: "Is not equal to",
  [FILTERS_CONDITIONS_BEGINS_WITH]: "Begins with",
  [FILTERS_CONDITIONS_ENDS_WITH]: "Ends with",
  [FILTERS_CONDITIONS_CONTAINS]: "Contains",
  [FILTERS_CONDITIONS_NOT_CONTAIN]: "Does not contain",
  [FILTERS_CONDITIONS_GREATER_THAN]: "Greater than",
  [FILTERS_CONDITIONS_GREATER_THAN_OR_EQUAL]: "Greater than or equal to",
  [FILTERS_CONDITIONS_LESS_THAN]: "Less than",
  [FILTERS_CONDITIONS_LESS_THAN_OR_EQUAL]: "Less than or equal to",
  [FILTERS_CONDITIONS_BETWEEN]: "Is between",
  [FILTERS_CONDITIONS_NOT_BETWEEN]: "Is not between",
  [FILTERS_CONDITIONS_AFTER]: "After",
  [FILTERS_CONDITIONS_BEFORE]: "Before",
  [FILTERS_CONDITIONS_TODAY]: "Today",
  [FILTERS_CONDITIONS_TOMORROW]: "Tomorrow",
  [FILTERS_CONDITIONS_YESTERDAY]: "Yesterday",
  [FILTERS_VALUES_BLANK_CELLS]: "Blank cells",
  [FILTERS_DIVS_FILTER_BY_CONDITION]: "Filter by condition",
  [FILTERS_DIVS_FILTER_BY_VALUE]: "Filter by value",
  [FILTERS_LABELS_CONJUNCTION]: "And",
  [FILTERS_LABELS_DISJUNCTION]: "Or",
  [FILTERS_BUTTONS_SELECT_ALL]: "Select all",
  [FILTERS_BUTTONS_CLEAR]: "Clear",
  [FILTERS_BUTTONS_OK]: "OK",
  [FILTERS_BUTTONS_CANCEL]: "Cancel",
  [FILTERS_BUTTONS_PLACEHOLDER_SEARCH]: "Search",
  [FILTERS_BUTTONS_PLACEHOLDER_VALUE]: "Value",
  [FILTERS_BUTTONS_PLACEHOLDER_SECOND_VALUE]: "Second value",
  [CHECKBOX_CHECKED]: "Checked",
  [CHECKBOX_UNCHECKED]: "Unchecked"
};
var en_US_default = dictionary;

// node_modules/handsontable/i18n/utils.mjs
function extendNotExistingKeys(target, extension) {
  objectEach(extension, (value, key) => {
    if (isUndefined(target[key])) {
      target[key] = value;
    }
  });
  return target;
}
function normalizeLanguageCode(languageCode) {
  const languageCodePattern = /^([a-zA-Z]{2})-([a-zA-Z]{2})$/;
  const partsOfLanguageCode = languageCodePattern.exec(languageCode);
  if (partsOfLanguageCode) {
    return `${partsOfLanguageCode[1].toLowerCase()}-${partsOfLanguageCode[2].toUpperCase()}`;
  }
  return languageCode;
}
function warnUserAboutLanguageRegistration(languageCode) {
  if (isDefined(languageCode)) {
    error(toSingleLine`Language with code "${languageCode}" was not found. You should register particular language\x20
    before using it. Read more about this issue at: https://docs.handsontable.com/i18n/missing-language-code.`);
  }
}

// node_modules/handsontable/i18n/phraseFormatters/pluralize.mjs
function pluralize(phrasePropositions, pluralForm) {
  const isPluralizable = Array.isArray(phrasePropositions) && Number.isInteger(pluralForm);
  if (isPluralizable) {
    return phrasePropositions[pluralForm];
  }
  return phrasePropositions;
}

// node_modules/handsontable/i18n/phraseFormatters/index.mjs
var {
  register: registerGloballyPhraseFormatter,
  getValues: getGlobalPhraseFormatters
} = staticRegister("phraseFormatters");
function register(name, formatterFn) {
  registerGloballyPhraseFormatter(name, formatterFn);
}
function getAll() {
  return getGlobalPhraseFormatters();
}
register("pluralize", pluralize);

// node_modules/handsontable/i18n/registry.mjs
var dictionaryKeys = constants_exports;
var DEFAULT_LANGUAGE_CODE = en_US_default.languageCode;
var {
  register: registerGloballyLanguageDictionary,
  getItem: getGlobalLanguageDictionary,
  hasItem: hasGlobalLanguageDictionary,
  getValues: getGlobalLanguagesDictionaries
} = staticRegister("languagesDictionaries");
registerLanguageDictionary(en_US_default);
function registerLanguageDictionary(languageCodeOrDictionary, dictionary2) {
  let languageCode = languageCodeOrDictionary;
  let dictionaryObject = dictionary2;
  if (isObject(languageCodeOrDictionary)) {
    dictionaryObject = languageCodeOrDictionary;
    languageCode = dictionaryObject.languageCode;
  }
  extendLanguageDictionary(languageCode, dictionaryObject);
  registerGloballyLanguageDictionary(languageCode, deepClone(dictionaryObject));
  return deepClone(dictionaryObject);
}
function extendLanguageDictionary(languageCode, dictionary2) {
  if (languageCode !== DEFAULT_LANGUAGE_CODE) {
    extendNotExistingKeys(dictionary2, getGlobalLanguageDictionary(DEFAULT_LANGUAGE_CODE));
  }
}
function getLanguageDictionary(languageCode) {
  if (!hasLanguageDictionary(languageCode)) {
    return null;
  }
  return deepClone(getGlobalLanguageDictionary(languageCode));
}
function hasLanguageDictionary(languageCode) {
  return hasGlobalLanguageDictionary(languageCode);
}
function getDefaultLanguageDictionary() {
  return en_US_default;
}
function getLanguagesDictionaries() {
  return getGlobalLanguagesDictionaries();
}
function getTranslatedPhrase(languageCode, dictionaryKey, argumentsForFormatters) {
  const languageDictionary = getLanguageDictionary(languageCode);
  if (languageDictionary === null) {
    return null;
  }
  const phrasePropositions = languageDictionary[dictionaryKey];
  if (isUndefined(phrasePropositions)) {
    return null;
  }
  const formattedPhrase = getFormattedPhrase(phrasePropositions, argumentsForFormatters);
  if (Array.isArray(formattedPhrase)) {
    return formattedPhrase[0];
  }
  return formattedPhrase;
}
function getFormattedPhrase(phrasePropositions, argumentsForFormatters) {
  let formattedPhrasePropositions = phrasePropositions;
  arrayEach(getAll(), (formatter) => {
    formattedPhrasePropositions = formatter(phrasePropositions, argumentsForFormatters);
  });
  return formattedPhrasePropositions;
}
function getValidLanguageCode(languageCode) {
  let normalizedLanguageCode = normalizeLanguageCode(languageCode);
  if (!hasLanguageDictionary(normalizedLanguageCode)) {
    normalizedLanguageCode = DEFAULT_LANGUAGE_CODE;
    warnUserAboutLanguageRegistration(languageCode);
  }
  return normalizedLanguageCode;
}

export {
  normalizeLanguageCode,
  warnUserAboutLanguageRegistration,
  en_US_default,
  dictionaryKeys,
  DEFAULT_LANGUAGE_CODE,
  registerLanguageDictionary,
  getLanguageDictionary,
  hasLanguageDictionary,
  getDefaultLanguageDictionary,
  getLanguagesDictionaries,
  getTranslatedPhrase,
  getValidLanguageCode
};
/*! Bundled license information:

handsontable/i18n/languages/en-US.mjs:
  (**
   * @preserve
   * Authors: Handsoncode
   * Last updated: Nov 15, 2017
   *
   * Description: Definition file for English - United States language-country.
   *)
*/
//# sourceMappingURL=chunk-HFB5PD5G.js.map
